# Generated from /home/meanmail/MyProjects/antlr/cpp/grammars/CPP14.g4 by ANTLR 4.7
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *
from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0090")
        buf.write("\u0978\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\3\2\5\2\u0176\n\2\3\2")
        buf.write("\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u0183\n\3")
        buf.write("\3\3\3\3\5\3\u0187\n\3\3\3\5\3\u018a\n\3\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\5\4\u0192\n\4\3\5\3\5\5\5\u0196\n\5\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u01a1\n\6\3\7\3\7\5\7")
        buf.write("\u01a5\n\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\5\b\u01b4\n\b\3\b\3\b\3\b\3\b\3\b\5\b\u01bb\n")
        buf.write("\b\3\b\3\b\3\b\7\b\u01c0\n\b\f\b\16\b\u01c3\13\b\3\t\3")
        buf.write("\t\3\n\3\n\3\n\5\n\u01ca\n\n\3\n\3\n\3\n\3\n\5\n\u01d0")
        buf.write("\n\n\7\n\u01d2\n\n\f\n\16\n\u01d5\13\n\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u01e0\n\13\3\f\3\f")
        buf.write("\3\f\3\f\5\f\u01e6\n\f\3\f\5\f\u01e9\n\f\3\f\5\f\u01ec")
        buf.write("\n\f\3\f\5\f\u01ef\n\f\3\r\3\r\3\r\3\r\3\r\5\r\u01f6\n")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\5\r\u01fd\n\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\5\r\u0231\n\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0240\n\r\3\r\3\r")
        buf.write("\3\r\3\r\5\r\u0246\n\r\3\r\3\r\3\r\3\r\5\r\u024c\n\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\7\r\u0259\n")
        buf.write("\r\f\r\16\r\u025c\13\r\3\16\3\16\3\17\5\17\u0261\n\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\5\17\u0270\n\17\3\17\3\17\3\17\3\17\5\17\u0276")
        buf.write("\n\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u0295\n")
        buf.write("\20\3\21\3\21\3\21\3\21\5\21\u029b\n\21\3\22\3\22\3\23")
        buf.write("\5\23\u02a0\n\23\3\23\3\23\5\23\u02a4\n\23\3\23\3\23\5")
        buf.write("\23\u02a8\n\23\3\23\5\23\u02ab\n\23\3\23\5\23\u02ae\n")
        buf.write("\23\3\23\3\23\5\23\u02b2\n\23\3\23\3\23\3\23\3\23\5\23")
        buf.write("\u02b8\n\23\5\23\u02ba\n\23\3\24\3\24\3\24\3\24\3\25\3")
        buf.write("\25\5\25\u02c2\n\25\3\25\5\25\u02c5\n\25\3\26\3\26\3\26")
        buf.write("\3\26\3\26\5\26\u02cc\n\26\3\26\3\26\3\26\3\26\3\26\5")
        buf.write("\26\u02d3\n\26\7\26\u02d5\n\26\f\26\16\26\u02d8\13\26")
        buf.write("\3\27\3\27\5\27\u02dc\n\27\3\27\3\27\5\27\u02e0\n\27\3")
        buf.write("\30\5\30\u02e3\n\30\3\30\3\30\3\30\5\30\u02e8\n\30\3\30")
        buf.write("\3\30\3\30\3\30\5\30\u02ee\n\30\3\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\5\31\u02f6\n\31\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\7\32\u0301\n\32\f\32\16\32\u0304\13\32")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\7\33\u0312\n\33\f\33\16\33\u0315\13\33\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\7\34\u0320\n\34\f")
        buf.write("\34\16\34\u0323\13\34\3\35\3\35\3\35\3\35\3\35\3\35\3")
        buf.write("\35\3\35\3\35\3\35\7\35\u032f\n\35\f\35\16\35\u0332\13")
        buf.write("\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\7\36\u0343\n\36\f\36\16\36\u0346")
        buf.write("\13\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\7")
        buf.write("\37\u0351\n\37\f\37\16\37\u0354\13\37\3 \3 \3 \3 \3 \3")
        buf.write(" \7 \u035c\n \f \16 \u035f\13 \3!\3!\3!\3!\3!\3!\7!\u0367")
        buf.write("\n!\f!\16!\u036a\13!\3\"\3\"\3\"\3\"\3\"\3\"\7\"\u0372")
        buf.write("\n\"\f\"\16\"\u0375\13\"\3#\3#\3#\3#\3#\3#\7#\u037d\n")
        buf.write("#\f#\16#\u0380\13#\3$\3$\3$\3$\3$\3$\7$\u0388\n$\f$\16")
        buf.write("$\u038b\13$\3%\3%\3%\5%\u0390\n%\3&\3&\3&\3&\3&\3&\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\5(\u03a3\n(\3)\3)\3")
        buf.write(")\3)\3)\3)\3)\3)\3)\3)\3)\5)\u03b0\n)\3*\3*\3*\3*\3*\3")
        buf.write("*\7*\u03b8\n*\f*\16*\u03bb\13*\3+\3+\3,\5,\u03c0\n,\3")
        buf.write(",\3,\3,\3,\5,\u03c6\n,\3,\3,\5,\u03ca\n,\3,\3,\5,\u03ce")
        buf.write("\n,\3,\3,\5,\u03d2\n,\3,\3,\5,\u03d6\n,\3,\3,\5,\u03da")
        buf.write("\n,\3,\3,\5,\u03de\n,\3,\3,\3,\5,\u03e3\n,\3,\5,\u03e6")
        buf.write("\n,\3-\3-\3-\3-\3-\3.\3.\3.\3.\3/\5/\u03f2\n/\3/\3/\3")
        buf.write("\60\3\60\5\60\u03f8\n\60\3\60\3\60\3\61\3\61\3\61\3\61")
        buf.write("\3\61\7\61\u0401\n\61\f\61\16\61\u0404\13\61\3\62\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u0419\n\62\3\63\3")
        buf.write("\63\3\63\3\64\3\64\5\64\u0420\n\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\5\64\u0428\n\64\3\64\3\64\3\64\3\64\5\64\u042e")
        buf.write("\n\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65")
        buf.write("\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u0442\n")
        buf.write("\65\3\65\3\65\5\65\u0446\n\65\3\65\3\65\3\65\3\65\3\65")
        buf.write("\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u0453\n\65\3\66\3")
        buf.write("\66\5\66\u0457\n\66\3\67\5\67\u045a\n\67\3\67\3\67\3\67")
        buf.write("\38\38\58\u0461\n8\39\39\39\39\39\39\59\u0469\n9\39\3")
        buf.write("9\39\39\39\39\59\u0471\n9\3:\3:\3:\3:\3;\3;\3;\3;\3;\7")
        buf.write(";\u047c\n;\f;\16;\u047f\13;\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\5<\u048c\n<\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3")
        buf.write("=\3=\3=\5=\u049c\n=\3=\3=\5=\u04a0\n=\3=\3=\5=\u04a4\n")
        buf.write("=\3>\3>\3>\5>\u04a9\n>\3>\3>\3>\3>\3?\5?\u04b0\n?\3?\5")
        buf.write("?\u04b3\n?\3?\3?\3?\5?\u04b8\n?\3?\3?\3?\5?\u04bd\n?\3")
        buf.write("@\3@\3@\3@\3@\3@\3@\3@\3A\3A\3B\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\5B\u04d5\nB\3C\3C\5C\u04d9\nC\3C\3C\3C\5C\u04de")
        buf.write("\nC\3D\3D\3D\3D\3D\5D\u04e5\nD\3D\3D\3D\3D\3D\3D\3D\3")
        buf.write("D\5D\u04ef\nD\3E\3E\3E\5E\u04f4\nE\3E\5E\u04f7\nE\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\5E\u0501\nE\3E\3E\3E\3E\5E\u0507\n")
        buf.write("E\3E\3E\3E\5E\u050c\nE\3F\3F\5F\u0510\nF\3F\3F\3F\5F\u0515")
        buf.write("\nF\3G\3G\5G\u0519\nG\3G\3G\3G\5G\u051e\nG\3H\5H\u0521")
        buf.write("\nH\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3")
        buf.write("H\3H\3H\3H\5H\u0537\nH\3I\3I\3I\5I\u053c\nI\3J\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\3J\5J\u0547\nJ\3K\3K\5K\u054b\nK\3K\5K\u054e")
        buf.write("\nK\3K\5K\u0551\nK\3K\3K\5K\u0555\nK\3K\3K\3K\5K\u055a")
        buf.write("\nK\5K\u055c\nK\3L\3L\3L\3L\3L\5L\u0563\nL\3M\3M\3M\3")
        buf.write("N\3N\3N\3N\3N\3N\7N\u056e\nN\fN\16N\u0571\13N\3O\3O\3")
        buf.write("O\3O\3O\5O\u0578\nO\3P\3P\3Q\3Q\5Q\u057e\nQ\3R\3R\3S\3")
        buf.write("S\5S\u0584\nS\3S\3S\3S\3S\3S\5S\u058b\nS\3T\5T\u058e\n")
        buf.write("T\3T\3T\3T\3T\3T\3T\3T\5T\u0597\nT\3T\3T\3T\3T\3T\3T\5")
        buf.write("T\u059f\nT\3U\5U\u05a2\nU\3V\3V\3W\5W\u05a7\nW\3W\3W\3")
        buf.write("X\3X\5X\u05ad\nX\3X\3X\3X\3X\3X\3X\3X\3X\3X\5X\u05b8\n")
        buf.write("X\3Y\5Y\u05bb\nY\3Y\3Y\3Y\5Y\u05c0\nY\3Y\3Y\3Y\3Z\3Z\3")
        buf.write("Z\3Z\3Z\3Z\3[\3[\3[\3[\5[\u05cf\n[\3[\3[\3[\3[\5[\u05d5")
        buf.write("\n[\3\\\3\\\3\\\3\\\3\\\7\\\u05dc\n\\\f\\\16\\\u05df\13")
        buf.write("\\\3]\3]\3]\3]\3]\3]\3]\5]\u05e8\n]\3^\3^\3^\3^\5^\u05ee")
        buf.write("\n^\3^\3^\3^\3^\3^\3^\5^\u05f6\n^\3^\3^\5^\u05fa\n^\3")
        buf.write("_\3_\5_\u05fe\n_\3_\3_\3_\5_\u0603\n_\3_\3_\3_\5_\u0608")
        buf.write("\n_\3_\3_\3_\3_\3_\7_\u060f\n_\f_\16_\u0612\13_\3`\3`")
        buf.write("\5`\u0616\n`\3a\3a\5a\u061a\na\3b\3b\3b\3b\3c\3c\3d\3")
        buf.write("d\3d\3d\3e\3e\5e\u0628\ne\3e\3e\7e\u062c\ne\fe\16e\u062f")
        buf.write("\13e\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\5f\u063d\nf\3")
        buf.write("g\3g\3g\3g\3g\3g\7g\u0645\ng\fg\16g\u0648\13g\3h\3h\5")
        buf.write("h\u064c\nh\3i\3i\3i\3i\3i\5i\u0653\ni\3j\3j\3j\3j\5j\u0659")
        buf.write("\nj\3k\3k\3k\5k\u065e\nk\3k\3k\3k\3k\5k\u0664\nk\3k\3")
        buf.write("k\3k\3k\3k\5k\u066b\nk\3k\3k\5k\u066f\nk\7k\u0671\nk\f")
        buf.write("k\16k\u0674\13k\3l\3l\3l\3l\5l\u067a\nl\3l\5l\u067d\n")
        buf.write("l\3l\5l\u0680\nl\3l\5l\u0683\nl\3m\3m\3m\5m\u0688\nm\3")
        buf.write("n\3n\5n\u068c\nn\3n\5n\u068f\nn\3n\3n\5n\u0693\nn\3n\3")
        buf.write("n\5n\u0697\nn\3n\3n\3n\5n\u069c\nn\3n\5n\u069f\nn\5n\u06a1")
        buf.write("\nn\3o\3o\5o\u06a5\no\3p\3p\3q\3q\3r\5r\u06ac\nr\3r\3")
        buf.write("r\3s\3s\5s\u06b2\ns\3t\3t\5t\u06b6\nt\3t\3t\3t\3t\5t\u06bc")
        buf.write("\nt\3u\3u\3u\5u\u06c1\nu\5u\u06c3\nu\3v\3v\3v\3v\5v\u06c9")
        buf.write("\nv\3v\3v\5v\u06cd\nv\3v\3v\3v\3v\5v\u06d3\nv\3v\3v\3")
        buf.write("v\3v\3v\5v\u06da\nv\3v\3v\5v\u06de\nv\7v\u06e0\nv\fv\16")
        buf.write("v\u06e3\13v\3w\3w\3w\3w\5w\u06e9\nw\3x\3x\3x\3x\3x\3x")
        buf.write("\3x\3x\5x\u06f3\nx\3x\3x\5x\u06f7\nx\7x\u06f9\nx\fx\16")
        buf.write("x\u06fc\13x\3y\5y\u06ff\ny\3y\5y\u0702\ny\3y\3y\3y\3y")
        buf.write("\5y\u0708\ny\3z\3z\3z\3z\3z\3z\7z\u0710\nz\fz\16z\u0713")
        buf.write("\13z\3{\5{\u0716\n{\3{\3{\3{\3{\5{\u071c\n{\3{\3{\3{\3")
        buf.write("{\3{\3{\5{\u0724\n{\3{\3{\5{\u0728\n{\3{\5{\u072b\n{\3")
        buf.write("{\3{\5{\u072f\n{\3{\3{\3{\5{\u0734\n{\3|\5|\u0737\n|\3")
        buf.write("|\5|\u073a\n|\3|\3|\5|\u073e\n|\3|\3|\3}\5}\u0743\n}\3")
        buf.write("}\3}\3}\3}\3}\3}\3}\3}\5}\u074d\n}\3~\3~\3~\3~\3~\5~\u0754")
        buf.write("\n~\3\177\3\177\3\177\5\177\u0759\n\177\3\u0080\3\u0080")
        buf.write("\5\u0080\u075d\n\u0080\3\u0081\3\u0081\3\u0081\5\u0081")
        buf.write("\u0762\n\u0081\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081")
        buf.write("\u0768\n\u0081\7\u0081\u076a\n\u0081\f\u0081\16\u0081")
        buf.write("\u076d\13\u0081\3\u0082\3\u0082\3\u0082\5\u0082\u0772")
        buf.write("\n\u0082\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u0778")
        buf.write("\n\u0082\3\u0083\3\u0083\5\u0083\u077c\n\u0083\3\u0084")
        buf.write("\3\u0084\3\u0084\5\u0084\u0781\n\u0084\3\u0084\3\u0084")
        buf.write("\3\u0085\3\u0085\5\u0085\u0787\n\u0085\3\u0085\3\u0085")
        buf.write("\5\u0085\u078b\n\u0085\3\u0085\5\u0085\u078e\n\u0085\3")
        buf.write("\u0085\3\u0085\5\u0085\u0792\n\u0085\3\u0085\5\u0085\u0795")
        buf.write("\n\u0085\5\u0085\u0797\n\u0085\3\u0086\5\u0086\u079a\n")
        buf.write("\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3\u0088\3\u0088")
        buf.write("\3\u0089\3\u0089\5\u0089\u07a4\n\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\5\u0089\u07a9\n\u0089\5\u0089\u07ab\n\u0089\3")
        buf.write("\u008a\5\u008a\u07ae\n\u008a\3\u008a\5\u008a\u07b1\n\u008a")
        buf.write("\3\u008a\5\u008a\u07b4\n\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u07bd\n\u008a")
        buf.write("\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\7\u008b")
        buf.write("\u07c5\n\u008b\f\u008b\16\u008b\u07c8\13\u008b\3\u008c")
        buf.write("\3\u008c\5\u008c\u07cc\n\u008c\3\u008c\5\u008c\u07cf\n")
        buf.write("\u008c\3\u008c\3\u008c\5\u008c\u07d3\n\u008c\3\u008c\5")
        buf.write("\u008c\u07d6\n\u008c\3\u008c\5\u008c\u07d9\n\u008c\3\u008c")
        buf.write("\3\u008c\5\u008c\u07dd\n\u008c\3\u008d\3\u008d\3\u008d")
        buf.write("\3\u008d\3\u008d\7\u008d\u07e4\n\u008d\f\u008d\16\u008d")
        buf.write("\u07e7\13\u008d\3\u008e\3\u008e\3\u008f\3\u008f\3\u008f")
        buf.write("\3\u008f\3\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091")
        buf.write("\5\u0091\u07f5\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\5\u0091\u07fb\n\u0091\7\u0091\u07fd\n\u0091\f\u0091\16")
        buf.write("\u0091\u0800\13\u0091\3\u0092\5\u0092\u0803\n\u0092\3")
        buf.write("\u0092\3\u0092\5\u0092\u0807\n\u0092\3\u0092\3\u0092\5")
        buf.write("\u0092\u080b\n\u0092\3\u0092\3\u0092\5\u0092\u080f\n\u0092")
        buf.write("\3\u0092\3\u0092\5\u0092\u0813\n\u0092\3\u0092\3\u0092")
        buf.write("\5\u0092\u0817\n\u0092\3\u0093\5\u0093\u081a\n\u0093\3")
        buf.write("\u0093\3\u0093\5\u0093\u081e\n\u0093\3\u0094\3\u0094\3")
        buf.write("\u0095\3\u0095\3\u0096\3\u0096\3\u0096\3\u0097\3\u0097")
        buf.write("\5\u0097\u0829\n\u0097\3\u0098\3\u0098\5\u0098\u082d\n")
        buf.write("\u0098\3\u0099\3\u0099\3\u0099\3\u009a\3\u009a\5\u009a")
        buf.write("\u0834\n\u009a\3\u009a\3\u009a\5\u009a\u0838\n\u009a\3")
        buf.write("\u009a\3\u009a\3\u009a\5\u009a\u083d\n\u009a\3\u009b\3")
        buf.write("\u009b\3\u009b\5\u009b\u0842\n\u009b\3\u009b\3\u009b\3")
        buf.write("\u009b\3\u009b\3\u009b\5\u009b\u0849\n\u009b\3\u009c\3")
        buf.write("\u009c\5\u009c\u084d\n\u009c\3\u009d\3\u009d\3\u009d\3")
        buf.write("\u009e\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0857\n")
        buf.write("\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\7\u00a0")
        buf.write("\u0865\n\u00a0\f\u00a0\16\u00a0\u0868\13\u00a0\3\u00a1")
        buf.write("\3\u00a1\5\u00a1\u086c\n\u00a1\3\u00a1\5\u00a1\u086f\n")
        buf.write("\u00a1\3\u00a1\3\u00a1\5\u00a1\u0873\n\u00a1\3\u00a1\3")
        buf.write("\u00a1\3\u00a1\3\u00a1\5\u00a1\u0879\n\u00a1\3\u00a1\5")
        buf.write("\u00a1\u087c\n\u00a1\3\u00a1\3\u00a1\5\u00a1\u0880\n\u00a1")
        buf.write("\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\3\u00a1\5\u00a1\u088a\n\u00a1\3\u00a1\5\u00a1\u088d\n")
        buf.write("\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\5\u00a1\u0895\n\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\5\u00a1\u089b\n\u00a1\3\u00a2\3\u00a2\3\u00a2\5\u00a2")
        buf.write("\u08a0\n\u00a2\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\5\u00a3\u08a8\n\u00a3\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\5\u00a3\u08af\n\u00a3\3\u00a3\3\u00a3")
        buf.write("\5\u00a3\u08b3\n\u00a3\3\u00a4\3\u00a4\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\5\u00a5\u08ba\n\u00a5\3\u00a5\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\5\u00a5\u08c0\n\u00a5\7\u00a5\u08c2\n\u00a5\f")
        buf.write("\u00a5\16\u00a5\u08c5\13\u00a5\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\5\u00a6\u08ca\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7")
        buf.write("\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u08d3\n\u00a7\3\u00a7")
        buf.write("\3\u00a7\5\u00a7\u08d7\n\u00a7\3\u00a8\5\u00a8\u08da\n")
        buf.write("\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a9\3\u00a9\3\u00a9")
        buf.write("\3\u00a9\3\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00ab")
        buf.write("\3\u00ab\5\u00ab\u08ea\n\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ac\3\u00ac\5\u00ac\u08f1\n\u00ac\3\u00ad\3\u00ad")
        buf.write("\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ae\5\u00ae\u08fa")
        buf.write("\n\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0900")
        buf.write("\n\u00ae\3\u00ae\3\u00ae\5\u00ae\u0904\n\u00ae\3\u00ae")
        buf.write("\5\u00ae\u0907\n\u00ae\3\u00af\3\u00af\5\u00af\u090b\n")
        buf.write("\u00af\3\u00b0\3\u00b0\5\u00b0\u090f\n\u00b0\3\u00b1\3")
        buf.write("\u00b1\3\u00b1\5\u00b1\u0914\n\u00b1\3\u00b1\3\u00b1\3")
        buf.write("\u00b2\3\u00b2\3\u00b2\5\u00b2\u091b\n\u00b2\3\u00b2\3")
        buf.write("\u00b2\3\u00b2\3\u00b2\5\u00b2\u0921\n\u00b2\7\u00b2\u0923")
        buf.write("\n\u00b2\f\u00b2\16\u00b2\u0926\13\u00b2\3\u00b3\3\u00b3")
        buf.write("\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u092e\n\u00b3")
        buf.write("\3\u00b4\3\u00b4\3\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6")
        buf.write("\u0967\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\3\u00b7\3\u00b7\5\u00b7\u0970\n\u00b7\3\u00b8\3\u00b8")
        buf.write("\3\u00b9\3\u00b9\3\u00ba\3\u00ba\3\u00ba\2$\16\22\30*")
        buf.write("\62\64\668:<>@BDFR`t\u009a\u00b6\u00bc\u00c8\u00cc\u00d4")
        buf.write("\u00ea\u00ee\u00f2\u0100\u0114\u0118\u0120\u013e\u0148")
        buf.write("\u0162\u00bb\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"")
        buf.write("$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz")
        buf.write("|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4")
        buf.write("\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6")
        buf.write("\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8")
        buf.write("\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea")
        buf.write("\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc")
        buf.write("\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e")
        buf.write("\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120")
        buf.write("\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132")
        buf.write("\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144")
        buf.write("\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156")
        buf.write("\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168")
        buf.write("\u016a\u016c\u016e\u0170\u0172\2\13\4\2\\\\``\4\2VX\\")
        buf.write("_\4\2\21\21MM\4\2\\\\qq\5\2\20\20==HH\4\2!!\60\60\3\2")
        buf.write("\61\63\4\2  CC\3\2\u0089\u008c\2\u0aad\2\u0175\3\2\2\2")
        buf.write("\4\u0189\3\2\2\2\6\u0191\3\2\2\2\b\u0195\3\2\2\2\n\u01a0")
        buf.write("\3\2\2\2\f\u01a2\3\2\2\2\16\u01b3\3\2\2\2\20\u01c4\3\2")
        buf.write("\2\2\22\u01c6\3\2\2\2\24\u01df\3\2\2\2\26\u01e1\3\2\2")
        buf.write("\2\30\u0230\3\2\2\2\32\u025d\3\2\2\2\34\u0275\3\2\2\2")
        buf.write("\36\u0294\3\2\2\2 \u029a\3\2\2\2\"\u029c\3\2\2\2$\u02b9")
        buf.write("\3\2\2\2&\u02bb\3\2\2\2(\u02c4\3\2\2\2*\u02c6\3\2\2\2")
        buf.write(",\u02df\3\2\2\2.\u02ed\3\2\2\2\60\u02f5\3\2\2\2\62\u02f7")
        buf.write("\3\2\2\2\64\u0305\3\2\2\2\66\u0316\3\2\2\28\u0324\3\2")
        buf.write("\2\2:\u0333\3\2\2\2<\u0347\3\2\2\2>\u0355\3\2\2\2@\u0360")
        buf.write("\3\2\2\2B\u036b\3\2\2\2D\u0376\3\2\2\2F\u0381\3\2\2\2")
        buf.write("H\u038f\3\2\2\2J\u0391\3\2\2\2L\u0397\3\2\2\2N\u03a2\3")
        buf.write("\2\2\2P\u03af\3\2\2\2R\u03b1\3\2\2\2T\u03bc\3\2\2\2V\u03e5")
        buf.write("\3\2\2\2X\u03e7\3\2\2\2Z\u03ec\3\2\2\2\\\u03f1\3\2\2\2")
        buf.write("^\u03f5\3\2\2\2`\u03fb\3\2\2\2b\u0418\3\2\2\2d\u041a\3")
        buf.write("\2\2\2f\u042d\3\2\2\2h\u0452\3\2\2\2j\u0456\3\2\2\2l\u0459")
        buf.write("\3\2\2\2n\u0460\3\2\2\2p\u0470\3\2\2\2r\u0472\3\2\2\2")
        buf.write("t\u0476\3\2\2\2v\u048b\3\2\2\2x\u04a3\3\2\2\2z\u04a5\3")
        buf.write("\2\2\2|\u04bc\3\2\2\2~\u04be\3\2\2\2\u0080\u04c6\3\2\2")
        buf.write("\2\u0082\u04d4\3\2\2\2\u0084\u04dd\3\2\2\2\u0086\u04ee")
        buf.write("\3\2\2\2\u0088\u050b\3\2\2\2\u008a\u0514\3\2\2\2\u008c")
        buf.write("\u051d\3\2\2\2\u008e\u0536\3\2\2\2\u0090\u053b\3\2\2\2")
        buf.write("\u0092\u0546\3\2\2\2\u0094\u055b\3\2\2\2\u0096\u0562\3")
        buf.write("\2\2\2\u0098\u0564\3\2\2\2\u009a\u0567\3\2\2\2\u009c\u0577")
        buf.write("\3\2\2\2\u009e\u0579\3\2\2\2\u00a0\u057d\3\2\2\2\u00a2")
        buf.write("\u057f\3\2\2\2\u00a4\u058a\3\2\2\2\u00a6\u059e\3\2\2\2")
        buf.write("\u00a8\u05a1\3\2\2\2\u00aa\u05a3\3\2\2\2\u00ac\u05a6\3")
        buf.write("\2\2\2\u00ae\u05b7\3\2\2\2\u00b0\u05ba\3\2\2\2\u00b2\u05c4")
        buf.write("\3\2\2\2\u00b4\u05d4\3\2\2\2\u00b6\u05d6\3\2\2\2\u00b8")
        buf.write("\u05e7\3\2\2\2\u00ba\u05f9\3\2\2\2\u00bc\u0602\3\2\2\2")
        buf.write("\u00be\u0613\3\2\2\2\u00c0\u0619\3\2\2\2\u00c2\u061b\3")
        buf.write("\2\2\2\u00c4\u061f\3\2\2\2\u00c6\u0621\3\2\2\2\u00c8\u0625")
        buf.write("\3\2\2\2\u00ca\u063c\3\2\2\2\u00cc\u063e\3\2\2\2\u00ce")
        buf.write("\u0649\3\2\2\2\u00d0\u0652\3\2\2\2\u00d2\u0658\3\2\2\2")
        buf.write("\u00d4\u0663\3\2\2\2\u00d6\u0675\3\2\2\2\u00d8\u0684\3")
        buf.write("\2\2\2\u00da\u06a0\3\2\2\2\u00dc\u06a2\3\2\2\2\u00de\u06a6")
        buf.write("\3\2\2\2\u00e0\u06a8\3\2\2\2\u00e2\u06ab\3\2\2\2\u00e4")
        buf.write("\u06af\3\2\2\2\u00e6\u06bb\3\2\2\2\u00e8\u06c2\3\2\2\2")
        buf.write("\u00ea\u06d2\3\2\2\2\u00ec\u06e8\3\2\2\2\u00ee\u06ea\3")
        buf.write("\2\2\2\u00f0\u0707\3\2\2\2\u00f2\u0709\3\2\2\2\u00f4\u0733")
        buf.write("\3\2\2\2\u00f6\u0736\3\2\2\2\u00f8\u074c\3\2\2\2\u00fa")
        buf.write("\u0753\3\2\2\2\u00fc\u0758\3\2\2\2\u00fe\u075c\3\2\2\2")
        buf.write("\u0100\u075e\3\2\2\2\u0102\u0777\3\2\2\2\u0104\u077b\3")
        buf.write("\2\2\2\u0106\u077d\3\2\2\2\u0108\u0796\3\2\2\2\u010a\u0799")
        buf.write("\3\2\2\2\u010c\u079d\3\2\2\2\u010e\u079f\3\2\2\2\u0110")
        buf.write("\u07aa\3\2\2\2\u0112\u07bc\3\2\2\2\u0114\u07be\3\2\2\2")
        buf.write("\u0116\u07dc\3\2\2\2\u0118\u07de\3\2\2\2\u011a\u07e8\3")
        buf.write("\2\2\2\u011c\u07ea\3\2\2\2\u011e\u07ee\3\2\2\2\u0120\u07f1")
        buf.write("\3\2\2\2\u0122\u0816\3\2\2\2\u0124\u081d\3\2\2\2\u0126")
        buf.write("\u081f\3\2\2\2\u0128\u0821\3\2\2\2\u012a\u0823\3\2\2\2")
        buf.write("\u012c\u0826\3\2\2\2\u012e\u082a\3\2\2\2\u0130\u082e\3")
        buf.write("\2\2\2\u0132\u083c\3\2\2\2\u0134\u0848\3\2\2\2\u0136\u084c")
        buf.write("\3\2\2\2\u0138\u084e\3\2\2\2\u013a\u0856\3\2\2\2\u013c")
        buf.write("\u0858\3\2\2\2\u013e\u085e\3\2\2\2\u0140\u089a\3\2\2\2")
        buf.write("\u0142\u089c\3\2\2\2\u0144\u08b2\3\2\2\2\u0146\u08b4\3")
        buf.write("\2\2\2\u0148\u08b6\3\2\2\2\u014a\u08c9\3\2\2\2\u014c\u08d6")
        buf.write("\3\2\2\2\u014e\u08d9\3\2\2\2\u0150\u08de\3\2\2\2\u0152")
        buf.write("\u08e3\3\2\2\2\u0154\u08e7\3\2\2\2\u0156\u08ee\3\2\2\2")
        buf.write("\u0158\u08f2\3\2\2\2\u015a\u0906\3\2\2\2\u015c\u0908\3")
        buf.write("\2\2\2\u015e\u090e\3\2\2\2\u0160\u0910\3\2\2\2\u0162\u0917")
        buf.write("\3\2\2\2\u0164\u092d\3\2\2\2\u0166\u092f\3\2\2\2\u0168")
        buf.write("\u0932\3\2\2\2\u016a\u0966\3\2\2\2\u016c\u096f\3\2\2\2")
        buf.write("\u016e\u0971\3\2\2\2\u0170\u0973\3\2\2\2\u0172\u0975\3")
        buf.write("\2\2\2\u0174\u0176\5t;\2\u0175\u0174\3\2\2\2\u0175\u0176")
        buf.write("\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u0178\7\2\2\3\u0178")
        buf.write("\3\3\2\2\2\u0179\u018a\5\u016c\u00b7\2\u017a\u018a\7@")
        buf.write("\2\2\u017b\u017c\7P\2\2\u017c\u017d\5R*\2\u017d\u017e")
        buf.write("\7Q\2\2\u017e\u018a\3\2\2\2\u017f\u018a\5\b\5\2\u0180")
        buf.write("\u0182\7R\2\2\u0181\u0183\5\6\4\2\u0182\u0181\3\2\2\2")
        buf.write("\u0182\u0183\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u0186\7")
        buf.write("S\2\2\u0185\u0187\5\26\f\2\u0186\u0185\3\2\2\2\u0186\u0187")
        buf.write("\3\2\2\2\u0187\u0188\3\2\2\2\u0188\u018a\5^\60\2\u0189")
        buf.write("\u0179\3\2\2\2\u0189\u017a\3\2\2\2\u0189\u017b\3\2\2\2")
        buf.write("\u0189\u017f\3\2\2\2\u0189\u0180\3\2\2\2\u018a\5\3\2\2")
        buf.write("\2\u018b\u0192\5\20\t\2\u018c\u0192\5\22\n\2\u018d\u018e")
        buf.write("\5\20\t\2\u018e\u018f\7u\2\2\u018f\u0190\5\22\n\2\u0190")
        buf.write("\u0192\3\2\2\2\u0191\u018b\3\2\2\2\u0191\u018c\3\2\2\2")
        buf.write("\u0191\u018d\3\2\2\2\u0192\7\3\2\2\2\u0193\u0196\5\n\6")
        buf.write("\2\u0194\u0196\5\f\7\2\u0195\u0193\3\2\2\2\u0195\u0194")
        buf.write("\3\2\2\2\u0196\t\3\2\2\2\u0197\u01a1\7\177\2\2\u0198\u01a1")
        buf.write("\5\u0138\u009d\2\u0199\u01a1\5\u012a\u0096\2\u019a\u01a1")
        buf.write("\5\u013a\u009e\2\u019b\u019c\7^\2\2\u019c\u01a1\5\u0104")
        buf.write("\u0083\2\u019d\u019e\7^\2\2\u019e\u01a1\5\u0092J\2\u019f")
        buf.write("\u01a1\5\u0144\u00a3\2\u01a0\u0197\3\2\2\2\u01a0\u0198")
        buf.write("\3\2\2\2\u01a0\u0199\3\2\2\2\u01a0\u019a\3\2\2\2\u01a0")
        buf.write("\u019b\3\2\2\2\u01a0\u019d\3\2\2\2\u01a0\u019f\3\2\2\2")
        buf.write("\u01a1\13\3\2\2\2\u01a2\u01a4\5\16\b\2\u01a3\u01a5\7?")
        buf.write("\2\2\u01a4\u01a3\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\u01a6")
        buf.write("\3\2\2\2\u01a6\u01a7\5\n\6\2\u01a7\r\3\2\2\2\u01a8\u01a9")
        buf.write("\b\b\1\2\u01a9\u01b4\7z\2\2\u01aa\u01ab\5\u0090I\2\u01ab")
        buf.write("\u01ac\7z\2\2\u01ac\u01b4\3\2\2\2\u01ad\u01ae\5\u00a0")
        buf.write("Q\2\u01ae\u01af\7z\2\2\u01af\u01b4\3\2\2\2\u01b0\u01b1")
        buf.write("\5\u0092J\2\u01b1\u01b2\7z\2\2\u01b2\u01b4\3\2\2\2\u01b3")
        buf.write("\u01a8\3\2\2\2\u01b3\u01aa\3\2\2\2\u01b3\u01ad\3\2\2\2")
        buf.write("\u01b3\u01b0\3\2\2\2\u01b4\u01c1\3\2\2\2\u01b5\u01b6\f")
        buf.write("\4\2\2\u01b6\u01b7\7\177\2\2\u01b7\u01c0\7z\2\2\u01b8")
        buf.write("\u01ba\f\3\2\2\u01b9\u01bb\7?\2\2\u01ba\u01b9\3\2\2\2")
        buf.write("\u01ba\u01bb\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc\u01bd\5")
        buf.write("\u0142\u00a2\2\u01bd\u01be\7z\2\2\u01be\u01c0\3\2\2\2")
        buf.write("\u01bf\u01b5\3\2\2\2\u01bf\u01b8\3\2\2\2\u01c0\u01c3\3")
        buf.write("\2\2\2\u01c1\u01bf\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2\17")
        buf.write("\3\2\2\2\u01c3\u01c1\3\2\2\2\u01c4\u01c5\t\2\2\2\u01c5")
        buf.write("\21\3\2\2\2\u01c6\u01c7\b\n\1\2\u01c7\u01c9\5\24\13\2")
        buf.write("\u01c8\u01ca\7~\2\2\u01c9\u01c8\3\2\2\2\u01c9\u01ca\3")
        buf.write("\2\2\2\u01ca\u01d3\3\2\2\2\u01cb\u01cc\f\3\2\2\u01cc\u01cd")
        buf.write("\7u\2\2\u01cd\u01cf\5\24\13\2\u01ce\u01d0\7~\2\2\u01cf")
        buf.write("\u01ce\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0\u01d2\3\2\2\2")
        buf.write("\u01d1\u01cb\3\2\2\2\u01d2\u01d5\3\2\2\2\u01d3\u01d1\3")
        buf.write("\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\23\3\2\2\2\u01d5\u01d3")
        buf.write("\3\2\2\2\u01d6\u01e0\7\177\2\2\u01d7\u01d8\7\\\2\2\u01d8")
        buf.write("\u01e0\7\177\2\2\u01d9\u01e0\7@\2\2\u01da\u01db\7\177")
        buf.write("\2\2\u01db\u01e0\5\u00fa~\2\u01dc\u01dd\7\\\2\2\u01dd")
        buf.write("\u01de\7\177\2\2\u01de\u01e0\5\u00fa~\2\u01df\u01d6\3")
        buf.write("\2\2\2\u01df\u01d7\3\2\2\2\u01df\u01d9\3\2\2\2\u01df\u01da")
        buf.write("\3\2\2\2\u01df\u01dc\3\2\2\2\u01e0\25\3\2\2\2\u01e1\u01e2")
        buf.write("\7P\2\2\u01e2\u01e3\5\u00f0y\2\u01e3\u01e5\7Q\2\2\u01e4")
        buf.write("\u01e6\7*\2\2\u01e5\u01e4\3\2\2\2\u01e5\u01e6\3\2\2\2")
        buf.write("\u01e6\u01e8\3\2\2\2\u01e7\u01e9\5\u015e\u00b0\2\u01e8")
        buf.write("\u01e7\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9\u01eb\3\2\2\2")
        buf.write("\u01ea\u01ec\5\u00b6\\\2\u01eb\u01ea\3\2\2\2\u01eb\u01ec")
        buf.write("\3\2\2\2\u01ec\u01ee\3\2\2\2\u01ed\u01ef\5\u00d8m\2\u01ee")
        buf.write("\u01ed\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\27\3\2\2\2\u01f0")
        buf.write("\u01f1\b\r\1\2\u01f1\u0231\5\4\3\2\u01f2\u01f3\5\u008e")
        buf.write("H\2\u01f3\u01f5\7P\2\2\u01f4\u01f6\5\32\16\2\u01f5\u01f4")
        buf.write("\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7")
        buf.write("\u01f8\7Q\2\2\u01f8\u0231\3\2\2\2\u01f9\u01fa\5\u014c")
        buf.write("\u00a7\2\u01fa\u01fc\7P\2\2\u01fb\u01fd\5\32\16\2\u01fc")
        buf.write("\u01fb\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd\u01fe\3\2\2\2")
        buf.write("\u01fe\u01ff\7Q\2\2\u01ff\u0231\3\2\2\2\u0200\u0201\5")
        buf.write("\u008eH\2\u0201\u0202\5\u0102\u0082\2\u0202\u0231\3\2")
        buf.write("\2\2\u0203\u0204\5\u014c\u00a7\2\u0204\u0205\5\u0102\u0082")
        buf.write("\2\u0205\u0231\3\2\2\2\u0206\u0207\7\32\2\2\u0207\u0208")
        buf.write("\7a\2\2\u0208\u0209\5\u00e4s\2\u0209\u020a\7b\2\2\u020a")
        buf.write("\u020b\7P\2\2\u020b\u020c\5R*\2\u020c\u020d\7Q\2\2\u020d")
        buf.write("\u0231\3\2\2\2\u020e\u020f\7<\2\2\u020f\u0210\7a\2\2\u0210")
        buf.write("\u0211\5\u00e4s\2\u0211\u0212\7b\2\2\u0212\u0213\7P\2")
        buf.write("\2\u0213\u0214\5R*\2\u0214\u0215\7Q\2\2\u0215\u0231\3")
        buf.write("\2\2\2\u0216\u0217\7\65\2\2\u0217\u0218\7a\2\2\u0218\u0219")
        buf.write("\5\u00e4s\2\u0219\u021a\7b\2\2\u021a\u021b\7P\2\2\u021b")
        buf.write("\u021c\5R*\2\u021c\u021d\7Q\2\2\u021d\u0231\3\2\2\2\u021e")
        buf.write("\u021f\7\23\2\2\u021f\u0220\7a\2\2\u0220\u0221\5\u00e4")
        buf.write("s\2\u0221\u0222\7b\2\2\u0222\u0223\7P\2\2\u0223\u0224")
        buf.write("\5R*\2\u0224\u0225\7Q\2\2\u0225\u0231\3\2\2\2\u0226\u0227")
        buf.write("\7F\2\2\u0227\u0228\7P\2\2\u0228\u0229\5R*\2\u0229\u022a")
        buf.write("\7Q\2\2\u022a\u0231\3\2\2\2\u022b\u022c\7F\2\2\u022c\u022d")
        buf.write("\7P\2\2\u022d\u022e\5\u00e4s\2\u022e\u022f\7Q\2\2\u022f")
        buf.write("\u0231\3\2\2\2\u0230\u01f0\3\2\2\2\u0230\u01f2\3\2\2\2")
        buf.write("\u0230\u01f9\3\2\2\2\u0230\u0200\3\2\2\2\u0230\u0203\3")
        buf.write("\2\2\2\u0230\u0206\3\2\2\2\u0230\u020e\3\2\2\2\u0230\u0216")
        buf.write("\3\2\2\2\u0230\u021e\3\2\2\2\u0230\u0226\3\2\2\2\u0230")
        buf.write("\u022b\3\2\2\2\u0231\u025a\3\2\2\2\u0232\u0233\f\25\2")
        buf.write("\2\u0233\u0234\7R\2\2\u0234\u0235\5R*\2\u0235\u0236\7")
        buf.write("S\2\2\u0236\u0259\3\2\2\2\u0237\u0238\f\24\2\2\u0238\u0239")
        buf.write("\7R\2\2\u0239\u023a\5\u0102\u0082\2\u023a\u023b\7S\2\2")
        buf.write("\u023b\u0259\3\2\2\2\u023c\u023d\f\23\2\2\u023d\u023f")
        buf.write("\7P\2\2\u023e\u0240\5\32\16\2\u023f\u023e\3\2\2\2\u023f")
        buf.write("\u0240\3\2\2\2\u0240\u0241\3\2\2\2\u0241\u0259\7Q\2\2")
        buf.write("\u0242\u0243\f\16\2\2\u0243\u0245\7|\2\2\u0244\u0246\7")
        buf.write("?\2\2\u0245\u0244\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u0247")
        buf.write("\3\2\2\2\u0247\u0259\5\b\5\2\u0248\u0249\f\r\2\2\u0249")
        buf.write("\u024b\7w\2\2\u024a\u024c\7?\2\2\u024b\u024a\3\2\2\2\u024b")
        buf.write("\u024c\3\2\2\2\u024c\u024d\3\2\2\2\u024d\u0259\5\b\5\2")
        buf.write("\u024e\u024f\f\f\2\2\u024f\u0250\7|\2\2\u0250\u0259\5")
        buf.write("\34\17\2\u0251\u0252\f\13\2\2\u0252\u0253\7w\2\2\u0253")
        buf.write("\u0259\5\34\17\2\u0254\u0255\f\n\2\2\u0255\u0259\7s\2")
        buf.write("\2\u0256\u0257\f\t\2\2\u0257\u0259\7t\2\2\u0258\u0232")
        buf.write("\3\2\2\2\u0258\u0237\3\2\2\2\u0258\u023c\3\2\2\2\u0258")
        buf.write("\u0242\3\2\2\2\u0258\u0248\3\2\2\2\u0258\u024e\3\2\2\2")
        buf.write("\u0258\u0251\3\2\2\2\u0258\u0254\3\2\2\2\u0258\u0256\3")
        buf.write("\2\2\2\u0259\u025c\3\2\2\2\u025a\u0258\3\2\2\2\u025a\u025b")
        buf.write("\3\2\2\2\u025b\31\3\2\2\2\u025c\u025a\3\2\2\2\u025d\u025e")
        buf.write("\5\u0100\u0081\2\u025e\33\3\2\2\2\u025f\u0261\5\16\b\2")
        buf.write("\u0260\u025f\3\2\2\2\u0260\u0261\3\2\2\2\u0261\u0262\3")
        buf.write("\2\2\2\u0262\u0263\5\u0090I\2\u0263\u0264\7z\2\2\u0264")
        buf.write("\u0265\7^\2\2\u0265\u0266\5\u0090I\2\u0266\u0276\3\2\2")
        buf.write("\2\u0267\u0268\5\16\b\2\u0268\u0269\7?\2\2\u0269\u026a")
        buf.write("\5\u0142\u00a2\2\u026a\u026b\7z\2\2\u026b\u026c\7^\2\2")
        buf.write("\u026c\u026d\5\u0090I\2\u026d\u0276\3\2\2\2\u026e\u0270")
        buf.write("\5\16\b\2\u026f\u026e\3\2\2\2\u026f\u0270\3\2\2\2\u0270")
        buf.write("\u0271\3\2\2\2\u0271\u0272\7^\2\2\u0272\u0276\5\u0090")
        buf.write("I\2\u0273\u0274\7^\2\2\u0274\u0276\5\u0092J\2\u0275\u0260")
        buf.write("\3\2\2\2\u0275\u0267\3\2\2\2\u0275\u026f\3\2\2\2\u0275")
        buf.write("\u0273\3\2\2\2\u0276\35\3\2\2\2\u0277\u0295\5\30\r\2\u0278")
        buf.write("\u0295\5 \21\2\u0279\u027a\5\"\22\2\u027a\u027b\5\60\31")
        buf.write("\2\u027b\u0295\3\2\2\2\u027c\u027d\79\2\2\u027d\u0295")
        buf.write("\5\36\20\2\u027e\u027f\79\2\2\u027f\u0280\7P\2\2\u0280")
        buf.write("\u0281\5\u00e4s\2\u0281\u0282\7Q\2\2\u0282\u0295\3\2\2")
        buf.write("\2\u0283\u0284\79\2\2\u0284\u0285\7~\2\2\u0285\u0286\7")
        buf.write("P\2\2\u0286\u0287\7\177\2\2\u0287\u0295\7Q\2\2\u0288\u0289")
        buf.write("\7\6\2\2\u0289\u028a\7P\2\2\u028a\u028b\5\u00e4s\2\u028b")
        buf.write("\u028c\7Q\2\2\u028c\u0295\3\2\2\2\u028d\u028e\7-\2\2\u028e")
        buf.write("\u028f\7P\2\2\u028f\u0290\5R*\2\u0290\u0291\7Q\2\2\u0291")
        buf.write("\u0295\3\2\2\2\u0292\u0295\5$\23\2\u0293\u0295\5.\30\2")
        buf.write("\u0294\u0277\3\2\2\2\u0294\u0278\3\2\2\2\u0294\u0279\3")
        buf.write("\2\2\2\u0294\u027c\3\2\2\2\u0294\u027e\3\2\2\2\u0294\u0283")
        buf.write("\3\2\2\2\u0294\u0288\3\2\2\2\u0294\u028d\3\2\2\2\u0294")
        buf.write("\u0292\3\2\2\2\u0294\u0293\3\2\2\2\u0295\37\3\2\2\2\u0296")
        buf.write("\u0297\7s\2\2\u0297\u029b\5\60\31\2\u0298\u0299\7t\2\2")
        buf.write("\u0299\u029b\5\60\31\2\u029a\u0296\3\2\2\2\u029a\u0298")
        buf.write("\3\2\2\2\u029b!\3\2\2\2\u029c\u029d\t\3\2\2\u029d#\3\2")
        buf.write("\2\2\u029e\u02a0\7z\2\2\u029f\u029e\3\2\2\2\u029f\u02a0")
        buf.write("\3\2\2\2\u02a0\u02a1\3\2\2\2\u02a1\u02a3\7,\2\2\u02a2")
        buf.write("\u02a4\5&\24\2\u02a3\u02a2\3\2\2\2\u02a3\u02a4\3\2\2\2")
        buf.write("\u02a4\u02a5\3\2\2\2\u02a5\u02a7\5\u008aF\2\u02a6\u02a8")
        buf.write("\5(\25\2\u02a7\u02a6\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8")
        buf.write("\u02aa\3\2\2\2\u02a9\u02ab\5,\27\2\u02aa\u02a9\3\2\2\2")
        buf.write("\u02aa\u02ab\3\2\2\2\u02ab\u02ba\3\2\2\2\u02ac\u02ae\7")
        buf.write("z\2\2\u02ad\u02ac\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u02af")
        buf.write("\3\2\2\2\u02af\u02b1\7,\2\2\u02b0\u02b2\5&\24\2\u02b1")
        buf.write("\u02b0\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b3\3\2\2\2")
        buf.write("\u02b3\u02b4\7P\2\2\u02b4\u02b5\5\u00e4s\2\u02b5\u02b7")
        buf.write("\7Q\2\2\u02b6\u02b8\5,\27\2\u02b7\u02b6\3\2\2\2\u02b7")
        buf.write("\u02b8\3\2\2\2\u02b8\u02ba\3\2\2\2\u02b9\u029f\3\2\2\2")
        buf.write("\u02b9\u02ad\3\2\2\2\u02ba%\3\2\2\2\u02bb\u02bc\7P\2\2")
        buf.write("\u02bc\u02bd\5\32\16\2\u02bd\u02be\7Q\2\2\u02be\'\3\2")
        buf.write("\2\2\u02bf\u02c1\5\u00dan\2\u02c0\u02c2\5(\25\2\u02c1")
        buf.write("\u02c0\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2\u02c5\3\2\2\2")
        buf.write("\u02c3\u02c5\5*\26\2\u02c4\u02bf\3\2\2\2\u02c4\u02c3\3")
        buf.write("\2\2\2\u02c5)\3\2\2\2\u02c6\u02c7\b\26\1\2\u02c7\u02c8")
        buf.write("\7R\2\2\u02c8\u02c9\5R*\2\u02c9\u02cb\7S\2\2\u02ca\u02cc")
        buf.write("\5\u00b6\\\2\u02cb\u02ca\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc")
        buf.write("\u02d6\3\2\2\2\u02cd\u02ce\f\3\2\2\u02ce\u02cf\7R\2\2")
        buf.write("\u02cf\u02d0\5T+\2\u02d0\u02d2\7S\2\2\u02d1\u02d3\5\u00b6")
        buf.write("\\\2\u02d2\u02d1\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02d5")
        buf.write("\3\2\2\2\u02d4\u02cd\3\2\2\2\u02d5\u02d8\3\2\2\2\u02d6")
        buf.write("\u02d4\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7+\3\2\2\2\u02d8")
        buf.write("\u02d6\3\2\2\2\u02d9\u02db\7P\2\2\u02da\u02dc\5\32\16")
        buf.write("\2\u02db\u02da\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc\u02dd")
        buf.write("\3\2\2\2\u02dd\u02e0\7Q\2\2\u02de\u02e0\5\u0102\u0082")
        buf.write("\2\u02df\u02d9\3\2\2\2\u02df\u02de\3\2\2\2\u02e0-\3\2")
        buf.write("\2\2\u02e1\u02e3\7z\2\2\u02e2\u02e1\3\2\2\2\u02e2\u02e3")
        buf.write("\3\2\2\2\u02e3\u02e4\3\2\2\2\u02e4\u02e5\7\27\2\2\u02e5")
        buf.write("\u02ee\5\60\31\2\u02e6\u02e8\7z\2\2\u02e7\u02e6\3\2\2")
        buf.write("\2\u02e7\u02e8\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9\u02ea")
        buf.write("\7\27\2\2\u02ea\u02eb\7R\2\2\u02eb\u02ec\7S\2\2\u02ec")
        buf.write("\u02ee\5\60\31\2\u02ed\u02e2\3\2\2\2\u02ed\u02e7\3\2\2")
        buf.write("\2\u02ee/\3\2\2\2\u02ef\u02f6\5\36\20\2\u02f0\u02f1\7")
        buf.write("P\2\2\u02f1\u02f2\5\u00e4s\2\u02f2\u02f3\7Q\2\2\u02f3")
        buf.write("\u02f4\5\60\31\2\u02f4\u02f6\3\2\2\2\u02f5\u02ef\3\2\2")
        buf.write("\2\u02f5\u02f0\3\2\2\2\u02f6\61\3\2\2\2\u02f7\u02f8\b")
        buf.write("\32\1\2\u02f8\u02f9\5\60\31\2\u02f9\u0302\3\2\2\2\u02fa")
        buf.write("\u02fb\f\4\2\2\u02fb\u02fc\7}\2\2\u02fc\u0301\5\60\31")
        buf.write("\2\u02fd\u02fe\f\3\2\2\u02fe\u02ff\7v\2\2\u02ff\u0301")
        buf.write("\5\60\31\2\u0300\u02fa\3\2\2\2\u0300\u02fd\3\2\2\2\u0301")
        buf.write("\u0304\3\2\2\2\u0302\u0300\3\2\2\2\u0302\u0303\3\2\2\2")
        buf.write("\u0303\63\3\2\2\2\u0304\u0302\3\2\2\2\u0305\u0306\b\33")
        buf.write("\1\2\u0306\u0307\5\62\32\2\u0307\u0313\3\2\2\2\u0308\u0309")
        buf.write("\f\5\2\2\u0309\u030a\7X\2\2\u030a\u0312\5\62\32\2\u030b")
        buf.write("\u030c\f\4\2\2\u030c\u030d\7Y\2\2\u030d\u0312\5\62\32")
        buf.write("\2\u030e\u030f\f\3\2\2\u030f\u0310\7Z\2\2\u0310\u0312")
        buf.write("\5\62\32\2\u0311\u0308\3\2\2\2\u0311\u030b\3\2\2\2\u0311")
        buf.write("\u030e\3\2\2\2\u0312\u0315\3\2\2\2\u0313\u0311\3\2\2\2")
        buf.write("\u0313\u0314\3\2\2\2\u0314\65\3\2\2\2\u0315\u0313\3\2")
        buf.write("\2\2\u0316\u0317\b\34\1\2\u0317\u0318\5\64\33\2\u0318")
        buf.write("\u0321\3\2\2\2\u0319\u031a\f\4\2\2\u031a\u031b\7V\2\2")
        buf.write("\u031b\u0320\5\64\33\2\u031c\u031d\f\3\2\2\u031d\u031e")
        buf.write("\7W\2\2\u031e\u0320\5\64\33\2\u031f\u0319\3\2\2\2\u031f")
        buf.write("\u031c\3\2\2\2\u0320\u0323\3\2\2\2\u0321\u031f\3\2\2\2")
        buf.write("\u0321\u0322\3\2\2\2\u0322\67\3\2\2\2\u0323\u0321\3\2")
        buf.write("\2\2\u0324\u0325\b\35\1\2\u0325\u0326\5\66\34\2\u0326")
        buf.write("\u0330\3\2\2\2\u0327\u0328\f\4\2\2\u0328\u0329\7k\2\2")
        buf.write("\u0329\u032f\5\66\34\2\u032a\u032b\f\3\2\2\u032b\u032c")
        buf.write("\5\u0166\u00b4\2\u032c\u032d\5\66\34\2\u032d\u032f\3\2")
        buf.write("\2\2\u032e\u0327\3\2\2\2\u032e\u032a\3\2\2\2\u032f\u0332")
        buf.write("\3\2\2\2\u0330\u032e\3\2\2\2\u0330\u0331\3\2\2\2\u0331")
        buf.write("9\3\2\2\2\u0332\u0330\3\2\2\2\u0333\u0334\b\36\1\2\u0334")
        buf.write("\u0335\58\35\2\u0335\u0344\3\2\2\2\u0336\u0337\f\6\2\2")
        buf.write("\u0337\u0338\7a\2\2\u0338\u0343\58\35\2\u0339\u033a\f")
        buf.write("\5\2\2\u033a\u033b\7b\2\2\u033b\u0343\58\35\2\u033c\u033d")
        buf.write("\f\4\2\2\u033d\u033e\7o\2\2\u033e\u0343\58\35\2\u033f")
        buf.write("\u0340\f\3\2\2\u0340\u0341\7p\2\2\u0341\u0343\58\35\2")
        buf.write("\u0342\u0336\3\2\2\2\u0342\u0339\3\2\2\2\u0342\u033c\3")
        buf.write("\2\2\2\u0342\u033f\3\2\2\2\u0343\u0346\3\2\2\2\u0344\u0342")
        buf.write("\3\2\2\2\u0344\u0345\3\2\2\2\u0345;\3\2\2\2\u0346\u0344")
        buf.write("\3\2\2\2\u0347\u0348\b\37\1\2\u0348\u0349\5:\36\2\u0349")
        buf.write("\u0352\3\2\2\2\u034a\u034b\f\4\2\2\u034b\u034c\7m\2\2")
        buf.write("\u034c\u0351\5:\36\2\u034d\u034e\f\3\2\2\u034e\u034f\7")
        buf.write("n\2\2\u034f\u0351\5:\36\2\u0350\u034a\3\2\2\2\u0350\u034d")
        buf.write("\3\2\2\2\u0351\u0354\3\2\2\2\u0352\u0350\3\2\2\2\u0352")
        buf.write("\u0353\3\2\2\2\u0353=\3\2\2\2\u0354\u0352\3\2\2\2\u0355")
        buf.write("\u0356\b \1\2\u0356\u0357\5<\37\2\u0357\u035d\3\2\2\2")
        buf.write("\u0358\u0359\f\3\2\2\u0359\u035a\7\\\2\2\u035a\u035c\5")
        buf.write("<\37\2\u035b\u0358\3\2\2\2\u035c\u035f\3\2\2\2\u035d\u035b")
        buf.write("\3\2\2\2\u035d\u035e\3\2\2\2\u035e?\3\2\2\2\u035f\u035d")
        buf.write("\3\2\2\2\u0360\u0361\b!\1\2\u0361\u0362\5> \2\u0362\u0368")
        buf.write("\3\2\2\2\u0363\u0364\f\3\2\2\u0364\u0365\7[\2\2\u0365")
        buf.write("\u0367\5> \2\u0366\u0363\3\2\2\2\u0367\u036a\3\2\2\2\u0368")
        buf.write("\u0366\3\2\2\2\u0368\u0369\3\2\2\2\u0369A\3\2\2\2\u036a")
        buf.write("\u0368\3\2\2\2\u036b\u036c\b\"\1\2\u036c\u036d\5@!\2\u036d")
        buf.write("\u0373\3\2\2\2\u036e\u036f\f\3\2\2\u036f\u0370\7]\2\2")
        buf.write("\u0370\u0372\5@!\2\u0371\u036e\3\2\2\2\u0372\u0375\3\2")
        buf.write("\2\2\u0373\u0371\3\2\2\2\u0373\u0374\3\2\2\2\u0374C\3")
        buf.write("\2\2\2\u0375\u0373\3\2\2\2\u0376\u0377\b#\1\2\u0377\u0378")
        buf.write("\5B\"\2\u0378\u037e\3\2\2\2\u0379\u037a\f\3\2\2\u037a")
        buf.write("\u037b\7q\2\2\u037b\u037d\5B\"\2\u037c\u0379\3\2\2\2\u037d")
        buf.write("\u0380\3\2\2\2\u037e\u037c\3\2\2\2\u037e\u037f\3\2\2\2")
        buf.write("\u037fE\3\2\2\2\u0380\u037e\3\2\2\2\u0381\u0382\b$\1\2")
        buf.write("\u0382\u0383\5D#\2\u0383\u0389\3\2\2\2\u0384\u0385\f\3")
        buf.write("\2\2\u0385\u0386\7r\2\2\u0386\u0388\5D#\2\u0387\u0384")
        buf.write("\3\2\2\2\u0388\u038b\3\2\2\2\u0389\u0387\3\2\2\2\u0389")
        buf.write("\u038a\3\2\2\2\u038aG\3\2\2\2\u038b\u0389\3\2\2\2\u038c")
        buf.write("\u0390\5F$\2\u038d\u0390\5J&\2\u038e\u0390\5L\'\2\u038f")
        buf.write("\u038c\3\2\2\2\u038f\u038d\3\2\2\2\u038f\u038e\3\2\2\2")
        buf.write("\u0390I\3\2\2\2\u0391\u0392\5F$\2\u0392\u0393\7x\2\2\u0393")
        buf.write("\u0394\5R*\2\u0394\u0395\7y\2\2\u0395\u0396\5N(\2\u0396")
        buf.write("K\3\2\2\2\u0397\u0398\5F$\2\u0398\u0399\7x\2\2\u0399\u039a")
        buf.write("\7y\2\2\u039a\u039b\5N(\2\u039bM\3\2\2\2\u039c\u03a3\5")
        buf.write("H%\2\u039d\u039e\5F$\2\u039e\u039f\5P)\2\u039f\u03a0\5")
        buf.write("\u00fe\u0080\2\u03a0\u03a3\3\2\2\2\u03a1\u03a3\5\u015c")
        buf.write("\u00af\2\u03a2\u039c\3\2\2\2\u03a2\u039d\3\2\2\2\u03a2")
        buf.write("\u03a1\3\2\2\2\u03a3O\3\2\2\2\u03a4\u03b0\7`\2\2\u03a5")
        buf.write("\u03b0\7e\2\2\u03a6\u03b0\7f\2\2\u03a7\u03b0\7g\2\2\u03a8")
        buf.write("\u03b0\7c\2\2\u03a9\u03b0\7d\2\2\u03aa\u03b0\5\u0168\u00b5")
        buf.write("\2\u03ab\u03b0\7l\2\2\u03ac\u03b0\7i\2\2\u03ad\u03b0\7")
        buf.write("h\2\2\u03ae\u03b0\7j\2\2\u03af\u03a4\3\2\2\2\u03af\u03a5")
        buf.write("\3\2\2\2\u03af\u03a6\3\2\2\2\u03af\u03a7\3\2\2\2\u03af")
        buf.write("\u03a8\3\2\2\2\u03af\u03a9\3\2\2\2\u03af\u03aa\3\2\2\2")
        buf.write("\u03af\u03ab\3\2\2\2\u03af\u03ac\3\2\2\2\u03af\u03ad\3")
        buf.write("\2\2\2\u03af\u03ae\3\2\2\2\u03b0Q\3\2\2\2\u03b1\u03b2")
        buf.write("\b*\1\2\u03b2\u03b3\5N(\2\u03b3\u03b9\3\2\2\2\u03b4\u03b5")
        buf.write("\f\3\2\2\u03b5\u03b6\7u\2\2\u03b6\u03b8\5N(\2\u03b7\u03b4")
        buf.write("\3\2\2\2\u03b8\u03bb\3\2\2\2\u03b9\u03b7\3\2\2\2\u03b9")
        buf.write("\u03ba\3\2\2\2\u03baS\3\2\2\2\u03bb\u03b9\3\2\2\2\u03bc")
        buf.write("\u03bd\5H%\2\u03bdU\3\2\2\2\u03be\u03c0\5\u00b6\\\2\u03bf")
        buf.write("\u03be\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0\u03c1\3\2\2\2")
        buf.write("\u03c1\u03c2\7\177\2\2\u03c2\u03c3\7y\2\2\u03c3\u03e6")
        buf.write("\5V,\2\u03c4\u03c6\5\u00b6\\\2\u03c5\u03c4\3\2\2\2\u03c5")
        buf.write("\u03c6\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03e6\5X-\2\u03c8")
        buf.write("\u03ca\5\u00b6\\\2\u03c9\u03c8\3\2\2\2\u03c9\u03ca\3\2")
        buf.write("\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03e6\5Z.\2\u03cc\u03ce")
        buf.write("\5\u00b6\\\2\u03cd\u03cc\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce")
        buf.write("\u03cf\3\2\2\2\u03cf\u03e6\5\\/\2\u03d0\u03d2\5\u00b6")
        buf.write("\\\2\u03d1\u03d0\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d3")
        buf.write("\3\2\2\2\u03d3\u03e6\5^\60\2\u03d4\u03d6\5\u00b6\\\2\u03d5")
        buf.write("\u03d4\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6\u03d7\3\2\2\2")
        buf.write("\u03d7\u03e6\5b\62\2\u03d8\u03da\5\u00b6\\\2\u03d9\u03d8")
        buf.write("\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u03db\3\2\2\2\u03db")
        buf.write("\u03e6\5h\65\2\u03dc\u03de\5\u00b6\\\2\u03dd\u03dc\3\2")
        buf.write("\2\2\u03dd\u03de\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03e6")
        buf.write("\5p9\2\u03e0\u03e6\5x=\2\u03e1\u03e3\5\u00b6\\\2\u03e2")
        buf.write("\u03e1\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e4\3\2\2\2")
        buf.write("\u03e4\u03e6\5\u0152\u00aa\2\u03e5\u03bf\3\2\2\2\u03e5")
        buf.write("\u03c5\3\2\2\2\u03e5\u03c9\3\2\2\2\u03e5\u03cd\3\2\2\2")
        buf.write("\u03e5\u03d1\3\2\2\2\u03e5\u03d5\3\2\2\2\u03e5\u03d9\3")
        buf.write("\2\2\2\u03e5\u03dd\3\2\2\2\u03e5\u03e0\3\2\2\2\u03e5\u03e2")
        buf.write("\3\2\2\2\u03e6W\3\2\2\2\u03e7\u03e8\7\13\2\2\u03e8\u03e9")
        buf.write("\5T+\2\u03e9\u03ea\7y\2\2\u03ea\u03eb\5V,\2\u03ebY\3\2")
        buf.write("\2\2\u03ec\u03ed\7\26\2\2\u03ed\u03ee\7y\2\2\u03ee\u03ef")
        buf.write("\5V,\2\u03ef[\3\2\2\2\u03f0\u03f2\5R*\2\u03f1\u03f0\3")
        buf.write("\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03f4")
        buf.write("\7{\2\2\u03f4]\3\2\2\2\u03f5\u03f7\7T\2\2\u03f6\u03f8")
        buf.write("\5`\61\2\u03f7\u03f6\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8")
        buf.write("\u03f9\3\2\2\2\u03f9\u03fa\7U\2\2\u03fa_\3\2\2\2\u03fb")
        buf.write("\u03fc\b\61\1\2\u03fc\u03fd\5V,\2\u03fd\u0402\3\2\2\2")
        buf.write("\u03fe\u03ff\f\3\2\2\u03ff\u0401\5V,\2\u0400\u03fe\3\2")
        buf.write("\2\2\u0401\u0404\3\2\2\2\u0402\u0400\3\2\2\2\u0402\u0403")
        buf.write("\3\2\2\2\u0403a\3\2\2\2\u0404\u0402\3\2\2\2\u0405\u0406")
        buf.write("\7&\2\2\u0406\u0407\7P\2\2\u0407\u0408\5f\64\2\u0408\u0409")
        buf.write("\7Q\2\2\u0409\u040a\5V,\2\u040a\u0419\3\2\2\2\u040b\u040c")
        buf.write("\7&\2\2\u040c\u040d\7P\2\2\u040d\u040e\5f\64\2\u040e\u040f")
        buf.write("\7Q\2\2\u040f\u0410\5V,\2\u0410\u0411\5d\63\2\u0411\u0419")
        buf.write("\3\2\2\2\u0412\u0413\7>\2\2\u0413\u0414\7P\2\2\u0414\u0415")
        buf.write("\5f\64\2\u0415\u0416\7Q\2\2\u0416\u0417\5V,\2\u0417\u0419")
        buf.write("\3\2\2\2\u0418\u0405\3\2\2\2\u0418\u040b\3\2\2\2\u0418")
        buf.write("\u0412\3\2\2\2\u0419c\3\2\2\2\u041a\u041b\7\33\2\2\u041b")
        buf.write("\u041c\5V,\2\u041ce\3\2\2\2\u041d\u042e\5R*\2\u041e\u0420")
        buf.write("\5\u00b6\\\2\u041f\u041e\3\2\2\2\u041f\u0420\3\2\2\2\u0420")
        buf.write("\u0421\3\2\2\2\u0421\u0422\5\u0084C\2\u0422\u0423\5\u00d0")
        buf.write("i\2\u0423\u0424\7`\2\2\u0424\u0425\5\u00fe\u0080\2\u0425")
        buf.write("\u042e\3\2\2\2\u0426\u0428\5\u00b6\\\2\u0427\u0426\3\2")
        buf.write("\2\2\u0427\u0428\3\2\2\2\u0428\u0429\3\2\2\2\u0429\u042a")
        buf.write("\5\u0084C\2\u042a\u042b\5\u00d0i\2\u042b\u042c\5\u0102")
        buf.write("\u0082\2\u042c\u042e\3\2\2\2\u042d\u041d\3\2\2\2\u042d")
        buf.write("\u041f\3\2\2\2\u042d\u0427\3\2\2\2\u042eg\3\2\2\2\u042f")
        buf.write("\u0430\7O\2\2\u0430\u0431\7P\2\2\u0431\u0432\5f\64\2\u0432")
        buf.write("\u0433\7Q\2\2\u0433\u0434\5V,\2\u0434\u0453\3\2\2\2\u0435")
        buf.write("\u0436\7\30\2\2\u0436\u0437\5V,\2\u0437\u0438\7O\2\2\u0438")
        buf.write("\u0439\7P\2\2\u0439\u043a\5R*\2\u043a\u043b\7Q\2\2\u043b")
        buf.write("\u043c\7{\2\2\u043c\u0453\3\2\2\2\u043d\u043e\7#\2\2\u043e")
        buf.write("\u043f\7P\2\2\u043f\u0441\5j\66\2\u0440\u0442\5f\64\2")
        buf.write("\u0441\u0440\3\2\2\2\u0441\u0442\3\2\2\2\u0442\u0443\3")
        buf.write("\2\2\2\u0443\u0445\7{\2\2\u0444\u0446\5R*\2\u0445\u0444")
        buf.write("\3\2\2\2\u0445\u0446\3\2\2\2\u0446\u0447\3\2\2\2\u0447")
        buf.write("\u0448\7Q\2\2\u0448\u0449\5V,\2\u0449\u0453\3\2\2\2\u044a")
        buf.write("\u044b\7#\2\2\u044b\u044c\7P\2\2\u044c\u044d\5l\67\2\u044d")
        buf.write("\u044e\7y\2\2\u044e\u044f\5n8\2\u044f\u0450\7Q\2\2\u0450")
        buf.write("\u0451\5V,\2\u0451\u0453\3\2\2\2\u0452\u042f\3\2\2\2\u0452")
        buf.write("\u0435\3\2\2\2\u0452\u043d\3\2\2\2\u0452\u044a\3\2\2\2")
        buf.write("\u0453i\3\2\2\2\u0454\u0457\5\\/\2\u0455\u0457\5|?\2\u0456")
        buf.write("\u0454\3\2\2\2\u0456\u0455\3\2\2\2\u0457k\3\2\2\2\u0458")
        buf.write("\u045a\5\u00b6\\\2\u0459\u0458\3\2\2\2\u0459\u045a\3\2")
        buf.write("\2\2\u045a\u045b\3\2\2\2\u045b\u045c\5\u0084C\2\u045c")
        buf.write("\u045d\5\u00d0i\2\u045dm\3\2\2\2\u045e\u0461\5R*\2\u045f")
        buf.write("\u0461\5\u0102\u0082\2\u0460\u045e\3\2\2\2\u0460\u045f")
        buf.write("\3\2\2\2\u0461o\3\2\2\2\u0462\u0463\7\n\2\2\u0463\u0471")
        buf.write("\7{\2\2\u0464\u0465\7\24\2\2\u0465\u0471\7{\2\2\u0466")
        buf.write("\u0468\7\66\2\2\u0467\u0469\5R*\2\u0468\u0467\3\2\2\2")
        buf.write("\u0468\u0469\3\2\2\2\u0469\u046a\3\2\2\2\u046a\u0471\7")
        buf.write("{\2\2\u046b\u046c\7\66\2\2\u046c\u046d\5\u0102\u0082\2")
        buf.write("\u046d\u046e\7{\2\2\u046e\u0471\3\2\2\2\u046f\u0471\5")
        buf.write("r:\2\u0470\u0462\3\2\2\2\u0470\u0464\3\2\2\2\u0470\u0466")
        buf.write("\3\2\2\2\u0470\u046b\3\2\2\2\u0470\u046f\3\2\2\2\u0471")
        buf.write("q\3\2\2\2\u0472\u0473\7%\2\2\u0473\u0474\7\177\2\2\u0474")
        buf.write("\u0475\7{\2\2\u0475s\3\2\2\2\u0476\u0477\b;\1\2\u0477")
        buf.write("\u0478\5v<\2\u0478\u047d\3\2\2\2\u0479\u047a\f\3\2\2\u047a")
        buf.write("\u047c\5v<\2\u047b\u0479\3\2\2\2\u047c\u047f\3\2\2\2\u047d")
        buf.write("\u047b\3\2\2\2\u047d\u047e\3\2\2\2\u047eu\3\2\2\2\u047f")
        buf.write("\u047d\3\2\2\2\u0480\u048c\5x=\2\u0481\u048c\5\u00f6|")
        buf.write("\2\u0482\u048c\5\u013c\u009f\2\u0483\u048c\5\u014e\u00a8")
        buf.write("\2\u0484\u048c\5\u0150\u00a9\2\u0485\u048c\5\u00b4[\2")
        buf.write("\u0486\u048c\5\u00a4S\2\u0487\u048c\5\u0080A\2\u0488\u0489")
        buf.write("\5\u00b6\\\2\u0489\u048a\7{\2\2\u048a\u048c\3\2\2\2\u048b")
        buf.write("\u0480\3\2\2\2\u048b\u0481\3\2\2\2\u048b\u0482\3\2\2\2")
        buf.write("\u048b\u0483\3\2\2\2\u048b\u0484\3\2\2\2\u048b\u0485\3")
        buf.write("\2\2\2\u048b\u0486\3\2\2\2\u048b\u0487\3\2\2\2\u048b\u0488")
        buf.write("\3\2\2\2\u048cw\3\2\2\2\u048d\u04a4\5|?\2\u048e\u04a4")
        buf.write("\5\u00b2Z\2\u048f\u0490\7+\2\2\u0490\u0491\7\177\2\2\u0491")
        buf.write("\u0492\7`\2\2\u0492\u0493\5\u00acW\2\u0493\u0494\7{\2")
        buf.write("\2\u0494\u04a4\3\2\2\2\u0495\u04a4\5\u00aeX\2\u0496\u04a4")
        buf.write("\5\u00b0Y\2\u0497\u04a4\5~@\2\u0498\u04a4\5z>\2\u0499")
        buf.write("\u049b\5\u0096L\2\u049a\u049c\5\u00b6\\\2\u049b\u049a")
        buf.write("\3\2\2\2\u049b\u049c\3\2\2\2\u049c\u049d\3\2\2\2\u049d")
        buf.write("\u049f\7\177\2\2\u049e\u04a0\5\u0098M\2\u049f\u049e\3")
        buf.write("\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04a2")
        buf.write("\7{\2\2\u04a2\u04a4\3\2\2\2\u04a3\u048d\3\2\2\2\u04a3")
        buf.write("\u048e\3\2\2\2\u04a3\u048f\3\2\2\2\u04a3\u0495\3\2\2\2")
        buf.write("\u04a3\u0496\3\2\2\2\u04a3\u0497\3\2\2\2\u04a3\u0498\3")
        buf.write("\2\2\2\u04a3\u0499\3\2\2\2\u04a4y\3\2\2\2\u04a5\u04a6")
        buf.write("\7J\2\2\u04a6\u04a8\7\177\2\2\u04a7\u04a9\5\u00b6\\\2")
        buf.write("\u04a8\u04a7\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u04aa\3")
        buf.write("\2\2\2\u04aa\u04ab\7`\2\2\u04ab\u04ac\5\u00e4s\2\u04ac")
        buf.write("\u04ad\7{\2\2\u04ad{\3\2\2\2\u04ae\u04b0\5\u0084C\2\u04af")
        buf.write("\u04ae\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0\u04b2\3\2\2\2")
        buf.write("\u04b1\u04b3\5\u00ccg\2\u04b2\u04b1\3\2\2\2\u04b2\u04b3")
        buf.write("\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4\u04bd\7{\2\2\u04b5")
        buf.write("\u04b7\5\u00b6\\\2\u04b6\u04b8\5\u0084C\2\u04b7\u04b6")
        buf.write("\3\2\2\2\u04b7\u04b8\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9")
        buf.write("\u04ba\5\u00ccg\2\u04ba\u04bb\7{\2\2\u04bb\u04bd\3\2\2")
        buf.write("\2\u04bc\u04af\3\2\2\2\u04bc\u04b5\3\2\2\2\u04bd}\3\2")
        buf.write("\2\2\u04be\u04bf\7;\2\2\u04bf\u04c0\7P\2\2\u04c0\u04c1")
        buf.write("\5T+\2\u04c1\u04c2\7u\2\2\u04c2\u04c3\7\u0088\2\2\u04c3")
        buf.write("\u04c4\7Q\2\2\u04c4\u04c5\7{\2\2\u04c5\177\3\2\2\2\u04c6")
        buf.write("\u04c7\7{\2\2\u04c7\u0081\3\2\2\2\u04c8\u04d5\7\64\2\2")
        buf.write("\u04c9\u04d5\7:\2\2\u04ca\u04d5\7A\2\2\u04cb\u04d5\7\37")
        buf.write("\2\2\u04cc\u04d5\7*\2\2\u04cd\u04d5\5\u0086D\2\u04ce\u04d5")
        buf.write("\7\'\2\2\u04cf\u04d5\7K\2\2\u04d0\u04d5\7\35\2\2\u04d1")
        buf.write("\u04d5\7$\2\2\u04d2\u04d5\7E\2\2\u04d3\u04d5\7\22\2\2")
        buf.write("\u04d4\u04c8\3\2\2\2\u04d4\u04c9\3\2\2\2\u04d4\u04ca\3")
        buf.write("\2\2\2\u04d4\u04cb\3\2\2\2\u04d4\u04cc\3\2\2\2\u04d4\u04cd")
        buf.write("\3\2\2\2\u04d4\u04ce\3\2\2\2\u04d4\u04cf\3\2\2\2\u04d4")
        buf.write("\u04d0\3\2\2\2\u04d4\u04d1\3\2\2\2\u04d4\u04d2\3\2\2\2")
        buf.write("\u04d4\u04d3\3\2\2\2\u04d5\u0083\3\2\2\2\u04d6\u04d8\5")
        buf.write("\u0082B\2\u04d7\u04d9\5\u00b6\\\2\u04d8\u04d7\3\2\2\2")
        buf.write("\u04d8\u04d9\3\2\2\2\u04d9\u04de\3\2\2\2\u04da\u04db\5")
        buf.write("\u0082B\2\u04db\u04dc\5\u0084C\2\u04dc\u04de\3\2\2\2\u04dd")
        buf.write("\u04d6\3\2\2\2\u04dd\u04da\3\2\2\2\u04de\u0085\3\2\2\2")
        buf.write("\u04df\u04ef\5\u0088E\2\u04e0\u04ef\5\u0106\u0084\2\u04e1")
        buf.write("\u04e2\5\u0094K\2\u04e2\u04e4\7T\2\2\u04e3\u04e5\5\u009a")
        buf.write("N\2\u04e4\u04e3\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5\u04e6")
        buf.write("\3\2\2\2\u04e6\u04e7\7U\2\2\u04e7\u04ef\3\2\2\2\u04e8")
        buf.write("\u04e9\5\u0094K\2\u04e9\u04ea\7T\2\2\u04ea\u04eb\5\u009a")
        buf.write("N\2\u04eb\u04ec\7u\2\2\u04ec\u04ed\7U\2\2\u04ed\u04ef")
        buf.write("\3\2\2\2\u04ee\u04df\3\2\2\2\u04ee\u04e0\3\2\2\2\u04ee")
        buf.write("\u04e1\3\2\2\2\u04ee\u04e8\3\2\2\2\u04ef\u0087\3\2\2\2")
        buf.write("\u04f0\u050c\5\u008eH\2\u04f1\u04f3\5\u010e\u0088\2\u04f2")
        buf.write("\u04f4\5\u00b6\\\2\u04f3\u04f2\3\2\2\2\u04f3\u04f4\3\2")
        buf.write("\2\2\u04f4\u04f6\3\2\2\2\u04f5\u04f7\5\16\b\2\u04f6\u04f5")
        buf.write("\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8")
        buf.write("\u04f9\7\177\2\2\u04f9\u050c\3\2\2\2\u04fa\u04fb\5\u010e")
        buf.write("\u0088\2\u04fb\u04fc\5\u0142\u00a2\2\u04fc\u050c\3\2\2")
        buf.write("\2\u04fd\u04fe\5\u010e\u0088\2\u04fe\u0500\5\16\b\2\u04ff")
        buf.write("\u0501\7?\2\2\u0500\u04ff\3\2\2\2\u0500\u0501\3\2\2\2")
        buf.write("\u0501\u0502\3\2\2\2\u0502\u0503\5\u0142\u00a2\2\u0503")
        buf.write("\u050c\3\2\2\2\u0504\u0506\7\34\2\2\u0505\u0507\5\16\b")
        buf.write("\2\u0506\u0505\3\2\2\2\u0506\u0507\3\2\2\2\u0507\u0508")
        buf.write("\3\2\2\2\u0508\u050c\7\177\2\2\u0509\u050c\5\u014c\u00a7")
        buf.write("\2\u050a\u050c\5\u00dep\2\u050b\u04f0\3\2\2\2\u050b\u04f1")
        buf.write("\3\2\2\2\u050b\u04fa\3\2\2\2\u050b\u04fd\3\2\2\2\u050b")
        buf.write("\u0504\3\2\2\2\u050b\u0509\3\2\2\2\u050b\u050a\3\2\2\2")
        buf.write("\u050c\u0089\3\2\2\2\u050d\u050f\5\u0086D\2\u050e\u0510")
        buf.write("\5\u00b6\\\2\u050f\u050e\3\2\2\2\u050f\u0510\3\2\2\2\u0510")
        buf.write("\u0515\3\2\2\2\u0511\u0512\5\u0086D\2\u0512\u0513\5\u008a")
        buf.write("F\2\u0513\u0515\3\2\2\2\u0514\u050d\3\2\2\2\u0514\u0511")
        buf.write("\3\2\2\2\u0515\u008b\3\2\2\2\u0516\u0518\5\u0088E\2\u0517")
        buf.write("\u0519\5\u00b6\\\2\u0518\u0517\3\2\2\2\u0518\u0519\3\2")
        buf.write("\2\2\u0519\u051e\3\2\2\2\u051a\u051b\5\u0088E\2\u051b")
        buf.write("\u051c\5\u008cG\2\u051c\u051e\3\2\2\2\u051d\u0516\3\2")
        buf.write("\2\2\u051d\u051a\3\2\2\2\u051e\u008d\3\2\2\2\u051f\u0521")
        buf.write("\5\16\b\2\u0520\u051f\3\2\2\2\u0520\u0521\3\2\2\2\u0521")
        buf.write("\u0522\3\2\2\2\u0522\u0537\5\u0090I\2\u0523\u0524\5\16")
        buf.write("\b\2\u0524\u0525\7?\2\2\u0525\u0526\5\u0142\u00a2\2\u0526")
        buf.write("\u0537\3\2\2\2\u0527\u0537\7\r\2\2\u0528\u0537\7\16\2")
        buf.write("\2\u0529\u0537\7\17\2\2\u052a\u0537\7N\2\2\u052b\u0537")
        buf.write("\7\t\2\2\u052c\u0537\7\67\2\2\u052d\u0537\7(\2\2\u052e")
        buf.write("\u0537\7)\2\2\u052f\u0537\78\2\2\u0530\u0537\7I\2\2\u0531")
        buf.write("\u0537\7\"\2\2\u0532\u0537\7\31\2\2\u0533\u0537\7L\2\2")
        buf.write("\u0534\u0537\7\b\2\2\u0535\u0537\5\u0092J\2\u0536\u0520")
        buf.write("\3\2\2\2\u0536\u0523\3\2\2\2\u0536\u0527\3\2\2\2\u0536")
        buf.write("\u0528\3\2\2\2\u0536\u0529\3\2\2\2\u0536\u052a\3\2\2\2")
        buf.write("\u0536\u052b\3\2\2\2\u0536\u052c\3\2\2\2\u0536\u052d\3")
        buf.write("\2\2\2\u0536\u052e\3\2\2\2\u0536\u052f\3\2\2\2\u0536\u0530")
        buf.write("\3\2\2\2\u0536\u0531\3\2\2\2\u0536\u0532\3\2\2\2\u0536")
        buf.write("\u0533\3\2\2\2\u0536\u0534\3\2\2\2\u0536\u0535\3\2\2\2")
        buf.write("\u0537\u008f\3\2\2\2\u0538\u053c\5\u0104\u0083\2\u0539")
        buf.write("\u053c\7\177\2\2\u053a\u053c\5\u0142\u00a2\2\u053b\u0538")
        buf.write("\3\2\2\2\u053b\u0539\3\2\2\2\u053b\u053a\3\2\2\2\u053c")
        buf.write("\u0091\3\2\2\2\u053d\u053e\7\25\2\2\u053e\u053f\7P\2\2")
        buf.write("\u053f\u0540\5R*\2\u0540\u0541\7Q\2\2\u0541\u0547\3\2")
        buf.write("\2\2\u0542\u0543\7\25\2\2\u0543\u0544\7P\2\2\u0544\u0545")
        buf.write("\7\b\2\2\u0545\u0547\7Q\2\2\u0546\u053d\3\2\2\2\u0546")
        buf.write("\u0542\3\2\2\2\u0547\u0093\3\2\2\2\u0548\u054a\5\u0096")
        buf.write("L\2\u0549\u054b\5\u00b6\\\2\u054a\u0549\3\2\2\2\u054a")
        buf.write("\u054b\3\2\2\2\u054b\u054d\3\2\2\2\u054c\u054e\7\177\2")
        buf.write("\2\u054d\u054c\3\2\2\2\u054d\u054e\3\2\2\2\u054e\u0550")
        buf.write("\3\2\2\2\u054f\u0551\5\u0098M\2\u0550\u054f\3\2\2\2\u0550")
        buf.write("\u0551\3\2\2\2\u0551\u055c\3\2\2\2\u0552\u0554\5\u0096")
        buf.write("L\2\u0553\u0555\5\u00b6\\\2\u0554\u0553\3\2\2\2\u0554")
        buf.write("\u0555\3\2\2\2\u0555\u0556\3\2\2\2\u0556\u0557\5\16\b")
        buf.write("\2\u0557\u0559\7\177\2\2\u0558\u055a\5\u0098M\2\u0559")
        buf.write("\u0558\3\2\2\2\u0559\u055a\3\2\2\2\u055a\u055c\3\2\2\2")
        buf.write("\u055b\u0548\3\2\2\2\u055b\u0552\3\2\2\2\u055c\u0095\3")
        buf.write("\2\2\2\u055d\u0563\7\34\2\2\u055e\u055f\7\34\2\2\u055f")
        buf.write("\u0563\7\20\2\2\u0560\u0561\7\34\2\2\u0561\u0563\7=\2")
        buf.write("\2\u0562\u055d\3\2\2\2\u0562\u055e\3\2\2\2\u0562\u0560")
        buf.write("\3\2\2\2\u0563\u0097\3\2\2\2\u0564\u0565\7y\2\2\u0565")
        buf.write("\u0566\5\u008aF\2\u0566\u0099\3\2\2\2\u0567\u0568\bN\1")
        buf.write("\2\u0568\u0569\5\u009cO\2\u0569\u056f\3\2\2\2\u056a\u056b")
        buf.write("\f\3\2\2\u056b\u056c\7u\2\2\u056c\u056e\5\u009cO\2\u056d")
        buf.write("\u056a\3\2\2\2\u056e\u0571\3\2\2\2\u056f\u056d\3\2\2\2")
        buf.write("\u056f\u0570\3\2\2\2\u0570\u009b\3\2\2\2\u0571\u056f\3")
        buf.write("\2\2\2\u0572\u0578\5\u009eP\2\u0573\u0574\5\u009eP\2\u0574")
        buf.write("\u0575\7`\2\2\u0575\u0576\5T+\2\u0576\u0578\3\2\2\2\u0577")
        buf.write("\u0572\3\2\2\2\u0577\u0573\3\2\2\2\u0578\u009d\3\2\2\2")
        buf.write("\u0579\u057a\7\177\2\2\u057a\u009f\3\2\2\2\u057b\u057e")
        buf.write("\5\u00a2R\2\u057c\u057e\5\u00aaV\2\u057d\u057b\3\2\2\2")
        buf.write("\u057d\u057c\3\2\2\2\u057e\u00a1\3\2\2\2\u057f\u0580\7")
        buf.write("\177\2\2\u0580\u00a3\3\2\2\2\u0581\u058b\5\u00a6T\2\u0582")
        buf.write("\u0584\7\'\2\2\u0583\u0582\3\2\2\2\u0583\u0584\3\2\2\2")
        buf.write("\u0584\u0585\3\2\2\2\u0585\u0586\7+\2\2\u0586\u0587\7")
        buf.write("T\2\2\u0587\u0588\5\u00a8U\2\u0588\u0589\7U\2\2\u0589")
        buf.write("\u058b\3\2\2\2\u058a\u0581\3\2\2\2\u058a\u0583\3\2\2\2")
        buf.write("\u058b\u00a5\3\2\2\2\u058c\u058e\7\'\2\2\u058d\u058c\3")
        buf.write("\2\2\2\u058d\u058e\3\2\2\2\u058e\u058f\3\2\2\2\u058f\u0590")
        buf.write("\7+\2\2\u0590\u0591\7\177\2\2\u0591\u0592\7T\2\2\u0592")
        buf.write("\u0593\5\u00a8U\2\u0593\u0594\7U\2\2\u0594\u059f\3\2\2")
        buf.write("\2\u0595\u0597\7\'\2\2\u0596\u0595\3\2\2\2\u0596\u0597")
        buf.write("\3\2\2\2\u0597\u0598\3\2\2\2\u0598\u0599\7+\2\2\u0599")
        buf.write("\u059a\5\u00a2R\2\u059a\u059b\7T\2\2\u059b\u059c\5\u00a8")
        buf.write("U\2\u059c\u059d\7U\2\2\u059d\u059f\3\2\2\2\u059e\u058d")
        buf.write("\3\2\2\2\u059e\u0596\3\2\2\2\u059f\u00a7\3\2\2\2\u05a0")
        buf.write("\u05a2\5t;\2\u05a1\u05a0\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2")
        buf.write("\u00a9\3\2\2\2\u05a3\u05a4\7\177\2\2\u05a4\u00ab\3\2\2")
        buf.write("\2\u05a5\u05a7\5\16\b\2\u05a6\u05a5\3\2\2\2\u05a6\u05a7")
        buf.write("\3\2\2\2\u05a7\u05a8\3\2\2\2\u05a8\u05a9\5\u00a0Q\2\u05a9")
        buf.write("\u00ad\3\2\2\2\u05aa\u05ac\7J\2\2\u05ab\u05ad\7G\2\2\u05ac")
        buf.write("\u05ab\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad\u05ae\3\2\2\2")
        buf.write("\u05ae\u05af\5\16\b\2\u05af\u05b0\5\n\6\2\u05b0\u05b1")
        buf.write("\7{\2\2\u05b1\u05b8\3\2\2\2\u05b2\u05b3\7J\2\2\u05b3\u05b4")
        buf.write("\7z\2\2\u05b4\u05b5\5\n\6\2\u05b5\u05b6\7{\2\2\u05b6\u05b8")
        buf.write("\3\2\2\2\u05b7\u05aa\3\2\2\2\u05b7\u05b2\3\2\2\2\u05b8")
        buf.write("\u00af\3\2\2\2\u05b9\u05bb\5\u00b6\\\2\u05ba\u05b9\3\2")
        buf.write("\2\2\u05ba\u05bb\3\2\2\2\u05bb\u05bc\3\2\2\2\u05bc\u05bd")
        buf.write("\7J\2\2\u05bd\u05bf\7+\2\2\u05be\u05c0\5\16\b\2\u05bf")
        buf.write("\u05be\3\2\2\2\u05bf\u05c0\3\2\2\2\u05c0\u05c1\3\2\2\2")
        buf.write("\u05c1\u05c2\5\u00a0Q\2\u05c2\u05c3\7{\2\2\u05c3\u00b1")
        buf.write("\3\2\2\2\u05c4\u05c5\7\7\2\2\u05c5\u05c6\7P\2\2\u05c6")
        buf.write("\u05c7\7\u0088\2\2\u05c7\u05c8\7Q\2\2\u05c8\u05c9\7{\2")
        buf.write("\2\u05c9\u00b3\3\2\2\2\u05ca\u05cb\7\37\2\2\u05cb\u05cc")
        buf.write("\7\u0088\2\2\u05cc\u05ce\7T\2\2\u05cd\u05cf\5t;\2\u05ce")
        buf.write("\u05cd\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf\u05d0\3\2\2\2")
        buf.write("\u05d0\u05d5\7U\2\2\u05d1\u05d2\7\37\2\2\u05d2\u05d3\7")
        buf.write("\u0088\2\2\u05d3\u05d5\5v<\2\u05d4\u05ca\3\2\2\2\u05d4")
        buf.write("\u05d1\3\2\2\2\u05d5\u00b5\3\2\2\2\u05d6\u05d7\b\\\1\2")
        buf.write("\u05d7\u05d8\5\u00b8]\2\u05d8\u05dd\3\2\2\2\u05d9\u05da")
        buf.write("\f\3\2\2\u05da\u05dc\5\u00b8]\2\u05db\u05d9\3\2\2\2\u05dc")
        buf.write("\u05df\3\2\2\2\u05dd\u05db\3\2\2\2\u05dd\u05de\3\2\2\2")
        buf.write("\u05de\u00b7\3\2\2\2\u05df\u05dd\3\2\2\2\u05e0\u05e1\7")
        buf.write("R\2\2\u05e1\u05e2\7R\2\2\u05e2\u05e3\5\u00bc_\2\u05e3")
        buf.write("\u05e4\7S\2\2\u05e4\u05e5\7S\2\2\u05e5\u05e8\3\2\2\2\u05e6")
        buf.write("\u05e8\5\u00ba^\2\u05e7\u05e0\3\2\2\2\u05e7\u05e6\3\2")
        buf.write("\2\2\u05e8\u00b9\3\2\2\2\u05e9\u05ea\7\5\2\2\u05ea\u05eb")
        buf.write("\7P\2\2\u05eb\u05ed\5\u00e4s\2\u05ec\u05ee\7~\2\2\u05ed")
        buf.write("\u05ec\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ee\u05ef\3\2\2\2")
        buf.write("\u05ef\u05f0\7Q\2\2\u05f0\u05fa\3\2\2\2\u05f1\u05f2\7")
        buf.write("\5\2\2\u05f2\u05f3\7P\2\2\u05f3\u05f5\5T+\2\u05f4\u05f6")
        buf.write("\7~\2\2\u05f5\u05f4\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6")
        buf.write("\u05f7\3\2\2\2\u05f7\u05f8\7Q\2\2\u05f8\u05fa\3\2\2\2")
        buf.write("\u05f9\u05e9\3\2\2\2\u05f9\u05f1\3\2\2\2\u05fa\u00bb\3")
        buf.write("\2\2\2\u05fb\u05fd\b_\1\2\u05fc\u05fe\5\u00be`\2\u05fd")
        buf.write("\u05fc\3\2\2\2\u05fd\u05fe\3\2\2\2\u05fe\u0603\3\2\2\2")
        buf.write("\u05ff\u0600\5\u00be`\2\u0600\u0601\7~\2\2\u0601\u0603")
        buf.write("\3\2\2\2\u0602\u05fb\3\2\2\2\u0602\u05ff\3\2\2\2\u0603")
        buf.write("\u0610\3\2\2\2\u0604\u0605\f\5\2\2\u0605\u0607\7u\2\2")
        buf.write("\u0606\u0608\5\u00be`\2\u0607\u0606\3\2\2\2\u0607\u0608")
        buf.write("\3\2\2\2\u0608\u060f\3\2\2\2\u0609\u060a\f\3\2\2\u060a")
        buf.write("\u060b\7u\2\2\u060b\u060c\5\u00be`\2\u060c\u060d\7~\2")
        buf.write("\2\u060d\u060f\3\2\2\2\u060e\u0604\3\2\2\2\u060e\u0609")
        buf.write("\3\2\2\2\u060f\u0612\3\2\2\2\u0610\u060e\3\2\2\2\u0610")
        buf.write("\u0611\3\2\2\2\u0611\u00bd\3\2\2\2\u0612\u0610\3\2\2\2")
        buf.write("\u0613\u0615\5\u00c0a\2\u0614\u0616\5\u00c6d\2\u0615\u0614")
        buf.write("\3\2\2\2\u0615\u0616\3\2\2\2\u0616\u00bf\3\2\2\2\u0617")
        buf.write("\u061a\7\177\2\2\u0618\u061a\5\u00c2b\2\u0619\u0617\3")
        buf.write("\2\2\2\u0619\u0618\3\2\2\2\u061a\u00c1\3\2\2\2\u061b\u061c")
        buf.write("\5\u00c4c\2\u061c\u061d\7z\2\2\u061d\u061e\7\177\2\2\u061e")
        buf.write("\u00c3\3\2\2\2\u061f\u0620\7\177\2\2\u0620\u00c5\3\2\2")
        buf.write("\2\u0621\u0622\7P\2\2\u0622\u0623\5\u00c8e\2\u0623\u0624")
        buf.write("\7Q\2\2\u0624\u00c7\3\2\2\2\u0625\u0627\be\1\2\u0626\u0628")
        buf.write("\5\u00caf\2\u0627\u0626\3\2\2\2\u0627\u0628\3\2\2\2\u0628")
        buf.write("\u062d\3\2\2\2\u0629\u062a\f\3\2\2\u062a\u062c\5\u00ca")
        buf.write("f\2\u062b\u0629\3\2\2\2\u062c\u062f\3\2\2\2\u062d\u062b")
        buf.write("\3\2\2\2\u062d\u062e\3\2\2\2\u062e\u00c9\3\2\2\2\u062f")
        buf.write("\u062d\3\2\2\2\u0630\u0631\7P\2\2\u0631\u0632\5\u00c8")
        buf.write("e\2\u0632\u0633\7Q\2\2\u0633\u063d\3\2\2\2\u0634\u0635")
        buf.write("\7R\2\2\u0635\u0636\5\u00c8e\2\u0636\u0637\7S\2\2\u0637")
        buf.write("\u063d\3\2\2\2\u0638\u0639\7T\2\2\u0639\u063a\5\u00c8")
        buf.write("e\2\u063a\u063b\7U\2\2\u063b\u063d\3\2\2\2\u063c\u0630")
        buf.write("\3\2\2\2\u063c\u0634\3\2\2\2\u063c\u0638\3\2\2\2\u063d")
        buf.write("\u00cb\3\2\2\2\u063e\u063f\bg\1\2\u063f\u0640\5\u00ce")
        buf.write("h\2\u0640\u0646\3\2\2\2\u0641\u0642\f\3\2\2\u0642\u0643")
        buf.write("\7u\2\2\u0643\u0645\5\u00ceh\2\u0644\u0641\3\2\2\2\u0645")
        buf.write("\u0648\3\2\2\2\u0646\u0644\3\2\2\2\u0646\u0647\3\2\2\2")
        buf.write("\u0647\u00cd\3\2\2\2\u0648\u0646\3\2\2\2\u0649\u064b\5")
        buf.write("\u00d0i\2\u064a\u064c\5\u00fa~\2\u064b\u064a\3\2\2\2\u064b")
        buf.write("\u064c\3\2\2\2\u064c\u00cf\3\2\2\2\u064d\u0653\5\u00d2")
        buf.write("j\2\u064e\u064f\5\u00d4k\2\u064f\u0650\5\u00d6l\2\u0650")
        buf.write("\u0651\5\u00d8m\2\u0651\u0653\3\2\2\2\u0652\u064d\3\2")
        buf.write("\2\2\u0652\u064e\3\2\2\2\u0653\u00d1\3\2\2\2\u0654\u0659")
        buf.write("\5\u00d4k\2\u0655\u0656\5\u00dan\2\u0656\u0657\5\u00d2")
        buf.write("j\2\u0657\u0659\3\2\2\2\u0658\u0654\3\2\2\2\u0658\u0655")
        buf.write("\3\2\2\2\u0659\u00d3\3\2\2\2\u065a\u065b\bk\1\2\u065b")
        buf.write("\u065d\5\u00e2r\2\u065c\u065e\5\u00b6\\\2\u065d\u065c")
        buf.write("\3\2\2\2\u065d\u065e\3\2\2\2\u065e\u0664\3\2\2\2\u065f")
        buf.write("\u0660\7P\2\2\u0660\u0661\5\u00d2j\2\u0661\u0662\7Q\2")
        buf.write("\2\u0662\u0664\3\2\2\2\u0663\u065a\3\2\2\2\u0663\u065f")
        buf.write("\3\2\2\2\u0664\u0672\3\2\2\2\u0665\u0666\f\5\2\2\u0666")
        buf.write("\u0671\5\u00d6l\2\u0667\u0668\f\4\2\2\u0668\u066a\7R\2")
        buf.write("\2\u0669\u066b\5T+\2\u066a\u0669\3\2\2\2\u066a\u066b\3")
        buf.write("\2\2\2\u066b\u066c\3\2\2\2\u066c\u066e\7S\2\2\u066d\u066f")
        buf.write("\5\u00b6\\\2\u066e\u066d\3\2\2\2\u066e\u066f\3\2\2\2\u066f")
        buf.write("\u0671\3\2\2\2\u0670\u0665\3\2\2\2\u0670\u0667\3\2\2\2")
        buf.write("\u0671\u0674\3\2\2\2\u0672\u0670\3\2\2\2\u0672\u0673\3")
        buf.write("\2\2\2\u0673\u00d5\3\2\2\2\u0674\u0672\3\2\2\2\u0675\u0676")
        buf.write("\7P\2\2\u0676\u0677\5\u00f0y\2\u0677\u0679\7Q\2\2\u0678")
        buf.write("\u067a\5\u00dco\2\u0679\u0678\3\2\2\2\u0679\u067a\3\2")
        buf.write("\2\2\u067a\u067c\3\2\2\2\u067b\u067d\5\u00e0q\2\u067c")
        buf.write("\u067b\3\2\2\2\u067c\u067d\3\2\2\2\u067d\u067f\3\2\2\2")
        buf.write("\u067e\u0680\5\u015e\u00b0\2\u067f\u067e\3\2\2\2\u067f")
        buf.write("\u0680\3\2\2\2\u0680\u0682\3\2\2\2\u0681\u0683\5\u00b6")
        buf.write("\\\2\u0682\u0681\3\2\2\2\u0682\u0683\3\2\2\2\u0683\u00d7")
        buf.write("\3\2\2\2\u0684\u0685\7w\2\2\u0685\u0687\5\u008cG\2\u0686")
        buf.write("\u0688\5\u00e6t\2\u0687\u0686\3\2\2\2\u0687\u0688\3\2")
        buf.write("\2\2\u0688\u00d9\3\2\2\2\u0689\u068b\7X\2\2\u068a\u068c")
        buf.write("\5\u00b6\\\2\u068b\u068a\3\2\2\2\u068b\u068c\3\2\2\2\u068c")
        buf.write("\u068e\3\2\2\2\u068d\u068f\5\u00dco\2\u068e\u068d\3\2")
        buf.write("\2\2\u068e\u068f\3\2\2\2\u068f\u06a1\3\2\2\2\u0690\u0692")
        buf.write("\7\\\2\2\u0691\u0693\5\u00b6\\\2\u0692\u0691\3\2\2\2\u0692")
        buf.write("\u0693\3\2\2\2\u0693\u06a1\3\2\2\2\u0694\u0696\7q\2\2")
        buf.write("\u0695\u0697\5\u00b6\\\2\u0696\u0695\3\2\2\2\u0696\u0697")
        buf.write("\3\2\2\2\u0697\u06a1\3\2\2\2\u0698\u0699\5\16\b\2\u0699")
        buf.write("\u069b\7X\2\2\u069a\u069c\5\u00b6\\\2\u069b\u069a\3\2")
        buf.write("\2\2\u069b\u069c\3\2\2\2\u069c\u069e\3\2\2\2\u069d\u069f")
        buf.write("\5\u00dco\2\u069e\u069d\3\2\2\2\u069e\u069f\3\2\2\2\u069f")
        buf.write("\u06a1\3\2\2\2\u06a0\u0689\3\2\2\2\u06a0\u0690\3\2\2\2")
        buf.write("\u06a0\u0694\3\2\2\2\u06a0\u0698\3\2\2\2\u06a1\u00db\3")
        buf.write("\2\2\2\u06a2\u06a4\5\u00dep\2\u06a3\u06a5\5\u00dco\2\u06a4")
        buf.write("\u06a3\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5\u00dd\3\2\2\2")
        buf.write("\u06a6\u06a7\t\4\2\2\u06a7\u00df\3\2\2\2\u06a8\u06a9\t")
        buf.write("\5\2\2\u06a9\u00e1\3\2\2\2\u06aa\u06ac\7~\2\2\u06ab\u06aa")
        buf.write("\3\2\2\2\u06ab\u06ac\3\2\2\2\u06ac\u06ad\3\2\2\2\u06ad")
        buf.write("\u06ae\5\b\5\2\u06ae\u00e3\3\2\2\2\u06af\u06b1\5\u008a")
        buf.write("F\2\u06b0\u06b2\5\u00e6t\2\u06b1\u06b0\3\2\2\2\u06b1\u06b2")
        buf.write("\3\2\2\2\u06b2\u00e5\3\2\2\2\u06b3\u06bc\5\u00e8u\2\u06b4")
        buf.write("\u06b6\5\u00eav\2\u06b5\u06b4\3\2\2\2\u06b5\u06b6\3\2")
        buf.write("\2\2\u06b6\u06b7\3\2\2\2\u06b7\u06b8\5\u00d6l\2\u06b8")
        buf.write("\u06b9\5\u00d8m\2\u06b9\u06bc\3\2\2\2\u06ba\u06bc\5\u00ec")
        buf.write("w\2\u06bb\u06b3\3\2\2\2\u06bb\u06b5\3\2\2\2\u06bb\u06ba")
        buf.write("\3\2\2\2\u06bc\u00e7\3\2\2\2\u06bd\u06c3\5\u00eav\2\u06be")
        buf.write("\u06c0\5\u00dan\2\u06bf\u06c1\5\u00e8u\2\u06c0\u06bf\3")
        buf.write("\2\2\2\u06c0\u06c1\3\2\2\2\u06c1\u06c3\3\2\2\2\u06c2\u06bd")
        buf.write("\3\2\2\2\u06c2\u06be\3\2\2\2\u06c3\u00e9\3\2\2\2\u06c4")
        buf.write("\u06c5\bv\1\2\u06c5\u06d3\5\u00d6l\2\u06c6\u06c8\7R\2")
        buf.write("\2\u06c7\u06c9\5T+\2\u06c8\u06c7\3\2\2\2\u06c8\u06c9\3")
        buf.write("\2\2\2\u06c9\u06ca\3\2\2\2\u06ca\u06cc\7S\2\2\u06cb\u06cd")
        buf.write("\5\u00b6\\\2\u06cc\u06cb\3\2\2\2\u06cc\u06cd\3\2\2\2\u06cd")
        buf.write("\u06d3\3\2\2\2\u06ce\u06cf\7P\2\2\u06cf\u06d0\5\u00e8")
        buf.write("u\2\u06d0\u06d1\7Q\2\2\u06d1\u06d3\3\2\2\2\u06d2\u06c4")
        buf.write("\3\2\2\2\u06d2\u06c6\3\2\2\2\u06d2\u06ce\3\2\2\2\u06d3")
        buf.write("\u06e1\3\2\2\2\u06d4\u06d5\f\7\2\2\u06d5\u06e0\5\u00d6")
        buf.write("l\2\u06d6\u06d7\f\5\2\2\u06d7\u06d9\7R\2\2\u06d8\u06da")
        buf.write("\5T+\2\u06d9\u06d8\3\2\2\2\u06d9\u06da\3\2\2\2\u06da\u06db")
        buf.write("\3\2\2\2\u06db\u06dd\7S\2\2\u06dc\u06de\5\u00b6\\\2\u06dd")
        buf.write("\u06dc\3\2\2\2\u06dd\u06de\3\2\2\2\u06de\u06e0\3\2\2\2")
        buf.write("\u06df\u06d4\3\2\2\2\u06df\u06d6\3\2\2\2\u06e0\u06e3\3")
        buf.write("\2\2\2\u06e1\u06df\3\2\2\2\u06e1\u06e2\3\2\2\2\u06e2\u00eb")
        buf.write("\3\2\2\2\u06e3\u06e1\3\2\2\2\u06e4\u06e9\5\u00eex\2\u06e5")
        buf.write("\u06e6\5\u00dan\2\u06e6\u06e7\5\u00ecw\2\u06e7\u06e9\3")
        buf.write("\2\2\2\u06e8\u06e4\3\2\2\2\u06e8\u06e5\3\2\2\2\u06e9\u00ed")
        buf.write("\3\2\2\2\u06ea\u06eb\bx\1\2\u06eb\u06ec\7~\2\2\u06ec\u06fa")
        buf.write("\3\2\2\2\u06ed\u06ee\f\5\2\2\u06ee\u06f9\5\u00d6l\2\u06ef")
        buf.write("\u06f0\f\4\2\2\u06f0\u06f2\7R\2\2\u06f1\u06f3\5T+\2\u06f2")
        buf.write("\u06f1\3\2\2\2\u06f2\u06f3\3\2\2\2\u06f3\u06f4\3\2\2\2")
        buf.write("\u06f4\u06f6\7S\2\2\u06f5\u06f7\5\u00b6\\\2\u06f6\u06f5")
        buf.write("\3\2\2\2\u06f6\u06f7\3\2\2\2\u06f7\u06f9\3\2\2\2\u06f8")
        buf.write("\u06ed\3\2\2\2\u06f8\u06ef\3\2\2\2\u06f9\u06fc\3\2\2\2")
        buf.write("\u06fa\u06f8\3\2\2\2\u06fa\u06fb\3\2\2\2\u06fb\u00ef\3")
        buf.write("\2\2\2\u06fc\u06fa\3\2\2\2\u06fd\u06ff\5\u00f2z\2\u06fe")
        buf.write("\u06fd\3\2\2\2\u06fe\u06ff\3\2\2\2\u06ff\u0701\3\2\2\2")
        buf.write("\u0700\u0702\7~\2\2\u0701\u0700\3\2\2\2\u0701\u0702\3")
        buf.write("\2\2\2\u0702\u0708\3\2\2\2\u0703\u0704\5\u00f2z\2\u0704")
        buf.write("\u0705\7u\2\2\u0705\u0706\7~\2\2\u0706\u0708\3\2\2\2\u0707")
        buf.write("\u06fe\3\2\2\2\u0707\u0703\3\2\2\2\u0708\u00f1\3\2\2\2")
        buf.write("\u0709\u070a\bz\1\2\u070a\u070b\5\u00f4{\2\u070b\u0711")
        buf.write("\3\2\2\2\u070c\u070d\f\3\2\2\u070d\u070e\7u\2\2\u070e")
        buf.write("\u0710\5\u00f4{\2\u070f\u070c\3\2\2\2\u0710\u0713\3\2")
        buf.write("\2\2\u0711\u070f\3\2\2\2\u0711\u0712\3\2\2\2\u0712\u00f3")
        buf.write("\3\2\2\2\u0713\u0711\3\2\2\2\u0714\u0716\5\u00b6\\\2\u0715")
        buf.write("\u0714\3\2\2\2\u0715\u0716\3\2\2\2\u0716\u0717\3\2\2\2")
        buf.write("\u0717\u0718\5\u0084C\2\u0718\u0719\5\u00d0i\2\u0719\u0734")
        buf.write("\3\2\2\2\u071a\u071c\5\u00b6\\\2\u071b\u071a\3\2\2\2\u071b")
        buf.write("\u071c\3\2\2\2\u071c\u071d\3\2\2\2\u071d\u071e\5\u0084")
        buf.write("C\2\u071e\u071f\5\u00d0i\2\u071f\u0720\7`\2\2\u0720\u0721")
        buf.write("\5\u00fe\u0080\2\u0721\u0734\3\2\2\2\u0722\u0724\5\u00b6")
        buf.write("\\\2\u0723\u0722\3\2\2\2\u0723\u0724\3\2\2\2\u0724\u0725")
        buf.write("\3\2\2\2\u0725\u0727\5\u0084C\2\u0726\u0728\5\u00e6t\2")
        buf.write("\u0727\u0726\3\2\2\2\u0727\u0728\3\2\2\2\u0728\u0734\3")
        buf.write("\2\2\2\u0729\u072b\5\u00b6\\\2\u072a\u0729\3\2\2\2\u072a")
        buf.write("\u072b\3\2\2\2\u072b\u072c\3\2\2\2\u072c\u072e\5\u0084")
        buf.write("C\2\u072d\u072f\5\u00e6t\2\u072e\u072d\3\2\2\2\u072e\u072f")
        buf.write("\3\2\2\2\u072f\u0730\3\2\2\2\u0730\u0731\7`\2\2\u0731")
        buf.write("\u0732\5\u00fe\u0080\2\u0732\u0734\3\2\2\2\u0733\u0715")
        buf.write("\3\2\2\2\u0733\u071b\3\2\2\2\u0733\u0723\3\2\2\2\u0733")
        buf.write("\u072a\3\2\2\2\u0734\u00f5\3\2\2\2\u0735\u0737\5\u00b6")
        buf.write("\\\2\u0736\u0735\3\2\2\2\u0736\u0737\3\2\2\2\u0737\u0739")
        buf.write("\3\2\2\2\u0738\u073a\5\u0084C\2\u0739\u0738\3\2\2\2\u0739")
        buf.write("\u073a\3\2\2\2\u073a\u073b\3\2\2\2\u073b\u073d\5\u00d0")
        buf.write("i\2\u073c\u073e\5\u0118\u008d\2\u073d\u073c\3\2\2\2\u073d")
        buf.write("\u073e\3\2\2\2\u073e\u073f\3\2\2\2\u073f\u0740\5\u00f8")
        buf.write("}\2\u0740\u00f7\3\2\2\2\u0741\u0743\5\u0130\u0099\2\u0742")
        buf.write("\u0741\3\2\2\2\u0742\u0743\3\2\2\2\u0743\u0744\3\2\2\2")
        buf.write("\u0744\u074d\5^\60\2\u0745\u074d\5\u0154\u00ab\2\u0746")
        buf.write("\u0747\7`\2\2\u0747\u0748\7\26\2\2\u0748\u074d\7{\2\2")
        buf.write("\u0749\u074a\7`\2\2\u074a\u074b\7\27\2\2\u074b\u074d\7")
        buf.write("{\2\2\u074c\u0742\3\2\2\2\u074c\u0745\3\2\2\2\u074c\u0746")
        buf.write("\3\2\2\2\u074c\u0749\3\2\2\2\u074d\u00f9\3\2\2\2\u074e")
        buf.write("\u0754\5\u00fc\177\2\u074f\u0750\7P\2\2\u0750\u0751\5")
        buf.write("\32\16\2\u0751\u0752\7Q\2\2\u0752\u0754\3\2\2\2\u0753")
        buf.write("\u074e\3\2\2\2\u0753\u074f\3\2\2\2\u0754\u00fb\3\2\2\2")
        buf.write("\u0755\u0756\7`\2\2\u0756\u0759\5\u00fe\u0080\2\u0757")
        buf.write("\u0759\5\u0102\u0082\2\u0758\u0755\3\2\2\2\u0758\u0757")
        buf.write("\3\2\2\2\u0759\u00fd\3\2\2\2\u075a\u075d\5N(\2\u075b\u075d")
        buf.write("\5\u0102\u0082\2\u075c\u075a\3\2\2\2\u075c\u075b\3\2\2")
        buf.write("\2\u075d\u00ff\3\2\2\2\u075e\u075f\b\u0081\1\2\u075f\u0761")
        buf.write("\5\u00fe\u0080\2\u0760\u0762\7~\2\2\u0761\u0760\3\2\2")
        buf.write("\2\u0761\u0762\3\2\2\2\u0762\u076b\3\2\2\2\u0763\u0764")
        buf.write("\f\3\2\2\u0764\u0765\7u\2\2\u0765\u0767\5\u00fe\u0080")
        buf.write("\2\u0766\u0768\7~\2\2\u0767\u0766\3\2\2\2\u0767\u0768")
        buf.write("\3\2\2\2\u0768\u076a\3\2\2\2\u0769\u0763\3\2\2\2\u076a")
        buf.write("\u076d\3\2\2\2\u076b\u0769\3\2\2\2\u076b\u076c\3\2\2\2")
        buf.write("\u076c\u0101\3\2\2\2\u076d\u076b\3\2\2\2\u076e\u076f\7")
        buf.write("T\2\2\u076f\u0771\5\u0100\u0081\2\u0770\u0772\7u\2\2\u0771")
        buf.write("\u0770\3\2\2\2\u0771\u0772\3\2\2\2\u0772\u0773\3\2\2\2")
        buf.write("\u0773\u0774\7U\2\2\u0774\u0778\3\2\2\2\u0775\u0776\7")
        buf.write("T\2\2\u0776\u0778\7U\2\2\u0777\u076e\3\2\2\2\u0777\u0775")
        buf.write("\3\2\2\2\u0778\u0103\3\2\2\2\u0779\u077c\7\177\2\2\u077a")
        buf.write("\u077c\5\u0142\u00a2\2\u077b\u0779\3\2\2\2\u077b\u077a")
        buf.write("\3\2\2\2\u077c\u0105\3\2\2\2\u077d\u077e\5\u0108\u0085")
        buf.write("\2\u077e\u0780\7T\2\2\u077f\u0781\5\u0110\u0089\2\u0780")
        buf.write("\u077f\3\2\2\2\u0780\u0781\3\2\2\2\u0781\u0782\3\2\2\2")
        buf.write("\u0782\u0783\7U\2\2\u0783\u0107\3\2\2\2\u0784\u0786\5")
        buf.write("\u010e\u0088\2\u0785\u0787\5\u00b6\\\2\u0786\u0785\3\2")
        buf.write("\2\2\u0786\u0787\3\2\2\2\u0787\u0788\3\2\2\2\u0788\u078a")
        buf.write("\5\u010a\u0086\2\u0789\u078b\5\u010c\u0087\2\u078a\u0789")
        buf.write("\3\2\2\2\u078a\u078b\3\2\2\2\u078b\u078d\3\2\2\2\u078c")
        buf.write("\u078e\5\u011e\u0090\2\u078d\u078c\3\2\2\2\u078d\u078e")
        buf.write("\3\2\2\2\u078e\u0797\3\2\2\2\u078f\u0791\5\u010e\u0088")
        buf.write("\2\u0790\u0792\5\u00b6\\\2\u0791\u0790\3\2\2\2\u0791\u0792")
        buf.write("\3\2\2\2\u0792\u0794\3\2\2\2\u0793\u0795\5\u011e\u0090")
        buf.write("\2\u0794\u0793\3\2\2\2\u0794\u0795\3\2\2\2\u0795\u0797")
        buf.write("\3\2\2\2\u0796\u0784\3\2\2\2\u0796\u078f\3\2\2\2\u0797")
        buf.write("\u0109\3\2\2\2\u0798\u079a\5\16\b\2\u0799\u0798\3\2\2")
        buf.write("\2\u0799\u079a\3\2\2\2\u079a\u079b\3\2\2\2\u079b\u079c")
        buf.write("\5\u0104\u0083\2\u079c\u010b\3\2\2\2\u079d\u079e\7!\2")
        buf.write("\2\u079e\u010d\3\2\2\2\u079f\u07a0\t\6\2\2\u07a0\u010f")
        buf.write("\3\2\2\2\u07a1\u07a3\5\u0112\u008a\2\u07a2\u07a4\5\u0110")
        buf.write("\u0089\2\u07a3\u07a2\3\2\2\2\u07a3\u07a4\3\2\2\2\u07a4")
        buf.write("\u07ab\3\2\2\2\u07a5\u07a6\5\u0128\u0095\2\u07a6\u07a8")
        buf.write("\7y\2\2\u07a7\u07a9\5\u0110\u0089\2\u07a8\u07a7\3\2\2")
        buf.write("\2\u07a8\u07a9\3\2\2\2\u07a9\u07ab\3\2\2\2\u07aa\u07a1")
        buf.write("\3\2\2\2\u07aa\u07a5\3\2\2\2\u07ab\u0111\3\2\2\2\u07ac")
        buf.write("\u07ae\5\u00b6\\\2\u07ad\u07ac\3\2\2\2\u07ad\u07ae\3\2")
        buf.write("\2\2\u07ae\u07b0\3\2\2\2\u07af\u07b1\5\u0084C\2\u07b0")
        buf.write("\u07af\3\2\2\2\u07b0\u07b1\3\2\2\2\u07b1\u07b3\3\2\2\2")
        buf.write("\u07b2\u07b4\5\u0114\u008b\2\u07b3\u07b2\3\2\2\2\u07b3")
        buf.write("\u07b4\3\2\2\2\u07b4\u07b5\3\2\2\2\u07b5\u07bd\7{\2\2")
        buf.write("\u07b6\u07bd\5\u00f6|\2\u07b7\u07bd\5\u00aeX\2\u07b8\u07bd")
        buf.write("\5~@\2\u07b9\u07bd\5\u013c\u009f\2\u07ba\u07bd\5z>\2\u07bb")
        buf.write("\u07bd\5\u0080A\2\u07bc\u07ad\3\2\2\2\u07bc\u07b6\3\2")
        buf.write("\2\2\u07bc\u07b7\3\2\2\2\u07bc\u07b8\3\2\2\2\u07bc\u07b9")
        buf.write("\3\2\2\2\u07bc\u07ba\3\2\2\2\u07bc\u07bb\3\2\2\2\u07bd")
        buf.write("\u0113\3\2\2\2\u07be\u07bf\b\u008b\1\2\u07bf\u07c0\5\u0116")
        buf.write("\u008c\2\u07c0\u07c6\3\2\2\2\u07c1\u07c2\f\3\2\2\u07c2")
        buf.write("\u07c3\7u\2\2\u07c3\u07c5\5\u0116\u008c\2\u07c4\u07c1")
        buf.write("\3\2\2\2\u07c5\u07c8\3\2\2\2\u07c6\u07c4\3\2\2\2\u07c6")
        buf.write("\u07c7\3\2\2\2\u07c7\u0115\3\2\2\2\u07c8\u07c6\3\2\2\2")
        buf.write("\u07c9\u07cb\5\u00d0i\2\u07ca\u07cc\5\u0118\u008d\2\u07cb")
        buf.write("\u07ca\3\2\2\2\u07cb\u07cc\3\2\2\2\u07cc\u07ce\3\2\2\2")
        buf.write("\u07cd\u07cf\5\u011c\u008f\2\u07ce\u07cd\3\2\2\2\u07ce")
        buf.write("\u07cf\3\2\2\2\u07cf\u07dd\3\2\2\2\u07d0\u07d2\5\u00d0")
        buf.write("i\2\u07d1\u07d3\5\u00fc\177\2\u07d2\u07d1\3\2\2\2\u07d2")
        buf.write("\u07d3\3\2\2\2\u07d3\u07dd\3\2\2\2\u07d4\u07d6\7\177\2")
        buf.write("\2\u07d5\u07d4\3\2\2\2\u07d5\u07d6\3\2\2\2\u07d6\u07d8")
        buf.write("\3\2\2\2\u07d7\u07d9\5\u00b6\\\2\u07d8\u07d7\3\2\2\2\u07d8")
        buf.write("\u07d9\3\2\2\2\u07d9\u07da\3\2\2\2\u07da\u07db\7y\2\2")
        buf.write("\u07db\u07dd\5T+\2\u07dc\u07c9\3\2\2\2\u07dc\u07d0\3\2")
        buf.write("\2\2\u07dc\u07d5\3\2\2\2\u07dd\u0117\3\2\2\2\u07de\u07df")
        buf.write("\b\u008d\1\2\u07df\u07e0\5\u011a\u008e\2\u07e0\u07e5\3")
        buf.write("\2\2\2\u07e1\u07e2\f\3\2\2\u07e2\u07e4\5\u011a\u008e\2")
        buf.write("\u07e3\u07e1\3\2\2\2\u07e4\u07e7\3\2\2\2\u07e5\u07e3\3")
        buf.write("\2\2\2\u07e5\u07e6\3\2\2\2\u07e6\u0119\3\2\2\2\u07e7\u07e5")
        buf.write("\3\2\2\2\u07e8\u07e9\t\7\2\2\u07e9\u011b\3\2\2\2\u07ea")
        buf.write("\u07eb\7`\2\2\u07eb\u07ec\7\u0082\2\2\u07ec\u07ed\b\u008f")
        buf.write("\1\2\u07ed\u011d\3\2\2\2\u07ee\u07ef\7y\2\2\u07ef\u07f0")
        buf.write("\5\u0120\u0091\2\u07f0\u011f\3\2\2\2\u07f1\u07f2\b\u0091")
        buf.write("\1\2\u07f2\u07f4\5\u0122\u0092\2\u07f3\u07f5\7~\2\2\u07f4")
        buf.write("\u07f3\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5\u07fe\3\2\2\2")
        buf.write("\u07f6\u07f7\f\3\2\2\u07f7\u07f8\7u\2\2\u07f8\u07fa\5")
        buf.write("\u0122\u0092\2\u07f9\u07fb\7~\2\2\u07fa\u07f9\3\2\2\2")
        buf.write("\u07fa\u07fb\3\2\2\2\u07fb\u07fd\3\2\2\2\u07fc\u07f6\3")
        buf.write("\2\2\2\u07fd\u0800\3\2\2\2\u07fe\u07fc\3\2\2\2\u07fe\u07ff")
        buf.write("\3\2\2\2\u07ff\u0121\3\2\2\2\u0800\u07fe\3\2\2\2\u0801")
        buf.write("\u0803\5\u00b6\\\2\u0802\u0801\3\2\2\2\u0802\u0803\3\2")
        buf.write("\2\2\u0803\u0804\3\2\2\2\u0804\u0817\5\u0126\u0094\2\u0805")
        buf.write("\u0807\5\u00b6\\\2\u0806\u0805\3\2\2\2\u0806\u0807\3\2")
        buf.write("\2\2\u0807\u0808\3\2\2\2\u0808\u080a\7K\2\2\u0809\u080b")
        buf.write("\5\u0128\u0095\2\u080a\u0809\3\2\2\2\u080a\u080b\3\2\2")
        buf.write("\2\u080b\u080c\3\2\2\2\u080c\u0817\5\u0126\u0094\2\u080d")
        buf.write("\u080f\5\u00b6\\\2\u080e\u080d\3\2\2\2\u080e\u080f\3\2")
        buf.write("\2\2\u080f\u0810\3\2\2\2\u0810\u0812\5\u0128\u0095\2\u0811")
        buf.write("\u0813\7K\2\2\u0812\u0811\3\2\2\2\u0812\u0813\3\2\2\2")
        buf.write("\u0813\u0814\3\2\2\2\u0814\u0815\5\u0126\u0094\2\u0815")
        buf.write("\u0817\3\2\2\2\u0816\u0802\3\2\2\2\u0816\u0806\3\2\2\2")
        buf.write("\u0816\u080e\3\2\2\2\u0817\u0123\3\2\2\2\u0818\u081a\5")
        buf.write("\16\b\2\u0819\u0818\3\2\2\2\u0819\u081a\3\2\2\2\u081a")
        buf.write("\u081b\3\2\2\2\u081b\u081e\5\u0104\u0083\2\u081c\u081e")
        buf.write("\5\u0092J\2\u081d\u0819\3\2\2\2\u081d\u081c\3\2\2\2\u081e")
        buf.write("\u0125\3\2\2\2\u081f\u0820\5\u0124\u0093\2\u0820\u0127")
        buf.write("\3\2\2\2\u0821\u0822\t\b\2\2\u0822\u0129\3\2\2\2\u0823")
        buf.write("\u0824\7/\2\2\u0824\u0825\5\u012c\u0097\2\u0825\u012b")
        buf.write("\3\2\2\2\u0826\u0828\5\u008aF\2\u0827\u0829\5\u012e\u0098")
        buf.write("\2\u0828\u0827\3\2\2\2\u0828\u0829\3\2\2\2\u0829\u012d")
        buf.write("\3\2\2\2\u082a\u082c\5\u00dan\2\u082b\u082d\5\u012e\u0098")
        buf.write("\2\u082c\u082b\3\2\2\2\u082c\u082d\3\2\2\2\u082d\u012f")
        buf.write("\3\2\2\2\u082e\u082f\7y\2\2\u082f\u0830\5\u0132\u009a")
        buf.write("\2\u0830\u0131\3\2\2\2\u0831\u0833\5\u0134\u009b\2\u0832")
        buf.write("\u0834\7~\2\2\u0833\u0832\3\2\2\2\u0833\u0834\3\2\2\2")
        buf.write("\u0834\u083d\3\2\2\2\u0835\u0837\5\u0134\u009b\2\u0836")
        buf.write("\u0838\7~\2\2\u0837\u0836\3\2\2\2\u0837\u0838\3\2\2\2")
        buf.write("\u0838\u0839\3\2\2\2\u0839\u083a\7u\2\2\u083a\u083b\5")
        buf.write("\u0132\u009a\2\u083b\u083d\3\2\2\2\u083c\u0831\3\2\2\2")
        buf.write("\u083c\u0835\3\2\2\2\u083d\u0133\3\2\2\2\u083e\u083f\5")
        buf.write("\u0136\u009c\2\u083f\u0841\7P\2\2\u0840\u0842\5\32\16")
        buf.write("\2\u0841\u0840\3\2\2\2\u0841\u0842\3\2\2\2\u0842\u0843")
        buf.write("\3\2\2\2\u0843\u0844\7Q\2\2\u0844\u0849\3\2\2\2\u0845")
        buf.write("\u0846\5\u0136\u009c\2\u0846\u0847\5\u0102\u0082\2\u0847")
        buf.write("\u0849\3\2\2\2\u0848\u083e\3\2\2\2\u0848\u0845\3\2\2\2")
        buf.write("\u0849\u0135\3\2\2\2\u084a\u084d\5\u0124\u0093\2\u084b")
        buf.write("\u084d\7\177\2\2\u084c\u084a\3\2\2\2\u084c\u084b\3\2\2")
        buf.write("\2\u084d\u0137\3\2\2\2\u084e\u084f\7/\2\2\u084f\u0850")
        buf.write("\5\u016a\u00b6\2\u0850\u0139\3\2\2\2\u0851\u0852\7/\2")
        buf.write("\2\u0852\u0853\7\u0088\2\2\u0853\u0857\7\177\2\2\u0854")
        buf.write("\u0855\7/\2\2\u0855\u0857\7\u008b\2\2\u0856\u0851\3\2")
        buf.write("\2\2\u0856\u0854\3\2\2\2\u0857\u013b\3\2\2\2\u0858\u0859")
        buf.write("\7?\2\2\u0859\u085a\7a\2\2\u085a\u085b\5\u013e\u00a0\2")
        buf.write("\u085b\u085c\7b\2\2\u085c\u085d\5v<\2\u085d\u013d\3\2")
        buf.write("\2\2\u085e\u085f\b\u00a0\1\2\u085f\u0860\5\u0140\u00a1")
        buf.write("\2\u0860\u0866\3\2\2\2\u0861\u0862\f\3\2\2\u0862\u0863")
        buf.write("\7u\2\2\u0863\u0865\5\u0140\u00a1\2\u0864\u0861\3\2\2")
        buf.write("\2\u0865\u0868\3\2\2\2\u0866\u0864\3\2\2\2\u0866\u0867")
        buf.write("\3\2\2\2\u0867\u013f\3\2\2\2\u0868\u0866\3\2\2\2\u0869")
        buf.write("\u086b\7\20\2\2\u086a\u086c\7~\2\2\u086b\u086a\3\2\2\2")
        buf.write("\u086b\u086c\3\2\2\2\u086c\u086e\3\2\2\2\u086d\u086f\7")
        buf.write("\177\2\2\u086e\u086d\3\2\2\2\u086e\u086f\3\2\2\2\u086f")
        buf.write("\u089b\3\2\2\2\u0870\u0872\7\20\2\2\u0871\u0873\7\177")
        buf.write("\2\2\u0872\u0871\3\2\2\2\u0872\u0873\3\2\2\2\u0873\u0874")
        buf.write("\3\2\2\2\u0874\u0875\7`\2\2\u0875\u089b\5\u00e4s\2\u0876")
        buf.write("\u0878\7G\2\2\u0877\u0879\7~\2\2\u0878\u0877\3\2\2\2\u0878")
        buf.write("\u0879\3\2\2\2\u0879\u087b\3\2\2\2\u087a\u087c\7\177\2")
        buf.write("\2\u087b\u087a\3\2\2\2\u087b\u087c\3\2\2\2\u087c\u089b")
        buf.write("\3\2\2\2\u087d\u087f\7G\2\2\u087e\u0880\7\177\2\2\u087f")
        buf.write("\u087e\3\2\2\2\u087f\u0880\3\2\2\2\u0880\u0881\3\2\2\2")
        buf.write("\u0881\u0882\7`\2\2\u0882\u089b\5\u00e4s\2\u0883\u0884")
        buf.write("\7?\2\2\u0884\u0885\7a\2\2\u0885\u0886\5\u013e\u00a0\2")
        buf.write("\u0886\u0887\7b\2\2\u0887\u0889\7\20\2\2\u0888\u088a\7")
        buf.write("~\2\2\u0889\u0888\3\2\2\2\u0889\u088a\3\2\2\2\u088a\u088c")
        buf.write("\3\2\2\2\u088b\u088d\7\177\2\2\u088c\u088b\3\2\2\2\u088c")
        buf.write("\u088d\3\2\2\2\u088d\u089b\3\2\2\2\u088e\u088f\7?\2\2")
        buf.write("\u088f\u0890\7a\2\2\u0890\u0891\5\u013e\u00a0\2\u0891")
        buf.write("\u0892\7b\2\2\u0892\u0894\7\20\2\2\u0893\u0895\7\177\2")
        buf.write("\2\u0894\u0893\3\2\2\2\u0894\u0895\3\2\2\2\u0895\u0896")
        buf.write("\3\2\2\2\u0896\u0897\7`\2\2\u0897\u0898\5\b\5\2\u0898")
        buf.write("\u089b\3\2\2\2\u0899\u089b\5\u00f4{\2\u089a\u0869\3\2")
        buf.write("\2\2\u089a\u0870\3\2\2\2\u089a\u0876\3\2\2\2\u089a\u087d")
        buf.write("\3\2\2\2\u089a\u0883\3\2\2\2\u089a\u088e\3\2\2\2\u089a")
        buf.write("\u0899\3\2\2\2\u089b\u0141\3\2\2\2\u089c\u089d\5\u0146")
        buf.write("\u00a4\2\u089d\u089f\7a\2\2\u089e\u08a0\5\u0148\u00a5")
        buf.write("\2\u089f\u089e\3\2\2\2\u089f\u08a0\3\2\2\2\u08a0\u08a1")
        buf.write("\3\2\2\2\u08a1\u08a2\7b\2\2\u08a2\u0143\3\2\2\2\u08a3")
        buf.write("\u08b3\5\u0142\u00a2\2\u08a4\u08a5\5\u0138\u009d\2\u08a5")
        buf.write("\u08a7\7a\2\2\u08a6\u08a8\5\u0148\u00a5\2\u08a7\u08a6")
        buf.write("\3\2\2\2\u08a7\u08a8\3\2\2\2\u08a8\u08a9\3\2\2\2\u08a9")
        buf.write("\u08aa\7b\2\2\u08aa\u08b3\3\2\2\2\u08ab\u08ac\5\u013a")
        buf.write("\u009e\2\u08ac\u08ae\7a\2\2\u08ad\u08af\5\u0148\u00a5")
        buf.write("\2\u08ae\u08ad\3\2\2\2\u08ae\u08af\3\2\2\2\u08af\u08b0")
        buf.write("\3\2\2\2\u08b0\u08b1\7b\2\2\u08b1\u08b3\3\2\2\2\u08b2")
        buf.write("\u08a3\3\2\2\2\u08b2\u08a4\3\2\2\2\u08b2\u08ab\3\2\2\2")
        buf.write("\u08b3\u0145\3\2\2\2\u08b4\u08b5\7\177\2\2\u08b5\u0147")
        buf.write("\3\2\2\2\u08b6\u08b7\b\u00a5\1\2\u08b7\u08b9\5\u014a\u00a6")
        buf.write("\2\u08b8\u08ba\7~\2\2\u08b9\u08b8\3\2\2\2\u08b9\u08ba")
        buf.write("\3\2\2\2\u08ba\u08c3\3\2\2\2\u08bb\u08bc\f\3\2\2\u08bc")
        buf.write("\u08bd\7u\2\2\u08bd\u08bf\5\u014a\u00a6\2\u08be\u08c0")
        buf.write("\7~\2\2\u08bf\u08be\3\2\2\2\u08bf\u08c0\3\2\2\2\u08c0")
        buf.write("\u08c2\3\2\2\2\u08c1\u08bb\3\2\2\2\u08c2\u08c5\3\2\2\2")
        buf.write("\u08c3\u08c1\3\2\2\2\u08c3\u08c4\3\2\2\2\u08c4\u0149\3")
        buf.write("\2\2\2\u08c5\u08c3\3\2\2\2\u08c6\u08ca\5\u00e4s\2\u08c7")
        buf.write("\u08ca\5T+\2\u08c8\u08ca\5\b\5\2\u08c9\u08c6\3\2\2\2\u08c9")
        buf.write("\u08c7\3\2\2\2\u08c9\u08c8\3\2\2\2\u08ca\u014b\3\2\2\2")
        buf.write("\u08cb\u08cc\7G\2\2\u08cc\u08cd\5\16\b\2\u08cd\u08ce\7")
        buf.write("\177\2\2\u08ce\u08d7\3\2\2\2\u08cf\u08d0\7G\2\2\u08d0")
        buf.write("\u08d2\5\16\b\2\u08d1\u08d3\7?\2\2\u08d2\u08d1\3\2\2\2")
        buf.write("\u08d2\u08d3\3\2\2\2\u08d3\u08d4\3\2\2\2\u08d4\u08d5\5")
        buf.write("\u0142\u00a2\2\u08d5\u08d7\3\2\2\2\u08d6\u08cb\3\2\2\2")
        buf.write("\u08d6\u08cf\3\2\2\2\u08d7\u014d\3\2\2\2\u08d8\u08da\7")
        buf.write("\37\2\2\u08d9\u08d8\3\2\2\2\u08d9\u08da\3\2\2\2\u08da")
        buf.write("\u08db\3\2\2\2\u08db\u08dc\7?\2\2\u08dc\u08dd\5v<\2\u08dd")
        buf.write("\u014f\3\2\2\2\u08de\u08df\7?\2\2\u08df\u08e0\7a\2\2\u08e0")
        buf.write("\u08e1\7b\2\2\u08e1\u08e2\5v<\2\u08e2\u0151\3\2\2\2\u08e3")
        buf.write("\u08e4\7D\2\2\u08e4\u08e5\5^\60\2\u08e5\u08e6\5\u0156")
        buf.write("\u00ac\2\u08e6\u0153\3\2\2\2\u08e7\u08e9\7D\2\2\u08e8")
        buf.write("\u08ea\5\u0130\u0099\2\u08e9\u08e8\3\2\2\2\u08e9\u08ea")
        buf.write("\3\2\2\2\u08ea\u08eb\3\2\2\2\u08eb\u08ec\5^\60\2\u08ec")
        buf.write("\u08ed\5\u0156\u00ac\2\u08ed\u0155\3\2\2\2\u08ee\u08f0")
        buf.write("\5\u0158\u00ad\2\u08ef\u08f1\5\u0156\u00ac\2\u08f0\u08ef")
        buf.write("\3\2\2\2\u08f0\u08f1\3\2\2\2\u08f1\u0157\3\2\2\2\u08f2")
        buf.write("\u08f3\7\f\2\2\u08f3\u08f4\7P\2\2\u08f4\u08f5\5\u015a")
        buf.write("\u00ae\2\u08f5\u08f6\7Q\2\2\u08f6\u08f7\5^\60\2\u08f7")
        buf.write("\u0159\3\2\2\2\u08f8\u08fa\5\u00b6\\\2\u08f9\u08f8\3\2")
        buf.write("\2\2\u08f9\u08fa\3\2\2\2\u08fa\u08fb\3\2\2\2\u08fb\u08fc")
        buf.write("\5\u008aF\2\u08fc\u08fd\5\u00d0i\2\u08fd\u0907\3\2\2\2")
        buf.write("\u08fe\u0900\5\u00b6\\\2\u08ff\u08fe\3\2\2\2\u08ff\u0900")
        buf.write("\3\2\2\2\u0900\u0901\3\2\2\2\u0901\u0903\5\u008aF\2\u0902")
        buf.write("\u0904\5\u00e6t\2\u0903\u0902\3\2\2\2\u0903\u0904\3\2")
        buf.write("\2\2\u0904\u0907\3\2\2\2\u0905\u0907\7~\2\2\u0906\u08f9")
        buf.write("\3\2\2\2\u0906\u08ff\3\2\2\2\u0906\u0905\3\2\2\2\u0907")
        buf.write("\u015b\3\2\2\2\u0908\u090a\7B\2\2\u0909\u090b\5N(\2\u090a")
        buf.write("\u0909\3\2\2\2\u090a\u090b\3\2\2\2\u090b\u015d\3\2\2\2")
        buf.write("\u090c\u090f\5\u0160\u00b1\2\u090d\u090f\5\u0164\u00b3")
        buf.write("\2\u090e\u090c\3\2\2\2\u090e\u090d\3\2\2\2\u090f\u015f")
        buf.write("\3\2\2\2\u0910\u0911\7B\2\2\u0911\u0913\7P\2\2\u0912\u0914")
        buf.write("\5\u0162\u00b2\2\u0913\u0912\3\2\2\2\u0913\u0914\3\2\2")
        buf.write("\2\u0914\u0915\3\2\2\2\u0915\u0916\7Q\2\2\u0916\u0161")
        buf.write("\3\2\2\2\u0917\u0918\b\u00b2\1\2\u0918\u091a\5\u00e4s")
        buf.write("\2\u0919\u091b\7~\2\2\u091a\u0919\3\2\2\2\u091a\u091b")
        buf.write("\3\2\2\2\u091b\u0924\3\2\2\2\u091c\u091d\f\3\2\2\u091d")
        buf.write("\u091e\7u\2\2\u091e\u0920\5\u00e4s\2\u091f\u0921\7~\2")
        buf.write("\2\u0920\u091f\3\2\2\2\u0920\u0921\3\2\2\2\u0921\u0923")
        buf.write("\3\2\2\2\u0922\u091c\3\2\2\2\u0923\u0926\3\2\2\2\u0924")
        buf.write("\u0922\3\2\2\2\u0924\u0925\3\2\2\2\u0925\u0163\3\2\2\2")
        buf.write("\u0926\u0924\3\2\2\2\u0927\u0928\7-\2\2\u0928\u0929\7")
        buf.write("P\2\2\u0929\u092a\5T+\2\u092a\u092b\7Q\2\2\u092b\u092e")
        buf.write("\3\2\2\2\u092c\u092e\7-\2\2\u092d\u0927\3\2\2\2\u092d")
        buf.write("\u092c\3\2\2\2\u092e\u0165\3\2\2\2\u092f\u0930\7b\2\2")
        buf.write("\u0930\u0931\7b\2\2\u0931\u0167\3\2\2\2\u0932\u0933\7")
        buf.write("b\2\2\u0933\u0934\7b\2\2\u0934\u0935\7`\2\2\u0935\u0169")
        buf.write("\3\2\2\2\u0936\u0967\7,\2\2\u0937\u0967\7\27\2\2\u0938")
        buf.write("\u0939\7,\2\2\u0939\u093a\7R\2\2\u093a\u0967\7S\2\2\u093b")
        buf.write("\u093c\7\27\2\2\u093c\u093d\7R\2\2\u093d\u0967\7S\2\2")
        buf.write("\u093e\u0967\7V\2\2\u093f\u0967\7W\2\2\u0940\u0967\7X")
        buf.write("\2\2\u0941\u0967\7Y\2\2\u0942\u0967\7Z\2\2\u0943\u0967")
        buf.write("\7[\2\2\u0944\u0967\7\\\2\2\u0945\u0967\7]\2\2\u0946\u0967")
        buf.write("\7^\2\2\u0947\u0967\7_\2\2\u0948\u0967\7`\2\2\u0949\u0967")
        buf.write("\7a\2\2\u094a\u0967\7b\2\2\u094b\u0967\7c\2\2\u094c\u0967")
        buf.write("\7d\2\2\u094d\u0967\7e\2\2\u094e\u0967\7f\2\2\u094f\u0967")
        buf.write("\7g\2\2\u0950\u0967\7h\2\2\u0951\u0967\7i\2\2\u0952\u0967")
        buf.write("\7j\2\2\u0953\u0967\7k\2\2\u0954\u0967\5\u0166\u00b4\2")
        buf.write("\u0955\u0967\5\u0168\u00b5\2\u0956\u0967\7l\2\2\u0957")
        buf.write("\u0967\7m\2\2\u0958\u0967\7n\2\2\u0959\u0967\7o\2\2\u095a")
        buf.write("\u0967\7p\2\2\u095b\u0967\7q\2\2\u095c\u0967\7r\2\2\u095d")
        buf.write("\u0967\7s\2\2\u095e\u0967\7t\2\2\u095f\u0967\7u\2\2\u0960")
        buf.write("\u0967\7v\2\2\u0961\u0967\7w\2\2\u0962\u0963\7P\2\2\u0963")
        buf.write("\u0967\7Q\2\2\u0964\u0965\7R\2\2\u0965\u0967\7S\2\2\u0966")
        buf.write("\u0936\3\2\2\2\u0966\u0937\3\2\2\2\u0966\u0938\3\2\2\2")
        buf.write("\u0966\u093b\3\2\2\2\u0966\u093e\3\2\2\2\u0966\u093f\3")
        buf.write("\2\2\2\u0966\u0940\3\2\2\2\u0966\u0941\3\2\2\2\u0966\u0942")
        buf.write("\3\2\2\2\u0966\u0943\3\2\2\2\u0966\u0944\3\2\2\2\u0966")
        buf.write("\u0945\3\2\2\2\u0966\u0946\3\2\2\2\u0966\u0947\3\2\2\2")
        buf.write("\u0966\u0948\3\2\2\2\u0966\u0949\3\2\2\2\u0966\u094a\3")
        buf.write("\2\2\2\u0966\u094b\3\2\2\2\u0966\u094c\3\2\2\2\u0966\u094d")
        buf.write("\3\2\2\2\u0966\u094e\3\2\2\2\u0966\u094f\3\2\2\2\u0966")
        buf.write("\u0950\3\2\2\2\u0966\u0951\3\2\2\2\u0966\u0952\3\2\2\2")
        buf.write("\u0966\u0953\3\2\2\2\u0966\u0954\3\2\2\2\u0966\u0955\3")
        buf.write("\2\2\2\u0966\u0956\3\2\2\2\u0966\u0957\3\2\2\2\u0966\u0958")
        buf.write("\3\2\2\2\u0966\u0959\3\2\2\2\u0966\u095a\3\2\2\2\u0966")
        buf.write("\u095b\3\2\2\2\u0966\u095c\3\2\2\2\u0966\u095d\3\2\2\2")
        buf.write("\u0966\u095e\3\2\2\2\u0966\u095f\3\2\2\2\u0966\u0960\3")
        buf.write("\2\2\2\u0966\u0961\3\2\2\2\u0966\u0962\3\2\2\2\u0966\u0964")
        buf.write("\3\2\2\2\u0967\u016b\3\2\2\2\u0968\u0970\7\u0080\2\2\u0969")
        buf.write("\u0970\7\u0086\2\2\u096a\u0970\7\u0087\2\2\u096b\u0970")
        buf.write("\7\u0088\2\2\u096c\u0970\5\u016e\u00b8\2\u096d\u0970\5")
        buf.write("\u0170\u00b9\2\u096e\u0970\5\u0172\u00ba\2\u096f\u0968")
        buf.write("\3\2\2\2\u096f\u0969\3\2\2\2\u096f\u096a\3\2\2\2\u096f")
        buf.write("\u096b\3\2\2\2\u096f\u096c\3\2\2\2\u096f\u096d\3\2\2\2")
        buf.write("\u096f\u096e\3\2\2\2\u0970\u016d\3\2\2\2\u0971\u0972\t")
        buf.write("\t\2\2\u0972\u016f\3\2\2\2\u0973\u0974\7.\2\2\u0974\u0171")
        buf.write("\3\2\2\2\u0975\u0976\t\n\2\2\u0976\u0173\3\2\2\2\u0138")
        buf.write("\u0175\u0182\u0186\u0189\u0191\u0195\u01a0\u01a4\u01b3")
        buf.write("\u01ba\u01bf\u01c1\u01c9\u01cf\u01d3\u01df\u01e5\u01e8")
        buf.write("\u01eb\u01ee\u01f5\u01fc\u0230\u023f\u0245\u024b\u0258")
        buf.write("\u025a\u0260\u026f\u0275\u0294\u029a\u029f\u02a3\u02a7")
        buf.write("\u02aa\u02ad\u02b1\u02b7\u02b9\u02c1\u02c4\u02cb\u02d2")
        buf.write("\u02d6\u02db\u02df\u02e2\u02e7\u02ed\u02f5\u0300\u0302")
        buf.write("\u0311\u0313\u031f\u0321\u032e\u0330\u0342\u0344\u0350")
        buf.write("\u0352\u035d\u0368\u0373\u037e\u0389\u038f\u03a2\u03af")
        buf.write("\u03b9\u03bf\u03c5\u03c9\u03cd\u03d1\u03d5\u03d9\u03dd")
        buf.write("\u03e2\u03e5\u03f1\u03f7\u0402\u0418\u041f\u0427\u042d")
        buf.write("\u0441\u0445\u0452\u0456\u0459\u0460\u0468\u0470\u047d")
        buf.write("\u048b\u049b\u049f\u04a3\u04a8\u04af\u04b2\u04b7\u04bc")
        buf.write("\u04d4\u04d8\u04dd\u04e4\u04ee\u04f3\u04f6\u0500\u0506")
        buf.write("\u050b\u050f\u0514\u0518\u051d\u0520\u0536\u053b\u0546")
        buf.write("\u054a\u054d\u0550\u0554\u0559\u055b\u0562\u056f\u0577")
        buf.write("\u057d\u0583\u058a\u058d\u0596\u059e\u05a1\u05a6\u05ac")
        buf.write("\u05b7\u05ba\u05bf\u05ce\u05d4\u05dd\u05e7\u05ed\u05f5")
        buf.write("\u05f9\u05fd\u0602\u0607\u060e\u0610\u0615\u0619\u0627")
        buf.write("\u062d\u063c\u0646\u064b\u0652\u0658\u065d\u0663\u066a")
        buf.write("\u066e\u0670\u0672\u0679\u067c\u067f\u0682\u0687\u068b")
        buf.write("\u068e\u0692\u0696\u069b\u069e\u06a0\u06a4\u06ab\u06b1")
        buf.write("\u06b5\u06bb\u06c0\u06c2\u06c8\u06cc\u06d2\u06d9\u06dd")
        buf.write("\u06df\u06e1\u06e8\u06f2\u06f6\u06f8\u06fa\u06fe\u0701")
        buf.write("\u0707\u0711\u0715\u071b\u0723\u0727\u072a\u072e\u0733")
        buf.write("\u0736\u0739\u073d\u0742\u074c\u0753\u0758\u075c\u0761")
        buf.write("\u0767\u076b\u0771\u0777\u077b\u0780\u0786\u078a\u078d")
        buf.write("\u0791\u0794\u0796\u0799\u07a3\u07a8\u07aa\u07ad\u07b0")
        buf.write("\u07b3\u07bc\u07c6\u07cb\u07ce\u07d2\u07d5\u07d8\u07dc")
        buf.write("\u07e5\u07f4\u07fa\u07fe\u0802\u0806\u080a\u080e\u0812")
        buf.write("\u0816\u0819\u081d\u0828\u082c\u0833\u0837\u083c\u0841")
        buf.write("\u0848\u084c\u0856\u0866\u086b\u086e\u0872\u0878\u087b")
        buf.write("\u087f\u0889\u088c\u0894\u089a\u089f\u08a7\u08ae\u08b2")
        buf.write("\u08b9\u08bf\u08c3\u08c9\u08d2\u08d6\u08d9\u08e9\u08f0")
        buf.write("\u08f9\u08ff\u0903\u0906\u090a\u090e\u0913\u091a\u0920")
        buf.write("\u0924\u092d\u0966\u096f")
        return buf.getvalue()


class CPP14Parser(Parser):
    grammarFileName = "CPP14.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = ["<INVALID>", "<INVALID>", "<INVALID>", "'alignas'",
                    "'alignof'", "'asm'", "'auto'", "'bool'", "'break'",
                    "'case'", "'catch'", "'char'", "'char16_t'", "'char32_t'",
                    "'class'", "'const'", "'constexpr'", "'const_cast'",
                    "'continue'", "'decltype'", "'default'", "'delete'",
                    "'do'", "'double'", "'dynamic_cast'", "'else'", "'enum'",
                    "'explicit'", "'export'", "'extern'", "'false'", "'final'",
                    "'float'", "'for'", "'friend'", "'goto'", "'if'", "'inline'",
                    "'int'", "'long'", "'mutable'", "'namespace'", "'new'",
                    "'noexcept'", "'nullptr'", "'operator'", "'override'",
                    "'private'", "'protected'", "'public'", "'register'",
                    "'reinterpret_cast'", "'return'", "'short'", "'signed'",
                    "'sizeof'", "'static'", "'static_assert'", "'static_cast'",
                    "'struct'", "'switch'", "'template'", "'this'", "'thread_local'",
                    "'throw'", "'true'", "'try'", "'typedef'", "'typeid'",
                    "'typename'", "'union'", "'unsigned'", "'using'", "'virtual'",
                    "'void'", "'volatile'", "'wchar_t'", "'while'", "'('",
                    "')'", "'['", "']'", "'{'", "'}'", "'+'", "'-'", "'*'",
                    "'/'", "'%'", "'^'", "'&'", "'|'", "'~'", "'!'", "'='",
                    "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", "'%='",
                    "'^='", "'&='", "'|='", "'<<'", "'<<='", "'=='", "'!='",
                    "'<='", "'>='", "'&&'", "'||'", "'++'", "'--'", "','",
                    "'->*'", "'->'", "'?'", "':'", "'::'", "';'", "'.'",
                    "'.*'", "'...'"]

    symbolicNames = ["<INVALID>", "MultiLineMacro", "Directive", "Alignas",
                     "Alignof", "Asm", "Auto", "Bool", "Break", "Case",
                     "Catch", "Char", "Char16", "Char32", "Class", "Const",
                     "Constexpr", "Const_cast", "Continue", "Decltype",
                     "Default", "Delete", "Do", "Double", "Dynamic_cast",
                     "Else", "Enum", "Explicit", "Export", "Extern", "FalseToken",
                     "Final", "Float", "For", "Friend", "Goto", "If", "Inline",
                     "Int", "Long", "Mutable", "Namespace", "New", "Noexcept",
                     "Nullptr", "Operator", "Override", "Private", "Protected",
                     "Public", "Register", "Reinterpret_cast", "Return",
                     "Short", "Signed", "Sizeof", "Static", "Static_assert",
                     "Static_cast", "Struct", "Switch", "Template", "This",
                     "Thread_local", "Throw", "TrueToken", "Try", "Typedef",
                     "Typeid", "Typename", "Union", "Unsigned", "Using",
                     "Virtual", "Void", "Volatile", "Wchar", "While", "LeftParen",
                     "RightParen", "LeftBracket", "RightBracket", "LeftBrace",
                     "RightBrace", "Plus", "Minus", "Star", "Div", "Mod",
                     "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less",
                     "Greater", "PlusAssign", "MinusAssign", "StarAssign",
                     "DivAssign", "ModAssign", "XorAssign", "AndAssign",
                     "OrAssign", "LeftShift", "LeftShiftAssign", "Equal",
                     "NotEqual", "LessEqual", "GreaterEqual", "AndAnd",
                     "OrOr", "PlusPlus", "MinusMinus", "Comma", "ArrowStar",
                     "Arrow", "Question", "Colon", "Doublecolon", "Semi",
                     "Dot", "DotStar", "Ellipsis", "Identifier", "Integerliteral",
                     "Decimalliteral", "Octalliteral", "Hexadecimalliteral",
                     "Binaryliteral", "Integersuffix", "Characterliteral",
                     "Floatingliteral", "Stringliteral", "Userdefinedintegerliteral",
                     "Userdefinedfloatingliteral", "Userdefinedstringliteral",
                     "Userdefinedcharacterliteral", "Whitespace", "Newline",
                     "BlockComment", "LineComment"]

    RULE_translationunit = 0
    RULE_primaryexpression = 1
    RULE_lambdacapture = 2
    RULE_idexpression = 3
    RULE_unqualifiedid = 4
    RULE_qualifiedid = 5
    RULE_nestednamespecifier = 6
    RULE_capturedefault = 7
    RULE_capturelist = 8
    RULE_capture = 9
    RULE_lambdadeclarator = 10
    RULE_postfixexpression = 11
    RULE_expressionlist = 12
    RULE_pseudodestructorname = 13
    RULE_unaryexpression = 14
    RULE_unaryincdecexpression = 15
    RULE_unaryoperator = 16
    RULE_newexpression = 17
    RULE_newplacement = 18
    RULE_newdeclarator = 19
    RULE_noptrnewdeclarator = 20
    RULE_newinitializer = 21
    RULE_deleteexpression = 22
    RULE_castexpression = 23
    RULE_pmexpression = 24
    RULE_multiplicativeexpression = 25
    RULE_additiveexpression = 26
    RULE_shiftexpression = 27
    RULE_relationalexpression = 28
    RULE_equalityexpression = 29
    RULE_andexpression = 30
    RULE_exclusiveorexpression = 31
    RULE_inclusiveorexpression = 32
    RULE_logicalandexpression = 33
    RULE_logicalorexpression = 34
    RULE_conditionalexpression = 35
    RULE_ternaryconditionalexpression = 36
    RULE_unaryconditionalexpression = 37
    RULE_assignmentexpression = 38
    RULE_assignmentoperator = 39
    RULE_expression = 40
    RULE_constantexpression = 41
    RULE_statement = 42
    RULE_casestatement = 43
    RULE_defaultstatement = 44
    RULE_expressionstatement = 45
    RULE_compoundstatement = 46
    RULE_statementseq = 47
    RULE_selectionstatement = 48
    RULE_elsestatement = 49
    RULE_condition = 50
    RULE_iterationstatement = 51
    RULE_forinitstatement = 52
    RULE_forrangedeclaration = 53
    RULE_forrangeinitializer = 54
    RULE_jumpstatement = 55
    RULE_gotostatement = 56
    RULE_declarationseq = 57
    RULE_declaration = 58
    RULE_blockdeclaration = 59
    RULE_aliasdeclaration = 60
    RULE_simpledeclaration = 61
    RULE_static_assertdeclaration = 62
    RULE_emptydeclaration = 63
    RULE_declspecifier = 64
    RULE_declspecifierseq = 65
    RULE_typespecifier = 66
    RULE_trailingtypespecifier = 67
    RULE_typespecifierseq = 68
    RULE_trailingtypespecifierseq = 69
    RULE_simpletypespecifier = 70
    RULE_thetypename = 71
    RULE_decltypespecifier = 72
    RULE_enumhead = 73
    RULE_enumkey = 74
    RULE_enumbase = 75
    RULE_enumeratorlist = 76
    RULE_enumeratordefinition = 77
    RULE_enumerator = 78
    RULE_namespacename = 79
    RULE_originalnamespacename = 80
    RULE_namespacedefinition = 81
    RULE_namednamespacedefinition = 82
    RULE_namespacebody = 83
    RULE_namespacealias = 84
    RULE_qualifiednamespacespecifier = 85
    RULE_usingdeclaration = 86
    RULE_usingdirective = 87
    RULE_asmdefinition = 88
    RULE_linkagespecification = 89
    RULE_attributespecifierseq = 90
    RULE_attributespecifier = 91
    RULE_alignmentspecifier = 92
    RULE_attributelist = 93
    RULE_attribute = 94
    RULE_attributetoken = 95
    RULE_attributescopedtoken = 96
    RULE_attributenamespace = 97
    RULE_attributeargumentclause = 98
    RULE_balancedtokenseq = 99
    RULE_balancedtoken = 100
    RULE_initdeclaratorlist = 101
    RULE_initdeclarator = 102
    RULE_declarator = 103
    RULE_ptrdeclarator = 104
    RULE_noptrdeclarator = 105
    RULE_parametersandqualifiers = 106
    RULE_trailingreturntype = 107
    RULE_ptroperator = 108
    RULE_cvqualifierseq = 109
    RULE_cvqualifier = 110
    RULE_refqualifier = 111
    RULE_declaratorid = 112
    RULE_thetypeid = 113
    RULE_abstractdeclarator = 114
    RULE_ptrabstractdeclarator = 115
    RULE_noptrabstractdeclarator = 116
    RULE_abstractpackdeclarator = 117
    RULE_noptrabstractpackdeclarator = 118
    RULE_parameterdeclarationclause = 119
    RULE_parameterdeclarationlist = 120
    RULE_parameterdeclaration = 121
    RULE_functiondefinition = 122
    RULE_functionbody = 123
    RULE_initializer = 124
    RULE_braceorequalinitializer = 125
    RULE_initializerclause = 126
    RULE_initializerlist = 127
    RULE_bracedinitlist = 128
    RULE_classname = 129
    RULE_classspecifier = 130
    RULE_classhead = 131
    RULE_classheadname = 132
    RULE_classvirtspecifier = 133
    RULE_classkey = 134
    RULE_memberspecification = 135
    RULE_memberdeclaration = 136
    RULE_memberdeclaratorlist = 137
    RULE_memberdeclarator = 138
    RULE_virtspecifierseq = 139
    RULE_virtspecifier = 140
    RULE_purespecifier = 141
    RULE_baseclause = 142
    RULE_basespecifierlist = 143
    RULE_basespecifier = 144
    RULE_classordecltype = 145
    RULE_basetypespecifier = 146
    RULE_accessspecifier = 147
    RULE_conversionfunctionid = 148
    RULE_conversiontypeid = 149
    RULE_conversiondeclarator = 150
    RULE_ctorinitializer = 151
    RULE_meminitializerlist = 152
    RULE_meminitializer = 153
    RULE_meminitializerid = 154
    RULE_operatorfunctionid = 155
    RULE_literaloperatorid = 156
    RULE_templatedeclaration = 157
    RULE_templateparameterlist = 158
    RULE_templateparameter = 159
    RULE_simpletemplateid = 160
    RULE_templateid = 161
    RULE_templatename = 162
    RULE_templateargumentlist = 163
    RULE_templateargument = 164
    RULE_typenamespecifier = 165
    RULE_explicitinstantiation = 166
    RULE_explicitspecialization = 167
    RULE_tryblock = 168
    RULE_functiontryblock = 169
    RULE_handlerseq = 170
    RULE_handler = 171
    RULE_exceptiondeclaration = 172
    RULE_throwexpression = 173
    RULE_exceptionspecification = 174
    RULE_dynamicexceptionspecification = 175
    RULE_typeidlist = 176
    RULE_noexceptspecification = 177
    RULE_rightShift = 178
    RULE_rightShiftAssign = 179
    RULE_theoperator = 180
    RULE_literal = 181
    RULE_booleanliteral = 182
    RULE_pointerliteral = 183
    RULE_userdefinedliteral = 184

    ruleNames = ["translationunit", "primaryexpression", "lambdacapture",
                 "idexpression", "unqualifiedid", "qualifiedid", "nestednamespecifier",
                 "capturedefault", "capturelist", "capture", "lambdadeclarator",
                 "postfixexpression", "expressionlist", "pseudodestructorname",
                 "unaryexpression", "unaryincdecexpression", "unaryoperator",
                 "newexpression", "newplacement", "newdeclarator", "noptrnewdeclarator",
                 "newinitializer", "deleteexpression", "castexpression",
                 "pmexpression", "multiplicativeexpression", "additiveexpression",
                 "shiftexpression", "relationalexpression", "equalityexpression",
                 "andexpression", "exclusiveorexpression", "inclusiveorexpression",
                 "logicalandexpression", "logicalorexpression", "conditionalexpression",
                 "ternaryconditionalexpression", "unaryconditionalexpression",
                 "assignmentexpression", "assignmentoperator", "expression",
                 "constantexpression", "statement", "casestatement", "defaultstatement",
                 "expressionstatement", "compoundstatement", "statementseq",
                 "selectionstatement", "elsestatement", "condition", "iterationstatement",
                 "forinitstatement", "forrangedeclaration", "forrangeinitializer",
                 "jumpstatement", "gotostatement", "declarationseq", "declaration",
                 "blockdeclaration", "aliasdeclaration", "simpledeclaration",
                 "static_assertdeclaration", "emptydeclaration", "declspecifier",
                 "declspecifierseq", "typespecifier", "trailingtypespecifier",
                 "typespecifierseq", "trailingtypespecifierseq", "simpletypespecifier",
                 "thetypename", "decltypespecifier", "enumhead", "enumkey",
                 "enumbase", "enumeratorlist", "enumeratordefinition",
                 "enumerator", "namespacename", "originalnamespacename",
                 "namespacedefinition", "namednamespacedefinition", "namespacebody",
                 "namespacealias", "qualifiednamespacespecifier", "usingdeclaration",
                 "usingdirective", "asmdefinition", "linkagespecification",
                 "attributespecifierseq", "attributespecifier", "alignmentspecifier",
                 "attributelist", "attribute", "attributetoken", "attributescopedtoken",
                 "attributenamespace", "attributeargumentclause", "balancedtokenseq",
                 "balancedtoken", "initdeclaratorlist", "initdeclarator",
                 "declarator", "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers",
                 "trailingreturntype", "ptroperator", "cvqualifierseq",
                 "cvqualifier", "refqualifier", "declaratorid", "thetypeid",
                 "abstractdeclarator", "ptrabstractdeclarator", "noptrabstractdeclarator",
                 "abstractpackdeclarator", "noptrabstractpackdeclarator",
                 "parameterdeclarationclause", "parameterdeclarationlist",
                 "parameterdeclaration", "functiondefinition", "functionbody",
                 "initializer", "braceorequalinitializer", "initializerclause",
                 "initializerlist", "bracedinitlist", "classname", "classspecifier",
                 "classhead", "classheadname", "classvirtspecifier", "classkey",
                 "memberspecification", "memberdeclaration", "memberdeclaratorlist",
                 "memberdeclarator", "virtspecifierseq", "virtspecifier",
                 "purespecifier", "baseclause", "basespecifierlist", "basespecifier",
                 "classordecltype", "basetypespecifier", "accessspecifier",
                 "conversionfunctionid", "conversiontypeid", "conversiondeclarator",
                 "ctorinitializer", "meminitializerlist", "meminitializer",
                 "meminitializerid", "operatorfunctionid", "literaloperatorid",
                 "templatedeclaration", "templateparameterlist", "templateparameter",
                 "simpletemplateid", "templateid", "templatename", "templateargumentlist",
                 "templateargument", "typenamespecifier", "explicitinstantiation",
                 "explicitspecialization", "tryblock", "functiontryblock",
                 "handlerseq", "handler", "exceptiondeclaration", "throwexpression",
                 "exceptionspecification", "dynamicexceptionspecification",
                 "typeidlist", "noexceptspecification", "rightShift",
                 "rightShiftAssign", "theoperator", "literal", "booleanliteral",
                 "pointerliteral", "userdefinedliteral"]

    EOF = Token.EOF
    MultiLineMacro = 1
    Directive = 2
    Alignas = 3
    Alignof = 4
    Asm = 5
    Auto = 6
    Bool = 7
    Break = 8
    Case = 9
    Catch = 10
    Char = 11
    Char16 = 12
    Char32 = 13
    Class = 14
    Const = 15
    Constexpr = 16
    Const_cast = 17
    Continue = 18
    Decltype = 19
    Default = 20
    Delete = 21
    Do = 22
    Double = 23
    Dynamic_cast = 24
    Else = 25
    Enum = 26
    Explicit = 27
    Export = 28
    Extern = 29
    FalseToken = 30
    Final = 31
    Float = 32
    For = 33
    Friend = 34
    Goto = 35
    If = 36
    Inline = 37
    Int = 38
    Long = 39
    Mutable = 40
    Namespace = 41
    New = 42
    Noexcept = 43
    Nullptr = 44
    Operator = 45
    Override = 46
    Private = 47
    Protected = 48
    Public = 49
    Register = 50
    Reinterpret_cast = 51
    Return = 52
    Short = 53
    Signed = 54
    Sizeof = 55
    Static = 56
    Static_assert = 57
    Static_cast = 58
    Struct = 59
    Switch = 60
    Template = 61
    This = 62
    Thread_local = 63
    Throw = 64
    TrueToken = 65
    Try = 66
    Typedef = 67
    Typeid = 68
    Typename = 69
    Union = 70
    Unsigned = 71
    Using = 72
    Virtual = 73
    Void = 74
    Volatile = 75
    Wchar = 76
    While = 77
    LeftParen = 78
    RightParen = 79
    LeftBracket = 80
    RightBracket = 81
    LeftBrace = 82
    RightBrace = 83
    Plus = 84
    Minus = 85
    Star = 86
    Div = 87
    Mod = 88
    Caret = 89
    And = 90
    Or = 91
    Tilde = 92
    Not = 93
    Assign = 94
    Less = 95
    Greater = 96
    PlusAssign = 97
    MinusAssign = 98
    StarAssign = 99
    DivAssign = 100
    ModAssign = 101
    XorAssign = 102
    AndAssign = 103
    OrAssign = 104
    LeftShift = 105
    LeftShiftAssign = 106
    Equal = 107
    NotEqual = 108
    LessEqual = 109
    GreaterEqual = 110
    AndAnd = 111
    OrOr = 112
    PlusPlus = 113
    MinusMinus = 114
    Comma = 115
    ArrowStar = 116
    Arrow = 117
    Question = 118
    Colon = 119
    Doublecolon = 120
    Semi = 121
    Dot = 122
    DotStar = 123
    Ellipsis = 124
    Identifier = 125
    Integerliteral = 126
    Decimalliteral = 127
    Octalliteral = 128
    Hexadecimalliteral = 129
    Binaryliteral = 130
    Integersuffix = 131
    Characterliteral = 132
    Floatingliteral = 133
    Stringliteral = 134
    Userdefinedintegerliteral = 135
    Userdefinedfloatingliteral = 136
    Userdefinedstringliteral = 137
    Userdefinedcharacterliteral = 138
    Whitespace = 139
    Newline = 140
    BlockComment = 141
    LineComment = 142

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class TranslationunitContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CPP14Parser.EOF, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_translationunit

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTranslationunit"):
                listener.enterTranslationunit(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTranslationunit"):
                listener.exitTranslationunit(self)

    def translationunit(self):

        localctx = CPP14Parser.TranslationunitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationunit)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (
                1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (
                1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (
                1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or (
                    (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                1 << (CPP14Parser.Identifier - 67)))) != 0):
                self.state = 370
                self.declarationseq(0)

            self.state = 373
            self.match(CPP14Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(CPP14Parser.LiteralContext, 0)

        def This(self):
            return self.getToken(CPP14Parser.This, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext, 0)

        def lambdacapture(self):
            return self.getTypedRuleContext(CPP14Parser.LambdacaptureContext, 0)

        def lambdadeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.LambdadeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_primaryexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimaryexpression"):
                listener.enterPrimaryexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimaryexpression"):
                listener.exitPrimaryexpression(self)

    def primaryexpression(self):

        localctx = CPP14Parser.PrimaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_primaryexpression)
        self._la = 0  # Token type
        try:
            self.state = 391
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.FalseToken, CPP14Parser.Nullptr, CPP14Parser.TrueToken, CPP14Parser.Integerliteral,
                         CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral,
                         CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral,
                         CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 375
                self.literal()
                pass
            elif token in [CPP14Parser.This]:
                self.enterOuterAlt(localctx, 2)
                self.state = 376
                self.match(CPP14Parser.This)
                pass
            elif token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 3)
                self.state = 377
                self.match(CPP14Parser.LeftParen)
                self.state = 378
                self.expression(0)
                self.state = 379
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Operator, CPP14Parser.Tilde, CPP14Parser.Doublecolon,
                           CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 4)
                self.state = 381
                self.idexpression()
                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 5)
                self.state = 382
                self.match(CPP14Parser.LeftBracket)
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & (
                            (1 << (CPP14Parser.This - 62)) | (1 << (CPP14Parser.And - 62)) | (
                        1 << (CPP14Parser.Assign - 62)) | (1 << (CPP14Parser.Identifier - 62)))) != 0):
                    self.state = 383
                    self.lambdacapture()

                self.state = 386
                self.match(CPP14Parser.RightBracket)
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.LeftParen:
                    self.state = 387
                    self.lambdadeclarator()

                self.state = 390
                self.compoundstatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdacaptureContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capturedefault(self):
            return self.getTypedRuleContext(CPP14Parser.CapturedefaultContext, 0)

        def capturelist(self):
            return self.getTypedRuleContext(CPP14Parser.CapturelistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdacapture

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambdacapture"):
                listener.enterLambdacapture(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambdacapture"):
                listener.exitLambdacapture(self)

    def lambdacapture(self):

        localctx = CPP14Parser.LambdacaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_lambdacapture)
        try:
            self.state = 399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 4, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 393
                self.capturedefault()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 394
                self.capturelist(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 395
                self.capturedefault()
                self.state = 396
                self.match(CPP14Parser.Comma)
                self.state = 397
                self.capturelist(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def qualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.QualifiedidContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_idexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdexpression"):
                listener.enterIdexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdexpression"):
                listener.exitIdexpression(self)

    def idexpression(self):

        localctx = CPP14Parser.IdexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_idexpression)
        try:
            self.state = 403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 5, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 401
                self.unqualifiedid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 402
                self.qualifiedid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnqualifiedidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def operatorfunctionid(self):
            return self.getTypedRuleContext(CPP14Parser.OperatorfunctionidContext, 0)

        def conversionfunctionid(self):
            return self.getTypedRuleContext(CPP14Parser.ConversionfunctionidContext, 0)

        def literaloperatorid(self):
            return self.getTypedRuleContext(CPP14Parser.LiteraloperatoridContext, 0)

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext, 0)

        def templateid(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateidContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unqualifiedid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnqualifiedid"):
                listener.enterUnqualifiedid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnqualifiedid"):
                listener.exitUnqualifiedid(self)

    def unqualifiedid(self):

        localctx = CPP14Parser.UnqualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_unqualifiedid)
        try:
            self.state = 414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 6, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 405
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 406
                self.operatorfunctionid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 407
                self.conversionfunctionid()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 408
                self.literaloperatorid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 409
                self.match(CPP14Parser.Tilde)
                self.state = 410
                self.classname()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 411
                self.match(CPP14Parser.Tilde)
                self.state = 412
                self.decltypespecifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 413
                self.templateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_qualifiedid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQualifiedid"):
                listener.enterQualifiedid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQualifiedid"):
                listener.exitQualifiedid(self)

    def qualifiedid(self):

        localctx = CPP14Parser.QualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_qualifiedid)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.nestednamespecifier(0)
            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Template:
                self.state = 417
                self.match(CPP14Parser.Template)

            self.state = 420
            self.unqualifiedid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestednamespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypenameContext, 0)

        def namespacename(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacenameContext, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_nestednamespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNestednamespecifier"):
                listener.enterNestednamespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNestednamespecifier"):
                listener.exitNestednamespecifier(self)

    def nestednamespecifier(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NestednamespecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 12
        self.enterRecursionRule(localctx, 12, self.RULE_nestednamespecifier, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 8, self._ctx)
            if la_ == 1:
                self.state = 423
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 2:
                self.state = 424
                self.thetypename()
                self.state = 425
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 3:
                self.state = 427
                self.namespacename()
                self.state = 428
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 4:
                self.state = 430
                self.decltypespecifier()
                self.state = 431
                self.match(CPP14Parser.Doublecolon)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 447
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 445
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 10, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NestednamespecifierContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                        self.state = 435
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 436
                        self.match(CPP14Parser.Identifier)
                        self.state = 437
                        self.match(CPP14Parser.Doublecolon)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NestednamespecifierContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                        self.state = 438
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 440
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 439
                            self.match(CPP14Parser.Template)

                        self.state = 442
                        self.simpletemplateid()
                        self.state = 443
                        self.match(CPP14Parser.Doublecolon)
                        pass

                self.state = 449
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class CapturedefaultContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return CPP14Parser.RULE_capturedefault

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCapturedefault"):
                listener.enterCapturedefault(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCapturedefault"):
                listener.exitCapturedefault(self)

    def capturedefault(self):

        localctx = CPP14Parser.CapturedefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_capturedefault)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.And or _la == CPP14Parser.Assign):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CapturelistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capture(self):
            return self.getTypedRuleContext(CPP14Parser.CaptureContext, 0)

        def capturelist(self):
            return self.getTypedRuleContext(CPP14Parser.CapturelistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_capturelist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCapturelist"):
                listener.enterCapturelist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCapturelist"):
                listener.exitCapturelist(self)

    def capturelist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.CapturelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 16
        self.enterRecursionRule(localctx, 16, self.RULE_capturelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self.capture()
            self.state = 455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 12, self._ctx)
            if la_ == 1:
                self.state = 454
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 465
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 14, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.CapturelistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_capturelist)
                    self.state = 457
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 458
                    self.match(CPP14Parser.Comma)
                    self.state = 459
                    self.capture()
                    self.state = 461
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
                    if la_ == 1:
                        self.state = 460
                        self.match(CPP14Parser.Ellipsis)

                self.state = 467
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 14, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class CaptureContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def This(self):
            return self.getToken(CPP14Parser.This, 0)

        def initializer(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_capture

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCapture"):
                listener.enterCapture(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCapture"):
                listener.exitCapture(self)

    def capture(self):

        localctx = CPP14Parser.CaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_capture)
        try:
            self.state = 477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 15, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 468
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 469
                self.match(CPP14Parser.And)
                self.state = 470
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 471
                self.match(CPP14Parser.This)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 472
                self.match(CPP14Parser.Identifier)
                self.state = 473
                self.initializer()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 474
                self.match(CPP14Parser.And)
                self.state = 475
                self.match(CPP14Parser.Identifier)
                self.state = 476
                self.initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdadeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationclauseContext, 0)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionspecificationContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingreturntypeContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdadeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambdadeclarator"):
                listener.enterLambdadeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambdadeclarator"):
                listener.exitLambdadeclarator(self)

    def lambdadeclarator(self):

        localctx = CPP14Parser.LambdadeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_lambdadeclarator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.match(CPP14Parser.LeftParen)
            self.state = 480
            self.parameterdeclarationclause()
            self.state = 481
            self.match(CPP14Parser.RightParen)
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Mutable:
                self.state = 482
                self.match(CPP14Parser.Mutable)

            self.state = 486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Noexcept or _la == CPP14Parser.Throw:
                self.state = 485
                self.exceptionspecification()

            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 488
                self.attributespecifierseq(0)

            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Arrow:
                self.state = 491
                self.trailingreturntype()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PrimaryexpressionContext, 0)

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext, 0)

        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypenamespecifierContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def Dynamic_cast(self):
            return self.getToken(CPP14Parser.Dynamic_cast, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def Static_cast(self):
            return self.getToken(CPP14Parser.Static_cast, 0)

        def Reinterpret_cast(self):
            return self.getToken(CPP14Parser.Reinterpret_cast, 0)

        def Const_cast(self):
            return self.getToken(CPP14Parser.Const_cast, 0)

        def Typeid(self):
            return self.getToken(CPP14Parser.Typeid, 0)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def pseudodestructorname(self):
            return self.getTypedRuleContext(CPP14Parser.PseudodestructornameContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_postfixexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPostfixexpression"):
                listener.enterPostfixexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPostfixexpression"):
                listener.exitPostfixexpression(self)

    def postfixexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PostfixexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 22
        self.enterRecursionRule(localctx, 22, self.RULE_postfixexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 22, self._ctx)
            if la_ == 1:
                self.state = 495
                self.primaryexpression()
                pass

            elif la_ == 2:
                self.state = 496
                self.simpletypespecifier()
                self.state = 497
                self.match(CPP14Parser.LeftParen)
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                    1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                    1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 498
                    self.expressionlist()

                self.state = 501
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 3:
                self.state = 503
                self.typenamespecifier()
                self.state = 504
                self.match(CPP14Parser.LeftParen)
                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                    1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                    1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 505
                    self.expressionlist()

                self.state = 508
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 4:
                self.state = 510
                self.simpletypespecifier()
                self.state = 511
                self.bracedinitlist()
                pass

            elif la_ == 5:
                self.state = 513
                self.typenamespecifier()
                self.state = 514
                self.bracedinitlist()
                pass

            elif la_ == 6:
                self.state = 516
                self.match(CPP14Parser.Dynamic_cast)
                self.state = 517
                self.match(CPP14Parser.Less)
                self.state = 518
                self.thetypeid()
                self.state = 519
                self.match(CPP14Parser.Greater)
                self.state = 520
                self.match(CPP14Parser.LeftParen)
                self.state = 521
                self.expression(0)
                self.state = 522
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 7:
                self.state = 524
                self.match(CPP14Parser.Static_cast)
                self.state = 525
                self.match(CPP14Parser.Less)
                self.state = 526
                self.thetypeid()
                self.state = 527
                self.match(CPP14Parser.Greater)
                self.state = 528
                self.match(CPP14Parser.LeftParen)
                self.state = 529
                self.expression(0)
                self.state = 530
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 8:
                self.state = 532
                self.match(CPP14Parser.Reinterpret_cast)
                self.state = 533
                self.match(CPP14Parser.Less)
                self.state = 534
                self.thetypeid()
                self.state = 535
                self.match(CPP14Parser.Greater)
                self.state = 536
                self.match(CPP14Parser.LeftParen)
                self.state = 537
                self.expression(0)
                self.state = 538
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 9:
                self.state = 540
                self.match(CPP14Parser.Const_cast)
                self.state = 541
                self.match(CPP14Parser.Less)
                self.state = 542
                self.thetypeid()
                self.state = 543
                self.match(CPP14Parser.Greater)
                self.state = 544
                self.match(CPP14Parser.LeftParen)
                self.state = 545
                self.expression(0)
                self.state = 546
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 10:
                self.state = 548
                self.match(CPP14Parser.Typeid)
                self.state = 549
                self.match(CPP14Parser.LeftParen)
                self.state = 550
                self.expression(0)
                self.state = 551
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 11:
                self.state = 553
                self.match(CPP14Parser.Typeid)
                self.state = 554
                self.match(CPP14Parser.LeftParen)
                self.state = 555
                self.thetypeid()
                self.state = 556
                self.match(CPP14Parser.RightParen)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 600
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 27, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 598
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 26, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 560
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 561
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 562
                        self.expression(0)
                        self.state = 563
                        self.match(CPP14Parser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 565
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 566
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 567
                        self.bracedinitlist()
                        self.state = 568
                        self.match(CPP14Parser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 570
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 571
                        self.match(CPP14Parser.LeftParen)
                        self.state = 573
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                            CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                            1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                            1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                            1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                            1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                            1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (
                            1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                            1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                            1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                            1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                            1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                                (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                                (1 << (CPP14Parser.Characterliteral - 132)) | (
                                                1 << (CPP14Parser.Floatingliteral - 132)) | (
                                            1 << (CPP14Parser.Stringliteral - 132)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 572
                            self.expressionlist()

                        self.state = 575
                        self.match(CPP14Parser.RightParen)
                        pass

                    elif la_ == 4:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 576
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 577
                        self.match(CPP14Parser.Dot)
                        self.state = 579
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 578
                            self.match(CPP14Parser.Template)

                        self.state = 581
                        self.idexpression()
                        pass

                    elif la_ == 5:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 582
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 583
                        self.match(CPP14Parser.Arrow)
                        self.state = 585
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 584
                            self.match(CPP14Parser.Template)

                        self.state = 587
                        self.idexpression()
                        pass

                    elif la_ == 6:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 588
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 589
                        self.match(CPP14Parser.Dot)
                        self.state = 590
                        self.pseudodestructorname()
                        pass

                    elif la_ == 7:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 591
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 592
                        self.match(CPP14Parser.Arrow)
                        self.state = 593
                        self.pseudodestructorname()
                        pass

                    elif la_ == 8:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 594
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 595
                        self.match(CPP14Parser.PlusPlus)
                        pass

                    elif la_ == 9:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 596
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 597
                        self.match(CPP14Parser.MinusMinus)
                        pass

                self.state = 602
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 27, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExpressionlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_expressionlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionlist"):
                listener.enterExpressionlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionlist"):
                listener.exitExpressionlist(self)

    def expressionlist(self):

        localctx = CPP14Parser.ExpressionlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_expressionlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self.initializerlist(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PseudodestructornameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ThetypenameContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ThetypenameContext, i)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pseudodestructorname

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPseudodestructorname"):
                listener.enterPseudodestructorname(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPseudodestructorname"):
                listener.exitPseudodestructorname(self)

    def pseudodestructorname(self):

        localctx = CPP14Parser.PseudodestructornameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_pseudodestructorname)
        self._la = 0  # Token type
        try:
            self.state = 627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 30, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 606
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 28, self._ctx)
                if la_ == 1:
                    self.state = 605
                    self.nestednamespecifier(0)

                self.state = 608
                self.thetypename()
                self.state = 609
                self.match(CPP14Parser.Doublecolon)
                self.state = 610
                self.match(CPP14Parser.Tilde)
                self.state = 611
                self.thetypename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 613
                self.nestednamespecifier(0)
                self.state = 614
                self.match(CPP14Parser.Template)
                self.state = 615
                self.simpletemplateid()
                self.state = 616
                self.match(CPP14Parser.Doublecolon)
                self.state = 617
                self.match(CPP14Parser.Tilde)
                self.state = 618
                self.thetypename()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                    self.state = 620
                    self.nestednamespecifier(0)

                self.state = 623
                self.match(CPP14Parser.Tilde)
                self.state = 624
                self.thetypename()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 625
                self.match(CPP14Parser.Tilde)
                self.state = 626
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext, 0)

        def unaryincdecexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryincdecexpressionContext, 0)

        def unaryoperator(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryoperatorContext, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def Sizeof(self):
            return self.getToken(CPP14Parser.Sizeof, 0)

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Alignof(self):
            return self.getToken(CPP14Parser.Alignof, 0)

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def newexpression(self):
            return self.getTypedRuleContext(CPP14Parser.NewexpressionContext, 0)

        def deleteexpression(self):
            return self.getTypedRuleContext(CPP14Parser.DeleteexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryexpression"):
                listener.enterUnaryexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryexpression"):
                listener.exitUnaryexpression(self)

    def unaryexpression(self):

        localctx = CPP14Parser.UnaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_unaryexpression)
        try:
            self.state = 658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 31, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 629
                self.postfixexpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 630
                self.unaryincdecexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 631
                self.unaryoperator()
                self.state = 632
                self.castexpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 634
                self.match(CPP14Parser.Sizeof)
                self.state = 635
                self.unaryexpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 636
                self.match(CPP14Parser.Sizeof)
                self.state = 637
                self.match(CPP14Parser.LeftParen)
                self.state = 638
                self.thetypeid()
                self.state = 639
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 641
                self.match(CPP14Parser.Sizeof)
                self.state = 642
                self.match(CPP14Parser.Ellipsis)
                self.state = 643
                self.match(CPP14Parser.LeftParen)
                self.state = 644
                self.match(CPP14Parser.Identifier)
                self.state = 645
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 646
                self.match(CPP14Parser.Alignof)
                self.state = 647
                self.match(CPP14Parser.LeftParen)
                self.state = 648
                self.thetypeid()
                self.state = 649
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 651
                self.match(CPP14Parser.Noexcept)
                self.state = 652
                self.match(CPP14Parser.LeftParen)
                self.state = 653
                self.expression(0)
                self.state = 654
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 656
                self.newexpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 657
                self.deleteexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryincdecexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryincdecexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryincdecexpression"):
                listener.enterUnaryincdecexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryincdecexpression"):
                listener.exitUnaryincdecexpression(self)

    def unaryincdecexpression(self):

        localctx = CPP14Parser.UnaryincdecexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_unaryincdecexpression)
        try:
            self.state = 664
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.PlusPlus]:
                self.enterOuterAlt(localctx, 1)
                self.state = 660
                self.match(CPP14Parser.PlusPlus)
                self.state = 661
                self.castexpression()
                pass
            elif token in [CPP14Parser.MinusMinus]:
                self.enterOuterAlt(localctx, 2)
                self.state = 662
                self.match(CPP14Parser.MinusMinus)
                self.state = 663
                self.castexpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryoperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryoperator"):
                listener.enterUnaryoperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryoperator"):
                listener.exitUnaryoperator(self)

    def unaryoperator(self):

        localctx = CPP14Parser.UnaryoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_unaryoperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            _la = self._input.LA(1)
            if not (((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & (
                                    (1 << (CPP14Parser.Plus - 84)) | (1 << (CPP14Parser.Minus - 84)) | (
                                1 << (CPP14Parser.Star - 84)) | (1 << (CPP14Parser.And - 84)) | (
                        1 << (CPP14Parser.Or - 84)) | (1 << (CPP14Parser.Tilde - 84)) | (
                1 << (CPP14Parser.Not - 84)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def newplacement(self):
            return self.getTypedRuleContext(CPP14Parser.NewplacementContext, 0)

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext, 0)

        def newinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.NewinitializerContext, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewexpression"):
                listener.enterNewexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewexpression"):
                listener.exitNewexpression(self)

    def newexpression(self):

        localctx = CPP14Parser.NewexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_newexpression)
        self._la = 0  # Token type
        try:
            self.state = 695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 40, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Doublecolon:
                    self.state = 668
                    self.match(CPP14Parser.Doublecolon)

                self.state = 671
                self.match(CPP14Parser.New)
                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.LeftParen:
                    self.state = 672
                    self.newplacement()

                self.state = 675
                self.typespecifierseq()
                self.state = 677
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 35, self._ctx)
                if la_ == 1:
                    self.state = 676
                    self.newdeclarator()

                self.state = 680
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 36, self._ctx)
                if la_ == 1:
                    self.state = 679
                    self.newinitializer()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Doublecolon:
                    self.state = 682
                    self.match(CPP14Parser.Doublecolon)

                self.state = 685
                self.match(CPP14Parser.New)
                self.state = 687
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 38, self._ctx)
                if la_ == 1:
                    self.state = 686
                    self.newplacement()

                self.state = 689
                self.match(CPP14Parser.LeftParen)
                self.state = 690
                self.thetypeid()
                self.state = 691
                self.match(CPP14Parser.RightParen)
                self.state = 693
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 39, self._ctx)
                if la_ == 1:
                    self.state = 692
                    self.newinitializer()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewplacementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newplacement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewplacement"):
                listener.enterNewplacement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewplacement"):
                listener.exitNewplacement(self)

    def newplacement(self):

        localctx = CPP14Parser.NewplacementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_newplacement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.match(CPP14Parser.LeftParen)
            self.state = 698
            self.expressionlist()
            self.state = 699
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext, 0)

        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrnewdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewdeclarator"):
                listener.enterNewdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewdeclarator"):
                listener.exitNewdeclarator(self)

    def newdeclarator(self):

        localctx = CPP14Parser.NewdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_newdeclarator)
        try:
            self.state = 706
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                         CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 701
                self.ptroperator()
                self.state = 703
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 41, self._ctx)
                if la_ == 1:
                    self.state = 702
                    self.newdeclarator()

                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 705
                self.noptrnewdeclarator(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrnewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrnewdeclaratorContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrnewdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrnewdeclarator"):
                listener.enterNoptrnewdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrnewdeclarator"):
                listener.exitNoptrnewdeclarator(self)

    def noptrnewdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrnewdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 40
        self.enterRecursionRule(localctx, 40, self.RULE_noptrnewdeclarator, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.match(CPP14Parser.LeftBracket)
            self.state = 710
            self.expression(0)
            self.state = 711
            self.match(CPP14Parser.RightBracket)
            self.state = 713
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 43, self._ctx)
            if la_ == 1:
                self.state = 712
                self.attributespecifierseq(0)

            self._ctx.stop = self._input.LT(-1)
            self.state = 724
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 45, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoptrnewdeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrnewdeclarator)
                    self.state = 715
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 716
                    self.match(CPP14Parser.LeftBracket)
                    self.state = 717
                    self.constantexpression()
                    self.state = 718
                    self.match(CPP14Parser.RightBracket)
                    self.state = 720
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 44, self._ctx)
                    if la_ == 1:
                        self.state = 719
                        self.attributespecifierseq(0)

                self.state = 726
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 45, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class NewinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newinitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewinitializer"):
                listener.enterNewinitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewinitializer"):
                listener.exitNewinitializer(self)

    def newinitializer(self):

        localctx = CPP14Parser.NewinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_newinitializer)
        self._la = 0  # Token type
        try:
            self.state = 733
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 727
                self.match(CPP14Parser.LeftParen)
                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                    1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                    1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 728
                    self.expressionlist()

                self.state = 731
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 732
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_deleteexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeleteexpression"):
                listener.enterDeleteexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeleteexpression"):
                listener.exitDeleteexpression(self)

    def deleteexpression(self):

        localctx = CPP14Parser.DeleteexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_deleteexpression)
        self._la = 0  # Token type
        try:
            self.state = 747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 50, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Doublecolon:
                    self.state = 735
                    self.match(CPP14Parser.Doublecolon)

                self.state = 738
                self.match(CPP14Parser.Delete)
                self.state = 739
                self.castexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Doublecolon:
                    self.state = 740
                    self.match(CPP14Parser.Doublecolon)

                self.state = 743
                self.match(CPP14Parser.Delete)
                self.state = 744
                self.match(CPP14Parser.LeftBracket)
                self.state = 745
                self.match(CPP14Parser.RightBracket)
                self.state = 746
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_castexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCastexpression"):
                listener.enterCastexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCastexpression"):
                listener.exitCastexpression(self)

    def castexpression(self):

        localctx = CPP14Parser.CastexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_castexpression)
        try:
            self.state = 755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 51, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 749
                self.unaryexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 750
                self.match(CPP14Parser.LeftParen)
                self.state = 751
                self.thetypeid()
                self.state = 752
                self.match(CPP14Parser.RightParen)
                self.state = 753
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PmexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def pmexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PmexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pmexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPmexpression"):
                listener.enterPmexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPmexpression"):
                listener.exitPmexpression(self)

    def pmexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PmexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 48
        self.enterRecursionRule(localctx, 48, self.RULE_pmexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.castexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 768
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 53, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 766
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 52, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.PmexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                        self.state = 760
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 761
                        self.match(CPP14Parser.DotStar)
                        self.state = 762
                        self.castexpression()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.PmexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                        self.state = 763
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 764
                        self.match(CPP14Parser.ArrowStar)
                        self.state = 765
                        self.castexpression()
                        pass

                self.state = 770
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 53, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class MultiplicativeexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pmexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PmexpressionContext, 0)

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14Parser.MultiplicativeexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_multiplicativeexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMultiplicativeexpression"):
                listener.enterMultiplicativeexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMultiplicativeexpression"):
                listener.exitMultiplicativeexpression(self)

    def multiplicativeexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.MultiplicativeexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 50
        self.enterRecursionRule(localctx, 50, self.RULE_multiplicativeexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.pmexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 785
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 55, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 783
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 54, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 774
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 775
                        self.match(CPP14Parser.Star)
                        self.state = 776
                        self.pmexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 777
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 778
                        self.match(CPP14Parser.Div)
                        self.state = 779
                        self.pmexpression(0)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 780
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 781
                        self.match(CPP14Parser.Mod)
                        self.state = 782
                        self.pmexpression(0)
                        pass

                self.state = 787
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 55, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AdditiveexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14Parser.MultiplicativeexpressionContext, 0)

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AdditiveexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_additiveexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAdditiveexpression"):
                listener.enterAdditiveexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAdditiveexpression"):
                listener.exitAdditiveexpression(self)

    def additiveexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AdditiveexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_additiveexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.multiplicativeexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 799
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 57, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 797
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 56, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.AdditiveexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                        self.state = 791
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 792
                        self.match(CPP14Parser.Plus)
                        self.state = 793
                        self.multiplicativeexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.AdditiveexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                        self.state = 794
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 795
                        self.match(CPP14Parser.Minus)
                        self.state = 796
                        self.multiplicativeexpression(0)
                        pass

                self.state = 801
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 57, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ShiftexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AdditiveexpressionContext, 0)

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext, 0)

        def rightShift(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_shiftexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShiftexpression"):
                listener.enterShiftexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShiftexpression"):
                listener.exitShiftexpression(self)

    def shiftexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ShiftexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 54
        self.enterRecursionRule(localctx, 54, self.RULE_shiftexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.additiveexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 814
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 59, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 812
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 58, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.ShiftexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftexpression)
                        self.state = 805
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 806
                        self.match(CPP14Parser.LeftShift)
                        self.state = 807
                        self.additiveexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.ShiftexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftexpression)
                        self.state = 808
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 809
                        self.rightShift()
                        self.state = 810
                        self.additiveexpression(0)
                        pass

                self.state = 816
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 59, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class RelationalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext, 0)

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_relationalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelationalexpression"):
                listener.enterRelationalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelationalexpression"):
                listener.exitRelationalexpression(self)

    def relationalexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.RelationalexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_relationalexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.shiftexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 834
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 61, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 832
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 60, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 820
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 821
                        self.match(CPP14Parser.Less)
                        self.state = 822
                        self.shiftexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 823
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 824
                        self.match(CPP14Parser.Greater)
                        self.state = 825
                        self.shiftexpression(0)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 826
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 827
                        self.match(CPP14Parser.LessEqual)
                        self.state = 828
                        self.shiftexpression(0)
                        pass

                    elif la_ == 4:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 829
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 830
                        self.match(CPP14Parser.GreaterEqual)
                        self.state = 831
                        self.shiftexpression(0)
                        pass

                self.state = 836
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 61, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EqualityexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext, 0)

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_equalityexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEqualityexpression"):
                listener.enterEqualityexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEqualityexpression"):
                listener.exitEqualityexpression(self)

    def equalityexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EqualityexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 58
        self.enterRecursionRule(localctx, 58, self.RULE_equalityexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.relationalexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 848
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 63, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 846
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 62, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                        self.state = 840
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 841
                        self.match(CPP14Parser.Equal)
                        self.state = 842
                        self.relationalexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                        self.state = 843
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 844
                        self.match(CPP14Parser.NotEqual)
                        self.state = 845
                        self.relationalexpression(0)
                        pass

                self.state = 850
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 63, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AndexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, 0)

        def andexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AndexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_andexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAndexpression"):
                listener.enterAndexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAndexpression"):
                listener.exitAndexpression(self)

    def andexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AndexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_andexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.equalityexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 859
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 64, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AndexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_andexpression)
                    self.state = 854
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 855
                    self.match(CPP14Parser.And)
                    self.state = 856
                    self.equalityexpression(0)
                self.state = 861
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 64, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExclusiveorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AndexpressionContext, 0)

        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ExclusiveorexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exclusiveorexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExclusiveorexpression"):
                listener.enterExclusiveorexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExclusiveorexpression"):
                listener.exitExclusiveorexpression(self)

    def exclusiveorexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ExclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 62
        self.enterRecursionRule(localctx, 62, self.RULE_exclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.andexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 870
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 65, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ExclusiveorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusiveorexpression)
                    self.state = 865
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 866
                    self.match(CPP14Parser.Caret)
                    self.state = 867
                    self.andexpression(0)
                self.state = 872
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 65, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class InclusiveorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ExclusiveorexpressionContext, 0)

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.InclusiveorexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_inclusiveorexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInclusiveorexpression"):
                listener.enterInclusiveorexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInclusiveorexpression"):
                listener.exitInclusiveorexpression(self)

    def inclusiveorexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_inclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.exclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 881
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 66, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InclusiveorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_inclusiveorexpression)
                    self.state = 876
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 877
                    self.match(CPP14Parser.Or)
                    self.state = 878
                    self.exclusiveorexpression(0)
                self.state = 883
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 66, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalandexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.InclusiveorexpressionContext, 0)

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalandexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalandexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalandexpression"):
                listener.enterLogicalandexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalandexpression"):
                listener.exitLogicalandexpression(self)

    def logicalandexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.LogicalandexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 66
        self.enterRecursionRule(localctx, 66, self.RULE_logicalandexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.inclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 892
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 67, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.LogicalandexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalandexpression)
                    self.state = 887
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 888
                    self.match(CPP14Parser.AndAnd)
                    self.state = 889
                    self.inclusiveorexpression(0)
                self.state = 894
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 67, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalandexpressionContext, 0)

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalorexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalorexpression"):
                listener.enterLogicalorexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalorexpression"):
                listener.exitLogicalorexpression(self)

    def logicalorexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.LogicalorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_logicalorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896
            self.logicalandexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 903
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 68, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.LogicalorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalorexpression)
                    self.state = 898
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 899
                    self.match(CPP14Parser.OrOr)
                    self.state = 900
                    self.logicalandexpression(0)
                self.state = 905
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 68, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ConditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def ternaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.TernaryconditionalexpressionContext, 0)

        def unaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryconditionalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_conditionalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConditionalexpression"):
                listener.enterConditionalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConditionalexpression"):
                listener.exitConditionalexpression(self)

    def conditionalexpression(self):

        localctx = CPP14Parser.ConditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_conditionalexpression)
        try:
            self.state = 909
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 69, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 906
                self.logicalorexpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 907
                self.ternaryconditionalexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 908
                self.unaryconditionalexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TernaryconditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ternaryconditionalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTernaryconditionalexpression"):
                listener.enterTernaryconditionalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTernaryconditionalexpression"):
                listener.exitTernaryconditionalexpression(self)

    def ternaryconditionalexpression(self):

        localctx = CPP14Parser.TernaryconditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_ternaryconditionalexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.logicalorexpression(0)
            self.state = 912
            self.match(CPP14Parser.Question)
            self.state = 913
            self.expression(0)
            self.state = 914
            self.match(CPP14Parser.Colon)
            self.state = 915
            self.assignmentexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryconditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryconditionalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryconditionalexpression"):
                listener.enterUnaryconditionalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryconditionalexpression"):
                listener.exitUnaryconditionalexpression(self)

    def unaryconditionalexpression(self):

        localctx = CPP14Parser.UnaryconditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_unaryconditionalexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            self.logicalorexpression(0)
            self.state = 918
            self.match(CPP14Parser.Question)
            self.state = 919
            self.match(CPP14Parser.Colon)
            self.state = 920
            self.assignmentexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def assignmentoperator(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentoperatorContext, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext, 0)

        def throwexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ThrowexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentexpression"):
                listener.enterAssignmentexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentexpression"):
                listener.exitAssignmentexpression(self)

    def assignmentexpression(self):

        localctx = CPP14Parser.AssignmentexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_assignmentexpression)
        try:
            self.state = 928
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 70, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 922
                self.conditionalexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 923
                self.logicalorexpression(0)
                self.state = 924
                self.assignmentoperator()
                self.state = 925
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 927
                self.throwexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rightShiftAssign(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftAssignContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentoperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentoperator"):
                listener.enterAssignmentoperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentoperator"):
                listener.exitAssignmentoperator(self)

    def assignmentoperator(self):

        localctx = CPP14Parser.AssignmentoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_assignmentoperator)
        try:
            self.state = 941
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 930
                self.match(CPP14Parser.Assign)
                pass
            elif token in [CPP14Parser.StarAssign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 931
                self.match(CPP14Parser.StarAssign)
                pass
            elif token in [CPP14Parser.DivAssign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 932
                self.match(CPP14Parser.DivAssign)
                pass
            elif token in [CPP14Parser.ModAssign]:
                self.enterOuterAlt(localctx, 4)
                self.state = 933
                self.match(CPP14Parser.ModAssign)
                pass
            elif token in [CPP14Parser.PlusAssign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 934
                self.match(CPP14Parser.PlusAssign)
                pass
            elif token in [CPP14Parser.MinusAssign]:
                self.enterOuterAlt(localctx, 6)
                self.state = 935
                self.match(CPP14Parser.MinusAssign)
                pass
            elif token in [CPP14Parser.Greater]:
                self.enterOuterAlt(localctx, 7)
                self.state = 936
                self.rightShiftAssign()
                pass
            elif token in [CPP14Parser.LeftShiftAssign]:
                self.enterOuterAlt(localctx, 8)
                self.state = 937
                self.match(CPP14Parser.LeftShiftAssign)
                pass
            elif token in [CPP14Parser.AndAssign]:
                self.enterOuterAlt(localctx, 9)
                self.state = 938
                self.match(CPP14Parser.AndAssign)
                pass
            elif token in [CPP14Parser.XorAssign]:
                self.enterOuterAlt(localctx, 10)
                self.state = 939
                self.match(CPP14Parser.XorAssign)
                pass
            elif token in [CPP14Parser.OrAssign]:
                self.enterOuterAlt(localctx, 11)
                self.state = 940
                self.match(CPP14Parser.OrAssign)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

    def expression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.assignmentexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 951
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 72, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 946
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 947
                    self.match(CPP14Parser.Comma)
                    self.state = 948
                    self.assignmentexpression()
                self.state = 953
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 72, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ConstantexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_constantexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstantexpression"):
                listener.enterConstantexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstantexpression"):
                listener.exitConstantexpression(self)

    def constantexpression(self):

        localctx = CPP14Parser.ConstantexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_constantexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.conditionalexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def casestatement(self):
            return self.getTypedRuleContext(CPP14Parser.CasestatementContext, 0)

        def defaultstatement(self):
            return self.getTypedRuleContext(CPP14Parser.DefaultstatementContext, 0)

        def expressionstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionstatementContext, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext, 0)

        def selectionstatement(self):
            return self.getTypedRuleContext(CPP14Parser.SelectionstatementContext, 0)

        def iterationstatement(self):
            return self.getTypedRuleContext(CPP14Parser.IterationstatementContext, 0)

        def jumpstatement(self):
            return self.getTypedRuleContext(CPP14Parser.JumpstatementContext, 0)

        def blockdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.BlockdeclarationContext, 0)

        def tryblock(self):
            return self.getTypedRuleContext(CPP14Parser.TryblockContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

    def statement(self):

        localctx = CPP14Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_statement)
        self._la = 0  # Token type
        try:
            self.state = 995
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 82, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 956
                    self.attributespecifierseq(0)

                self.state = 959
                self.match(CPP14Parser.Identifier)
                self.state = 960
                self.match(CPP14Parser.Colon)
                self.state = 961
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 962
                    self.attributespecifierseq(0)

                self.state = 965
                self.casestatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 966
                    self.attributespecifierseq(0)

                self.state = 969
                self.defaultstatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 971
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 76, self._ctx)
                if la_ == 1:
                    self.state = 970
                    self.attributespecifierseq(0)

                self.state = 973
                self.expressionstatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 974
                    self.attributespecifierseq(0)

                self.state = 977
                self.compoundstatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 978
                    self.attributespecifierseq(0)

                self.state = 981
                self.selectionstatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 982
                    self.attributespecifierseq(0)

                self.state = 985
                self.iterationstatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 986
                    self.attributespecifierseq(0)

                self.state = 989
                self.jumpstatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 990
                self.blockdeclaration()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 991
                    self.attributespecifierseq(0)

                self.state = 994
                self.tryblock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CasestatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Case(self):
            return self.getToken(CPP14Parser.Case, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_casestatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCasestatement"):
                listener.enterCasestatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCasestatement"):
                listener.exitCasestatement(self)

    def casestatement(self):

        localctx = CPP14Parser.CasestatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_casestatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.match(CPP14Parser.Case)
            self.state = 998
            self.constantexpression()
            self.state = 999
            self.match(CPP14Parser.Colon)
            self.state = 1000
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_defaultstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDefaultstatement"):
                listener.enterDefaultstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDefaultstatement"):
                listener.exitDefaultstatement(self)

    def defaultstatement(self):

        localctx = CPP14Parser.DefaultstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_defaultstatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.match(CPP14Parser.Default)
            self.state = 1003
            self.match(CPP14Parser.Colon)
            self.state = 1004
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_expressionstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionstatement"):
                listener.enterExpressionstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionstatement"):
                listener.exitExpressionstatement(self)

    def expressionstatement(self):

        localctx = CPP14Parser.ExpressionstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_expressionstatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and (
                (1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                    (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                    (1 << (CPP14Parser.Characterliteral - 132)) | (
                                    1 << (CPP14Parser.Floatingliteral - 132)) | (
                                1 << (CPP14Parser.Stringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                self.state = 1006
                self.expression(0)

            self.state = 1009
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompoundstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementseq(self):
            return self.getTypedRuleContext(CPP14Parser.StatementseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_compoundstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompoundstatement"):
                listener.enterCompoundstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompoundstatement"):
                listener.exitCompoundstatement(self)

    def compoundstatement(self):

        localctx = CPP14Parser.CompoundstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_compoundstatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(CPP14Parser.LeftBrace)
            self.state = 1013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (
                1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (
                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (
                1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (
                1 << CPP14Parser.Friend) | (1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (
                1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (
                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (
                1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Static_cast) | (
                1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (
                1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Try - 64)) | (
                1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                1 << (CPP14Parser.Semi - 64)) | (1 << (CPP14Parser.Ellipsis - 64)) | (
                1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                    (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                    (1 << (CPP14Parser.Characterliteral - 132)) | (
                                    1 << (CPP14Parser.Floatingliteral - 132)) | (
                                1 << (CPP14Parser.Stringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                self.state = 1012
                self.statementseq(0)

            self.state = 1015
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def statementseq(self):
            return self.getTypedRuleContext(CPP14Parser.StatementseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_statementseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatementseq"):
                listener.enterStatementseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatementseq"):
                listener.exitStatementseq(self)

    def statementseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.StatementseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 94
        self.enterRecursionRule(localctx, 94, self.RULE_statementseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.statement()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1024
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 85, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.StatementseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_statementseq)
                    self.state = 1020
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1021
                    self.statement()
                self.state = 1026
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 85, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SelectionstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(CPP14Parser.If, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def elsestatement(self):
            return self.getTypedRuleContext(CPP14Parser.ElsestatementContext, 0)

        def Switch(self):
            return self.getToken(CPP14Parser.Switch, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_selectionstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectionstatement"):
                listener.enterSelectionstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectionstatement"):
                listener.exitSelectionstatement(self)

    def selectionstatement(self):

        localctx = CPP14Parser.SelectionstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_selectionstatement)
        try:
            self.state = 1046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 86, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1027
                self.match(CPP14Parser.If)
                self.state = 1028
                self.match(CPP14Parser.LeftParen)
                self.state = 1029
                self.condition()
                self.state = 1030
                self.match(CPP14Parser.RightParen)
                self.state = 1031
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1033
                self.match(CPP14Parser.If)
                self.state = 1034
                self.match(CPP14Parser.LeftParen)
                self.state = 1035
                self.condition()
                self.state = 1036
                self.match(CPP14Parser.RightParen)
                self.state = 1037
                self.statement()
                self.state = 1038
                self.elsestatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1040
                self.match(CPP14Parser.Switch)
                self.state = 1041
                self.match(CPP14Parser.LeftParen)
                self.state = 1042
                self.condition()
                self.state = 1043
                self.match(CPP14Parser.RightParen)
                self.state = 1044
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElsestatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(CPP14Parser.Else, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_elsestatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElsestatement"):
                listener.enterElsestatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElsestatement"):
                listener.exitElsestatement(self)

    def elsestatement(self):

        localctx = CPP14Parser.ElsestatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_elsestatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(CPP14Parser.Else)
            self.state = 1049
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_condition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCondition"):
                listener.enterCondition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCondition"):
                listener.exitCondition(self)

    def condition(self):

        localctx = CPP14Parser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_condition)
        self._la = 0  # Token type
        try:
            self.state = 1067
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 89, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1051
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1052
                    self.attributespecifierseq(0)

                self.state = 1055
                self.declspecifierseq()
                self.state = 1056
                self.declarator()
                self.state = 1057
                self.match(CPP14Parser.Assign)
                self.state = 1058
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1060
                    self.attributespecifierseq(0)

                self.state = 1063
                self.declspecifierseq()
                self.state = 1064
                self.declarator()
                self.state = 1065
                self.bracedinitlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IterationstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(CPP14Parser.While, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def Do(self):
            return self.getToken(CPP14Parser.Do, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def For(self):
            return self.getToken(CPP14Parser.For, 0)

        def forinitstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ForinitstatementContext, 0)

        def forrangedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ForrangedeclarationContext, 0)

        def forrangeinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.ForrangeinitializerContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_iterationstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIterationstatement"):
                listener.enterIterationstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIterationstatement"):
                listener.exitIterationstatement(self)

    def iterationstatement(self):

        localctx = CPP14Parser.IterationstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_iterationstatement)
        self._la = 0  # Token type
        try:
            self.state = 1104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 92, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1069
                self.match(CPP14Parser.While)
                self.state = 1070
                self.match(CPP14Parser.LeftParen)
                self.state = 1071
                self.condition()
                self.state = 1072
                self.match(CPP14Parser.RightParen)
                self.state = 1073
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1075
                self.match(CPP14Parser.Do)
                self.state = 1076
                self.statement()
                self.state = 1077
                self.match(CPP14Parser.While)
                self.state = 1078
                self.match(CPP14Parser.LeftParen)
                self.state = 1079
                self.expression(0)
                self.state = 1080
                self.match(CPP14Parser.RightParen)
                self.state = 1081
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1083
                self.match(CPP14Parser.For)
                self.state = 1084
                self.match(CPP14Parser.LeftParen)
                self.state = 1085
                self.forinitstatement()
                self.state = 1087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                    1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (
                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                    1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (
                    1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.New) | (
                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (
                    1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                    1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((
                                                                                                                         1 << (
                                                                                                                         CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (
                    1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                    1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                    1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                    1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                    1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                        (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                        (1 << (CPP14Parser.Characterliteral - 132)) | (
                                        1 << (CPP14Parser.Floatingliteral - 132)) | (
                                    1 << (CPP14Parser.Stringliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1086
                    self.condition()

                self.state = 1089
                self.match(CPP14Parser.Semi)
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                    1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                    1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                        (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                        (1 << (CPP14Parser.Characterliteral - 132)) | (
                                        1 << (CPP14Parser.Floatingliteral - 132)) | (
                                    1 << (CPP14Parser.Stringliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1090
                    self.expression(0)

                self.state = 1093
                self.match(CPP14Parser.RightParen)
                self.state = 1094
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1096
                self.match(CPP14Parser.For)
                self.state = 1097
                self.match(CPP14Parser.LeftParen)
                self.state = 1098
                self.forrangedeclaration()
                self.state = 1099
                self.match(CPP14Parser.Colon)
                self.state = 1100
                self.forrangeinitializer()
                self.state = 1101
                self.match(CPP14Parser.RightParen)
                self.state = 1102
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForinitstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionstatementContext, 0)

        def simpledeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.SimpledeclarationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_forinitstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForinitstatement"):
                listener.enterForinitstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForinitstatement"):
                listener.exitForinitstatement(self)

    def forinitstatement(self):

        localctx = CPP14Parser.ForinitstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_forinitstatement)
        try:
            self.state = 1108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 93, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1106
                self.expressionstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1107
                self.simpledeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForrangedeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_forrangedeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForrangedeclaration"):
                listener.enterForrangedeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForrangedeclaration"):
                listener.exitForrangedeclaration(self)

    def forrangedeclaration(self):

        localctx = CPP14Parser.ForrangedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_forrangedeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 1110
                self.attributespecifierseq(0)

            self.state = 1113
            self.declspecifierseq()
            self.state = 1114
            self.declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForrangeinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_forrangeinitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForrangeinitializer"):
                listener.enterForrangeinitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForrangeinitializer"):
                listener.exitForrangeinitializer(self)

    def forrangeinitializer(self):

        localctx = CPP14Parser.ForrangeinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_forrangeinitializer)
        try:
            self.state = 1118
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16,
                         CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype, CPP14Parser.Delete,
                         CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.FalseToken, CPP14Parser.Float,
                         CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Nullptr,
                         CPP14Parser.Operator, CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed,
                         CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw,
                         CPP14Parser.TrueToken, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.Unsigned,
                         CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                         CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                         CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                         CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Integerliteral,
                         CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral,
                         CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral,
                         CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1116
                self.expression(0)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1117
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JumpstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(CPP14Parser.Break, 0)

        def Continue(self):
            return self.getToken(CPP14Parser.Continue, 0)

        def Return(self):
            return self.getToken(CPP14Parser.Return, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def gotostatement(self):
            return self.getTypedRuleContext(CPP14Parser.GotostatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_jumpstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJumpstatement"):
                listener.enterJumpstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJumpstatement"):
                listener.exitJumpstatement(self)

    def jumpstatement(self):

        localctx = CPP14Parser.JumpstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_jumpstatement)
        self._la = 0  # Token type
        try:
            self.state = 1134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 97, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1120
                self.match(CPP14Parser.Break)
                self.state = 1121
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1122
                self.match(CPP14Parser.Continue)
                self.state = 1123
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1124
                self.match(CPP14Parser.Return)
                self.state = 1126
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                    1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                    1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                        (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                        (1 << (CPP14Parser.Characterliteral - 132)) | (
                                        1 << (CPP14Parser.Floatingliteral - 132)) | (
                                    1 << (CPP14Parser.Stringliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1125
                    self.expression(0)

                self.state = 1128
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1129
                self.match(CPP14Parser.Return)
                self.state = 1130
                self.bracedinitlist()
                self.state = 1131
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1133
                self.gotostatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GotostatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Goto(self):
            return self.getToken(CPP14Parser.Goto, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_gotostatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGotostatement"):
                listener.enterGotostatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGotostatement"):
                listener.exitGotostatement(self)

    def gotostatement(self):

        localctx = CPP14Parser.GotostatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_gotostatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self.match(CPP14Parser.Goto)
            self.state = 1137
            self.match(CPP14Parser.Identifier)
            self.state = 1138
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declarationseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclarationseq"):
                listener.enterDeclarationseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclarationseq"):
                listener.exitDeclarationseq(self)

    def declarationseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.DeclarationseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 114
        self.enterRecursionRule(localctx, 114, self.RULE_declarationseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.declaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1147
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 98, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.DeclarationseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_declarationseq)
                    self.state = 1143
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1144
                    self.declaration()
                self.state = 1149
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 98, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.BlockdeclarationContext, 0)

        def functiondefinition(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiondefinitionContext, 0)

        def templatedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.TemplatedeclarationContext, 0)

        def explicitinstantiation(self):
            return self.getTypedRuleContext(CPP14Parser.ExplicitinstantiationContext, 0)

        def explicitspecialization(self):
            return self.getTypedRuleContext(CPP14Parser.ExplicitspecializationContext, 0)

        def linkagespecification(self):
            return self.getTypedRuleContext(CPP14Parser.LinkagespecificationContext, 0)

        def namespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacedefinitionContext, 0)

        def emptydeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.EmptydeclarationContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclaration"):
                listener.enterDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclaration"):
                listener.exitDeclaration(self)

    def declaration(self):

        localctx = CPP14Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_declaration)
        try:
            self.state = 1161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 99, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1150
                self.blockdeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1151
                self.functiondefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1152
                self.templatedeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1153
                self.explicitinstantiation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1154
                self.explicitspecialization()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1155
                self.linkagespecification()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1156
                self.namespacedefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1157
                self.emptydeclaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1158
                self.attributespecifierseq(0)
                self.state = 1159
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpledeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.SimpledeclarationContext, 0)

        def asmdefinition(self):
            return self.getTypedRuleContext(CPP14Parser.AsmdefinitionContext, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def qualifiednamespacespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.QualifiednamespacespecifierContext, 0)

        def usingdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.UsingdeclarationContext, 0)

        def usingdirective(self):
            return self.getTypedRuleContext(CPP14Parser.UsingdirectiveContext, 0)

        def static_assertdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.Static_assertdeclarationContext, 0)

        def aliasdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.AliasdeclarationContext, 0)

        def enumkey(self):
            return self.getTypedRuleContext(CPP14Parser.EnumkeyContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def enumbase(self):
            return self.getTypedRuleContext(CPP14Parser.EnumbaseContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_blockdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBlockdeclaration"):
                listener.enterBlockdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBlockdeclaration"):
                listener.exitBlockdeclaration(self)

    def blockdeclaration(self):

        localctx = CPP14Parser.BlockdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_blockdeclaration)
        self._la = 0  # Token type
        try:
            self.state = 1185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 102, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1163
                self.simpledeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1164
                self.asmdefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1165
                self.match(CPP14Parser.Namespace)
                self.state = 1166
                self.match(CPP14Parser.Identifier)
                self.state = 1167
                self.match(CPP14Parser.Assign)
                self.state = 1168
                self.qualifiednamespacespecifier()
                self.state = 1169
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1171
                self.usingdeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1172
                self.usingdirective()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1173
                self.static_assertdeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1174
                self.aliasdeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1175
                self.enumkey()
                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1176
                    self.attributespecifierseq(0)

                self.state = 1179
                self.match(CPP14Parser.Identifier)
                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1180
                    self.enumbase()

                self.state = 1183
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_aliasdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAliasdeclaration"):
                listener.enterAliasdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAliasdeclaration"):
                listener.exitAliasdeclaration(self)

    def aliasdeclaration(self):

        localctx = CPP14Parser.AliasdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_aliasdeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1187
            self.match(CPP14Parser.Using)
            self.state = 1188
            self.match(CPP14Parser.Identifier)
            self.state = 1190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 1189
                self.attributespecifierseq(0)

            self.state = 1192
            self.match(CPP14Parser.Assign)
            self.state = 1193
            self.thetypeid()
            self.state = 1194
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpledeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_simpledeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpledeclaration"):
                listener.enterSimpledeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpledeclaration"):
                listener.exitSimpledeclaration(self)

    def simpledeclaration(self):

        localctx = CPP14Parser.SimpledeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_simpledeclaration)
        self._la = 0  # Token type
        try:
            self.state = 1210
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32,
                         CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Constexpr, CPP14Parser.Decltype,
                         CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Explicit, CPP14Parser.Extern,
                         CPP14Parser.Float, CPP14Parser.Friend, CPP14Parser.Inline, CPP14Parser.Int, CPP14Parser.Long,
                         CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Register, CPP14Parser.Short,
                         CPP14Parser.Signed, CPP14Parser.Static, CPP14Parser.Struct, CPP14Parser.Thread_local,
                         CPP14Parser.Typedef, CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Unsigned,
                         CPP14Parser.Virtual, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar,
                         CPP14Parser.LeftParen, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Tilde,
                         CPP14Parser.AndAnd, CPP14Parser.Doublecolon, CPP14Parser.Semi, CPP14Parser.Ellipsis,
                         CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1197
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 104, self._ctx)
                if la_ == 1:
                    self.state = 1196
                    self.declspecifierseq()

                self.state = 1200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Operator or ((((_la - 78)) & ~0x3f) == 0 and (
                    (1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.Tilde - 78)) | (
                    1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Doublecolon - 78)) | (
                    1 << (CPP14Parser.Ellipsis - 78)) | (1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1199
                    self.initdeclaratorlist(0)

                self.state = 1202
                self.match(CPP14Parser.Semi)
                pass
            elif token in [CPP14Parser.Alignas, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1203
                self.attributespecifierseq(0)
                self.state = 1205
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 106, self._ctx)
                if la_ == 1:
                    self.state = 1204
                    self.declspecifierseq()

                self.state = 1207
                self.initdeclaratorlist(0)
                self.state = 1208
                self.match(CPP14Parser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Static_assertdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_static_assertdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatic_assertdeclaration"):
                listener.enterStatic_assertdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatic_assertdeclaration"):
                listener.exitStatic_assertdeclaration(self)

    def static_assertdeclaration(self):

        localctx = CPP14Parser.Static_assertdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_static_assertdeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1212
            self.match(CPP14Parser.Static_assert)
            self.state = 1213
            self.match(CPP14Parser.LeftParen)
            self.state = 1214
            self.constantexpression()
            self.state = 1215
            self.match(CPP14Parser.Comma)
            self.state = 1216
            self.match(CPP14Parser.Stringliteral)
            self.state = 1217
            self.match(CPP14Parser.RightParen)
            self.state = 1218
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EmptydeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return CPP14Parser.RULE_emptydeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEmptydeclaration"):
                listener.enterEmptydeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEmptydeclaration"):
                listener.exitEmptydeclaration(self)

    def emptydeclaration(self):

        localctx = CPP14Parser.EmptydeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_emptydeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Register(self):
            return self.getToken(CPP14Parser.Register, 0)

        def Static(self):
            return self.getToken(CPP14Parser.Static, 0)

        def Thread_local(self):
            return self.getToken(CPP14Parser.Thread_local, 0)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def Explicit(self):
            return self.getToken(CPP14Parser.Explicit, 0)

        def Friend(self):
            return self.getToken(CPP14Parser.Friend, 0)

        def Typedef(self):
            return self.getToken(CPP14Parser.Typedef, 0)

        def Constexpr(self):
            return self.getToken(CPP14Parser.Constexpr, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclspecifier"):
                listener.enterDeclspecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclspecifier"):
                listener.exitDeclspecifier(self)

    def declspecifier(self):

        localctx = CPP14Parser.DeclspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_declspecifier)
        try:
            self.state = 1234
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Register]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1222
                self.match(CPP14Parser.Register)
                pass
            elif token in [CPP14Parser.Static]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1223
                self.match(CPP14Parser.Static)
                pass
            elif token in [CPP14Parser.Thread_local]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1224
                self.match(CPP14Parser.Thread_local)
                pass
            elif token in [CPP14Parser.Extern]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1225
                self.match(CPP14Parser.Extern)
                pass
            elif token in [CPP14Parser.Mutable]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1226
                self.match(CPP14Parser.Mutable)
                pass
            elif token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32,
                           CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Decltype, CPP14Parser.Double,
                           CPP14Parser.Enum, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Short,
                           CPP14Parser.Signed, CPP14Parser.Struct, CPP14Parser.Typename, CPP14Parser.Union,
                           CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar,
                           CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1227
                self.typespecifier()
                pass
            elif token in [CPP14Parser.Inline]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1228
                self.match(CPP14Parser.Inline)
                pass
            elif token in [CPP14Parser.Virtual]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1229
                self.match(CPP14Parser.Virtual)
                pass
            elif token in [CPP14Parser.Explicit]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1230
                self.match(CPP14Parser.Explicit)
                pass
            elif token in [CPP14Parser.Friend]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1231
                self.match(CPP14Parser.Friend)
                pass
            elif token in [CPP14Parser.Typedef]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1232
                self.match(CPP14Parser.Typedef)
                pass
            elif token in [CPP14Parser.Constexpr]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1233
                self.match(CPP14Parser.Constexpr)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclspecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclspecifierseq"):
                listener.enterDeclspecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclspecifierseq"):
                listener.exitDeclspecifierseq(self)

    def declspecifierseq(self):

        localctx = CPP14Parser.DeclspecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_declspecifierseq)
        try:
            self.state = 1243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 110, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1236
                self.declspecifier()
                self.state = 1238
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 109, self._ctx)
                if la_ == 1:
                    self.state = 1237
                    self.attributespecifierseq(0)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1240
                self.declspecifier()
                self.state = 1241
                self.declspecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, 0)

        def classspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.ClassspecifierContext, 0)

        def enumhead(self):
            return self.getTypedRuleContext(CPP14Parser.EnumheadContext, 0)

        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypespecifier"):
                listener.enterTypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypespecifier"):
                listener.exitTypespecifier(self)

    def typespecifier(self):

        localctx = CPP14Parser.TypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_typespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 112, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1245
                self.trailingtypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1246
                self.classspecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1247
                self.enumhead()
                self.state = 1248
                self.match(CPP14Parser.LeftBrace)
                self.state = 1250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 1249
                    self.enumeratorlist(0)

                self.state = 1252
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1254
                self.enumhead()
                self.state = 1255
                self.match(CPP14Parser.LeftBrace)
                self.state = 1256
                self.enumeratorlist(0)
                self.state = 1257
                self.match(CPP14Parser.Comma)
                self.state = 1258
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingtypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext, 0)

        def classkey(self):
            return self.getTypedRuleContext(CPP14Parser.ClasskeyContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypenamespecifierContext, 0)

        def cvqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrailingtypespecifier"):
                listener.enterTrailingtypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrailingtypespecifier"):
                listener.exitTrailingtypespecifier(self)

    def trailingtypespecifier(self):

        localctx = CPP14Parser.TrailingtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_trailingtypespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 117, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1262
                self.simpletypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1263
                self.classkey()
                self.state = 1265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1264
                    self.attributespecifierseq(0)

                self.state = 1268
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 114, self._ctx)
                if la_ == 1:
                    self.state = 1267
                    self.nestednamespecifier(0)

                self.state = 1270
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1272
                self.classkey()
                self.state = 1273
                self.simpletemplateid()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1275
                self.classkey()
                self.state = 1276
                self.nestednamespecifier(0)
                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Template:
                    self.state = 1277
                    self.match(CPP14Parser.Template)

                self.state = 1280
                self.simpletemplateid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1282
                self.match(CPP14Parser.Enum)
                self.state = 1284
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 116, self._ctx)
                if la_ == 1:
                    self.state = 1283
                    self.nestednamespecifier(0)

                self.state = 1286
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1287
                self.typenamespecifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1288
                self.cvqualifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypespecifierseq"):
                listener.enterTypespecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypespecifierseq"):
                listener.exitTypespecifierseq(self)

    def typespecifierseq(self):

        localctx = CPP14Parser.TypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_typespecifierseq)
        try:
            self.state = 1298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 119, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1291
                self.typespecifier()
                self.state = 1293
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 118, self._ctx)
                if la_ == 1:
                    self.state = 1292
                    self.attributespecifierseq(0)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1295
                self.typespecifier()
                self.state = 1296
                self.typespecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingtypespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrailingtypespecifierseq"):
                listener.enterTrailingtypespecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrailingtypespecifierseq"):
                listener.exitTrailingtypespecifierseq(self)

    def trailingtypespecifierseq(self):

        localctx = CPP14Parser.TrailingtypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_trailingtypespecifierseq)
        try:
            self.state = 1307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 121, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1300
                self.trailingtypespecifier()
                self.state = 1302
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 120, self._ctx)
                if la_ == 1:
                    self.state = 1301
                    self.attributespecifierseq(0)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1304
                self.trailingtypespecifier()
                self.state = 1305
                self.trailingtypespecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpletypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypenameContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext, 0)

        def Char(self):
            return self.getToken(CPP14Parser.Char, 0)

        def Char16(self):
            return self.getToken(CPP14Parser.Char16, 0)

        def Char32(self):
            return self.getToken(CPP14Parser.Char32, 0)

        def Wchar(self):
            return self.getToken(CPP14Parser.Wchar, 0)

        def Bool(self):
            return self.getToken(CPP14Parser.Bool, 0)

        def Short(self):
            return self.getToken(CPP14Parser.Short, 0)

        def Int(self):
            return self.getToken(CPP14Parser.Int, 0)

        def Long(self):
            return self.getToken(CPP14Parser.Long, 0)

        def Signed(self):
            return self.getToken(CPP14Parser.Signed, 0)

        def Unsigned(self):
            return self.getToken(CPP14Parser.Unsigned, 0)

        def Float(self):
            return self.getToken(CPP14Parser.Float, 0)

        def Double(self):
            return self.getToken(CPP14Parser.Double, 0)

        def Void(self):
            return self.getToken(CPP14Parser.Void, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_simpletypespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpletypespecifier"):
                listener.enterSimpletypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpletypespecifier"):
                listener.exitSimpletypespecifier(self)

    def simpletypespecifier(self):

        localctx = CPP14Parser.SimpletypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_simpletypespecifier)
        try:
            self.state = 1332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 123, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1310
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 122, self._ctx)
                if la_ == 1:
                    self.state = 1309
                    self.nestednamespecifier(0)

                self.state = 1312
                self.thetypename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1313
                self.nestednamespecifier(0)
                self.state = 1314
                self.match(CPP14Parser.Template)
                self.state = 1315
                self.simpletemplateid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1317
                self.match(CPP14Parser.Char)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1318
                self.match(CPP14Parser.Char16)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1319
                self.match(CPP14Parser.Char32)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1320
                self.match(CPP14Parser.Wchar)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1321
                self.match(CPP14Parser.Bool)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1322
                self.match(CPP14Parser.Short)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1323
                self.match(CPP14Parser.Int)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1324
                self.match(CPP14Parser.Long)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1325
                self.match(CPP14Parser.Signed)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1326
                self.match(CPP14Parser.Unsigned)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1327
                self.match(CPP14Parser.Float)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1328
                self.match(CPP14Parser.Double)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1329
                self.match(CPP14Parser.Void)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1330
                self.match(CPP14Parser.Auto)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1331
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThetypenameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_thetypename

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterThetypename"):
                listener.enterThetypename(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitThetypename"):
                listener.exitThetypename(self)

    def thetypename(self):

        localctx = CPP14Parser.ThetypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_thetypename)
        try:
            self.state = 1337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 124, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1334
                self.classname()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1335
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1336
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecltypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_decltypespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDecltypespecifier"):
                listener.enterDecltypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDecltypespecifier"):
                listener.exitDecltypespecifier(self)

    def decltypespecifier(self):

        localctx = CPP14Parser.DecltypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_decltypespecifier)
        try:
            self.state = 1348
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 125, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1339
                self.match(CPP14Parser.Decltype)
                self.state = 1340
                self.match(CPP14Parser.LeftParen)
                self.state = 1341
                self.expression(0)
                self.state = 1342
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1344
                self.match(CPP14Parser.Decltype)
                self.state = 1345
                self.match(CPP14Parser.LeftParen)
                self.state = 1346
                self.match(CPP14Parser.Auto)
                self.state = 1347
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumheadContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumkey(self):
            return self.getTypedRuleContext(CPP14Parser.EnumkeyContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def enumbase(self):
            return self.getTypedRuleContext(CPP14Parser.EnumbaseContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumhead

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumhead"):
                listener.enterEnumhead(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumhead"):
                listener.exitEnumhead(self)

    def enumhead(self):

        localctx = CPP14Parser.EnumheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_enumhead)
        self._la = 0  # Token type
        try:
            self.state = 1369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 131, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1350
                self.enumkey()
                self.state = 1352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1351
                    self.attributespecifierseq(0)

                self.state = 1355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 1354
                    self.match(CPP14Parser.Identifier)

                self.state = 1358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1357
                    self.enumbase()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1360
                self.enumkey()
                self.state = 1362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1361
                    self.attributespecifierseq(0)

                self.state = 1364
                self.nestednamespecifier(0)
                self.state = 1365
                self.match(CPP14Parser.Identifier)
                self.state = 1367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1366
                    self.enumbase()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumkeyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumkey

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumkey"):
                listener.enterEnumkey(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumkey"):
                listener.exitEnumkey(self)

    def enumkey(self):

        localctx = CPP14Parser.EnumkeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_enumkey)
        try:
            self.state = 1376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 132, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1371
                self.match(CPP14Parser.Enum)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1372
                self.match(CPP14Parser.Enum)
                self.state = 1373
                self.match(CPP14Parser.Class)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1374
                self.match(CPP14Parser.Enum)
                self.state = 1375
                self.match(CPP14Parser.Struct)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumbaseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumbase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumbase"):
                listener.enterEnumbase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumbase"):
                listener.exitEnumbase(self)

    def enumbase(self):

        localctx = CPP14Parser.EnumbaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_enumbase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1378
            self.match(CPP14Parser.Colon)
            self.state = 1379
            self.typespecifierseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumeratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeratordefinition(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratordefinitionContext, 0)

        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumeratorlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumeratorlist"):
                listener.enterEnumeratorlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumeratorlist"):
                listener.exitEnumeratorlist(self)

    def enumeratorlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EnumeratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 152
        self.enterRecursionRule(localctx, 152, self.RULE_enumeratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1382
            self.enumeratordefinition()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1389
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 133, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.EnumeratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_enumeratorlist)
                    self.state = 1384
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1385
                    self.match(CPP14Parser.Comma)
                    self.state = 1386
                    self.enumeratordefinition()
                self.state = 1391
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 133, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EnumeratordefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumeratordefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumeratordefinition"):
                listener.enterEnumeratordefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumeratordefinition"):
                listener.exitEnumeratordefinition(self)

    def enumeratordefinition(self):

        localctx = CPP14Parser.EnumeratordefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_enumeratordefinition)
        try:
            self.state = 1397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 134, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1392
                self.enumerator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1393
                self.enumerator()
                self.state = 1394
                self.match(CPP14Parser.Assign)
                self.state = 1395
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumeratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumerator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumerator"):
                listener.enterEnumerator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumerator"):
                listener.exitEnumerator(self)

    def enumerator(self):

        localctx = CPP14Parser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_enumerator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1399
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespacenameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def originalnamespacename(self):
            return self.getTypedRuleContext(CPP14Parser.OriginalnamespacenameContext, 0)

        def namespacealias(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacealiasContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacename

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamespacename"):
                listener.enterNamespacename(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamespacename"):
                listener.exitNamespacename(self)

    def namespacename(self):

        localctx = CPP14Parser.NamespacenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_namespacename)
        try:
            self.state = 1403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 135, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1401
                self.originalnamespacename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1402
                self.namespacealias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OriginalnamespacenameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_originalnamespacename

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOriginalnamespacename"):
                listener.enterOriginalnamespacename(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOriginalnamespacename"):
                listener.exitOriginalnamespacename(self)

    def originalnamespacename(self):

        localctx = CPP14Parser.OriginalnamespacenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_originalnamespacename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1405
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespacedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namednamespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.NamednamespacedefinitionContext, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacebodyContext, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacedefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamespacedefinition"):
                listener.enterNamespacedefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamespacedefinition"):
                listener.exitNamespacedefinition(self)

    def namespacedefinition(self):

        localctx = CPP14Parser.NamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_namespacedefinition)
        self._la = 0  # Token type
        try:
            self.state = 1416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 137, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1407
                self.namednamespacedefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Inline:
                    self.state = 1408
                    self.match(CPP14Parser.Inline)

                self.state = 1411
                self.match(CPP14Parser.Namespace)
                self.state = 1412
                self.match(CPP14Parser.LeftBrace)
                self.state = 1413
                self.namespacebody()
                self.state = 1414
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamednamespacedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacebodyContext, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def originalnamespacename(self):
            return self.getTypedRuleContext(CPP14Parser.OriginalnamespacenameContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_namednamespacedefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamednamespacedefinition"):
                listener.enterNamednamespacedefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamednamespacedefinition"):
                listener.exitNamednamespacedefinition(self)

    def namednamespacedefinition(self):

        localctx = CPP14Parser.NamednamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_namednamespacedefinition)
        self._la = 0  # Token type
        try:
            self.state = 1436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 140, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Inline:
                    self.state = 1418
                    self.match(CPP14Parser.Inline)

                self.state = 1421
                self.match(CPP14Parser.Namespace)
                self.state = 1422
                self.match(CPP14Parser.Identifier)
                self.state = 1423
                self.match(CPP14Parser.LeftBrace)
                self.state = 1424
                self.namespacebody()
                self.state = 1425
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Inline:
                    self.state = 1427
                    self.match(CPP14Parser.Inline)

                self.state = 1430
                self.match(CPP14Parser.Namespace)
                self.state = 1431
                self.originalnamespacename()
                self.state = 1432
                self.match(CPP14Parser.LeftBrace)
                self.state = 1433
                self.namespacebody()
                self.state = 1434
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespacebodyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacebody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamespacebody"):
                listener.enterNamespacebody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamespacebody"):
                listener.exitNamespacebody(self)

    def namespacebody(self):

        localctx = CPP14Parser.NamespacebodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_namespacebody)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (
                1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (
                1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (
                1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or (
                    (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                1 << (CPP14Parser.Identifier - 67)))) != 0):
                self.state = 1438
                self.declarationseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespacealiasContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacealias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamespacealias"):
                listener.enterNamespacealias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamespacealias"):
                listener.exitNamespacealias(self)

    def namespacealias(self):

        localctx = CPP14Parser.NamespacealiasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_namespacealias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1441
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiednamespacespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespacename(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacenameContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_qualifiednamespacespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQualifiednamespacespecifier"):
                listener.enterQualifiednamespacespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQualifiednamespacespecifier"):
                listener.exitQualifiednamespacespecifier(self)

    def qualifiednamespacespecifier(self):

        localctx = CPP14Parser.QualifiednamespacespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_qualifiednamespacespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 142, self._ctx)
            if la_ == 1:
                self.state = 1443
                self.nestednamespecifier(0)

            self.state = 1446
            self.namespacename()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UsingdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_usingdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUsingdeclaration"):
                listener.enterUsingdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUsingdeclaration"):
                listener.exitUsingdeclaration(self)

    def usingdeclaration(self):

        localctx = CPP14Parser.UsingdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_usingdeclaration)
        self._la = 0  # Token type
        try:
            self.state = 1461
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 144, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1448
                self.match(CPP14Parser.Using)
                self.state = 1450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Typename:
                    self.state = 1449
                    self.match(CPP14Parser.Typename)

                self.state = 1452
                self.nestednamespecifier(0)
                self.state = 1453
                self.unqualifiedid()
                self.state = 1454
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1456
                self.match(CPP14Parser.Using)
                self.state = 1457
                self.match(CPP14Parser.Doublecolon)
                self.state = 1458
                self.unqualifiedid()
                self.state = 1459
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UsingdirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def namespacename(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacenameContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_usingdirective

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUsingdirective"):
                listener.enterUsingdirective(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUsingdirective"):
                listener.exitUsingdirective(self)

    def usingdirective(self):

        localctx = CPP14Parser.UsingdirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_usingdirective)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 1463
                self.attributespecifierseq(0)

            self.state = 1466
            self.match(CPP14Parser.Using)
            self.state = 1467
            self.match(CPP14Parser.Namespace)
            self.state = 1469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 146, self._ctx)
            if la_ == 1:
                self.state = 1468
                self.nestednamespecifier(0)

            self.state = 1471
            self.namespacename()
            self.state = 1472
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AsmdefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Asm(self):
            return self.getToken(CPP14Parser.Asm, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_asmdefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAsmdefinition"):
                listener.enterAsmdefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAsmdefinition"):
                listener.exitAsmdefinition(self)

    def asmdefinition(self):

        localctx = CPP14Parser.AsmdefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_asmdefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1474
            self.match(CPP14Parser.Asm)
            self.state = 1475
            self.match(CPP14Parser.LeftParen)
            self.state = 1476
            self.match(CPP14Parser.Stringliteral)
            self.state = 1477
            self.match(CPP14Parser.RightParen)
            self.state = 1478
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinkagespecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_linkagespecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLinkagespecification"):
                listener.enterLinkagespecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLinkagespecification"):
                listener.exitLinkagespecification(self)

    def linkagespecification(self):

        localctx = CPP14Parser.LinkagespecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_linkagespecification)
        self._la = 0  # Token type
        try:
            self.state = 1490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 148, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1480
                self.match(CPP14Parser.Extern)
                self.state = 1481
                self.match(CPP14Parser.Stringliteral)
                self.state = 1482
                self.match(CPP14Parser.LeftBrace)
                self.state = 1484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                    1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                    1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (
                    1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                    1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                    1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                    1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                    1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                    1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                    1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                    1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                    1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                    1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                    1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1483
                    self.declarationseq(0)

                self.state = 1486
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1487
                self.match(CPP14Parser.Extern)
                self.state = 1488
                self.match(CPP14Parser.Stringliteral)
                self.state = 1489
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributespecifierseq"):
                listener.enterAttributespecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributespecifierseq"):
                listener.exitAttributespecifierseq(self)

    def attributespecifierseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AttributespecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 180
        self.enterRecursionRule(localctx, 180, self.RULE_attributespecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1493
            self.attributespecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1499
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 149, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AttributespecifierseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_attributespecifierseq)
                    self.state = 1495
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1496
                    self.attributespecifier()
                self.state = 1501
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 149, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AttributespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributelist(self):
            return self.getTypedRuleContext(CPP14Parser.AttributelistContext, 0)

        def alignmentspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AlignmentspecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributespecifier"):
                listener.enterAttributespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributespecifier"):
                listener.exitAttributespecifier(self)

    def attributespecifier(self):

        localctx = CPP14Parser.AttributespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_attributespecifier)
        try:
            self.state = 1509
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1502
                self.match(CPP14Parser.LeftBracket)
                self.state = 1503
                self.match(CPP14Parser.LeftBracket)
                self.state = 1504
                self.attributelist(0)
                self.state = 1505
                self.match(CPP14Parser.RightBracket)
                self.state = 1506
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.Alignas]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1508
                self.alignmentspecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlignmentspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(CPP14Parser.Alignas, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_alignmentspecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAlignmentspecifier"):
                listener.enterAlignmentspecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAlignmentspecifier"):
                listener.exitAlignmentspecifier(self)

    def alignmentspecifier(self):

        localctx = CPP14Parser.AlignmentspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_alignmentspecifier)
        self._la = 0  # Token type
        try:
            self.state = 1527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 153, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1511
                self.match(CPP14Parser.Alignas)
                self.state = 1512
                self.match(CPP14Parser.LeftParen)
                self.state = 1513
                self.thetypeid()
                self.state = 1515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1514
                    self.match(CPP14Parser.Ellipsis)

                self.state = 1517
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1519
                self.match(CPP14Parser.Alignas)
                self.state = 1520
                self.match(CPP14Parser.LeftParen)
                self.state = 1521
                self.constantexpression()
                self.state = 1523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1522
                    self.match(CPP14Parser.Ellipsis)

                self.state = 1525
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributelistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeContext, 0)

        def attributelist(self):
            return self.getTypedRuleContext(CPP14Parser.AttributelistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributelist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributelist"):
                listener.enterAttributelist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributelist"):
                listener.exitAttributelist(self)

    def attributelist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AttributelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 186
        self.enterRecursionRule(localctx, 186, self.RULE_attributelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 155, self._ctx)
            if la_ == 1:
                self.state = 1531
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 154, self._ctx)
                if la_ == 1:
                    self.state = 1530
                    self.attribute()

                pass

            elif la_ == 2:
                self.state = 1533
                self.attribute()
                self.state = 1534
                self.match(CPP14Parser.Ellipsis)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 1550
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 158, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1548
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 157, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.AttributelistContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                        self.state = 1538
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1539
                        self.match(CPP14Parser.Comma)
                        self.state = 1541
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 156, self._ctx)
                        if la_ == 1:
                            self.state = 1540
                            self.attribute()

                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.AttributelistContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                        self.state = 1543
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1544
                        self.match(CPP14Parser.Comma)
                        self.state = 1545
                        self.attribute()
                        self.state = 1546
                        self.match(CPP14Parser.Ellipsis)
                        pass

                self.state = 1552
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 158, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AttributeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributetoken(self):
            return self.getTypedRuleContext(CPP14Parser.AttributetokenContext, 0)

        def attributeargumentclause(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeargumentclauseContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attribute

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttribute"):
                listener.enterAttribute(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttribute"):
                listener.exitAttribute(self)

    def attribute(self):

        localctx = CPP14Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1553
            self.attributetoken()
            self.state = 1555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 159, self._ctx)
            if la_ == 1:
                self.state = 1554
                self.attributeargumentclause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributetokenContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributescopedtoken(self):
            return self.getTypedRuleContext(CPP14Parser.AttributescopedtokenContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributetoken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributetoken"):
                listener.enterAttributetoken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributetoken"):
                listener.exitAttributetoken(self)

    def attributetoken(self):

        localctx = CPP14Parser.AttributetokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_attributetoken)
        try:
            self.state = 1559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 160, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1557
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1558
                self.attributescopedtoken()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributescopedtokenContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributenamespace(self):
            return self.getTypedRuleContext(CPP14Parser.AttributenamespaceContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributescopedtoken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributescopedtoken"):
                listener.enterAttributescopedtoken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributescopedtoken"):
                listener.exitAttributescopedtoken(self)

    def attributescopedtoken(self):

        localctx = CPP14Parser.AttributescopedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_attributescopedtoken)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1561
            self.attributenamespace()
            self.state = 1562
            self.match(CPP14Parser.Doublecolon)
            self.state = 1563
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributenamespaceContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributenamespace

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributenamespace"):
                listener.enterAttributenamespace(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributenamespace"):
                listener.exitAttributenamespace(self)

    def attributenamespace(self):

        localctx = CPP14Parser.AttributenamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_attributenamespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1565
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeargumentclauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributeargumentclause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributeargumentclause"):
                listener.enterAttributeargumentclause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributeargumentclause"):
                listener.exitAttributeargumentclause(self)

    def attributeargumentclause(self):

        localctx = CPP14Parser.AttributeargumentclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_attributeargumentclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1567
            self.match(CPP14Parser.LeftParen)
            self.state = 1568
            self.balancedtokenseq(0)
            self.state = 1569
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BalancedtokenseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtoken(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenContext, 0)

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtokenseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBalancedtokenseq"):
                listener.enterBalancedtokenseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBalancedtokenseq"):
                listener.exitBalancedtokenseq(self)

    def balancedtokenseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.BalancedtokenseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 198
        self.enterRecursionRule(localctx, 198, self.RULE_balancedtokenseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 161, self._ctx)
            if la_ == 1:
                self.state = 1572
                self.balancedtoken()

            self._ctx.stop = self._input.LT(-1)
            self.state = 1579
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 162, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.BalancedtokenseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_balancedtokenseq)
                    self.state = 1575
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1576
                    self.balancedtoken()
                self.state = 1581
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 162, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BalancedtokenContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtoken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBalancedtoken"):
                listener.enterBalancedtoken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBalancedtoken"):
                listener.exitBalancedtoken(self)

    def balancedtoken(self):

        localctx = CPP14Parser.BalancedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_balancedtoken)
        try:
            self.state = 1594
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1582
                self.match(CPP14Parser.LeftParen)
                self.state = 1583
                self.balancedtokenseq(0)
                self.state = 1584
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1586
                self.match(CPP14Parser.LeftBracket)
                self.state = 1587
                self.balancedtokenseq(0)
                self.state = 1588
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1590
                self.match(CPP14Parser.LeftBrace)
                self.state = 1591
                self.balancedtokenseq(0)
                self.state = 1592
                self.match(CPP14Parser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitdeclaratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorContext, 0)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initdeclaratorlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitdeclaratorlist"):
                listener.enterInitdeclaratorlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitdeclaratorlist"):
                listener.exitInitdeclaratorlist(self)

    def initdeclaratorlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InitdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 202
        self.enterRecursionRule(localctx, 202, self.RULE_initdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1597
            self.initdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1604
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 164, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InitdeclaratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initdeclaratorlist)
                    self.state = 1599
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1600
                    self.match(CPP14Parser.Comma)
                    self.state = 1601
                    self.initdeclarator()
                self.state = 1606
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 164, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class InitdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def initializer(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitdeclarator"):
                listener.enterInitdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitdeclarator"):
                listener.exitInitdeclarator(self)

    def initdeclarator(self):

        localctx = CPP14Parser.InitdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_initdeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1607
            self.declarator()
            self.state = 1609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 165, self._ctx)
            if la_ == 1:
                self.state = 1608
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext, 0)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingreturntypeContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclarator"):
                listener.enterDeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclarator"):
                listener.exitDeclarator(self)

    def declarator(self):

        localctx = CPP14Parser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_declarator)
        try:
            self.state = 1616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 166, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1611
                self.ptrdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1612
                self.noptrdeclarator(0)
                self.state = 1613
                self.parametersandqualifiers()
                self.state = 1614
                self.trailingreturntype()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtrdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext, 0)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPtrdeclarator"):
                listener.enterPtrdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPtrdeclarator"):
                listener.exitPtrdeclarator(self)

    def ptrdeclarator(self):

        localctx = CPP14Parser.PtrdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_ptrdeclarator)
        try:
            self.state = 1622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 167, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1618
                self.noptrdeclarator(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1619
                self.ptroperator()
                self.state = 1620
                self.ptrdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaratorid(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratoridContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext, 0)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrdeclarator"):
                listener.enterNoptrdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrdeclarator"):
                listener.exitNoptrdeclarator(self)

    def noptrdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 210
        self.enterRecursionRule(localctx, 210, self.RULE_noptrdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1633
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Operator, CPP14Parser.Tilde, CPP14Parser.Doublecolon,
                         CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                self.state = 1625
                self.declaratorid()
                self.state = 1627
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 168, self._ctx)
                if la_ == 1:
                    self.state = 1626
                    self.attributespecifierseq(0)

                pass
            elif token in [CPP14Parser.LeftParen]:
                self.state = 1629
                self.match(CPP14Parser.LeftParen)
                self.state = 1630
                self.ptrdeclarator()
                self.state = 1631
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1648
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 173, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1646
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 172, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1635
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1636
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1637
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1638
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1640
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                            1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                            1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                            1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                                (1 << (CPP14Parser.Characterliteral - 132)) | (
                                                1 << (CPP14Parser.Floatingliteral - 132)) | (
                                            1 << (CPP14Parser.Stringliteral - 132)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 1639
                            self.constantexpression()

                        self.state = 1642
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1644
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 171, self._ctx)
                        if la_ == 1:
                            self.state = 1643
                            self.attributespecifierseq(0)

                        pass

                self.state = 1650
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 173, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParametersandqualifiersContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationclauseContext, 0)

        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext, 0)

        def refqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.RefqualifierContext, 0)

        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionspecificationContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parametersandqualifiers

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParametersandqualifiers"):
                listener.enterParametersandqualifiers(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParametersandqualifiers"):
                listener.exitParametersandqualifiers(self)

    def parametersandqualifiers(self):

        localctx = CPP14Parser.ParametersandqualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_parametersandqualifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1651
            self.match(CPP14Parser.LeftParen)
            self.state = 1652
            self.parameterdeclarationclause()
            self.state = 1653
            self.match(CPP14Parser.RightParen)
            self.state = 1655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 174, self._ctx)
            if la_ == 1:
                self.state = 1654
                self.cvqualifierseq()

            self.state = 1658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 175, self._ctx)
            if la_ == 1:
                self.state = 1657
                self.refqualifier()

            self.state = 1661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 176, self._ctx)
            if la_ == 1:
                self.state = 1660
                self.exceptionspecification()

            self.state = 1664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 177, self._ctx)
            if la_ == 1:
                self.state = 1663
                self.attributespecifierseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingreturntypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingreturntype

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrailingreturntype"):
                listener.enterTrailingreturntype(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrailingreturntype"):
                listener.exitTrailingreturntype(self)

    def trailingreturntype(self):

        localctx = CPP14Parser.TrailingreturntypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_trailingreturntype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1666
            self.match(CPP14Parser.Arrow)
            self.state = 1667
            self.trailingtypespecifierseq()
            self.state = 1669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 178, self._ctx)
            if la_ == 1:
                self.state = 1668
                self.abstractdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtroperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptroperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPtroperator"):
                listener.enterPtroperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPtroperator"):
                listener.exitPtroperator(self)

    def ptroperator(self):

        localctx = CPP14Parser.PtroperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_ptroperator)
        try:
            self.state = 1694
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Star]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1671
                self.match(CPP14Parser.Star)
                self.state = 1673
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 179, self._ctx)
                if la_ == 1:
                    self.state = 1672
                    self.attributespecifierseq(0)

                self.state = 1676
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 180, self._ctx)
                if la_ == 1:
                    self.state = 1675
                    self.cvqualifierseq()

                pass
            elif token in [CPP14Parser.And]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1678
                self.match(CPP14Parser.And)
                self.state = 1680
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 181, self._ctx)
                if la_ == 1:
                    self.state = 1679
                    self.attributespecifierseq(0)

                pass
            elif token in [CPP14Parser.AndAnd]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1682
                self.match(CPP14Parser.AndAnd)
                self.state = 1684
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 182, self._ctx)
                if la_ == 1:
                    self.state = 1683
                    self.attributespecifierseq(0)

                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1686
                self.nestednamespecifier(0)
                self.state = 1687
                self.match(CPP14Parser.Star)
                self.state = 1689
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 183, self._ctx)
                if la_ == 1:
                    self.state = 1688
                    self.attributespecifierseq(0)

                self.state = 1692
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 184, self._ctx)
                if la_ == 1:
                    self.state = 1691
                    self.cvqualifierseq()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CvqualifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cvqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierContext, 0)

        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_cvqualifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCvqualifierseq"):
                listener.enterCvqualifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCvqualifierseq"):
                listener.exitCvqualifierseq(self)

    def cvqualifierseq(self):

        localctx = CPP14Parser.CvqualifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_cvqualifierseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1696
            self.cvqualifier()
            self.state = 1698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 186, self._ctx)
            if la_ == 1:
                self.state = 1697
                self.cvqualifierseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CvqualifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(CPP14Parser.Const, 0)

        def Volatile(self):
            return self.getToken(CPP14Parser.Volatile, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_cvqualifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCvqualifier"):
                listener.enterCvqualifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCvqualifier"):
                listener.exitCvqualifier(self)

    def cvqualifier(self):

        localctx = CPP14Parser.CvqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_cvqualifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1700
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.Const or _la == CPP14Parser.Volatile):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RefqualifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return CPP14Parser.RULE_refqualifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRefqualifier"):
                listener.enterRefqualifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRefqualifier"):
                listener.exitRefqualifier(self)

    def refqualifier(self):

        localctx = CPP14Parser.RefqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_refqualifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1702
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclaratoridContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declaratorid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclaratorid"):
                listener.enterDeclaratorid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclaratorid"):
                listener.exitDeclaratorid(self)

    def declaratorid(self):

        localctx = CPP14Parser.DeclaratoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_declaratorid)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Ellipsis:
                self.state = 1704
                self.match(CPP14Parser.Ellipsis)

            self.state = 1707
            self.idexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThetypeidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_thetypeid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterThetypeid"):
                listener.enterThetypeid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitThetypeid"):
                listener.exitThetypeid(self)

    def thetypeid(self):

        localctx = CPP14Parser.ThetypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_thetypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            self.typespecifierseq()
            self.state = 1711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 188, self._ctx)
            if la_ == 1:
                self.state = 1710
                self.abstractdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingreturntypeContext, 0)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractpackdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbstractdeclarator"):
                listener.enterAbstractdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbstractdeclarator"):
                listener.exitAbstractdeclarator(self)

    def abstractdeclarator(self):

        localctx = CPP14Parser.AbstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_abstractdeclarator)
        try:
            self.state = 1721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 190, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1713
                self.ptrabstractdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1715
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 189, self._ctx)
                if la_ == 1:
                    self.state = 1714
                    self.noptrabstractdeclarator(0)

                self.state = 1717
                self.parametersandqualifiers()
                self.state = 1718
                self.trailingreturntype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1720
                self.abstractpackdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrabstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPtrabstractdeclarator"):
                listener.enterPtrabstractdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPtrabstractdeclarator"):
                listener.exitPtrabstractdeclarator(self)

    def ptrabstractdeclarator(self):

        localctx = CPP14Parser.PtrabstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_ptrabstractdeclarator)
        try:
            self.state = 1728
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1723
                self.noptrabstractdeclarator(0)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                           CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1724
                self.ptroperator()
                self.state = 1726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 191, self._ctx)
                if la_ == 1:
                    self.state = 1725
                    self.ptrabstractdeclarator()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrabstractdeclarator"):
                listener.enterNoptrabstractdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrabstractdeclarator"):
                listener.exitNoptrabstractdeclarator(self)

    def noptrabstractdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 232
        self.enterRecursionRule(localctx, 232, self.RULE_noptrabstractdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 195, self._ctx)
            if la_ == 1:
                self.state = 1731
                self.parametersandqualifiers()
                pass

            elif la_ == 2:
                self.state = 1732
                self.match(CPP14Parser.LeftBracket)
                self.state = 1734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1733
                    self.constantexpression()

                self.state = 1736
                self.match(CPP14Parser.RightBracket)
                self.state = 1738
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 194, self._ctx)
                if la_ == 1:
                    self.state = 1737
                    self.attributespecifierseq(0)

                pass

            elif la_ == 3:
                self.state = 1740
                self.match(CPP14Parser.LeftParen)
                self.state = 1741
                self.ptrabstractdeclarator()
                self.state = 1742
                self.match(CPP14Parser.RightParen)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 1759
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 199, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1757
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 198, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1746
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1747
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1748
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1749
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1751
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                            1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                            1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                            1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                                (1 << (CPP14Parser.Characterliteral - 132)) | (
                                                1 << (CPP14Parser.Floatingliteral - 132)) | (
                                            1 << (CPP14Parser.Stringliteral - 132)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 1750
                            self.constantexpression()

                        self.state = 1753
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1755
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 197, self._ctx)
                        if la_ == 1:
                            self.state = 1754
                            self.attributespecifierseq(0)

                        pass

                self.state = 1761
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 199, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AbstractpackdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractpackdeclaratorContext, 0)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractpackdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractpackdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbstractpackdeclarator"):
                listener.enterAbstractpackdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbstractpackdeclarator"):
                listener.exitAbstractpackdeclarator(self)

    def abstractpackdeclarator(self):

        localctx = CPP14Parser.AbstractpackdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_abstractpackdeclarator)
        try:
            self.state = 1766
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Ellipsis]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1762
                self.noptrabstractpackdeclarator(0)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                           CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1763
                self.ptroperator()
                self.state = 1764
                self.abstractpackdeclarator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrabstractpackdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractpackdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractpackdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrabstractpackdeclarator"):
                listener.enterNoptrabstractpackdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrabstractpackdeclarator"):
                listener.exitNoptrabstractpackdeclarator(self)

    def noptrabstractpackdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 236
        self.enterRecursionRule(localctx, 236, self.RULE_noptrabstractpackdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1769
            self.match(CPP14Parser.Ellipsis)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1784
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 204, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1782
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 203, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1771
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1772
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1773
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1774
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1776
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                            1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                            1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                            1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                                (1 << (CPP14Parser.Characterliteral - 132)) | (
                                                1 << (CPP14Parser.Floatingliteral - 132)) | (
                                            1 << (CPP14Parser.Stringliteral - 132)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 1775
                            self.constantexpression()

                        self.state = 1778
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1780
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 202, self._ctx)
                        if la_ == 1:
                            self.state = 1779
                            self.attributespecifierseq(0)

                        pass

                self.state = 1786
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 204, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParameterdeclarationclauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclarationclause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterdeclarationclause"):
                listener.enterParameterdeclarationclause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterdeclarationclause"):
                listener.exitParameterdeclarationclause(self)

    def parameterdeclarationclause(self):

        localctx = CPP14Parser.ParameterdeclarationclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_parameterdeclarationclause)
        self._la = 0  # Token type
        try:
            self.state = 1797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 207, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                    1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                    1 << CPP14Parser.Static) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Thread_local))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                    1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                    1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (
                    1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (
                    1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1787
                    self.parameterdeclarationlist(0)

                self.state = 1791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1790
                    self.match(CPP14Parser.Ellipsis)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1793
                self.parameterdeclarationlist(0)
                self.state = 1794
                self.match(CPP14Parser.Comma)
                self.state = 1795
                self.match(CPP14Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterdeclarationlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, 0)

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclarationlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterdeclarationlist"):
                listener.enterParameterdeclarationlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterdeclarationlist"):
                listener.exitParameterdeclarationlist(self)

    def parameterdeclarationlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ParameterdeclarationlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 240
        self.enterRecursionRule(localctx, 240, self.RULE_parameterdeclarationlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1800
            self.parameterdeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1807
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 208, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ParameterdeclarationlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_parameterdeclarationlist)
                    self.state = 1802
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1803
                    self.match(CPP14Parser.Comma)
                    self.state = 1804
                    self.parameterdeclaration()
                self.state = 1809
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 208, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParameterdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterdeclaration"):
                listener.enterParameterdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterdeclaration"):
                listener.exitParameterdeclaration(self)

    def parameterdeclaration(self):

        localctx = CPP14Parser.ParameterdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_parameterdeclaration)
        self._la = 0  # Token type
        try:
            self.state = 1841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 215, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1810
                    self.attributespecifierseq(0)

                self.state = 1813
                self.declspecifierseq()
                self.state = 1814
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1816
                    self.attributespecifierseq(0)

                self.state = 1819
                self.declspecifierseq()
                self.state = 1820
                self.declarator()
                self.state = 1821
                self.match(CPP14Parser.Assign)
                self.state = 1822
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1824
                    self.attributespecifierseq(0)

                self.state = 1827
                self.declspecifierseq()
                self.state = 1829
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 212, self._ctx)
                if la_ == 1:
                    self.state = 1828
                    self.abstractdeclarator()

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1831
                    self.attributespecifierseq(0)

                self.state = 1834
                self.declspecifierseq()
                self.state = 1836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1835
                    self.abstractdeclarator()

                self.state = 1838
                self.match(CPP14Parser.Assign)
                self.state = 1839
                self.initializerclause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctiondefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def functionbody(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionbodyContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functiondefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctiondefinition"):
                listener.enterFunctiondefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctiondefinition"):
                listener.exitFunctiondefinition(self)

    def functiondefinition(self):

        localctx = CPP14Parser.FunctiondefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_functiondefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 1843
                self.attributespecifierseq(0)

            self.state = 1847
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 217, self._ctx)
            if la_ == 1:
                self.state = 1846
                self.declspecifierseq()

            self.state = 1849
            self.declarator()
            self.state = 1851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Final or _la == CPP14Parser.Override:
                self.state = 1850
                self.virtspecifierseq(0)

            self.state = 1853
            self.functionbody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionbodyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext, 0)

        def ctorinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.CtorinitializerContext, 0)

        def functiontryblock(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiontryblockContext, 0)

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functionbody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionbody"):
                listener.enterFunctionbody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionbody"):
                listener.exitFunctionbody(self)

    def functionbody(self):

        localctx = CPP14Parser.FunctionbodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_functionbody)
        self._la = 0  # Token type
        try:
            self.state = 1866
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 220, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1855
                    self.ctorinitializer()

                self.state = 1858
                self.compoundstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1859
                self.functiontryblock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1860
                self.match(CPP14Parser.Assign)
                self.state = 1861
                self.match(CPP14Parser.Default)
                self.state = 1862
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1863
                self.match(CPP14Parser.Assign)
                self.state = 1864
                self.match(CPP14Parser.Delete)
                self.state = 1865
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def braceorequalinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.BraceorequalinitializerContext, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitializer"):
                listener.enterInitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitializer"):
                listener.exitInitializer(self)

    def initializer(self):

        localctx = CPP14Parser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_initializer)
        try:
            self.state = 1873
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBrace, CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1868
                self.braceorequalinitializer()
                pass
            elif token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1869
                self.match(CPP14Parser.LeftParen)
                self.state = 1870
                self.expressionlist()
                self.state = 1871
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BraceorequalinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_braceorequalinitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBraceorequalinitializer"):
                listener.enterBraceorequalinitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBraceorequalinitializer"):
                listener.exitBraceorequalinitializer(self)

    def braceorequalinitializer(self):

        localctx = CPP14Parser.BraceorequalinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_braceorequalinitializer)
        try:
            self.state = 1878
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1875
                self.match(CPP14Parser.Assign)
                self.state = 1876
                self.initializerclause()
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1877
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerclauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerclause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitializerclause"):
                listener.enterInitializerclause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitializerclause"):
                listener.exitInitializerclause(self)

    def initializerclause(self):

        localctx = CPP14Parser.InitializerclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_initializerclause)
        try:
            self.state = 1882
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16,
                         CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype, CPP14Parser.Delete,
                         CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.FalseToken, CPP14Parser.Float,
                         CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Nullptr,
                         CPP14Parser.Operator, CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed,
                         CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw,
                         CPP14Parser.TrueToken, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.Unsigned,
                         CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                         CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                         CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                         CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Integerliteral,
                         CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral,
                         CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral,
                         CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1880
                self.assignmentexpression()
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1881
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitializerlist"):
                listener.enterInitializerlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitializerlist"):
                listener.exitInitializerlist(self)

    def initializerlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InitializerlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 254
        self.enterRecursionRule(localctx, 254, self.RULE_initializerlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1885
            self.initializerclause()
            self.state = 1887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 224, self._ctx)
            if la_ == 1:
                self.state = 1886
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1897
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 226, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InitializerlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initializerlist)
                    self.state = 1889
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1890
                    self.match(CPP14Parser.Comma)
                    self.state = 1891
                    self.initializerclause()
                    self.state = 1893
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 225, self._ctx)
                    if la_ == 1:
                        self.state = 1892
                        self.match(CPP14Parser.Ellipsis)

                self.state = 1899
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 226, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BracedinitlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_bracedinitlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBracedinitlist"):
                listener.enterBracedinitlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBracedinitlist"):
                listener.exitBracedinitlist(self)

    def bracedinitlist(self):

        localctx = CPP14Parser.BracedinitlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_bracedinitlist)
        self._la = 0  # Token type
        try:
            self.state = 1909
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 228, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1900
                self.match(CPP14Parser.LeftBrace)
                self.state = 1901
                self.initializerlist(0)
                self.state = 1903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Comma:
                    self.state = 1902
                    self.match(CPP14Parser.Comma)

                self.state = 1905
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1907
                self.match(CPP14Parser.LeftBrace)
                self.state = 1908
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassnameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classname

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassname"):
                listener.enterClassname(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassname"):
                listener.exitClassname(self)

    def classname(self):

        localctx = CPP14Parser.ClassnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_classname)
        try:
            self.state = 1913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 229, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1911
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1912
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classhead(self):
            return self.getTypedRuleContext(CPP14Parser.ClassheadContext, 0)

        def memberspecification(self):
            return self.getTypedRuleContext(CPP14Parser.MemberspecificationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classspecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassspecifier"):
                listener.enterClassspecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassspecifier"):
                listener.exitClassspecifier(self)

    def classspecifier(self):

        localctx = CPP14Parser.ClassspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_classspecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1915
            self.classhead()
            self.state = 1916
            self.match(CPP14Parser.LeftBrace)
            self.state = 1918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (
                1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (
                1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                1 << CPP14Parser.Operator) | (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (
                1 << CPP14Parser.Public) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (
                1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (
                1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or (
                    (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Colon - 67)) | (
                1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (
                1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                self.state = 1917
                self.memberspecification()

            self.state = 1920
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassheadContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classkey(self):
            return self.getTypedRuleContext(CPP14Parser.ClasskeyContext, 0)

        def classheadname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassheadnameContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def classvirtspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.ClassvirtspecifierContext, 0)

        def baseclause(self):
            return self.getTypedRuleContext(CPP14Parser.BaseclauseContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classhead

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClasshead"):
                listener.enterClasshead(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClasshead"):
                listener.exitClasshead(self)

    def classhead(self):

        localctx = CPP14Parser.ClassheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_classhead)
        self._la = 0  # Token type
        try:
            self.state = 1940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 236, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1922
                self.classkey()
                self.state = 1924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1923
                    self.attributespecifierseq(0)

                self.state = 1926
                self.classheadname()
                self.state = 1928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Final:
                    self.state = 1927
                    self.classvirtspecifier()

                self.state = 1931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1930
                    self.baseclause()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1933
                self.classkey()
                self.state = 1935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1934
                    self.attributespecifierseq(0)

                self.state = 1938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1937
                    self.baseclause()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassheadnameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classheadname

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassheadname"):
                listener.enterClassheadname(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassheadname"):
                listener.exitClassheadname(self)

    def classheadname(self):

        localctx = CPP14Parser.ClassheadnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_classheadname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 237, self._ctx)
            if la_ == 1:
                self.state = 1942
                self.nestednamespecifier(0)

            self.state = 1945
            self.classname()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassvirtspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classvirtspecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassvirtspecifier"):
                listener.enterClassvirtspecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassvirtspecifier"):
                listener.exitClassvirtspecifier(self)

    def classvirtspecifier(self):

        localctx = CPP14Parser.ClassvirtspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_classvirtspecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1947
            self.match(CPP14Parser.Final)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClasskeyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def Union(self):
            return self.getToken(CPP14Parser.Union, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classkey

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClasskey"):
                listener.enterClasskey(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClasskey"):
                listener.exitClasskey(self)

    def classkey(self):

        localctx = CPP14Parser.ClasskeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_classkey)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1949
            _la = self._input.LA(1)
            if not (((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & (
                    (1 << (CPP14Parser.Class - 14)) | (1 << (CPP14Parser.Struct - 14)) | (
                1 << (CPP14Parser.Union - 14)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclarationContext, 0)

        def memberspecification(self):
            return self.getTypedRuleContext(CPP14Parser.MemberspecificationContext, 0)

        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AccessspecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberspecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberspecification"):
                listener.enterMemberspecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberspecification"):
                listener.exitMemberspecification(self)

    def memberspecification(self):

        localctx = CPP14Parser.MemberspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_memberspecification)
        self._la = 0  # Token type
        try:
            self.state = 1960
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignas, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16,
                         CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Constexpr,
                         CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Explicit,
                         CPP14Parser.Extern, CPP14Parser.Float, CPP14Parser.Friend, CPP14Parser.Inline, CPP14Parser.Int,
                         CPP14Parser.Long, CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Register,
                         CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Static, CPP14Parser.Static_assert,
                         CPP14Parser.Struct, CPP14Parser.Template, CPP14Parser.Thread_local, CPP14Parser.Typedef,
                         CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Using,
                         CPP14Parser.Virtual, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar,
                         CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Star, CPP14Parser.And,
                         CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Colon, CPP14Parser.Doublecolon,
                         CPP14Parser.Semi, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1951
                self.memberdeclaration()
                self.state = 1953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                    1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (
                    1 << CPP14Parser.Public) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (
                    1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (
                    1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (
                    1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((
                                                                                                                         1 << (
                                                                                                                         CPP14Parser.Typedef - 67)) | (
                    1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                    1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                    1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                    1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                    1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                    1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                    1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Colon - 67)) | (
                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (
                    1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1952
                    self.memberspecification()

                pass
            elif token in [CPP14Parser.Private, CPP14Parser.Protected, CPP14Parser.Public]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1955
                self.accessspecifier()
                self.state = 1956
                self.match(CPP14Parser.Colon)
                self.state = 1958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                    1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (
                    1 << CPP14Parser.Public) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (
                    1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (
                    1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (
                    1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((
                                                                                                                         1 << (
                                                                                                                         CPP14Parser.Typedef - 67)) | (
                    1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                    1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                    1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                    1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                    1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                    1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                    1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Colon - 67)) | (
                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (
                    1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1957
                    self.memberspecification()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorlistContext, 0)

        def functiondefinition(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiondefinitionContext, 0)

        def usingdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.UsingdeclarationContext, 0)

        def static_assertdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.Static_assertdeclarationContext, 0)

        def templatedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.TemplatedeclarationContext, 0)

        def aliasdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.AliasdeclarationContext, 0)

        def emptydeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.EmptydeclarationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberdeclaration"):
                listener.enterMemberdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberdeclaration"):
                listener.exitMemberdeclaration(self)

    def memberdeclaration(self):

        localctx = CPP14Parser.MemberdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_memberdeclaration)
        self._la = 0  # Token type
        try:
            self.state = 1978
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 244, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1963
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 241, self._ctx)
                if la_ == 1:
                    self.state = 1962
                    self.attributespecifierseq(0)

                self.state = 1966
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 242, self._ctx)
                if la_ == 1:
                    self.state = 1965
                    self.declspecifierseq()

                self.state = 1969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Operator))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                                    (1 << (CPP14Parser.LeftParen - 78)) | (
                                                    1 << (CPP14Parser.LeftBracket - 78)) | (
                                                1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                                        1 << (CPP14Parser.Tilde - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                                1 << (CPP14Parser.Colon - 78)) | (1 << (CPP14Parser.Doublecolon - 78)) | (
                        1 << (CPP14Parser.Ellipsis - 78)) | (1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1968
                    self.memberdeclaratorlist(0)

                self.state = 1971
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1972
                self.functiondefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1973
                self.usingdeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1974
                self.static_assertdeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1975
                self.templatedeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1976
                self.aliasdeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1977
                self.emptydeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberdeclaratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorContext, 0)

        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaratorlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberdeclaratorlist"):
                listener.enterMemberdeclaratorlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberdeclaratorlist"):
                listener.exitMemberdeclaratorlist(self)

    def memberdeclaratorlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.MemberdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 274
        self.enterRecursionRule(localctx, 274, self.RULE_memberdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1981
            self.memberdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1988
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 245, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.MemberdeclaratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_memberdeclaratorlist)
                    self.state = 1983
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1984
                    self.match(CPP14Parser.Comma)
                    self.state = 1985
                    self.memberdeclarator()
                self.state = 1990
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 245, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class MemberdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext, 0)

        def purespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.PurespecifierContext, 0)

        def braceorequalinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.BraceorequalinitializerContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberdeclarator"):
                listener.enterMemberdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberdeclarator"):
                listener.exitMemberdeclarator(self)

    def memberdeclarator(self):

        localctx = CPP14Parser.MemberdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_memberdeclarator)
        self._la = 0  # Token type
        try:
            self.state = 2010
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 251, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1991
                self.declarator()
                self.state = 1993
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 246, self._ctx)
                if la_ == 1:
                    self.state = 1992
                    self.virtspecifierseq(0)

                self.state = 1996
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 247, self._ctx)
                if la_ == 1:
                    self.state = 1995
                    self.purespecifier()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1998
                self.declarator()
                self.state = 2000
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 248, self._ctx)
                if la_ == 1:
                    self.state = 1999
                    self.braceorequalinitializer()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 2002
                    self.match(CPP14Parser.Identifier)

                self.state = 2006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2005
                    self.attributespecifierseq(0)

                self.state = 2008
                self.match(CPP14Parser.Colon)
                self.state = 2009
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VirtspecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def virtspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierContext, 0)

        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_virtspecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVirtspecifierseq"):
                listener.enterVirtspecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVirtspecifierseq"):
                listener.exitVirtspecifierseq(self)

    def virtspecifierseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.VirtspecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 278
        self.enterRecursionRule(localctx, 278, self.RULE_virtspecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2013
            self.virtspecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2019
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 252, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.VirtspecifierseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_virtspecifierseq)
                    self.state = 2015
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2016
                    self.virtspecifier()
                self.state = 2021
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 252, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class VirtspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Override(self):
            return self.getToken(CPP14Parser.Override, 0)

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_virtspecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVirtspecifier"):
                listener.enterVirtspecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVirtspecifier"):
                listener.exitVirtspecifier(self)

    def virtspecifier(self):

        localctx = CPP14Parser.VirtspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_virtspecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2022
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.Final or _la == CPP14Parser.Override):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PurespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None  # Token

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Octalliteral(self):
            return self.getToken(CPP14Parser.Octalliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_purespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPurespecifier"):
                listener.enterPurespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPurespecifier"):
                listener.exitPurespecifier(self)

    def purespecifier(self):

        localctx = CPP14Parser.PurespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_purespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2024
            self.match(CPP14Parser.Assign)
            self.state = 2025
            localctx.val = self.match(CPP14Parser.Octalliteral)
            if (None if localctx.val is None else localctx.val.text).compareTo("0") != 0:
                raise InputMismathException(self)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BaseclauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_baseclause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBaseclause"):
                listener.enterBaseclause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBaseclause"):
                listener.exitBaseclause(self)

    def baseclause(self):

        localctx = CPP14Parser.BaseclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_baseclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2028
            self.match(CPP14Parser.Colon)
            self.state = 2029
            self.basespecifierlist(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BasespecifierlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierContext, 0)

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifierlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBasespecifierlist"):
                listener.enterBasespecifierlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBasespecifierlist"):
                listener.exitBasespecifierlist(self)

    def basespecifierlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.BasespecifierlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 286
        self.enterRecursionRule(localctx, 286, self.RULE_basespecifierlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2032
            self.basespecifier()
            self.state = 2034
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 253, self._ctx)
            if la_ == 1:
                self.state = 2033
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2044
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 255, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.BasespecifierlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_basespecifierlist)
                    self.state = 2036
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2037
                    self.match(CPP14Parser.Comma)
                    self.state = 2038
                    self.basespecifier()
                    self.state = 2040
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 254, self._ctx)
                    if la_ == 1:
                        self.state = 2039
                        self.match(CPP14Parser.Ellipsis)

                self.state = 2046
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 255, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BasespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basetypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.BasetypespecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AccessspecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBasespecifier"):
                listener.enterBasespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBasespecifier"):
                listener.exitBasespecifier(self)

    def basespecifier(self):

        localctx = CPP14Parser.BasespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_basespecifier)
        self._la = 0  # Token type
        try:
            self.state = 2068
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 261, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2047
                    self.attributespecifierseq(0)

                self.state = 2050
                self.basetypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2051
                    self.attributespecifierseq(0)

                self.state = 2054
                self.match(CPP14Parser.Virtual)
                self.state = 2056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public))) != 0):
                    self.state = 2055
                    self.accessspecifier()

                self.state = 2058
                self.basetypespecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2059
                    self.attributespecifierseq(0)

                self.state = 2062
                self.accessspecifier()
                self.state = 2064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Virtual:
                    self.state = 2063
                    self.match(CPP14Parser.Virtual)

                self.state = 2066
                self.basetypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassordecltypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classordecltype

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassordecltype"):
                listener.enterClassordecltype(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassordecltype"):
                listener.exitClassordecltype(self)

    def classordecltype(self):

        localctx = CPP14Parser.ClassordecltypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_classordecltype)
        try:
            self.state = 2075
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 263, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2071
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 262, self._ctx)
                if la_ == 1:
                    self.state = 2070
                    self.nestednamespecifier(0)

                self.state = 2073
                self.classname()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2074
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BasetypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_basetypespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBasetypespecifier"):
                listener.enterBasetypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBasetypespecifier"):
                listener.exitBasetypespecifier(self)

    def basetypespecifier(self):

        localctx = CPP14Parser.BasetypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_basetypespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2077
            self.classordecltype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AccessspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Private(self):
            return self.getToken(CPP14Parser.Private, 0)

        def Protected(self):
            return self.getToken(CPP14Parser.Protected, 0)

        def Public(self):
            return self.getToken(CPP14Parser.Public, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_accessspecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAccessspecifier"):
                listener.enterAccessspecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAccessspecifier"):
                listener.exitAccessspecifier(self)

    def accessspecifier(self):

        localctx = CPP14Parser.AccessspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_accessspecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2079
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConversionfunctionidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def conversiontypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ConversiontypeidContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_conversionfunctionid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConversionfunctionid"):
                listener.enterConversionfunctionid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConversionfunctionid"):
                listener.exitConversionfunctionid(self)

    def conversionfunctionid(self):

        localctx = CPP14Parser.ConversionfunctionidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_conversionfunctionid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2081
            self.match(CPP14Parser.Operator)
            self.state = 2082
            self.conversiontypeid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConversiontypeidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def conversiondeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.ConversiondeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_conversiontypeid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConversiontypeid"):
                listener.enterConversiontypeid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConversiontypeid"):
                listener.exitConversiontypeid(self)

    def conversiontypeid(self):

        localctx = CPP14Parser.ConversiontypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_conversiontypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2084
            self.typespecifierseq()
            self.state = 2086
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 264, self._ctx)
            if la_ == 1:
                self.state = 2085
                self.conversiondeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConversiondeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def conversiondeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.ConversiondeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_conversiondeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConversiondeclarator"):
                listener.enterConversiondeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConversiondeclarator"):
                listener.exitConversiondeclarator(self)

    def conversiondeclarator(self):

        localctx = CPP14Parser.ConversiondeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_conversiondeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2088
            self.ptroperator()
            self.state = 2090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 265, self._ctx)
            if la_ == 1:
                self.state = 2089
                self.conversiondeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CtorinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ctorinitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCtorinitializer"):
                listener.enterCtorinitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCtorinitializer"):
                listener.exitCtorinitializer(self)

    def ctorinitializer(self):

        localctx = CPP14Parser.CtorinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_ctorinitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2092
            self.match(CPP14Parser.Colon)
            self.state = 2093
            self.meminitializerlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeminitializerlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializer(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerContext, 0)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializerlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeminitializerlist"):
                listener.enterMeminitializerlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeminitializerlist"):
                listener.exitMeminitializerlist(self)

    def meminitializerlist(self):

        localctx = CPP14Parser.MeminitializerlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_meminitializerlist)
        self._la = 0  # Token type
        try:
            self.state = 2106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 268, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2095
                self.meminitializer()
                self.state = 2097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 2096
                    self.match(CPP14Parser.Ellipsis)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2099
                self.meminitializer()
                self.state = 2101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 2100
                    self.match(CPP14Parser.Ellipsis)

                self.state = 2103
                self.match(CPP14Parser.Comma)
                self.state = 2104
                self.meminitializerlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeminitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializerid(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializeridContext, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeminitializer"):
                listener.enterMeminitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeminitializer"):
                listener.exitMeminitializer(self)

    def meminitializer(self):

        localctx = CPP14Parser.MeminitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_meminitializer)
        self._la = 0  # Token type
        try:
            self.state = 2118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 270, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2108
                self.meminitializerid()
                self.state = 2109
                self.match(CPP14Parser.LeftParen)
                self.state = 2111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                    1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                    1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 2110
                    self.expressionlist()

                self.state = 2113
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2115
                self.meminitializerid()
                self.state = 2116
                self.bracedinitlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeminitializeridContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializerid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeminitializerid"):
                listener.enterMeminitializerid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeminitializerid"):
                listener.exitMeminitializerid(self)

    def meminitializerid(self):

        localctx = CPP14Parser.MeminitializeridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_meminitializerid)
        try:
            self.state = 2122
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 271, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2120
                self.classordecltype()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2121
                self.match(CPP14Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperatorfunctionidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def theoperator(self):
            return self.getTypedRuleContext(CPP14Parser.TheoperatorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_operatorfunctionid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOperatorfunctionid"):
                listener.enterOperatorfunctionid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOperatorfunctionid"):
                listener.exitOperatorfunctionid(self)

    def operatorfunctionid(self):

        localctx = CPP14Parser.OperatorfunctionidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_operatorfunctionid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2124
            self.match(CPP14Parser.Operator)
            self.state = 2125
            self.theoperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteraloperatoridContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_literaloperatorid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLiteraloperatorid"):
                listener.enterLiteraloperatorid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLiteraloperatorid"):
                listener.exitLiteraloperatorid(self)

    def literaloperatorid(self):

        localctx = CPP14Parser.LiteraloperatoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_literaloperatorid)
        try:
            self.state = 2132
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 272, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2127
                self.match(CPP14Parser.Operator)
                self.state = 2128
                self.match(CPP14Parser.Stringliteral)
                self.state = 2129
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2130
                self.match(CPP14Parser.Operator)
                self.state = 2131
                self.match(CPP14Parser.Userdefinedstringliteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplatedeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templatedeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplatedeclaration"):
                listener.enterTemplatedeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplatedeclaration"):
                listener.exitTemplatedeclaration(self)

    def templatedeclaration(self):

        localctx = CPP14Parser.TemplatedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_templatedeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2134
            self.match(CPP14Parser.Template)
            self.state = 2135
            self.match(CPP14Parser.Less)
            self.state = 2136
            self.templateparameterlist(0)
            self.state = 2137
            self.match(CPP14Parser.Greater)
            self.state = 2138
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateparameterlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateparameter(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterContext, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameterlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateparameterlist"):
                listener.enterTemplateparameterlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateparameterlist"):
                listener.exitTemplateparameterlist(self)

    def templateparameterlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TemplateparameterlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 316
        self.enterRecursionRule(localctx, 316, self.RULE_templateparameterlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2141
            self.templateparameter()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2148
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 273, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TemplateparameterlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateparameterlist)
                    self.state = 2143
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2144
                    self.match(CPP14Parser.Comma)
                    self.state = 2145
                    self.templateparameter()
                self.state = 2150
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 273, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TemplateparameterContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateparameter"):
                listener.enterTemplateparameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateparameter"):
                listener.exitTemplateparameter(self)

    def templateparameter(self):

        localctx = CPP14Parser.TemplateparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_templateparameter)
        self._la = 0  # Token type
        try:
            self.state = 2200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 283, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2151
                self.match(CPP14Parser.Class)
                self.state = 2153
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 274, self._ctx)
                if la_ == 1:
                    self.state = 2152
                    self.match(CPP14Parser.Ellipsis)

                self.state = 2156
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 275, self._ctx)
                if la_ == 1:
                    self.state = 2155
                    self.match(CPP14Parser.Identifier)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2158
                self.match(CPP14Parser.Class)
                self.state = 2160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 2159
                    self.match(CPP14Parser.Identifier)

                self.state = 2162
                self.match(CPP14Parser.Assign)
                self.state = 2163
                self.thetypeid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2164
                self.match(CPP14Parser.Typename)
                self.state = 2166
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 277, self._ctx)
                if la_ == 1:
                    self.state = 2165
                    self.match(CPP14Parser.Ellipsis)

                self.state = 2169
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 278, self._ctx)
                if la_ == 1:
                    self.state = 2168
                    self.match(CPP14Parser.Identifier)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2171
                self.match(CPP14Parser.Typename)
                self.state = 2173
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 2172
                    self.match(CPP14Parser.Identifier)

                self.state = 2175
                self.match(CPP14Parser.Assign)
                self.state = 2176
                self.thetypeid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2177
                self.match(CPP14Parser.Template)
                self.state = 2178
                self.match(CPP14Parser.Less)
                self.state = 2179
                self.templateparameterlist(0)
                self.state = 2180
                self.match(CPP14Parser.Greater)
                self.state = 2181
                self.match(CPP14Parser.Class)
                self.state = 2183
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 280, self._ctx)
                if la_ == 1:
                    self.state = 2182
                    self.match(CPP14Parser.Ellipsis)

                self.state = 2186
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 281, self._ctx)
                if la_ == 1:
                    self.state = 2185
                    self.match(CPP14Parser.Identifier)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2188
                self.match(CPP14Parser.Template)
                self.state = 2189
                self.match(CPP14Parser.Less)
                self.state = 2190
                self.templateparameterlist(0)
                self.state = 2191
                self.match(CPP14Parser.Greater)
                self.state = 2192
                self.match(CPP14Parser.Class)
                self.state = 2194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 2193
                    self.match(CPP14Parser.Identifier)

                self.state = 2196
                self.match(CPP14Parser.Assign)
                self.state = 2197
                self.idexpression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2199
                self.parameterdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpletemplateidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templatename(self):
            return self.getTypedRuleContext(CPP14Parser.TemplatenameContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_simpletemplateid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpletemplateid"):
                listener.enterSimpletemplateid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpletemplateid"):
                listener.exitSimpletemplateid(self)

    def simpletemplateid(self):

        localctx = CPP14Parser.SimpletemplateidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_simpletemplateid)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2202
            self.templatename()
            self.state = 2203
            self.match(CPP14Parser.Less)
            self.state = 2205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                    (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (
                1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                    (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                    (1 << (CPP14Parser.Characterliteral - 132)) | (
                                    1 << (CPP14Parser.Floatingliteral - 132)) | (
                                1 << (CPP14Parser.Stringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                self.state = 2204
                self.templateargumentlist(0)

            self.state = 2207
            self.match(CPP14Parser.Greater)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext, 0)

        def operatorfunctionid(self):
            return self.getTypedRuleContext(CPP14Parser.OperatorfunctionidContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def literaloperatorid(self):
            return self.getTypedRuleContext(CPP14Parser.LiteraloperatoridContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateid"):
                listener.enterTemplateid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateid"):
                listener.exitTemplateid(self)

    def templateid(self):

        localctx = CPP14Parser.TemplateidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_templateid)
        self._la = 0  # Token type
        try:
            self.state = 2224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 287, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2209
                self.simpletemplateid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2210
                self.operatorfunctionid()
                self.state = 2211
                self.match(CPP14Parser.Less)
                self.state = 2213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 2212
                    self.templateargumentlist(0)

                self.state = 2215
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2217
                self.literaloperatorid()
                self.state = 2218
                self.match(CPP14Parser.Less)
                self.state = 2220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 2219
                    self.templateargumentlist(0)

                self.state = 2222
                self.match(CPP14Parser.Greater)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplatenameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templatename

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplatename"):
                listener.enterTemplatename(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplatename"):
                listener.exitTemplatename(self)

    def templatename(self):

        localctx = CPP14Parser.TemplatenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_templatename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2226
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateargumentlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateargument(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargumentlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateargumentlist"):
                listener.enterTemplateargumentlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateargumentlist"):
                listener.exitTemplateargumentlist(self)

    def templateargumentlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TemplateargumentlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 326
        self.enterRecursionRule(localctx, 326, self.RULE_templateargumentlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2229
            self.templateargument()
            self.state = 2231
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 288, self._ctx)
            if la_ == 1:
                self.state = 2230
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2241
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 290, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TemplateargumentlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateargumentlist)
                    self.state = 2233
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2234
                    self.match(CPP14Parser.Comma)
                    self.state = 2235
                    self.templateargument()
                    self.state = 2237
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 289, self._ctx)
                    if la_ == 1:
                        self.state = 2236
                        self.match(CPP14Parser.Ellipsis)

                self.state = 2243
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 290, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TemplateargumentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateargument"):
                listener.enterTemplateargument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateargument"):
                listener.exitTemplateargument(self)

    def templateargument(self):

        localctx = CPP14Parser.TemplateargumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_templateargument)
        try:
            self.state = 2247
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 291, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2244
                self.thetypeid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2245
                self.constantexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2246
                self.idexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypenamespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typenamespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypenamespecifier"):
                listener.enterTypenamespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypenamespecifier"):
                listener.exitTypenamespecifier(self)

    def typenamespecifier(self):

        localctx = CPP14Parser.TypenamespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_typenamespecifier)
        self._la = 0  # Token type
        try:
            self.state = 2260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 293, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2249
                self.match(CPP14Parser.Typename)
                self.state = 2250
                self.nestednamespecifier(0)
                self.state = 2251
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2253
                self.match(CPP14Parser.Typename)
                self.state = 2254
                self.nestednamespecifier(0)
                self.state = 2256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Template:
                    self.state = 2255
                    self.match(CPP14Parser.Template)

                self.state = 2258
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitinstantiationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_explicitinstantiation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExplicitinstantiation"):
                listener.enterExplicitinstantiation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExplicitinstantiation"):
                listener.exitExplicitinstantiation(self)

    def explicitinstantiation(self):

        localctx = CPP14Parser.ExplicitinstantiationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_explicitinstantiation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Extern:
                self.state = 2262
                self.match(CPP14Parser.Extern)

            self.state = 2265
            self.match(CPP14Parser.Template)
            self.state = 2266
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitspecializationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_explicitspecialization

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExplicitspecialization"):
                listener.enterExplicitspecialization(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExplicitspecialization"):
                listener.exitExplicitspecialization(self)

    def explicitspecialization(self):

        localctx = CPP14Parser.ExplicitspecializationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_explicitspecialization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2268
            self.match(CPP14Parser.Template)
            self.state = 2269
            self.match(CPP14Parser.Less)
            self.state = 2270
            self.match(CPP14Parser.Greater)
            self.state = 2271
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryblockContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext, 0)

        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_tryblock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTryblock"):
                listener.enterTryblock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTryblock"):
                listener.exitTryblock(self)

    def tryblock(self):

        localctx = CPP14Parser.TryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_tryblock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2273
            self.match(CPP14Parser.Try)
            self.state = 2274
            self.compoundstatement()
            self.state = 2275
            self.handlerseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctiontryblockContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext, 0)

        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext, 0)

        def ctorinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.CtorinitializerContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functiontryblock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctiontryblock"):
                listener.enterFunctiontryblock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctiontryblock"):
                listener.exitFunctiontryblock(self)

    def functiontryblock(self):

        localctx = CPP14Parser.FunctiontryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_functiontryblock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2277
            self.match(CPP14Parser.Try)
            self.state = 2279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Colon:
                self.state = 2278
                self.ctorinitializer()

            self.state = 2281
            self.compoundstatement()
            self.state = 2282
            self.handlerseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def handler(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerContext, 0)

        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_handlerseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHandlerseq"):
                listener.enterHandlerseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHandlerseq"):
                listener.exitHandlerseq(self)

    def handlerseq(self):

        localctx = CPP14Parser.HandlerseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_handlerseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2284
            self.handler()
            self.state = 2286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 296, self._ctx)
            if la_ == 1:
                self.state = 2285
                self.handlerseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(CPP14Parser.Catch, 0)

        def exceptiondeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptiondeclarationContext, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_handler

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHandler"):
                listener.enterHandler(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHandler"):
                listener.exitHandler(self)

    def handler(self):

        localctx = CPP14Parser.HandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_handler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2288
            self.match(CPP14Parser.Catch)
            self.state = 2289
            self.match(CPP14Parser.LeftParen)
            self.state = 2290
            self.exceptiondeclaration()
            self.state = 2291
            self.match(CPP14Parser.RightParen)
            self.state = 2292
            self.compoundstatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExceptiondeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exceptiondeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExceptiondeclaration"):
                listener.enterExceptiondeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExceptiondeclaration"):
                listener.exitExceptiondeclaration(self)

    def exceptiondeclaration(self):

        localctx = CPP14Parser.ExceptiondeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_exceptiondeclaration)
        self._la = 0  # Token type
        try:
            self.state = 2308
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 300, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2294
                    self.attributespecifierseq(0)

                self.state = 2297
                self.typespecifierseq()
                self.state = 2298
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2300
                    self.attributespecifierseq(0)

                self.state = 2303
                self.typespecifierseq()
                self.state = 2305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 2304
                    self.abstractdeclarator()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2307
                self.match(CPP14Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThrowexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_throwexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterThrowexpression"):
                listener.enterThrowexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitThrowexpression"):
                listener.exitThrowexpression(self)

    def throwexpression(self):

        localctx = CPP14Parser.ThrowexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_throwexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2310
            self.match(CPP14Parser.Throw)
            self.state = 2312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 301, self._ctx)
            if la_ == 1:
                self.state = 2311
                self.assignmentexpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExceptionspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamicexceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.DynamicexceptionspecificationContext, 0)

        def noexceptspecification(self):
            return self.getTypedRuleContext(CPP14Parser.NoexceptspecificationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exceptionspecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExceptionspecification"):
                listener.enterExceptionspecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExceptionspecification"):
                listener.exitExceptionspecification(self)

    def exceptionspecification(self):

        localctx = CPP14Parser.ExceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_exceptionspecification)
        try:
            self.state = 2316
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Throw]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2314
                self.dynamicexceptionspecification()
                pass
            elif token in [CPP14Parser.Noexcept]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2315
                self.noexceptspecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DynamicexceptionspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_dynamicexceptionspecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDynamicexceptionspecification"):
                listener.enterDynamicexceptionspecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDynamicexceptionspecification"):
                listener.exitDynamicexceptionspecification(self)

    def dynamicexceptionspecification(self):

        localctx = CPP14Parser.DynamicexceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_dynamicexceptionspecification)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2318
            self.match(CPP14Parser.Throw)
            self.state = 2319
            self.match(CPP14Parser.LeftParen)
            self.state = 2321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (
                1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (
                1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Decltype) | (
                1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Float) | (
                1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Short) | (
                1 << CPP14Parser.Signed) | (1 << CPP14Parser.Struct))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and (
                (1 << (_la - 69)) & ((1 << (CPP14Parser.Typename - 69)) | (1 << (CPP14Parser.Union - 69)) | (
                1 << (CPP14Parser.Unsigned - 69)) | (1 << (CPP14Parser.Void - 69)) | (
                1 << (CPP14Parser.Volatile - 69)) | (1 << (CPP14Parser.Wchar - 69)) | (
                1 << (CPP14Parser.Doublecolon - 69)) | (1 << (CPP14Parser.Identifier - 69)))) != 0):
                self.state = 2320
                self.typeidlist(0)

            self.state = 2323
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeidlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typeidlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeidlist"):
                listener.enterTypeidlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeidlist"):
                listener.exitTypeidlist(self)

    def typeidlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TypeidlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 352
        self.enterRecursionRule(localctx, 352, self.RULE_typeidlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2326
            self.thetypeid()
            self.state = 2328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 304, self._ctx)
            if la_ == 1:
                self.state = 2327
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2338
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 306, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TypeidlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeidlist)
                    self.state = 2330
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2331
                    self.match(CPP14Parser.Comma)
                    self.state = 2332
                    self.thetypeid()
                    self.state = 2334
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 305, self._ctx)
                    if la_ == 1:
                        self.state = 2333
                        self.match(CPP14Parser.Ellipsis)

                self.state = 2340
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 306, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class NoexceptspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noexceptspecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoexceptspecification"):
                listener.enterNoexceptspecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoexceptspecification"):
                listener.exitNoexceptspecification(self)

    def noexceptspecification(self):

        localctx = CPP14Parser.NoexceptspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_noexceptspecification)
        try:
            self.state = 2347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 307, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2341
                self.match(CPP14Parser.Noexcept)
                self.state = 2342
                self.match(CPP14Parser.LeftParen)
                self.state = 2343
                self.constantexpression()
                self.state = 2344
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2346
                self.match(CPP14Parser.Noexcept)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RightShiftContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_rightShift

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRightShift"):
                listener.enterRightShift(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRightShift"):
                listener.exitRightShift(self)

    def rightShift(self):

        localctx = CPP14Parser.RightShiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_rightShift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2349
            self.match(CPP14Parser.Greater)
            self.state = 2350
            self.match(CPP14Parser.Greater)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RightShiftAssignContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_rightShiftAssign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRightShiftAssign"):
                listener.enterRightShiftAssign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRightShiftAssign"):
                listener.exitRightShiftAssign(self)

    def rightShiftAssign(self):

        localctx = CPP14Parser.RightShiftAssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_rightShiftAssign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2352
            self.match(CPP14Parser.Greater)
            self.state = 2353
            self.match(CPP14Parser.Greater)
            self.state = 2354
            self.match(CPP14Parser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TheoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def rightShift(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftContext, 0)

        def rightShiftAssign(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftAssignContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_theoperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTheoperator"):
                listener.enterTheoperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTheoperator"):
                listener.exitTheoperator(self)

    def theoperator(self):

        localctx = CPP14Parser.TheoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_theoperator)
        try:
            self.state = 2404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 308, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2356
                self.match(CPP14Parser.New)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2357
                self.match(CPP14Parser.Delete)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2358
                self.match(CPP14Parser.New)
                self.state = 2359
                self.match(CPP14Parser.LeftBracket)
                self.state = 2360
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2361
                self.match(CPP14Parser.Delete)
                self.state = 2362
                self.match(CPP14Parser.LeftBracket)
                self.state = 2363
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2364
                self.match(CPP14Parser.Plus)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2365
                self.match(CPP14Parser.Minus)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2366
                self.match(CPP14Parser.Star)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2367
                self.match(CPP14Parser.Div)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2368
                self.match(CPP14Parser.Mod)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2369
                self.match(CPP14Parser.Caret)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2370
                self.match(CPP14Parser.And)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2371
                self.match(CPP14Parser.Or)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2372
                self.match(CPP14Parser.Tilde)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2373
                self.match(CPP14Parser.Not)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2374
                self.match(CPP14Parser.Assign)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2375
                self.match(CPP14Parser.Less)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2376
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2377
                self.match(CPP14Parser.PlusAssign)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2378
                self.match(CPP14Parser.MinusAssign)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2379
                self.match(CPP14Parser.StarAssign)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2380
                self.match(CPP14Parser.DivAssign)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2381
                self.match(CPP14Parser.ModAssign)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2382
                self.match(CPP14Parser.XorAssign)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2383
                self.match(CPP14Parser.AndAssign)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2384
                self.match(CPP14Parser.OrAssign)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2385
                self.match(CPP14Parser.LeftShift)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2386
                self.rightShift()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2387
                self.rightShiftAssign()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2388
                self.match(CPP14Parser.LeftShiftAssign)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2389
                self.match(CPP14Parser.Equal)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2390
                self.match(CPP14Parser.NotEqual)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2391
                self.match(CPP14Parser.LessEqual)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2392
                self.match(CPP14Parser.GreaterEqual)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 2393
                self.match(CPP14Parser.AndAnd)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 2394
                self.match(CPP14Parser.OrOr)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 2395
                self.match(CPP14Parser.PlusPlus)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 2396
                self.match(CPP14Parser.MinusMinus)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2397
                self.match(CPP14Parser.Comma)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2398
                self.match(CPP14Parser.ArrowStar)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2399
                self.match(CPP14Parser.Arrow)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2400
                self.match(CPP14Parser.LeftParen)
                self.state = 2401
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 2402
                self.match(CPP14Parser.LeftBracket)
                self.state = 2403
                self.match(CPP14Parser.RightBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integerliteral(self):
            return self.getToken(CPP14Parser.Integerliteral, 0)

        def Characterliteral(self):
            return self.getToken(CPP14Parser.Characterliteral, 0)

        def Floatingliteral(self):
            return self.getToken(CPP14Parser.Floatingliteral, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def booleanliteral(self):
            return self.getTypedRuleContext(CPP14Parser.BooleanliteralContext, 0)

        def pointerliteral(self):
            return self.getTypedRuleContext(CPP14Parser.PointerliteralContext, 0)

        def userdefinedliteral(self):
            return self.getTypedRuleContext(CPP14Parser.UserdefinedliteralContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_literal

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLiteral"):
                listener.enterLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLiteral"):
                listener.exitLiteral(self)

    def literal(self):

        localctx = CPP14Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_literal)
        try:
            self.state = 2413
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Integerliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2406
                self.match(CPP14Parser.Integerliteral)
                pass
            elif token in [CPP14Parser.Characterliteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2407
                self.match(CPP14Parser.Characterliteral)
                pass
            elif token in [CPP14Parser.Floatingliteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2408
                self.match(CPP14Parser.Floatingliteral)
                pass
            elif token in [CPP14Parser.Stringliteral]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2409
                self.match(CPP14Parser.Stringliteral)
                pass
            elif token in [CPP14Parser.FalseToken, CPP14Parser.TrueToken]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2410
                self.booleanliteral()
                pass
            elif token in [CPP14Parser.Nullptr]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2411
                self.pointerliteral()
                pass
            elif token in [CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral,
                           CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2412
                self.userdefinedliteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanliteralContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FalseToken(self):
            return self.getToken(CPP14Parser.FalseToken, 0)

        def TrueToken(self):
            return self.getToken(CPP14Parser.TrueToken, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_booleanliteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBooleanliteral"):
                listener.enterBooleanliteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBooleanliteral"):
                listener.exitBooleanliteral(self)

    def booleanliteral(self):

        localctx = CPP14Parser.BooleanliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_booleanliteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2415
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.FalseToken or _la == CPP14Parser.TrueToken):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PointerliteralContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nullptr(self):
            return self.getToken(CPP14Parser.Nullptr, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pointerliteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPointerliteral"):
                listener.enterPointerliteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPointerliteral"):
                listener.exitPointerliteral(self)

    def pointerliteral(self):

        localctx = CPP14Parser.PointerliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_pointerliteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2417
            self.match(CPP14Parser.Nullptr)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UserdefinedliteralContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Userdefinedintegerliteral(self):
            return self.getToken(CPP14Parser.Userdefinedintegerliteral, 0)

        def Userdefinedfloatingliteral(self):
            return self.getToken(CPP14Parser.Userdefinedfloatingliteral, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def Userdefinedcharacterliteral(self):
            return self.getToken(CPP14Parser.Userdefinedcharacterliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_userdefinedliteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUserdefinedliteral"):
                listener.enterUserdefinedliteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUserdefinedliteral"):
                listener.exitUserdefinedliteral(self)

    def userdefinedliteral(self):

        localctx = CPP14Parser.UserdefinedliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_userdefinedliteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2419
            _la = self._input.LA(1)
            if not (((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & (
                        (1 << (CPP14Parser.Userdefinedintegerliteral - 135)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 135)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 135)) | (
                1 << (CPP14Parser.Userdefinedcharacterliteral - 135)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[6] = self.nestednamespecifier_sempred
        self._predicates[8] = self.capturelist_sempred
        self._predicates[11] = self.postfixexpression_sempred
        self._predicates[20] = self.noptrnewdeclarator_sempred
        self._predicates[24] = self.pmexpression_sempred
        self._predicates[25] = self.multiplicativeexpression_sempred
        self._predicates[26] = self.additiveexpression_sempred
        self._predicates[27] = self.shiftexpression_sempred
        self._predicates[28] = self.relationalexpression_sempred
        self._predicates[29] = self.equalityexpression_sempred
        self._predicates[30] = self.andexpression_sempred
        self._predicates[31] = self.exclusiveorexpression_sempred
        self._predicates[32] = self.inclusiveorexpression_sempred
        self._predicates[33] = self.logicalandexpression_sempred
        self._predicates[34] = self.logicalorexpression_sempred
        self._predicates[40] = self.expression_sempred
        self._predicates[47] = self.statementseq_sempred
        self._predicates[57] = self.declarationseq_sempred
        self._predicates[76] = self.enumeratorlist_sempred
        self._predicates[90] = self.attributespecifierseq_sempred
        self._predicates[93] = self.attributelist_sempred
        self._predicates[99] = self.balancedtokenseq_sempred
        self._predicates[101] = self.initdeclaratorlist_sempred
        self._predicates[105] = self.noptrdeclarator_sempred
        self._predicates[116] = self.noptrabstractdeclarator_sempred
        self._predicates[118] = self.noptrabstractpackdeclarator_sempred
        self._predicates[120] = self.parameterdeclarationlist_sempred
        self._predicates[127] = self.initializerlist_sempred
        self._predicates[137] = self.memberdeclaratorlist_sempred
        self._predicates[139] = self.virtspecifierseq_sempred
        self._predicates[143] = self.basespecifierlist_sempred
        self._predicates[158] = self.templateparameterlist_sempred
        self._predicates[163] = self.templateargumentlist_sempred
        self._predicates[176] = self.typeidlist_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def nestednamespecifier_sempred(self, localctx: NestednamespecifierContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 2)

        if predIndex == 1:
            return self.precpred(self._ctx, 1)

    def capturelist_sempred(self, localctx: CapturelistContext, predIndex: int):
        if predIndex == 2:
            return self.precpred(self._ctx, 1)

    def postfixexpression_sempred(self, localctx: PostfixexpressionContext, predIndex: int):
        if predIndex == 3:
            return self.precpred(self._ctx, 19)

        if predIndex == 4:
            return self.precpred(self._ctx, 18)

        if predIndex == 5:
            return self.precpred(self._ctx, 17)

        if predIndex == 6:
            return self.precpred(self._ctx, 12)

        if predIndex == 7:
            return self.precpred(self._ctx, 11)

        if predIndex == 8:
            return self.precpred(self._ctx, 10)

        if predIndex == 9:
            return self.precpred(self._ctx, 9)

        if predIndex == 10:
            return self.precpred(self._ctx, 8)

        if predIndex == 11:
            return self.precpred(self._ctx, 7)

    def noptrnewdeclarator_sempred(self, localctx: NoptrnewdeclaratorContext, predIndex: int):
        if predIndex == 12:
            return self.precpred(self._ctx, 1)

    def pmexpression_sempred(self, localctx: PmexpressionContext, predIndex: int):
        if predIndex == 13:
            return self.precpred(self._ctx, 2)

        if predIndex == 14:
            return self.precpred(self._ctx, 1)

    def multiplicativeexpression_sempred(self, localctx: MultiplicativeexpressionContext, predIndex: int):
        if predIndex == 15:
            return self.precpred(self._ctx, 3)

        if predIndex == 16:
            return self.precpred(self._ctx, 2)

        if predIndex == 17:
            return self.precpred(self._ctx, 1)

    def additiveexpression_sempred(self, localctx: AdditiveexpressionContext, predIndex: int):
        if predIndex == 18:
            return self.precpred(self._ctx, 2)

        if predIndex == 19:
            return self.precpred(self._ctx, 1)

    def shiftexpression_sempred(self, localctx: ShiftexpressionContext, predIndex: int):
        if predIndex == 20:
            return self.precpred(self._ctx, 2)

        if predIndex == 21:
            return self.precpred(self._ctx, 1)

    def relationalexpression_sempred(self, localctx: RelationalexpressionContext, predIndex: int):
        if predIndex == 22:
            return self.precpred(self._ctx, 4)

        if predIndex == 23:
            return self.precpred(self._ctx, 3)

        if predIndex == 24:
            return self.precpred(self._ctx, 2)

        if predIndex == 25:
            return self.precpred(self._ctx, 1)

    def equalityexpression_sempred(self, localctx: EqualityexpressionContext, predIndex: int):
        if predIndex == 26:
            return self.precpred(self._ctx, 2)

        if predIndex == 27:
            return self.precpred(self._ctx, 1)

    def andexpression_sempred(self, localctx: AndexpressionContext, predIndex: int):
        if predIndex == 28:
            return self.precpred(self._ctx, 1)

    def exclusiveorexpression_sempred(self, localctx: ExclusiveorexpressionContext, predIndex: int):
        if predIndex == 29:
            return self.precpred(self._ctx, 1)

    def inclusiveorexpression_sempred(self, localctx: InclusiveorexpressionContext, predIndex: int):
        if predIndex == 30:
            return self.precpred(self._ctx, 1)

    def logicalandexpression_sempred(self, localctx: LogicalandexpressionContext, predIndex: int):
        if predIndex == 31:
            return self.precpred(self._ctx, 1)

    def logicalorexpression_sempred(self, localctx: LogicalorexpressionContext, predIndex: int):
        if predIndex == 32:
            return self.precpred(self._ctx, 1)

    def expression_sempred(self, localctx: ExpressionContext, predIndex: int):
        if predIndex == 33:
            return self.precpred(self._ctx, 1)

    def statementseq_sempred(self, localctx: StatementseqContext, predIndex: int):
        if predIndex == 34:
            return self.precpred(self._ctx, 1)

    def declarationseq_sempred(self, localctx: DeclarationseqContext, predIndex: int):
        if predIndex == 35:
            return self.precpred(self._ctx, 1)

    def enumeratorlist_sempred(self, localctx: EnumeratorlistContext, predIndex: int):
        if predIndex == 36:
            return self.precpred(self._ctx, 1)

    def attributespecifierseq_sempred(self, localctx: AttributespecifierseqContext, predIndex: int):
        if predIndex == 37:
            return self.precpred(self._ctx, 1)

    def attributelist_sempred(self, localctx: AttributelistContext, predIndex: int):
        if predIndex == 38:
            return self.precpred(self._ctx, 3)

        if predIndex == 39:
            return self.precpred(self._ctx, 1)

    def balancedtokenseq_sempred(self, localctx: BalancedtokenseqContext, predIndex: int):
        if predIndex == 40:
            return self.precpred(self._ctx, 1)

    def initdeclaratorlist_sempred(self, localctx: InitdeclaratorlistContext, predIndex: int):
        if predIndex == 41:
            return self.precpred(self._ctx, 1)

    def noptrdeclarator_sempred(self, localctx: NoptrdeclaratorContext, predIndex: int):
        if predIndex == 42:
            return self.precpred(self._ctx, 3)

        if predIndex == 43:
            return self.precpred(self._ctx, 2)

    def noptrabstractdeclarator_sempred(self, localctx: NoptrabstractdeclaratorContext, predIndex: int):
        if predIndex == 44:
            return self.precpred(self._ctx, 5)

        if predIndex == 45:
            return self.precpred(self._ctx, 3)

    def noptrabstractpackdeclarator_sempred(self, localctx: NoptrabstractpackdeclaratorContext, predIndex: int):
        if predIndex == 46:
            return self.precpred(self._ctx, 3)

        if predIndex == 47:
            return self.precpred(self._ctx, 2)

    def parameterdeclarationlist_sempred(self, localctx: ParameterdeclarationlistContext, predIndex: int):
        if predIndex == 48:
            return self.precpred(self._ctx, 1)

    def initializerlist_sempred(self, localctx: InitializerlistContext, predIndex: int):
        if predIndex == 49:
            return self.precpred(self._ctx, 1)

    def memberdeclaratorlist_sempred(self, localctx: MemberdeclaratorlistContext, predIndex: int):
        if predIndex == 50:
            return self.precpred(self._ctx, 1)

    def virtspecifierseq_sempred(self, localctx: VirtspecifierseqContext, predIndex: int):
        if predIndex == 51:
            return self.precpred(self._ctx, 1)

    def basespecifierlist_sempred(self, localctx: BasespecifierlistContext, predIndex: int):
        if predIndex == 52:
            return self.precpred(self._ctx, 1)

    def templateparameterlist_sempred(self, localctx: TemplateparameterlistContext, predIndex: int):
        if predIndex == 53:
            return self.precpred(self._ctx, 1)

    def templateargumentlist_sempred(self, localctx: TemplateargumentlistContext, predIndex: int):
        if predIndex == 54:
            return self.precpred(self._ctx, 1)

    def typeidlist_sempred(self, localctx: TypeidlistContext, predIndex: int):
        if predIndex == 55:
            return self.precpred(self._ctx, 1)
