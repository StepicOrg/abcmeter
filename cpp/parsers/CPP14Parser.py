# Generated from /home/meanmail/MyProjects/antlr/cpp/grammars/CPP14.g4 by ANTLR 4.7
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *
from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3w")
        buf.write("\u0ae0\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\3\2\7\2p\n\2\f\2\16\2s")
        buf.write("\13\2\3\2\3\2\3\3\5\3x\n\3\3\3\3\3\3\3\5\3}\n\3\3\3\5")
        buf.write("\3\u0080\n\3\3\3\3\3\3\3\3\3\3\3\5\3\u0087\n\3\3\3\3\3")
        buf.write("\5\3\u008b\n\3\3\3\5\3\u008e\n\3\3\3\6\3\u0091\n\3\r\3")
        buf.write("\16\3\u0092\3\3\7\3\u0096\n\3\f\3\16\3\u0099\13\3\3\3")
        buf.write("\7\3\u009c\n\3\f\3\16\3\u009f\13\3\5\3\u00a1\n\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\7\3\u00a9\n\3\f\3\16\3\u00ac\13\3\3")
        buf.write("\3\5\3\u00af\n\3\3\3\5\3\u00b2\n\3\3\4\3\4\3\4\5\4\u00b7")
        buf.write("\n\4\3\4\5\4\u00ba\n\4\3\4\3\4\3\4\3\4\3\4\7\4\u00c1\n")
        buf.write("\4\f\4\16\4\u00c4\13\4\3\4\5\4\u00c7\n\4\3\4\5\4\u00ca")
        buf.write("\n\4\3\4\3\4\3\4\5\4\u00cf\n\4\3\4\3\4\3\4\5\4\u00d4\n")
        buf.write("\4\3\4\5\4\u00d7\n\4\3\4\7\4\u00da\n\4\f\4\16\4\u00dd")
        buf.write("\13\4\3\5\3\5\3\5\3\5\7\5\u00e3\n\5\f\5\16\5\u00e6\13")
        buf.write("\5\5\5\u00e8\n\5\3\5\5\5\u00eb\n\5\3\5\3\5\3\5\7\5\u00f0")
        buf.write("\n\5\f\5\16\5\u00f3\13\5\3\5\3\5\3\5\5\5\u00f8\n\5\3\5")
        buf.write("\3\5\5\5\u00fc\n\5\3\5\3\5\3\5\6\5\u0101\n\5\r\5\16\5")
        buf.write("\u0102\3\5\7\5\u0106\n\5\f\5\16\5\u0109\13\5\3\5\5\5\u010c")
        buf.write("\n\5\3\5\5\5\u010f\n\5\3\5\3\5\6\5\u0113\n\5\r\5\16\5")
        buf.write("\u0114\3\5\7\5\u0118\n\5\f\5\16\5\u011b\13\5\3\5\5\5\u011e")
        buf.write("\n\5\3\5\5\5\u0121\n\5\7\5\u0123\n\5\f\5\16\5\u0126\13")
        buf.write("\5\5\5\u0128\n\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0130\n\5")
        buf.write("\5\5\u0132\n\5\3\5\7\5\u0135\n\5\f\5\16\5\u0138\13\5\3")
        buf.write("\5\3\5\6\5\u013c\n\5\r\5\16\5\u013d\3\5\7\5\u0141\n\5")
        buf.write("\f\5\16\5\u0144\13\5\3\5\5\5\u0147\n\5\5\5\u0149\n\5\3")
        buf.write("\6\3\6\3\6\3\6\7\6\u014f\n\6\f\6\16\6\u0152\13\6\3\6\3")
        buf.write("\6\3\6\5\6\u0157\n\6\5\6\u0159\n\6\3\6\5\6\u015c\n\6\3")
        buf.write("\6\3\6\3\6\5\6\u0161\n\6\3\6\3\6\3\6\5\6\u0166\n\6\3\6")
        buf.write("\3\6\5\6\u016a\n\6\5\6\u016c\n\6\3\6\3\6\5\6\u0170\n\6")
        buf.write("\5\6\u0172\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\5\7\u017e\n\7\5\7\u0180\n\7\3\7\3\7\3\7\3\7\3\7\5\7\u0187")
        buf.write("\n\7\3\7\3\7\5\7\u018b\n\7\3\7\5\7\u018e\n\7\3\7\5\7\u0191")
        buf.write("\n\7\7\7\u0193\n\7\f\7\16\7\u0196\13\7\3\7\5\7\u0199\n")
        buf.write("\7\3\7\3\7\5\7\u019d\n\7\3\7\5\7\u01a0\n\7\3\7\5\7\u01a3")
        buf.write("\n\7\3\7\3\7\5\7\u01a7\n\7\3\7\3\7\5\7\u01ab\n\7\3\7\5")
        buf.write("\7\u01ae\n\7\3\7\5\7\u01b1\n\7\7\7\u01b3\n\7\f\7\16\7")
        buf.write("\u01b6\13\7\5\7\u01b8\n\7\3\7\3\7\5\7\u01bc\n\7\3\7\3")
        buf.write("\7\7\7\u01c0\n\7\f\7\16\7\u01c3\13\7\3\7\3\7\3\7\3\7\5")
        buf.write("\7\u01c9\n\7\3\7\3\7\3\7\3\7\5\7\u01cf\n\7\5\7\u01d1\n")
        buf.write("\7\3\7\5\7\u01d4\n\7\3\7\3\7\3\7\3\7\5\7\u01da\n\7\3\7")
        buf.write("\3\7\3\7\5\7\u01df\n\7\3\7\5\7\u01e2\n\7\3\7\3\7\5\7\u01e6")
        buf.write("\n\7\3\7\3\7\3\7\3\7\5\7\u01ec\n\7\5\7\u01ee\n\7\3\7\5")
        buf.write("\7\u01f1\n\7\3\7\3\7\3\7\6\7\u01f6\n\7\r\7\16\7\u01f7")
        buf.write("\3\7\7\7\u01fb\n\7\f\7\16\7\u01fe\13\7\3\7\5\7\u0201\n")
        buf.write("\7\3\7\3\7\5\7\u0205\n\7\3\7\3\7\3\7\3\7\7\7\u020b\n\7")
        buf.write("\f\7\16\7\u020e\13\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\7\7\u0217")
        buf.write("\n\7\f\7\16\7\u021a\13\7\3\7\3\7\3\7\3\7\6\7\u0220\n\7")
        buf.write("\r\7\16\7\u0221\3\7\7\7\u0225\n\7\f\7\16\7\u0228\13\7")
        buf.write("\3\7\5\7\u022b\n\7\3\7\3\7\5\7\u022f\n\7\5\7\u0231\n\7")
        buf.write("\3\7\7\7\u0234\n\7\f\7\16\7\u0237\13\7\3\b\5\b\u023a\n")
        buf.write("\b\3\b\3\b\3\b\5\b\u023f\n\b\3\b\5\b\u0242\n\b\3\b\5\b")
        buf.write("\u0245\n\b\3\b\3\b\3\b\3\b\3\b\5\b\u024c\n\b\3\b\3\b\3")
        buf.write("\b\5\b\u0251\n\b\3\b\3\b\3\b\3\b\5\b\u0257\n\b\3\b\5\b")
        buf.write("\u025a\n\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u0262\n\b\f\b\16")
        buf.write("\b\u0265\13\b\3\b\5\b\u0268\n\b\3\b\5\b\u026b\n\b\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\t\6\t\u0275\n\t\r\t\16\t\u0276")
        buf.write("\3\t\7\t\u027a\n\t\f\t\16\t\u027d\13\t\3\t\5\t\u0280\n")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u0288\n\t\3\t\3\t\3\t\6")
        buf.write("\t\u028d\n\t\r\t\16\t\u028e\3\t\7\t\u0292\n\t\f\t\16\t")
        buf.write("\u0295\13\t\3\t\5\t\u0298\n\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\7\t\u02a1\n\t\f\t\16\t\u02a4\13\t\3\t\3\t\3\t\3\t")
        buf.write("\5\t\u02aa\n\t\3\n\3\n\3\n\5\n\u02af\n\n\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\7\13\u02b7\n\13\f\13\16\13\u02ba\13\13")
        buf.write("\3\13\7\13\u02bd\n\13\f\13\16\13\u02c0\13\13\3\f\5\f\u02c3")
        buf.write("\n\f\3\f\3\f\3\f\3\f\3\f\5\f\u02ca\n\f\3\f\6\f\u02cd\n")
        buf.write("\f\r\f\16\f\u02ce\3\f\7\f\u02d2\n\f\f\f\16\f\u02d5\13")
        buf.write("\f\3\f\5\f\u02d8\n\f\3\f\3\f\6\f\u02dc\n\f\r\f\16\f\u02dd")
        buf.write("\3\f\7\f\u02e1\n\f\f\f\16\f\u02e4\13\f\3\f\5\f\u02e7\n")
        buf.write("\f\3\f\3\f\5\f\u02eb\n\f\3\f\3\f\5\f\u02ef\n\f\3\f\3\f")
        buf.write("\3\f\3\f\5\f\u02f5\n\f\5\f\u02f7\n\f\3\f\5\f\u02fa\n\f")
        buf.write("\3\r\3\r\5\r\u02fe\n\r\3\r\3\r\3\r\3\r\7\r\u0304\n\r\f")
        buf.write("\r\16\r\u0307\13\r\3\r\3\r\7\r\u030b\n\r\f\r\16\r\u030e")
        buf.write("\13\r\3\r\3\r\3\r\3\r\7\r\u0314\n\r\f\r\16\r\u0317\13")
        buf.write("\r\7\r\u0319\n\r\f\r\16\r\u031c\13\r\5\r\u031e\n\r\3\16")
        buf.write("\5\16\u0321\n\16\3\16\3\16\3\16\5\16\u0326\n\16\3\16\3")
        buf.write("\16\3\17\3\17\6\17\u032c\n\17\r\17\16\17\u032d\3\17\7")
        buf.write("\17\u0331\n\17\f\17\16\17\u0334\13\17\3\17\5\17\u0337")
        buf.write("\n\17\3\17\3\17\7\17\u033b\n\17\f\17\16\17\u033e\13\17")
        buf.write("\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\5\20\u034d\n\20\3\20\7\20\u0350\n\20\f\20\16")
        buf.write("\20\u0353\13\20\3\21\3\21\3\21\3\21\3\21\3\21\7\21\u035b")
        buf.write("\n\21\f\21\16\21\u035e\13\21\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\7\22\u0366\n\22\f\22\16\22\u0369\13\22\3\23\3\23")
        buf.write("\3\23\7\23\u036e\n\23\f\23\16\23\u0371\13\23\3\23\3\23")
        buf.write("\3\23\3\23\7\23\u0377\n\23\f\23\16\23\u037a\13\23\3\23")
        buf.write("\3\23\3\23\3\24\3\24\3\24\7\24\u0382\n\24\f\24\16\24\u0385")
        buf.write("\13\24\3\24\3\24\3\24\3\25\3\25\3\25\7\25\u038d\n\25\f")
        buf.write("\25\16\25\u0390\13\25\3\25\3\25\3\25\3\25\3\25\5\25\u0397")
        buf.write("\n\25\5\25\u0399\n\25\3\25\5\25\u039c\n\25\5\25\u039e")
        buf.write("\n\25\3\25\3\25\3\25\3\25\5\25\u03a4\n\25\5\25\u03a6\n")
        buf.write("\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\5\26\u03b5\n\26\3\27\3\27\3\27\7\27\u03ba")
        buf.write("\n\27\f\27\16\27\u03bd\13\27\3\27\3\27\5\27\u03c1\n\27")
        buf.write("\3\30\7\30\u03c4\n\30\f\30\16\30\u03c7\13\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\5\30\u03d0\n\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\7\30\u03d7\n\30\f\30\16\30\u03da\13\30\5")
        buf.write("\30\u03dc\n\30\3\30\3\30\3\30\7\30\u03e1\n\30\f\30\16")
        buf.write("\30\u03e4\13\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30")
        buf.write("\u03ed\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\7\30\u03f6")
        buf.write("\n\30\f\30\16\30\u03f9\13\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\5\30\u0402\n\30\3\30\3\30\3\30\3\30\7\30\u0408")
        buf.write("\n\30\f\30\16\30\u040b\13\30\5\30\u040d\n\30\3\30\7\30")
        buf.write("\u0410\n\30\f\30\16\30\u0413\13\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\7\30\u041b\n\30\f\30\16\30\u041e\13\30\3\30")
        buf.write("\3\30\3\30\5\30\u0423\n\30\5\30\u0425\n\30\3\30\5\30\u0428")
        buf.write("\n\30\5\30\u042a\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\7\30\u0435\n\30\f\30\16\30\u0438\13\30\5")
        buf.write("\30\u043a\n\30\3\30\3\30\3\30\5\30\u043f\n\30\5\30\u0441")
        buf.write("\n\30\3\30\5\30\u0444\n\30\3\30\3\30\3\30\3\30\3\30\5")
        buf.write("\30\u044b\n\30\3\30\3\30\3\30\5\30\u0450\n\30\3\30\6\30")
        buf.write("\u0453\n\30\r\30\16\30\u0454\3\30\5\30\u0458\n\30\3\30")
        buf.write("\3\30\5\30\u045c\n\30\3\30\3\30\3\30\5\30\u0461\n\30\7")
        buf.write("\30\u0463\n\30\f\30\16\30\u0466\13\30\3\30\3\30\3\30\5")
        buf.write("\30\u046b\n\30\3\30\3\30\5\30\u046f\n\30\3\30\3\30\3\30")
        buf.write("\5\30\u0474\n\30\7\30\u0476\n\30\f\30\16\30\u0479\13\30")
        buf.write("\5\30\u047b\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\5\30\u0487\n\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\5\30\u048e\n\30\3\30\5\30\u0491\n\30\3\30\3\30\3\30\7")
        buf.write("\30\u0496\n\30\f\30\16\30\u0499\13\30\3\30\3\30\6\30\u049d")
        buf.write("\n\30\r\30\16\30\u049e\3\30\7\30\u04a2\n\30\f\30\16\30")
        buf.write("\u04a5\13\30\3\30\5\30\u04a8\n\30\5\30\u04aa\n\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\5\30\u04b8\n\30\3\30\7\30\u04bb\n\30\f\30\16\30\u04be")
        buf.write("\13\30\3\30\3\30\3\30\6\30\u04c3\n\30\r\30\16\30\u04c4")
        buf.write("\3\30\7\30\u04c8\n\30\f\30\16\30\u04cb\13\30\5\30\u04cd")
        buf.write("\n\30\3\30\5\30\u04d0\n\30\3\31\3\31\3\31\5\31\u04d5\n")
        buf.write("\31\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\7\33")
        buf.write("\u04e0\n\33\f\33\16\33\u04e3\13\33\3\33\7\33\u04e6\n\33")
        buf.write("\f\33\16\33\u04e9\13\33\3\33\3\33\3\33\3\33\3\33\5\33")
        buf.write("\u04f0\n\33\3\33\3\33\3\33\5\33\u04f5\n\33\5\33\u04f7")
        buf.write("\n\33\3\33\5\33\u04fa\n\33\5\33\u04fc\n\33\3\34\3\34\3")
        buf.write("\34\7\34\u0501\n\34\f\34\16\34\u0504\13\34\5\34\u0506")
        buf.write("\n\34\3\34\5\34\u0509\n\34\3\34\3\34\5\34\u050d\n\34\3")
        buf.write("\34\3\34\3\34\5\34\u0512\n\34\7\34\u0514\n\34\f\34\16")
        buf.write("\34\u0517\13\34\5\34\u0519\n\34\3\34\6\34\u051c\n\34\r")
        buf.write("\34\16\34\u051d\3\34\5\34\u0521\n\34\3\34\3\34\5\34\u0525")
        buf.write("\n\34\3\34\3\34\3\34\5\34\u052a\n\34\7\34\u052c\n\34\f")
        buf.write("\34\16\34\u052f\13\34\5\34\u0531\n\34\3\34\3\34\3\35\3")
        buf.write("\35\3\35\3\35\3\36\5\36\u053a\n\36\3\36\3\36\5\36\u053e")
        buf.write("\n\36\3\36\3\36\3\36\5\36\u0543\n\36\7\36\u0545\n\36\f")
        buf.write("\36\16\36\u0548\13\36\5\36\u054a\n\36\3\36\3\36\6\36\u054e")
        buf.write("\n\36\r\36\16\36\u054f\3\36\5\36\u0553\n\36\3\36\3\36")
        buf.write("\5\36\u0557\n\36\3\36\3\36\3\36\5\36\u055c\n\36\7\36\u055e")
        buf.write("\n\36\f\36\16\36\u0561\13\36\5\36\u0563\n\36\3\36\3\36")
        buf.write("\3\36\7\36\u0568\n\36\f\36\16\36\u056b\13\36\3\36\3\36")
        buf.write("\3\36\5\36\u0570\n\36\3\36\3\36\3\36\5\36\u0575\n\36\3")
        buf.write("\36\3\36\7\36\u0579\n\36\f\36\16\36\u057c\13\36\3\36\3")
        buf.write("\36\5\36\u0580\n\36\3\36\3\36\7\36\u0584\n\36\f\36\16")
        buf.write("\36\u0587\13\36\3\36\3\36\3\36\3\36\5\36\u058d\n\36\3")
        buf.write("\36\3\36\7\36\u0591\n\36\f\36\16\36\u0594\13\36\3\36\3")
        buf.write("\36\6\36\u0598\n\36\r\36\16\36\u0599\3\36\3\36\3\36\5")
        buf.write("\36\u059f\n\36\5\36\u05a1\n\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\5\36\u05ac\n\36\3\36\3\36\3\36\3")
        buf.write("\36\3\36\5\36\u05b3\n\36\3\36\5\36\u05b6\n\36\3\36\3\36")
        buf.write("\3\36\7\36\u05bb\n\36\f\36\16\36\u05be\13\36\3\36\3\36")
        buf.write("\6\36\u05c2\n\36\r\36\16\36\u05c3\3\36\7\36\u05c7\n\36")
        buf.write("\f\36\16\36\u05ca\13\36\3\36\5\36\u05cd\n\36\5\36\u05cf")
        buf.write("\n\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\5\36\u05dd\n\36\3\36\7\36\u05e0\n\36\f\36\16")
        buf.write("\36\u05e3\13\36\3\36\3\36\3\36\6\36\u05e8\n\36\r\36\16")
        buf.write("\36\u05e9\3\36\7\36\u05ed\n\36\f\36\16\36\u05f0\13\36")
        buf.write("\5\36\u05f2\n\36\3\36\3\36\3\36\3\36\5\36\u05f8\n\36\3")
        buf.write("\36\3\36\5\36\u05fc\n\36\3\36\5\36\u05ff\n\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\7\36\u0606\n\36\f\36\16\36\u0609\13\36")
        buf.write("\3\36\3\36\5\36\u060d\n\36\3\36\5\36\u0610\n\36\3\36\3")
        buf.write("\36\5\36\u0614\n\36\3\36\3\36\7\36\u0618\n\36\f\36\16")
        buf.write("\36\u061b\13\36\3\36\3\36\5\36\u061f\n\36\3\37\3\37\3")
        buf.write("\37\3\37\3\37\3\37\6\37\u0627\n\37\r\37\16\37\u0628\3")
        buf.write("\37\7\37\u062c\n\37\f\37\16\37\u062f\13\37\3 \3 \3 \7")
        buf.write(" \u0634\n \f \16 \u0637\13 \3 \5 \u063a\n \3 \3 \3 \5")
        buf.write(" \u063f\n \3 \5 \u0642\n \3 \5 \u0645\n \5 \u0647\n \3")
        buf.write(" \3 \3 \5 \u064c\n \3 \3 \3 \5 \u0651\n \7 \u0653\n \f")
        buf.write(" \16 \u0656\13 \5 \u0658\n \3 \3 \3 \3 \5 \u065e\n \3")
        buf.write(" \3 \3 \5 \u0663\n \3 \7 \u0666\n \f \16 \u0669\13 \3")
        buf.write(" \5 \u066c\n \3 \5 \u066f\n \3 \3 \6 \u0673\n \r \16 ")
        buf.write("\u0674\3 \7 \u0678\n \f \16 \u067b\13 \5 \u067d\n \3 ")
        buf.write("\3 \3 \3 \5 \u0683\n \3 \3 \3 \3 \5 \u0689\n \7 \u068b")
        buf.write("\n \f \16 \u068e\13 \3 \5 \u0691\n \3 \5 \u0694\n \3!")
        buf.write("\3!\3!\7!\u0699\n!\f!\16!\u069c\13!\3!\5!\u069f\n!\3!")
        buf.write("\3!\3!\5!\u06a4\n!\5!\u06a6\n!\3!\3!\3!\5!\u06ab\n!\3")
        buf.write("!\5!\u06ae\n!\3!\3!\5!\u06b2\n!\3!\3!\3!\3!\3!\5!\u06b9")
        buf.write("\n!\3!\3!\3!\5!\u06be\n!\3!\5!\u06c1\n!\3!\5!\u06c4\n")
        buf.write("!\3\"\5\"\u06c7\n\"\3\"\3\"\3\"\5\"\u06cc\n\"\3\"\5\"")
        buf.write("\u06cf\n\"\3\"\3\"\3\"\3\"\3\"\5\"\u06d6\n\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\7\"\u06e2\n\"\f\"\16\"")
        buf.write("\u06e5\13\"\3\"\5\"\u06e8\n\"\3\"\5\"\u06eb\n\"\3#\3#")
        buf.write("\3#\3#\3#\5#\u06f2\n#\3#\3#\7#\u06f6\n#\f#\16#\u06f9\13")
        buf.write("#\3#\5#\u06fc\n#\3#\5#\u06ff\n#\5#\u0701\n#\3#\3#\3#\3")
        buf.write("#\5#\u0707\n#\3#\3#\7#\u070b\n#\f#\16#\u070e\13#\3#\5")
        buf.write("#\u0711\n#\3#\5#\u0714\n#\5#\u0716\n#\7#\u0718\n#\f#\16")
        buf.write("#\u071b\13#\3#\3#\3#\3#\3#\6#\u0722\n#\r#\16#\u0723\3")
        buf.write("#\7#\u0727\n#\f#\16#\u072a\13#\3#\5#\u072d\n#\3#\5#\u0730")
        buf.write("\n#\3#\5#\u0733\n#\3#\3#\5#\u0737\n#\3$\3$\7$\u073b\n")
        buf.write("$\f$\16$\u073e\13$\3$\3$\3$\7$\u0743\n$\f$\16$\u0746\13")
        buf.write("$\3$\3$\3$\7$\u074b\n$\f$\16$\u074e\13$\3$\5$\u0751\n")
        buf.write("$\3%\7%\u0754\n%\f%\16%\u0757\13%\3%\3%\3%\3%\3%\6%\u075e")
        buf.write("\n%\r%\16%\u075f\3%\7%\u0763\n%\f%\16%\u0766\13%\3%\5")
        buf.write("%\u0769\n%\5%\u076b\n%\3&\3&\5&\u076f\n&\3&\3&\5&\u0773")
        buf.write("\n&\5&\u0775\n&\3&\3&\7&\u0779\n&\f&\16&\u077c\13&\3&")
        buf.write("\3&\7&\u0780\n&\f&\16&\u0783\13&\3&\3&\3&\5&\u0788\n&")
        buf.write("\3&\3&\3&\3&\5&\u078e\n&\3&\3&\7&\u0792\n&\f&\16&\u0795")
        buf.write("\13&\5&\u0797\n&\7&\u0799\n&\f&\16&\u079c\13&\3\'\3\'")
        buf.write("\3\'\3\'\7\'\u07a2\n\'\f\'\16\'\u07a5\13\'\5\'\u07a7\n")
        buf.write("\'\3\'\5\'\u07aa\n\'\3\'\3\'\3\'\7\'\u07af\n\'\f\'\16")
        buf.write("\'\u07b2\13\'\3\'\3\'\3\'\5\'\u07b7\n\'\3\'\3\'\7\'\u07bb")
        buf.write("\n\'\f\'\16\'\u07be\13\'\3\'\5\'\u07c1\n\'\3\'\3\'\3\'")
        buf.write("\6\'\u07c6\n\'\r\'\16\'\u07c7\3\'\7\'\u07cb\n\'\f\'\16")
        buf.write("\'\u07ce\13\'\3\'\5\'\u07d1\n\'\3\'\5\'\u07d4\n\'\3\'")
        buf.write("\3\'\6\'\u07d8\n\'\r\'\16\'\u07d9\3\'\7\'\u07dd\n\'\f")
        buf.write("\'\16\'\u07e0\13\'\3\'\5\'\u07e3\n\'\3\'\5\'\u07e6\n\'")
        buf.write("\7\'\u07e8\n\'\f\'\16\'\u07eb\13\'\5\'\u07ed\n\'\3\'\3")
        buf.write("\'\3\'\3\'\3\'\3\'\5\'\u07f5\n\'\5\'\u07f7\n\'\3\'\7\'")
        buf.write("\u07fa\n\'\f\'\16\'\u07fd\13\'\3(\5(\u0800\n(\3(\3(\7")
        buf.write("(\u0804\n(\f(\16(\u0807\13(\3(\7(\u080a\n(\f(\16(\u080d")
        buf.write("\13(\3(\3(\7(\u0811\n(\f(\16(\u0814\13(\5(\u0816\n(\3")
        buf.write(")\5)\u0819\n)\3)\3)\3)\6)\u081e\n)\r)\16)\u081f\3)\7)")
        buf.write("\u0823\n)\f)\16)\u0826\13)\7)\u0828\n)\f)\16)\u082b\13")
        buf.write(")\3)\7)\u082e\n)\f)\16)\u0831\13)\3)\3)\3)\3)\3)\5)\u0838")
        buf.write("\n)\3)\3)\7)\u083c\n)\f)\16)\u083f\13)\7)\u0841\n)\f)")
        buf.write("\16)\u0844\13)\5)\u0846\n)\3*\3*\3*\3*\5*\u084c\n*\3*")
        buf.write("\3*\7*\u0850\n*\f*\16*\u0853\13*\3*\3*\7*\u0857\n*\f*")
        buf.write("\16*\u085a\13*\3*\3*\3*\5*\u085f\n*\3*\3*\3*\3*\5*\u0865")
        buf.write("\n*\3*\3*\7*\u0869\n*\f*\16*\u086c\13*\5*\u086e\n*\7*")
        buf.write("\u0870\n*\f*\16*\u0873\13*\3+\7+\u0876\n+\f+\16+\u0879")
        buf.write("\13+\3+\3+\3+\5+\u087e\n+\3+\3+\3+\3+\3+\5+\u0885\n+\5")
        buf.write("+\u0887\n+\3+\5+\u088a\n+\5+\u088c\n+\3,\3,\3,\5,\u0891")
        buf.write("\n,\3,\3,\3,\5,\u0896\n,\5,\u0898\n,\3,\3,\3,\3,\3,\5")
        buf.write(",\u089f\n,\3-\3-\3-\3-\5-\u08a5\n-\5-\u08a7\n-\3-\5-\u08aa")
        buf.write("\n-\3-\5-\u08ad\n-\3-\3-\3-\3-\3-\5-\u08b4\n-\5-\u08b6")
        buf.write("\n-\3-\5-\u08b9\n-\3-\5-\u08bc\n-\7-\u08be\n-\f-\16-\u08c1")
        buf.write("\13-\3.\7.\u08c4\n.\f.\16.\u08c7\13.\3.\5.\u08ca\n.\3")
        buf.write(".\3.\3.\7.\u08cf\n.\f.\16.\u08d2\13.\5.\u08d4\n.\3.\3")
        buf.write(".\3.\7.\u08d9\n.\f.\16.\u08dc\13.\3.\3.\5.\u08e0\n.\3")
        buf.write(".\3.\7.\u08e4\n.\f.\16.\u08e7\13.\3.\3.\3.\3.\5.\u08ed")
        buf.write("\n.\3.\3.\7.\u08f1\n.\f.\16.\u08f4\13.\3.\3.\6.\u08f8")
        buf.write("\n.\r.\16.\u08f9\3.\3.\3.\5.\u08ff\n.\5.\u0901\n.\3.\3")
        buf.write(".\5.\u0905\n.\3.\3.\5.\u0909\n.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\7.\u091f\n.\f.\16")
        buf.write(".\u0922\13.\3.\3.\6.\u0926\n.\r.\16.\u0927\3.\7.\u092b")
        buf.write("\n.\f.\16.\u092e\13.\3.\5.\u0931\n.\3.\3.\3.\5.\u0936")
        buf.write("\n.\3/\3/\7/\u093a\n/\f/\16/\u093d\13/\3/\5/\u0940\n/")
        buf.write("\3/\3/\3/\3/\3/\5/\u0947\n/\5/\u0949\n/\3/\5/\u094c\n")
        buf.write("/\3/\3/\3/\5/\u0951\n/\5/\u0953\n/\3/\5/\u0956\n/\5/\u0958")
        buf.write("\n/\3/\5/\u095b\n/\3/\7/\u095e\n/\f/\16/\u0961\13/\3/")
        buf.write("\3/\5/\u0965\n/\3\60\3\60\3\60\3\60\3\61\7\61\u096c\n")
        buf.write("\61\f\61\16\61\u096f\13\61\3\61\3\61\5\61\u0973\n\61\3")
        buf.write("\61\3\61\5\61\u0977\n\61\5\61\u0979\n\61\3\61\5\61\u097c")
        buf.write("\n\61\3\61\3\61\3\61\5\61\u0981\n\61\3\61\5\61\u0984\n")
        buf.write("\61\3\61\3\61\3\61\3\61\3\61\7\61\u098b\n\61\f\61\16\61")
        buf.write("\u098e\13\61\3\61\5\61\u0991\n\61\3\61\5\61\u0994\n\61")
        buf.write("\3\62\5\62\u0997\n\62\3\62\3\62\3\62\5\62\u099c\n\62\3")
        buf.write("\62\5\62\u099f\n\62\3\62\3\62\3\62\3\62\3\62\7\62\u09a6")
        buf.write("\n\62\f\62\16\62\u09a9\13\62\3\62\5\62\u09ac\n\62\3\62")
        buf.write("\3\62\5\62\u09b0\n\62\3\62\3\62\5\62\u09b4\n\62\3\62\3")
        buf.write("\62\3\62\3\62\5\62\u09ba\n\62\5\62\u09bc\n\62\3\62\5\62")
        buf.write("\u09bf\n\62\3\62\5\62\u09c2\n\62\3\62\3\62\5\62\u09c6")
        buf.write("\n\62\3\63\3\63\5\63\u09ca\n\63\3\63\5\63\u09cd\n\63\3")
        buf.write("\63\5\63\u09d0\n\63\3\63\3\63\6\63\u09d4\n\63\r\63\16")
        buf.write("\63\u09d5\3\63\7\63\u09d9\n\63\f\63\16\63\u09dc\13\63")
        buf.write("\3\63\5\63\u09df\n\63\5\63\u09e1\n\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\5\63\u09e9\n\63\3\63\5\63\u09ec\n\63\3\63")
        buf.write("\5\63\u09ef\n\63\3\63\3\63\3\63\5\63\u09f4\n\63\5\63\u09f6")
        buf.write("\n\63\3\63\5\63\u09f9\n\63\3\63\5\63\u09fc\n\63\3\63\3")
        buf.write("\63\3\63\5\63\u0a01\n\63\3\63\5\63\u0a04\n\63\3\63\5\63")
        buf.write("\u0a07\n\63\3\63\3\63\6\63\u0a0b\n\63\r\63\16\63\u0a0c")
        buf.write("\3\63\7\63\u0a10\n\63\f\63\16\63\u0a13\13\63\3\63\5\63")
        buf.write("\u0a16\n\63\5\63\u0a18\n\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\5\63\u0a20\n\63\3\63\5\63\u0a23\n\63\3\63\5\63\u0a26")
        buf.write("\n\63\3\63\3\63\3\63\5\63\u0a2b\n\63\5\63\u0a2d\n\63\3")
        buf.write("\63\5\63\u0a30\n\63\3\63\5\63\u0a33\n\63\7\63\u0a35\n")
        buf.write("\63\f\63\16\63\u0a38\13\63\3\64\6\64\u0a3b\n\64\r\64\16")
        buf.write("\64\u0a3c\3\64\7\64\u0a40\n\64\f\64\16\64\u0a43\13\64")
        buf.write("\3\64\5\64\u0a46\n\64\3\64\3\64\3\64\5\64\u0a4b\n\64\5")
        buf.write("\64\u0a4d\n\64\3\64\5\64\u0a50\n\64\3\64\5\64\u0a53\n")
        buf.write("\64\3\64\3\64\6\64\u0a57\n\64\r\64\16\64\u0a58\3\64\7")
        buf.write("\64\u0a5c\n\64\f\64\16\64\u0a5f\13\64\3\64\5\64\u0a62")
        buf.write("\n\64\3\64\3\64\3\64\5\64\u0a67\n\64\5\64\u0a69\n\64\3")
        buf.write("\64\5\64\u0a6c\n\64\3\64\5\64\u0a6f\n\64\7\64\u0a71\n")
        buf.write("\64\f\64\16\64\u0a74\13\64\3\65\3\65\3\65\7\65\u0a79\n")
        buf.write("\65\f\65\16\65\u0a7c\13\65\3\65\3\65\6\65\u0a80\n\65\r")
        buf.write("\65\16\65\u0a81\3\66\3\66\3\66\7\66\u0a87\n\66\f\66\16")
        buf.write("\66\u0a8a\13\66\3\66\6\66\u0a8d\n\66\r\66\16\66\u0a8e")
        buf.write("\3\66\7\66\u0a92\n\66\f\66\16\66\u0a95\13\66\3\66\3\66")
        buf.write("\5\66\u0a99\n\66\5\66\u0a9b\n\66\3\66\5\66\u0a9e\n\66")
        buf.write("\3\66\3\66\3\66\7\66\u0aa3\n\66\f\66\16\66\u0aa6\13\66")
        buf.write("\3\66\3\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\3\67\5\67\u0acb\n\67\3\67\3\67\3\67\3\67\3\67\3")
        buf.write("\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\5\67\u0ade\n\67\3\67\3\u068c\7\24 \"JR8\2\4\6\b")
        buf.write("\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668")
        buf.write(":<>@BDFHJLNPRTVXZ\\^`bdfhjl\2\21\4\2aaff\4\2EEII\4\2?")
        buf.write("AEH\3\2\\]\4\2JKXY\3\2VW\4\2DFZ[\4\2--88\4\2\t\t\17\17")
        buf.write("\4\2\f\f,,\4\2\31\31%%\3\2\21\22\5\2\f\f,,\65\65\4\2E")
        buf.write("EZZ\4\2\f\f\64\64\2\u0d43\2q\3\2\2\2\4\u00b1\3\2\2\2\6")
        buf.write("\u00c9\3\2\2\2\b\u00de\3\2\2\2\n\u0171\3\2\2\2\f\u0230")
        buf.write("\3\2\2\2\16\u026a\3\2\2\2\20\u02a9\3\2\2\2\22\u02ae\3")
        buf.write("\2\2\2\24\u02b0\3\2\2\2\26\u02c2\3\2\2\2\30\u031d\3\2")
        buf.write("\2\2\32\u0320\3\2\2\2\34\u033c\3\2\2\2\36\u0341\3\2\2")
        buf.write("\2 \u0354\3\2\2\2\"\u035f\3\2\2\2$\u036a\3\2\2\2&\u037e")
        buf.write("\3\2\2\2(\u03a5\3\2\2\2*\u03b4\3\2\2\2,\u03c0\3\2\2\2")
        buf.write(".\u04cf\3\2\2\2\60\u04d4\3\2\2\2\62\u04d9\3\2\2\2\64\u04fb")
        buf.write("\3\2\2\2\66\u0530\3\2\2\28\u0534\3\2\2\2:\u061e\3\2\2")
        buf.write("\2<\u0626\3\2\2\2>\u0693\3\2\2\2@\u06c3\3\2\2\2B\u06ea")
        buf.write("\3\2\2\2D\u0736\3\2\2\2F\u0750\3\2\2\2H\u076a\3\2\2\2")
        buf.write("J\u0787\3\2\2\2L\u079d\3\2\2\2N\u0815\3\2\2\2P\u0829\3")
        buf.write("\2\2\2R\u085e\3\2\2\2T\u0877\3\2\2\2V\u089e\3\2\2\2X\u08a9")
        buf.write("\3\2\2\2Z\u0935\3\2\2\2\\\u0964\3\2\2\2^\u0966\3\2\2\2")
        buf.write("`\u096d\3\2\2\2b\u09af\3\2\2\2d\u09fb\3\2\2\2f\u0a4f\3")
        buf.write("\2\2\2h\u0a75\3\2\2\2j\u0a83\3\2\2\2l\u0add\3\2\2\2np")
        buf.write("\5:\36\2on\3\2\2\2ps\3\2\2\2qo\3\2\2\2qr\3\2\2\2rt\3\2")
        buf.write("\2\2sq\3\2\2\2tu\7\2\2\3u\3\3\2\2\2vx\7G\2\2wv\3\2\2\2")
        buf.write("wx\3\2\2\2xy\3\2\2\2y\177\7i\2\2z|\7J\2\2{}\5f\64\2|{")
        buf.write("\3\2\2\2|}\3\2\2\2}~\3\2\2\2~\u0080\7K\2\2\177z\3\2\2")
        buf.write("\2\177\u0080\3\2\2\2\u0080\u00b2\3\2\2\2\u0081\u00a0\7")
        buf.write("$\2\2\u0082\u0087\5l\67\2\u0083\u0084\7q\2\2\u0084\u0087")
        buf.write("\7i\2\2\u0085\u0087\7s\2\2\u0086\u0082\3\2\2\2\u0086\u0083")
        buf.write("\3\2\2\2\u0086\u0085\3\2\2\2\u0087\u008d\3\2\2\2\u0088")
        buf.write("\u008a\7J\2\2\u0089\u008b\5f\64\2\u008a\u0089\3\2\2\2")
        buf.write("\u008a\u008b\3\2\2\2\u008b\u008c\3\2\2\2\u008c\u008e\7")
        buf.write("K\2\2\u008d\u0088\3\2\2\2\u008d\u008e\3\2\2\2\u008e\u00a1")
        buf.write("\3\2\2\2\u008f\u0091\5> \2\u0090\u008f\3\2\2\2\u0091\u0092")
        buf.write("\3\2\2\2\u0092\u0090\3\2\2\2\u0092\u0093\3\2\2\2\u0093")
        buf.write("\u0097\3\2\2\2\u0094\u0096\5D#\2\u0095\u0094\3\2\2\2\u0096")
        buf.write("\u0099\3\2\2\2\u0097\u0095\3\2\2\2\u0097\u0098\3\2\2\2")
        buf.write("\u0098\u009d\3\2\2\2\u0099\u0097\3\2\2\2\u009a\u009c\5")
        buf.write("N(\2\u009b\u009a\3\2\2\2\u009c\u009f\3\2\2\2\u009d\u009b")
        buf.write("\3\2\2\2\u009d\u009e\3\2\2\2\u009e\u00a1\3\2\2\2\u009f")
        buf.write("\u009d\3\2\2\2\u00a0\u0086\3\2\2\2\u00a0\u0090\3\2\2\2")
        buf.write("\u00a1\u00b2\3\2\2\2\u00a2\u00a3\7G\2\2\u00a3\u00a4\7")
        buf.write("\20\2\2\u00a4\u00ae\79\2\2\u00a5\u00aa\5(\25\2\u00a6\u00a7")
        buf.write("\7_\2\2\u00a7\u00a9\5(\25\2\u00a8\u00a6\3\2\2\2\u00a9")
        buf.write("\u00ac\3\2\2\2\u00aa\u00a8\3\2\2\2\u00aa\u00ab\3\2\2\2")
        buf.write("\u00ab\u00af\3\2\2\2\u00ac\u00aa\3\2\2\2\u00ad\u00af\7")
        buf.write("\b\2\2\u00ae\u00a5\3\2\2\2\u00ae\u00ad\3\2\2\2\u00af\u00b0")
        buf.write("\3\2\2\2\u00b0\u00b2\7:\2\2\u00b1w\3\2\2\2\u00b1\u0081")
        buf.write("\3\2\2\2\u00b1\u00a2\3\2\2\2\u00b2\5\3\2\2\2\u00b3\u00b9")
        buf.write("\7i\2\2\u00b4\u00b6\7J\2\2\u00b5\u00b7\5f\64\2\u00b6\u00b5")
        buf.write("\3\2\2\2\u00b6\u00b7\3\2\2\2\u00b7\u00b8\3\2\2\2\u00b8")
        buf.write("\u00ba\7K\2\2\u00b9\u00b4\3\2\2\2\u00b9\u00ba\3\2\2\2")
        buf.write("\u00ba\u00ca\3\2\2\2\u00bb\u00bc\7\20\2\2\u00bc\u00c6")
        buf.write("\79\2\2\u00bd\u00c2\5(\25\2\u00be\u00bf\7_\2\2\u00bf\u00c1")
        buf.write("\5(\25\2\u00c0\u00be\3\2\2\2\u00c1\u00c4\3\2\2\2\u00c2")
        buf.write("\u00c0\3\2\2\2\u00c2\u00c3\3\2\2\2\u00c3\u00c7\3\2\2\2")
        buf.write("\u00c4\u00c2\3\2\2\2\u00c5\u00c7\7\b\2\2\u00c6\u00bd\3")
        buf.write("\2\2\2\u00c6\u00c5\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00ca")
        buf.write("\7:\2\2\u00c9\u00b3\3\2\2\2\u00c9\u00bb\3\2\2\2\u00ca")
        buf.write("\u00cb\3\2\2\2\u00cb\u00db\7d\2\2\u00cc\u00d7\7i\2\2\u00cd")
        buf.write("\u00cf\7.\2\2\u00ce\u00cd\3\2\2\2\u00ce\u00cf\3\2\2\2")
        buf.write("\u00cf\u00d0\3\2\2\2\u00d0\u00d1\7i\2\2\u00d1\u00d3\7")
        buf.write("J\2\2\u00d2\u00d4\5f\64\2\u00d3\u00d2\3\2\2\2\u00d3\u00d4")
        buf.write("\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5\u00d7\7K\2\2\u00d6")
        buf.write("\u00cc\3\2\2\2\u00d6\u00ce\3\2\2\2\u00d7\u00d8\3\2\2\2")
        buf.write("\u00d8\u00da\7d\2\2\u00d9\u00d6\3\2\2\2\u00da\u00dd\3")
        buf.write("\2\2\2\u00db\u00d9\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc\7")
        buf.write("\3\2\2\2\u00dd\u00db\3\2\2\2\u00de\u00f7\79\2\2\u00df")
        buf.write("\u00e4\5T+\2\u00e0\u00e1\7_\2\2\u00e1\u00e3\5T+\2\u00e2")
        buf.write("\u00e0\3\2\2\2\u00e3\u00e6\3\2\2\2\u00e4\u00e2\3\2\2\2")
        buf.write("\u00e4\u00e5\3\2\2\2\u00e5\u00e8\3\2\2\2\u00e6\u00e4\3")
        buf.write("\2\2\2\u00e7\u00df\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00ea")
        buf.write("\3\2\2\2\u00e9\u00eb\7h\2\2\u00ea\u00e9\3\2\2\2\u00ea")
        buf.write("\u00eb\3\2\2\2\u00eb\u00f8\3\2\2\2\u00ec\u00f1\5T+\2\u00ed")
        buf.write("\u00ee\7_\2\2\u00ee\u00f0\5T+\2\u00ef\u00ed\3\2\2\2\u00f0")
        buf.write("\u00f3\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f1\u00f2\3\2\2\2")
        buf.write("\u00f2\u00f4\3\2\2\2\u00f3\u00f1\3\2\2\2\u00f4\u00f5\7")
        buf.write("_\2\2\u00f5\u00f6\7h\2\2\u00f6\u00f8\3\2\2\2\u00f7\u00e7")
        buf.write("\3\2\2\2\u00f7\u00ec\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9")
        buf.write("\u00fb\7:\2\2\u00fa\u00fc\7\37\2\2\u00fb\u00fa\3\2\2\2")
        buf.write("\u00fb\u00fc\3\2\2\2\u00fc\u0131\3\2\2\2\u00fd\u00fe\7")
        buf.write("\60\2\2\u00fe\u0127\79\2\2\u00ff\u0101\5> \2\u0100\u00ff")
        buf.write("\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u0100\3\2\2\2\u0102")
        buf.write("\u0103\3\2\2\2\u0103\u0107\3\2\2\2\u0104\u0106\5D#\2\u0105")
        buf.write("\u0104\3\2\2\2\u0106\u0109\3\2\2\2\u0107\u0105\3\2\2\2")
        buf.write("\u0107\u0108\3\2\2\2\u0108\u010b\3\2\2\2\u0109\u0107\3")
        buf.write("\2\2\2\u010a\u010c\5P)\2\u010b\u010a\3\2\2\2\u010b\u010c")
        buf.write("\3\2\2\2\u010c\u010e\3\2\2\2\u010d\u010f\7h\2\2\u010e")
        buf.write("\u010d\3\2\2\2\u010e\u010f\3\2\2\2\u010f\u0124\3\2\2\2")
        buf.write("\u0110\u0112\7_\2\2\u0111\u0113\5> \2\u0112\u0111\3\2")
        buf.write("\2\2\u0113\u0114\3\2\2\2\u0114\u0112\3\2\2\2\u0114\u0115")
        buf.write("\3\2\2\2\u0115\u0119\3\2\2\2\u0116\u0118\5D#\2\u0117\u0116")
        buf.write("\3\2\2\2\u0118\u011b\3\2\2\2\u0119\u0117\3\2\2\2\u0119")
        buf.write("\u011a\3\2\2\2\u011a\u011d\3\2\2\2\u011b\u0119\3\2\2\2")
        buf.write("\u011c\u011e\5P)\2\u011d\u011c\3\2\2\2\u011d\u011e\3\2")
        buf.write("\2\2\u011e\u0120\3\2\2\2\u011f\u0121\7h\2\2\u0120\u011f")
        buf.write("\3\2\2\2\u0120\u0121\3\2\2\2\u0121\u0123\3\2\2\2\u0122")
        buf.write("\u0110\3\2\2\2\u0123\u0126\3\2\2\2\u0124\u0122\3\2\2\2")
        buf.write("\u0124\u0125\3\2\2\2\u0125\u0128\3\2\2\2\u0126\u0124\3")
        buf.write("\2\2\2\u0127\u0100\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u0129")
        buf.write("\3\2\2\2\u0129\u0132\7:\2\2\u012a\u012f\7\"\2\2\u012b")
        buf.write("\u012c\79\2\2\u012c\u012d\5,\27\2\u012d\u012e\7:\2\2\u012e")
        buf.write("\u0130\3\2\2\2\u012f\u012b\3\2\2\2\u012f\u0130\3\2\2\2")
        buf.write("\u0130\u0132\3\2\2\2\u0131\u00fd\3\2\2\2\u0131\u012a\3")
        buf.write("\2\2\2\u0131\u0132\3\2\2\2\u0132\u0136\3\2\2\2\u0133\u0135")
        buf.write("\5D#\2\u0134\u0133\3\2\2\2\u0135\u0138\3\2\2\2\u0136\u0134")
        buf.write("\3\2\2\2\u0136\u0137\3\2\2\2\u0137\u0148\3\2\2\2\u0138")
        buf.write("\u0136\3\2\2\2\u0139\u013b\7a\2\2\u013a\u013c\5@!\2\u013b")
        buf.write("\u013a\3\2\2\2\u013c\u013d\3\2\2\2\u013d\u013b\3\2\2\2")
        buf.write("\u013d\u013e\3\2\2\2\u013e\u0142\3\2\2\2\u013f\u0141\5")
        buf.write("D#\2\u0140\u013f\3\2\2\2\u0141\u0144\3\2\2\2\u0142\u0140")
        buf.write("\3\2\2\2\u0142\u0143\3\2\2\2\u0143\u0146\3\2\2\2\u0144")
        buf.write("\u0142\3\2\2\2\u0145\u0147\5P)\2\u0146\u0145\3\2\2\2\u0146")
        buf.write("\u0147\3\2\2\2\u0147\u0149\3\2\2\2\u0148\u0139\3\2\2\2")
        buf.write("\u0148\u0149\3\2\2\2\u0149\t\3\2\2\2\u014a\u015b\7;\2")
        buf.write("\2\u014b\u0150\5(\25\2\u014c\u014d\7_\2\2\u014d\u014f")
        buf.write("\5(\25\2\u014e\u014c\3\2\2\2\u014f\u0152\3\2\2\2\u0150")
        buf.write("\u014e\3\2\2\2\u0150\u0151\3\2\2\2\u0151\u015c\3\2\2\2")
        buf.write("\u0152\u0150\3\2\2\2\u0153\u0158\7=\2\2\u0154\u0156\5")
        buf.write("X-\2\u0155\u0157\7_\2\2\u0156\u0155\3\2\2\2\u0156\u0157")
        buf.write("\3\2\2\2\u0157\u0159\3\2\2\2\u0158\u0154\3\2\2\2\u0158")
        buf.write("\u0159\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015c\7>\2\2")
        buf.write("\u015b\u014b\3\2\2\2\u015b\u0153\3\2\2\2\u015c\u015d\3")
        buf.write("\2\2\2\u015d\u0172\7<\2\2\u015e\u0160\79\2\2\u015f\u0161")
        buf.write("\5X-\2\u0160\u015f\3\2\2\2\u0160\u0161\3\2\2\2\u0161\u0162")
        buf.write("\3\2\2\2\u0162\u0172\7:\2\2\u0163\u016f\t\2\2\2\u0164")
        buf.write("\u0166\7.\2\2\u0165\u0164\3\2\2\2\u0165\u0166\3\2\2\2")
        buf.write("\u0166\u016b\3\2\2\2\u0167\u0169\5\6\4\2\u0168\u016a\7")
        buf.write(".\2\2\u0169\u0168\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u016c")
        buf.write("\3\2\2\2\u016b\u0167\3\2\2\2\u016b\u016c\3\2\2\2\u016c")
        buf.write("\u016d\3\2\2\2\u016d\u0170\5\4\3\2\u016e\u0170\5\16\b")
        buf.write("\2\u016f\u0165\3\2\2\2\u016f\u016e\3\2\2\2\u0170\u0172")
        buf.write("\3\2\2\2\u0171\u014a\3\2\2\2\u0171\u015e\3\2\2\2\u0171")
        buf.write("\u0163\3\2\2\2\u0172\13\3\2\2\2\u0173\u0231\7j\2\2\u0174")
        buf.write("\u0231\7p\2\2\u0175\u0231\7q\2\2\u0176\u0231\7\30\2\2")
        buf.write("\u0177\u0231\7#\2\2\u0178\u0231\7r\2\2\u0179\u0231\7s")
        buf.write("\2\2\u017a\u0231\7/\2\2\u017b\u017d\5\6\4\2\u017c\u017e")
        buf.write("\7.\2\2\u017d\u017c\3\2\2\2\u017d\u017e\3\2\2\2\u017e")
        buf.write("\u0180\3\2\2\2\u017f\u017b\3\2\2\2\u017f\u0180\3\2\2\2")
        buf.write("\u0180\u0181\3\2\2\2\u0181\u0231\5\4\3\2\u0182\u01b7\7")
        buf.write(";\2\2\u0183\u0194\t\3\2\2\u0184\u018d\7_\2\2\u0185\u0187")
        buf.write("\7E\2\2\u0186\u0185\3\2\2\2\u0186\u0187\3\2\2\2\u0187")
        buf.write("\u0188\3\2\2\2\u0188\u018a\7i\2\2\u0189\u018b\5V,\2\u018a")
        buf.write("\u0189\3\2\2\2\u018a\u018b\3\2\2\2\u018b\u018e\3\2\2\2")
        buf.write("\u018c\u018e\7/\2\2\u018d\u0186\3\2\2\2\u018d\u018c\3")
        buf.write("\2\2\2\u018e\u0190\3\2\2\2\u018f\u0191\7h\2\2\u0190\u018f")
        buf.write("\3\2\2\2\u0190\u0191\3\2\2\2\u0191\u0193\3\2\2\2\u0192")
        buf.write("\u0184\3\2\2\2\u0193\u0196\3\2\2\2\u0194\u0192\3\2\2\2")
        buf.write("\u0194\u0195\3\2\2\2\u0195\u01b8\3\2\2\2\u0196\u0194\3")
        buf.write("\2\2\2\u0197\u0199\7E\2\2\u0198\u0197\3\2\2\2\u0198\u0199")
        buf.write("\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u019c\7i\2\2\u019b")
        buf.write("\u019d\5V,\2\u019c\u019b\3\2\2\2\u019c\u019d\3\2\2\2\u019d")
        buf.write("\u01a0\3\2\2\2\u019e\u01a0\7/\2\2\u019f\u0198\3\2\2\2")
        buf.write("\u019f\u019e\3\2\2\2\u01a0\u01a2\3\2\2\2\u01a1\u01a3\7")
        buf.write("h\2\2\u01a2\u01a1\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01b4")
        buf.write("\3\2\2\2\u01a4\u01ad\7_\2\2\u01a5\u01a7\7E\2\2\u01a6\u01a5")
        buf.write("\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8")
        buf.write("\u01aa\7i\2\2\u01a9\u01ab\5V,\2\u01aa\u01a9\3\2\2\2\u01aa")
        buf.write("\u01ab\3\2\2\2\u01ab\u01ae\3\2\2\2\u01ac\u01ae\7/\2\2")
        buf.write("\u01ad\u01a6\3\2\2\2\u01ad\u01ac\3\2\2\2\u01ae\u01b0\3")
        buf.write("\2\2\2\u01af\u01b1\7h\2\2\u01b0\u01af\3\2\2\2\u01b0\u01b1")
        buf.write("\3\2\2\2\u01b1\u01b3\3\2\2\2\u01b2\u01a4\3\2\2\2\u01b3")
        buf.write("\u01b6\3\2\2\2\u01b4\u01b2\3\2\2\2\u01b4\u01b5\3\2\2\2")
        buf.write("\u01b5\u01b8\3\2\2\2\u01b6\u01b4\3\2\2\2\u01b7\u0183\3")
        buf.write("\2\2\2\u01b7\u019f\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8\u01b9")
        buf.write("\3\2\2\2\u01b9\u01bb\7<\2\2\u01ba\u01bc\5\b\5\2\u01bb")
        buf.write("\u01ba\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc\u01bd\3\2\2\2")
        buf.write("\u01bd\u01c1\7=\2\2\u01be\u01c0\5.\30\2\u01bf\u01be\3")
        buf.write("\2\2\2\u01c0\u01c3\3\2\2\2\u01c1\u01bf\3\2\2\2\u01c1\u01c2")
        buf.write("\3\2\2\2\u01c2\u01c4\3\2\2\2\u01c3\u01c1\3\2\2\2\u01c4")
        buf.write("\u0231\7>\2\2\u01c5\u01d3\5B\"\2\u01c6\u01c8\79\2\2\u01c7")
        buf.write("\u01c9\5X-\2\u01c8\u01c7\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9")
        buf.write("\u01ca\3\2\2\2\u01ca\u01d4\7:\2\2\u01cb\u01d0\7=\2\2\u01cc")
        buf.write("\u01ce\5X-\2\u01cd\u01cf\7_\2\2\u01ce\u01cd\3\2\2\2\u01ce")
        buf.write("\u01cf\3\2\2\2\u01cf\u01d1\3\2\2\2\u01d0\u01cc\3\2\2\2")
        buf.write("\u01d0\u01d1\3\2\2\2\u01d1\u01d2\3\2\2\2\u01d2\u01d4\7")
        buf.write(">\2\2\u01d3\u01c6\3\2\2\2\u01d3\u01cb\3\2\2\2\u01d4\u0231")
        buf.write("\3\2\2\2\u01d5\u01d6\7\64\2\2\u01d6\u01e1\5\6\4\2\u01d7")
        buf.write("\u01e2\7i\2\2\u01d8\u01da\7.\2\2\u01d9\u01d8\3\2\2\2\u01d9")
        buf.write("\u01da\3\2\2\2\u01da\u01db\3\2\2\2\u01db\u01dc\7i\2\2")
        buf.write("\u01dc\u01de\7J\2\2\u01dd\u01df\5f\64\2\u01de\u01dd\3")
        buf.write("\2\2\2\u01de\u01df\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\u01e2")
        buf.write("\7K\2\2\u01e1\u01d7\3\2\2\2\u01e1\u01d9\3\2\2\2\u01e2")
        buf.write("\u01f0\3\2\2\2\u01e3\u01e5\79\2\2\u01e4\u01e6\5X-\2\u01e5")
        buf.write("\u01e4\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01e7\3\2\2\2")
        buf.write("\u01e7\u01f1\7:\2\2\u01e8\u01ed\7=\2\2\u01e9\u01eb\5X")
        buf.write("-\2\u01ea\u01ec\7_\2\2\u01eb\u01ea\3\2\2\2\u01eb\u01ec")
        buf.write("\3\2\2\2\u01ec\u01ee\3\2\2\2\u01ed\u01e9\3\2\2\2\u01ed")
        buf.write("\u01ee\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f1\7>\2\2")
        buf.write("\u01f0\u01e3\3\2\2\2\u01f0\u01e8\3\2\2\2\u01f1\u0231\3")
        buf.write("\2\2\2\u01f2\u01f3\7\16\2\2\u01f3\u01f5\7J\2\2\u01f4\u01f6")
        buf.write("\5> \2\u01f5\u01f4\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u01f5")
        buf.write("\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8\u01fc\3\2\2\2\u01f9")
        buf.write("\u01fb\5D#\2\u01fa\u01f9\3\2\2\2\u01fb\u01fe\3\2\2\2\u01fc")
        buf.write("\u01fa\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd\u0200\3\2\2\2")
        buf.write("\u01fe\u01fc\3\2\2\2\u01ff\u0201\5P)\2\u0200\u01ff\3\2")
        buf.write("\2\2\u0200\u0201\3\2\2\2\u0201\u0202\3\2\2\2\u0202\u0203")
        buf.write("\7K\2\2\u0203\u0205\3\2\2\2\u0204\u01f2\3\2\2\2\u0204")
        buf.write("\u0205\3\2\2\2\u0205\u0206\3\2\2\2\u0206\u0207\79\2\2")
        buf.write("\u0207\u020c\5(\25\2\u0208\u0209\7_\2\2\u0209\u020b\5")
        buf.write("(\25\2\u020a\u0208\3\2\2\2\u020b\u020e\3\2\2\2\u020c\u020a")
        buf.write("\3\2\2\2\u020c\u020d\3\2\2\2\u020d\u020f\3\2\2\2\u020e")
        buf.write("\u020c\3\2\2\2\u020f\u0210\7:\2\2\u0210\u0231\3\2\2\2")
        buf.write("\u0211\u022e\7\63\2\2\u0212\u0213\79\2\2\u0213\u0218\5")
        buf.write("(\25\2\u0214\u0215\7_\2\2\u0215\u0217\5(\25\2\u0216\u0214")
        buf.write("\3\2\2\2\u0217\u021a\3\2\2\2\u0218\u0216\3\2\2\2\u0218")
        buf.write("\u0219\3\2\2\2\u0219\u021b\3\2\2\2\u021a\u0218\3\2\2\2")
        buf.write("\u021b\u021c\7:\2\2\u021c\u022f\3\2\2\2\u021d\u021f\7")
        buf.write("9\2\2\u021e\u0220\5> \2\u021f\u021e\3\2\2\2\u0220\u0221")
        buf.write("\3\2\2\2\u0221\u021f\3\2\2\2\u0221\u0222\3\2\2\2\u0222")
        buf.write("\u0226\3\2\2\2\u0223\u0225\5D#\2\u0224\u0223\3\2\2\2\u0225")
        buf.write("\u0228\3\2\2\2\u0226\u0224\3\2\2\2\u0226\u0227\3\2\2\2")
        buf.write("\u0227\u022a\3\2\2\2\u0228\u0226\3\2\2\2\u0229\u022b\5")
        buf.write("P)\2\u022a\u0229\3\2\2\2\u022a\u022b\3\2\2\2\u022b\u022c")
        buf.write("\3\2\2\2\u022c\u022d\7:\2\2\u022d\u022f\3\2\2\2\u022e")
        buf.write("\u0212\3\2\2\2\u022e\u021d\3\2\2\2\u022f\u0231\3\2\2\2")
        buf.write("\u0230\u0173\3\2\2\2\u0230\u0174\3\2\2\2\u0230\u0175\3")
        buf.write("\2\2\2\u0230\u0176\3\2\2\2\u0230\u0177\3\2\2\2\u0230\u0178")
        buf.write("\3\2\2\2\u0230\u0179\3\2\2\2\u0230\u017a\3\2\2\2\u0230")
        buf.write("\u017f\3\2\2\2\u0230\u0182\3\2\2\2\u0230\u01c5\3\2\2\2")
        buf.write("\u0230\u01d5\3\2\2\2\u0230\u0204\3\2\2\2\u0230\u0211\3")
        buf.write("\2\2\2\u0231\u0235\3\2\2\2\u0232\u0234\5\n\6\2\u0233\u0232")
        buf.write("\3\2\2\2\u0234\u0237\3\2\2\2\u0235\u0233\3\2\2\2\u0235")
        buf.write("\u0236\3\2\2\2\u0236\r\3\2\2\2\u0237\u0235\3\2\2\2\u0238")
        buf.write("\u023a\5\6\4\2\u0239\u0238\3\2\2\2\u0239\u023a\3\2\2\2")
        buf.write("\u023a\u0244\3\2\2\2\u023b\u0241\7i\2\2\u023c\u023e\7")
        buf.write("J\2\2\u023d\u023f\5f\64\2\u023e\u023d\3\2\2\2\u023e\u023f")
        buf.write("\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u0242\7K\2\2\u0241")
        buf.write("\u023c\3\2\2\2\u0241\u0242\3\2\2\2\u0242\u0243\3\2\2\2")
        buf.write("\u0243\u0245\7d\2\2\u0244\u023b\3\2\2\2\u0244\u0245\3")
        buf.write("\2\2\2\u0245\u0251\3\2\2\2\u0246\u0247\5\6\4\2\u0247\u0248")
        buf.write("\7.\2\2\u0248\u0249\7i\2\2\u0249\u024b\7J\2\2\u024a\u024c")
        buf.write("\5f\64\2\u024b\u024a\3\2\2\2\u024b\u024c\3\2\2\2\u024c")
        buf.write("\u024d\3\2\2\2\u024d\u024e\7K\2\2\u024e\u024f\7d\2\2\u024f")
        buf.write("\u0251\3\2\2\2\u0250\u0239\3\2\2\2\u0250\u0246\3\2\2\2")
        buf.write("\u0251\u0252\3\2\2\2\u0252\u0253\7G\2\2\u0253\u0259\7")
        buf.write("i\2\2\u0254\u0256\7J\2\2\u0255\u0257\5f\64\2\u0256\u0255")
        buf.write("\3\2\2\2\u0256\u0257\3\2\2\2\u0257\u0258\3\2\2\2\u0258")
        buf.write("\u025a\7K\2\2\u0259\u0254\3\2\2\2\u0259\u025a\3\2\2\2")
        buf.write("\u025a\u026b\3\2\2\2\u025b\u025c\7G\2\2\u025c\u025d\7")
        buf.write("\20\2\2\u025d\u0267\79\2\2\u025e\u0263\5(\25\2\u025f\u0260")
        buf.write("\7_\2\2\u0260\u0262\5(\25\2\u0261\u025f\3\2\2\2\u0262")
        buf.write("\u0265\3\2\2\2\u0263\u0261\3\2\2\2\u0263\u0264\3\2\2\2")
        buf.write("\u0264\u0268\3\2\2\2\u0265\u0263\3\2\2\2\u0266\u0268\7")
        buf.write("\b\2\2\u0267\u025e\3\2\2\2\u0267\u0266\3\2\2\2\u0268\u0269")
        buf.write("\3\2\2\2\u0269\u026b\7:\2\2\u026a\u0250\3\2\2\2\u026a")
        buf.write("\u025b\3\2\2\2\u026b\17\3\2\2\2\u026c\u02aa\5\f\7\2\u026d")
        buf.write("\u02aa\5\22\n\2\u026e\u026f\t\4\2\2\u026f\u02aa\5\34\17")
        buf.write("\2\u0270\u0287\7*\2\2\u0271\u0288\5\20\t\2\u0272\u0274")
        buf.write("\79\2\2\u0273\u0275\5> \2\u0274\u0273\3\2\2\2\u0275\u0276")
        buf.write("\3\2\2\2\u0276\u0274\3\2\2\2\u0276\u0277\3\2\2\2\u0277")
        buf.write("\u027b\3\2\2\2\u0278\u027a\5D#\2\u0279\u0278\3\2\2\2\u027a")
        buf.write("\u027d\3\2\2\2\u027b\u0279\3\2\2\2\u027b\u027c\3\2\2\2")
        buf.write("\u027c\u027f\3\2\2\2\u027d\u027b\3\2\2\2\u027e\u0280\5")
        buf.write("P)\2\u027f\u027e\3\2\2\2\u027f\u0280\3\2\2\2\u0280\u0281")
        buf.write("\3\2\2\2\u0281\u0282\7:\2\2\u0282\u0288\3\2\2\2\u0283")
        buf.write("\u0284\7h\2\2\u0284\u0285\79\2\2\u0285\u0286\7i\2\2\u0286")
        buf.write("\u0288\7:\2\2\u0287\u0271\3\2\2\2\u0287\u0272\3\2\2\2")
        buf.write("\u0287\u0283\3\2\2\2\u0288\u02aa\3\2\2\2\u0289\u028a\7")
        buf.write("\6\2\2\u028a\u028c\79\2\2\u028b\u028d\5> \2\u028c\u028b")
        buf.write("\3\2\2\2\u028d\u028e\3\2\2\2\u028e\u028c\3\2\2\2\u028e")
        buf.write("\u028f\3\2\2\2\u028f\u0293\3\2\2\2\u0290\u0292\5D#\2\u0291")
        buf.write("\u0290\3\2\2\2\u0292\u0295\3\2\2\2\u0293\u0291\3\2\2\2")
        buf.write("\u0293\u0294\3\2\2\2\u0294\u0297\3\2\2\2\u0295\u0293\3")
        buf.write("\2\2\2\u0296\u0298\5P)\2\u0297\u0296\3\2\2\2\u0297\u0298")
        buf.write("\3\2\2\2\u0298\u0299\3\2\2\2\u0299\u029a\7:\2\2\u029a")
        buf.write("\u02aa\3\2\2\2\u029b\u029c\7\"\2\2\u029c\u029d\79\2\2")
        buf.write("\u029d\u02a2\5(\25\2\u029e\u029f\7_\2\2\u029f\u02a1\5")
        buf.write("(\25\2\u02a0\u029e\3\2\2\2\u02a1\u02a4\3\2\2\2\u02a2\u02a0")
        buf.write("\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3\u02a5\3\2\2\2\u02a4")
        buf.write("\u02a2\3\2\2\2\u02a5\u02a6\7:\2\2\u02a6\u02aa\3\2\2\2")
        buf.write("\u02a7\u02aa\5\26\f\2\u02a8\u02aa\5\32\16\2\u02a9\u026c")
        buf.write("\3\2\2\2\u02a9\u026d\3\2\2\2\u02a9\u026e\3\2\2\2\u02a9")
        buf.write("\u0270\3\2\2\2\u02a9\u0289\3\2\2\2\u02a9\u029b\3\2\2\2")
        buf.write("\u02a9\u02a7\3\2\2\2\u02a9\u02a8\3\2\2\2\u02aa\21\3\2")
        buf.write("\2\2\u02ab\u02ac\t\5\2\2\u02ac\u02af\5\34\17\2\u02ad\u02af")
        buf.write("\5\24\13\2\u02ae\u02ab\3\2\2\2\u02ae\u02ad\3\2\2\2\u02af")
        buf.write("\23\3\2\2\2\u02b0\u02b1\b\13\1\2\u02b1\u02b2\5\f\7\2\u02b2")
        buf.write("\u02b3\t\5\2\2\u02b3\u02be\3\2\2\2\u02b4\u02b8\f\3\2\2")
        buf.write("\u02b5\u02b7\5\n\6\2\u02b6\u02b5\3\2\2\2\u02b7\u02ba\3")
        buf.write("\2\2\2\u02b8\u02b6\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02bb")
        buf.write("\3\2\2\2\u02ba\u02b8\3\2\2\2\u02bb\u02bd\t\5\2\2\u02bc")
        buf.write("\u02b4\3\2\2\2\u02bd\u02c0\3\2\2\2\u02be\u02bc\3\2\2\2")
        buf.write("\u02be\u02bf\3\2\2\2\u02bf\25\3\2\2\2\u02c0\u02be\3\2")
        buf.write("\2\2\u02c1\u02c3\7d\2\2\u02c2\u02c1\3\2\2\2\u02c2\u02c3")
        buf.write("\3\2\2\2\u02c3\u02c4\3\2\2\2\u02c4\u02c9\7!\2\2\u02c5")
        buf.write("\u02c6\79\2\2\u02c6\u02c7\5X-\2\u02c7\u02c8\7:\2\2\u02c8")
        buf.write("\u02ca\3\2\2\2\u02c9\u02c5\3\2\2\2\u02c9\u02ca\3\2\2\2")
        buf.write("\u02ca\u02ea\3\2\2\2\u02cb\u02cd\5> \2\u02cc\u02cb\3\2")
        buf.write("\2\2\u02cd\u02ce\3\2\2\2\u02ce\u02cc\3\2\2\2\u02ce\u02cf")
        buf.write("\3\2\2\2\u02cf\u02d3\3\2\2\2\u02d0\u02d2\5D#\2\u02d1\u02d0")
        buf.write("\3\2\2\2\u02d2\u02d5\3\2\2\2\u02d3\u02d1\3\2\2\2\u02d3")
        buf.write("\u02d4\3\2\2\2\u02d4\u02d7\3\2\2\2\u02d5\u02d3\3\2\2\2")
        buf.write("\u02d6\u02d8\5\30\r\2\u02d7\u02d6\3\2\2\2\u02d7\u02d8")
        buf.write("\3\2\2\2\u02d8\u02eb\3\2\2\2\u02d9\u02db\79\2\2\u02da")
        buf.write("\u02dc\5> \2\u02db\u02da\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd")
        buf.write("\u02db\3\2\2\2\u02dd\u02de\3\2\2\2\u02de\u02e2\3\2\2\2")
        buf.write("\u02df\u02e1\5D#\2\u02e0\u02df\3\2\2\2\u02e1\u02e4\3\2")
        buf.write("\2\2\u02e2\u02e0\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3\u02e6")
        buf.write("\3\2\2\2\u02e4\u02e2\3\2\2\2\u02e5\u02e7\5P)\2\u02e6\u02e5")
        buf.write("\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8")
        buf.write("\u02e9\7:\2\2\u02e9\u02eb\3\2\2\2\u02ea\u02cc\3\2\2\2")
        buf.write("\u02ea\u02d9\3\2\2\2\u02eb\u02f9\3\2\2\2\u02ec\u02ee\7")
        buf.write("9\2\2\u02ed\u02ef\5X-\2\u02ee\u02ed\3\2\2\2\u02ee\u02ef")
        buf.write("\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0\u02fa\7:\2\2\u02f1")
        buf.write("\u02f6\7=\2\2\u02f2\u02f4\5X-\2\u02f3\u02f5\7_\2\2\u02f4")
        buf.write("\u02f3\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u02f7\3\2\2\2")
        buf.write("\u02f6\u02f2\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7\u02f8\3")
        buf.write("\2\2\2\u02f8\u02fa\7>\2\2\u02f9\u02ec\3\2\2\2\u02f9\u02f1")
        buf.write("\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa\27\3\2\2\2\u02fb\u02fd")
        buf.write("\5N(\2\u02fc\u02fe\5\30\r\2\u02fd\u02fc\3\2\2\2\u02fd")
        buf.write("\u02fe\3\2\2\2\u02fe\u031e\3\2\2\2\u02ff\u0300\7;\2\2")
        buf.write("\u0300\u0305\5(\25\2\u0301\u0302\7_\2\2\u0302\u0304\5")
        buf.write("(\25\2\u0303\u0301\3\2\2\2\u0304\u0307\3\2\2\2\u0305\u0303")
        buf.write("\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u0308\3\2\2\2\u0307")
        buf.write("\u0305\3\2\2\2\u0308\u030c\7<\2\2\u0309\u030b\5D#\2\u030a")
        buf.write("\u0309\3\2\2\2\u030b\u030e\3\2\2\2\u030c\u030a\3\2\2\2")
        buf.write("\u030c\u030d\3\2\2\2\u030d\u031a\3\2\2\2\u030e\u030c\3")
        buf.write("\2\2\2\u030f\u0310\7;\2\2\u0310\u0311\5,\27\2\u0311\u0315")
        buf.write("\7<\2\2\u0312\u0314\5D#\2\u0313\u0312\3\2\2\2\u0314\u0317")
        buf.write("\3\2\2\2\u0315\u0313\3\2\2\2\u0315\u0316\3\2\2\2\u0316")
        buf.write("\u0319\3\2\2\2\u0317\u0315\3\2\2\2\u0318\u030f\3\2\2\2")
        buf.write("\u0319\u031c\3\2\2\2\u031a\u0318\3\2\2\2\u031a\u031b\3")
        buf.write("\2\2\2\u031b\u031e\3\2\2\2\u031c\u031a\3\2\2\2\u031d\u02fb")
        buf.write("\3\2\2\2\u031d\u02ff\3\2\2\2\u031e\31\3\2\2\2\u031f\u0321")
        buf.write("\7d\2\2\u0320\u031f\3\2\2\2\u0320\u0321\3\2\2\2\u0321")
        buf.write("\u0322\3\2\2\2\u0322\u0325\7\22\2\2\u0323\u0324\7;\2\2")
        buf.write("\u0324\u0326\7<\2\2\u0325\u0323\3\2\2\2\u0325\u0326\3")
        buf.write("\2\2\2\u0326\u0327\3\2\2\2\u0327\u0328\5\34\17\2\u0328")
        buf.write("\33\3\2\2\2\u0329\u032b\79\2\2\u032a\u032c\5> \2\u032b")
        buf.write("\u032a\3\2\2\2\u032c\u032d\3\2\2\2\u032d\u032b\3\2\2\2")
        buf.write("\u032d\u032e\3\2\2\2\u032e\u0332\3\2\2\2\u032f\u0331\5")
        buf.write("D#\2\u0330\u032f\3\2\2\2\u0331\u0334\3\2\2\2\u0332\u0330")
        buf.write("\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u0336\3\2\2\2\u0334")
        buf.write("\u0332\3\2\2\2\u0335\u0337\5P)\2\u0336\u0335\3\2\2\2\u0336")
        buf.write("\u0337\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u0339\7:\2\2")
        buf.write("\u0339\u033b\3\2\2\2\u033a\u0329\3\2\2\2\u033b\u033e\3")
        buf.write("\2\2\2\u033c\u033a\3\2\2\2\u033c\u033d\3\2\2\2\u033d\u033f")
        buf.write("\3\2\2\2\u033e\u033c\3\2\2\2\u033f\u0340\5\20\t\2\u0340")
        buf.write("\35\3\2\2\2\u0341\u0351\5\34\17\2\u0342\u034d\7g\2\2\u0343")
        buf.write("\u034d\7`\2\2\u0344\u034d\7A\2\2\u0345\u034d\7B\2\2\u0346")
        buf.write("\u034d\7C\2\2\u0347\u034d\7?\2\2\u0348\u034d\7@\2\2\u0349")
        buf.write("\u034d\7T\2\2\u034a\u034b\7K\2\2\u034b\u034d\7K\2\2\u034c")
        buf.write("\u0342\3\2\2\2\u034c\u0343\3\2\2\2\u034c\u0344\3\2\2\2")
        buf.write("\u034c\u0345\3\2\2\2\u034c\u0346\3\2\2\2\u034c\u0347\3")
        buf.write("\2\2\2\u034c\u0348\3\2\2\2\u034c\u0349\3\2\2\2\u034c\u034a")
        buf.write("\3\2\2\2\u034d\u034e\3\2\2\2\u034e\u0350\5\34\17\2\u034f")
        buf.write("\u034c\3\2\2\2\u0350\u0353\3\2\2\2\u0351\u034f\3\2\2\2")
        buf.write("\u0351\u0352\3\2\2\2\u0352\37\3\2\2\2\u0353\u0351\3\2")
        buf.write("\2\2\u0354\u0355\b\21\1\2\u0355\u0356\5\36\20\2\u0356")
        buf.write("\u035c\3\2\2\2\u0357\u0358\f\3\2\2\u0358\u0359\t\6\2\2")
        buf.write("\u0359\u035b\5\36\20\2\u035a\u0357\3\2\2\2\u035b\u035e")
        buf.write("\3\2\2\2\u035c\u035a\3\2\2\2\u035c\u035d\3\2\2\2\u035d")
        buf.write("!\3\2\2\2\u035e\u035c\3\2\2\2\u035f\u0360\b\22\1\2\u0360")
        buf.write("\u0361\5 \21\2\u0361\u0367\3\2\2\2\u0362\u0363\f\3\2\2")
        buf.write("\u0363\u0364\t\7\2\2\u0364\u0366\5 \21\2\u0365\u0362\3")
        buf.write("\2\2\2\u0366\u0369\3\2\2\2\u0367\u0365\3\2\2\2\u0367\u0368")
        buf.write("\3\2\2\2\u0368#\3\2\2\2\u0369\u0367\3\2\2\2\u036a\u036f")
        buf.write("\5\"\22\2\u036b\u036c\t\b\2\2\u036c\u036e\5\"\22\2\u036d")
        buf.write("\u036b\3\2\2\2\u036e\u0371\3\2\2\2\u036f\u036d\3\2\2\2")
        buf.write("\u036f\u0370\3\2\2\2\u0370\u0372\3\2\2\2\u0371\u036f\3")
        buf.write("\2\2\2\u0372\u0373\7b\2\2\u0373\u0378\5(\25\2\u0374\u0375")
        buf.write("\7_\2\2\u0375\u0377\5(\25\2\u0376\u0374\3\2\2\2\u0377")
        buf.write("\u037a\3\2\2\2\u0378\u0376\3\2\2\2\u0378\u0379\3\2\2\2")
        buf.write("\u0379\u037b\3\2\2\2\u037a\u0378\3\2\2\2\u037b\u037c\7")
        buf.write("c\2\2\u037c\u037d\5(\25\2\u037d%\3\2\2\2\u037e\u0383\5")
        buf.write("\"\22\2\u037f\u0380\t\b\2\2\u0380\u0382\5\"\22\2\u0381")
        buf.write("\u037f\3\2\2\2\u0382\u0385\3\2\2\2\u0383\u0381\3\2\2\2")
        buf.write("\u0383\u0384\3\2\2\2\u0384\u0386\3\2\2\2\u0385\u0383\3")
        buf.write("\2\2\2\u0386\u0387\7^\2\2\u0387\u0388\5(\25\2\u0388\'")
        buf.write("\3\2\2\2\u0389\u038e\5\"\22\2\u038a\u038b\t\b\2\2\u038b")
        buf.write("\u038d\5\"\22\2\u038c\u038a\3\2\2\2\u038d\u0390\3\2\2")
        buf.write("\2\u038e\u038c\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u039d")
        buf.write("\3\2\2\2\u0390\u038e\3\2\2\2\u0391\u039b\5*\26\2\u0392")
        buf.write("\u039c\5(\25\2\u0393\u0398\7=\2\2\u0394\u0396\5X-\2\u0395")
        buf.write("\u0397\7_\2\2\u0396\u0395\3\2\2\2\u0396\u0397\3\2\2\2")
        buf.write("\u0397\u0399\3\2\2\2\u0398\u0394\3\2\2\2\u0398\u0399\3")
        buf.write("\2\2\2\u0399\u039a\3\2\2\2\u039a\u039c\7>\2\2\u039b\u0392")
        buf.write("\3\2\2\2\u039b\u0393\3\2\2\2\u039c\u039e\3\2\2\2\u039d")
        buf.write("\u0391\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u03a6\3\2\2\2")
        buf.write("\u039f\u03a6\5$\23\2\u03a0\u03a6\5&\24\2\u03a1\u03a3\7")
        buf.write("\60\2\2\u03a2\u03a4\5(\25\2\u03a3\u03a2\3\2\2\2\u03a3")
        buf.write("\u03a4\3\2\2\2\u03a4\u03a6\3\2\2\2\u03a5\u0389\3\2\2\2")
        buf.write("\u03a5\u039f\3\2\2\2\u03a5\u03a0\3\2\2\2\u03a5\u03a1\3")
        buf.write("\2\2\2\u03a6)\3\2\2\2\u03a7\u03b5\7I\2\2\u03a8\u03b5\7")
        buf.write("N\2\2\u03a9\u03b5\7O\2\2\u03aa\u03b5\7P\2\2\u03ab\u03b5")
        buf.write("\7L\2\2\u03ac\u03b5\7M\2\2\u03ad\u03ae\7K\2\2\u03ae\u03af")
        buf.write("\7K\2\2\u03af\u03b5\7I\2\2\u03b0\u03b5\7U\2\2\u03b1\u03b5")
        buf.write("\7R\2\2\u03b2\u03b5\7Q\2\2\u03b3\u03b5\7S\2\2\u03b4\u03a7")
        buf.write("\3\2\2\2\u03b4\u03a8\3\2\2\2\u03b4\u03a9\3\2\2\2\u03b4")
        buf.write("\u03aa\3\2\2\2\u03b4\u03ab\3\2\2\2\u03b4\u03ac\3\2\2\2")
        buf.write("\u03b4\u03ad\3\2\2\2\u03b4\u03b0\3\2\2\2\u03b4\u03b1\3")
        buf.write("\2\2\2\u03b4\u03b2\3\2\2\2\u03b4\u03b3\3\2\2\2\u03b5+")
        buf.write("\3\2\2\2\u03b6\u03bb\5\"\22\2\u03b7\u03b8\t\b\2\2\u03b8")
        buf.write("\u03ba\5\"\22\2\u03b9\u03b7\3\2\2\2\u03ba\u03bd\3\2\2")
        buf.write("\2\u03bb\u03b9\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03c1")
        buf.write("\3\2\2\2\u03bd\u03bb\3\2\2\2\u03be\u03c1\5$\23\2\u03bf")
        buf.write("\u03c1\5&\24\2\u03c0\u03b6\3\2\2\2\u03c0\u03be\3\2\2\2")
        buf.write("\u03c0\u03bf\3\2\2\2\u03c1-\3\2\2\2\u03c2\u03c4\5D#\2")
        buf.write("\u03c3\u03c2\3\2\2\2\u03c4\u03c7\3\2\2\2\u03c5\u03c3\3")
        buf.write("\2\2\2\u03c5\u03c6\3\2\2\2\u03c6\u044f\3\2\2\2\u03c7\u03c5")
        buf.write("\3\2\2\2\u03c8\u03c9\7i\2\2\u03c9\u03d0\7c\2\2\u03ca\u03cb")
        buf.write("\t\t\2\2\u03cb\u03cc\79\2\2\u03cc\u03cd\5\64\33\2\u03cd")
        buf.write("\u03ce\7:\2\2\u03ce\u03d0\3\2\2\2\u03cf\u03c8\3\2\2\2")
        buf.write("\u03cf\u03ca\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u0450\5")
        buf.write(".\30\2\u03d2\u0450\5\60\31\2\u03d3\u03d8\5(\25\2\u03d4")
        buf.write("\u03d5\7_\2\2\u03d5\u03d7\5(\25\2\u03d6\u03d4\3\2\2\2")
        buf.write("\u03d7\u03da\3\2\2\2\u03d8\u03d6\3\2\2\2\u03d8\u03d9\3")
        buf.write("\2\2\2\u03d9\u03dc\3\2\2\2\u03da\u03d8\3\2\2\2\u03db\u03d3")
        buf.write("\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd")
        buf.write("\u0450\7e\2\2\u03de\u03e2\7=\2\2\u03df\u03e1\5.\30\2\u03e0")
        buf.write("\u03df\3\2\2\2\u03e1\u03e4\3\2\2\2\u03e2\u03e0\3\2\2\2")
        buf.write("\u03e2\u03e3\3\2\2\2\u03e3\u03e5\3\2\2\2\u03e4\u03e2\3")
        buf.write("\2\2\2\u03e5\u0450\7>\2\2\u03e6\u03e7\7\34\2\2\u03e7\u03e8")
        buf.write("\79\2\2\u03e8\u03e9\5\64\33\2\u03e9\u03ea\7:\2\2\u03ea")
        buf.write("\u03ec\5.\30\2\u03eb\u03ed\5\62\32\2\u03ec\u03eb\3\2\2")
        buf.write("\2\u03ec\u03ed\3\2\2\2\u03ed\u0450\3\2\2\2\u03ee\u03ef")
        buf.write("\7\23\2\2\u03ef\u03f0\5.\30\2\u03f0\u03f1\78\2\2\u03f1")
        buf.write("\u03f2\79\2\2\u03f2\u03f7\5(\25\2\u03f3\u03f4\7_\2\2\u03f4")
        buf.write("\u03f6\5(\25\2\u03f5\u03f3\3\2\2\2\u03f6\u03f9\3\2\2\2")
        buf.write("\u03f7\u03f5\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03fa\3")
        buf.write("\2\2\2\u03f9\u03f7\3\2\2\2\u03fa\u03fb\7:\2\2\u03fb\u03fc")
        buf.write("\7e\2\2\u03fc\u0450\3\2\2\2\u03fd\u03fe\7\32\2\2\u03fe")
        buf.write("\u0429\79\2\2\u03ff\u0401\5\66\34\2\u0400\u0402\5\64\33")
        buf.write("\2\u0401\u0400\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u0403")
        buf.write("\3\2\2\2\u0403\u040c\7e\2\2\u0404\u0409\5(\25\2\u0405")
        buf.write("\u0406\7_\2\2\u0406\u0408\5(\25\2\u0407\u0405\3\2\2\2")
        buf.write("\u0408\u040b\3\2\2\2\u0409\u0407\3\2\2\2\u0409\u040a\3")
        buf.write("\2\2\2\u040a\u040d\3\2\2\2\u040b\u0409\3\2\2\2\u040c\u0404")
        buf.write("\3\2\2\2\u040c\u040d\3\2\2\2\u040d\u042a\3\2\2\2\u040e")
        buf.write("\u0410\5D#\2\u040f\u040e\3\2\2\2\u0410\u0413\3\2\2\2\u0411")
        buf.write("\u040f\3\2\2\2\u0411\u0412\3\2\2\2\u0412\u0414\3\2\2\2")
        buf.write("\u0413\u0411\3\2\2\2\u0414\u0415\5<\37\2\u0415\u0416\5")
        buf.write("H%\2\u0416\u0427\7c\2\2\u0417\u041c\5(\25\2\u0418\u0419")
        buf.write("\7_\2\2\u0419\u041b\5(\25\2\u041a\u0418\3\2\2\2\u041b")
        buf.write("\u041e\3\2\2\2\u041c\u041a\3\2\2\2\u041c\u041d\3\2\2\2")
        buf.write("\u041d\u0428\3\2\2\2\u041e\u041c\3\2\2\2\u041f\u0424\7")
        buf.write("=\2\2\u0420\u0422\5X-\2\u0421\u0423\7_\2\2\u0422\u0421")
        buf.write("\3\2\2\2\u0422\u0423\3\2\2\2\u0423\u0425\3\2\2\2\u0424")
        buf.write("\u0420\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0426\3\2\2\2")
        buf.write("\u0426\u0428\7>\2\2\u0427\u0417\3\2\2\2\u0427\u041f\3")
        buf.write("\2\2\2\u0428\u042a\3\2\2\2\u0429\u03ff\3\2\2\2\u0429\u0411")
        buf.write("\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u042c\7:\2\2\u042c")
        buf.write("\u042d\5.\30\2\u042d\u0450\3\2\2\2\u042e\u042f\t\n\2\2")
        buf.write("\u042f\u0450\7e\2\2\u0430\u0443\7(\2\2\u0431\u0436\5(")
        buf.write("\25\2\u0432\u0433\7_\2\2\u0433\u0435\5(\25\2\u0434\u0432")
        buf.write("\3\2\2\2\u0435\u0438\3\2\2\2\u0436\u0434\3\2\2\2\u0436")
        buf.write("\u0437\3\2\2\2\u0437\u043a\3\2\2\2\u0438\u0436\3\2\2\2")
        buf.write("\u0439\u0431\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u0444\3")
        buf.write("\2\2\2\u043b\u0440\7=\2\2\u043c\u043e\5X-\2\u043d\u043f")
        buf.write("\7_\2\2\u043e\u043d\3\2\2\2\u043e\u043f\3\2\2\2\u043f")
        buf.write("\u0441\3\2\2\2\u0440\u043c\3\2\2\2\u0440\u0441\3\2\2\2")
        buf.write("\u0441\u0442\3\2\2\2\u0442\u0444\7>\2\2\u0443\u0439\3")
        buf.write("\2\2\2\u0443\u043b\3\2\2\2\u0444\u0445\3\2\2\2\u0445\u0450")
        buf.write("\7e\2\2\u0446\u0450\58\35\2\u0447\u0448\7\66\2\2\u0448")
        buf.write("\u044a\7 \2\2\u0449\u044b\5\6\4\2\u044a\u0449\3\2\2\2")
        buf.write("\u044a\u044b\3\2\2\2\u044b\u044c\3\2\2\2\u044c\u044d\7")
        buf.write("i\2\2\u044d\u0450\7e\2\2\u044e\u0450\5h\65\2\u044f\u03cf")
        buf.write("\3\2\2\2\u044f\u03d2\3\2\2\2\u044f\u03db\3\2\2\2\u044f")
        buf.write("\u03de\3\2\2\2\u044f\u03e6\3\2\2\2\u044f\u03ee\3\2\2\2")
        buf.write("\u044f\u03fd\3\2\2\2\u044f\u042e\3\2\2\2\u044f\u0430\3")
        buf.write("\2\2\2\u044f\u0446\3\2\2\2\u044f\u0447\3\2\2\2\u044f\u044e")
        buf.write("\3\2\2\2\u0450\u04d0\3\2\2\2\u0451\u0453\5D#\2\u0452\u0451")
        buf.write("\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0452\3\2\2\2\u0454")
        buf.write("\u0455\3\2\2\2\u0455\u0457\3\2\2\2\u0456\u0458\5<\37\2")
        buf.write("\u0457\u0456\3\2\2\2\u0457\u0458\3\2\2\2\u0458\u0459\3")
        buf.write("\2\2\2\u0459\u045b\5H%\2\u045a\u045c\5V,\2\u045b\u045a")
        buf.write("\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u0464\3\2\2\2\u045d")
        buf.write("\u045e\7_\2\2\u045e\u0460\5H%\2\u045f\u0461\5V,\2\u0460")
        buf.write("\u045f\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0463\3\2\2\2")
        buf.write("\u0462\u045d\3\2\2\2\u0463\u0466\3\2\2\2\u0464\u0462\3")
        buf.write("\2\2\2\u0464\u0465\3\2\2\2\u0465\u0467\3\2\2\2\u0466\u0464")
        buf.write("\3\2\2\2\u0467\u0468\7e\2\2\u0468\u04d0\3\2\2\2\u0469")
        buf.write("\u046b\5<\37\2\u046a\u0469\3\2\2\2\u046a\u046b\3\2\2\2")
        buf.write("\u046b\u047a\3\2\2\2\u046c\u046e\5H%\2\u046d\u046f\5V")
        buf.write(",\2\u046e\u046d\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u0477")
        buf.write("\3\2\2\2\u0470\u0471\7_\2\2\u0471\u0473\5H%\2\u0472\u0474")
        buf.write("\5V,\2\u0473\u0472\3\2\2\2\u0473\u0474\3\2\2\2\u0474\u0476")
        buf.write("\3\2\2\2\u0475\u0470\3\2\2\2\u0476\u0479\3\2\2\2\u0477")
        buf.write("\u0475\3\2\2\2\u0477\u0478\3\2\2\2\u0478\u047b\3\2\2\2")
        buf.write("\u0479\u0477\3\2\2\2\u047a\u046c\3\2\2\2\u047a\u047b\3")
        buf.write("\2\2\2\u047b\u047c\3\2\2\2\u047c\u04d0\7e\2\2\u047d\u047e")
        buf.write("\7\7\2\2\u047e\u047f\79\2\2\u047f\u0480\7q\2\2\u0480\u0481")
        buf.write("\7:\2\2\u0481\u04d0\7e\2\2\u0482\u0483\7 \2\2\u0483\u0484")
        buf.write("\7i\2\2\u0484\u0486\7I\2\2\u0485\u0487\5\6\4\2\u0486\u0485")
        buf.write("\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u0488\3\2\2\2\u0488")
        buf.write("\u0489\7i\2\2\u0489\u04d0\7e\2\2\u048a\u04a9\7\66\2\2")
        buf.write("\u048b\u0491\7d\2\2\u048c\u048e\7\64\2\2\u048d\u048c\3")
        buf.write("\2\2\2\u048d\u048e\3\2\2\2\u048e\u048f\3\2\2\2\u048f\u0491")
        buf.write("\5\6\4\2\u0490\u048b\3\2\2\2\u0490\u048d\3\2\2\2\u0491")
        buf.write("\u0492\3\2\2\2\u0492\u04aa\5\4\3\2\u0493\u0497\7i\2\2")
        buf.write("\u0494\u0496\5D#\2\u0495\u0494\3\2\2\2\u0496\u0499\3\2")
        buf.write("\2\2\u0497\u0495\3\2\2\2\u0497\u0498\3\2\2\2\u0498\u049a")
        buf.write("\3\2\2\2\u0499\u0497\3\2\2\2\u049a\u049c\7I\2\2\u049b")
        buf.write("\u049d\5> \2\u049c\u049b\3\2\2\2\u049d\u049e\3\2\2\2\u049e")
        buf.write("\u049c\3\2\2\2\u049e\u049f\3\2\2\2\u049f\u04a3\3\2\2\2")
        buf.write("\u04a0\u04a2\5D#\2\u04a1\u04a0\3\2\2\2\u04a2\u04a5\3\2")
        buf.write("\2\2\u04a3\u04a1\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a7")
        buf.write("\3\2\2\2\u04a5\u04a3\3\2\2\2\u04a6\u04a8\5P)\2\u04a7\u04a6")
        buf.write("\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04aa\3\2\2\2\u04a9")
        buf.write("\u0490\3\2\2\2\u04a9\u0493\3\2\2\2\u04aa\u04ab\3\2\2\2")
        buf.write("\u04ab\u04ac\7e\2\2\u04ac\u04d0\3\2\2\2\u04ad\u04ae\7")
        buf.write("+\2\2\u04ae\u04af\79\2\2\u04af\u04b0\5,\27\2\u04b0\u04b1")
        buf.write("\7_\2\2\u04b1\u04b2\7q\2\2\u04b2\u04b3\7:\2\2\u04b3\u04b4")
        buf.write("\7e\2\2\u04b4\u04d0\3\2\2\2\u04b5\u04b7\7\25\2\2\u04b6")
        buf.write("\u04b8\t\13\2\2\u04b7\u04b6\3\2\2\2\u04b7\u04b8\3\2\2")
        buf.write("\2\u04b8\u04bc\3\2\2\2\u04b9\u04bb\5D#\2\u04ba\u04b9\3")
        buf.write("\2\2\2\u04bb\u04be\3\2\2\2\u04bc\u04ba\3\2\2\2\u04bc\u04bd")
        buf.write("\3\2\2\2\u04bd\u04bf\3\2\2\2\u04be\u04bc\3\2\2\2\u04bf")
        buf.write("\u04cc\7i\2\2\u04c0\u04c2\7c\2\2\u04c1\u04c3\5> \2\u04c2")
        buf.write("\u04c1\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4\u04c2\3\2\2\2")
        buf.write("\u04c4\u04c5\3\2\2\2\u04c5\u04c9\3\2\2\2\u04c6\u04c8\5")
        buf.write("D#\2\u04c7\u04c6\3\2\2\2\u04c8\u04cb\3\2\2\2\u04c9\u04c7")
        buf.write("\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\u04cd\3\2\2\2\u04cb")
        buf.write("\u04c9\3\2\2\2\u04cc\u04c0\3\2\2\2\u04cc\u04cd\3\2\2\2")
        buf.write("\u04cd\u04ce\3\2\2\2\u04ce\u04d0\7e\2\2\u04cf\u03c5\3")
        buf.write("\2\2\2\u04cf\u0452\3\2\2\2\u04cf\u046a\3\2\2\2\u04cf\u047d")
        buf.write("\3\2\2\2\u04cf\u0482\3\2\2\2\u04cf\u048a\3\2\2\2\u04cf")
        buf.write("\u04ad\3\2\2\2\u04cf\u04b5\3\2\2\2\u04d0/\3\2\2\2\u04d1")
        buf.write("\u04d2\7\n\2\2\u04d2\u04d5\5,\27\2\u04d3\u04d5\7\21\2")
        buf.write("\2\u04d4\u04d1\3\2\2\2\u04d4\u04d3\3\2\2\2\u04d5\u04d6")
        buf.write("\3\2\2\2\u04d6\u04d7\7c\2\2\u04d7\u04d8\5.\30\2\u04d8")
        buf.write("\61\3\2\2\2\u04d9\u04da\7\24\2\2\u04da\u04db\5.\30\2\u04db")
        buf.write("\63\3\2\2\2\u04dc\u04e1\5(\25\2\u04dd\u04de\7_\2\2\u04de")
        buf.write("\u04e0\5(\25\2\u04df\u04dd\3\2\2\2\u04e0\u04e3\3\2\2\2")
        buf.write("\u04e1\u04df\3\2\2\2\u04e1\u04e2\3\2\2\2\u04e2\u04fc\3")
        buf.write("\2\2\2\u04e3\u04e1\3\2\2\2\u04e4\u04e6\5D#\2\u04e5\u04e4")
        buf.write("\3\2\2\2\u04e6\u04e9\3\2\2\2\u04e7\u04e5\3\2\2\2\u04e7")
        buf.write("\u04e8\3\2\2\2\u04e8\u04ea\3\2\2\2\u04e9\u04e7\3\2\2\2")
        buf.write("\u04ea\u04eb\5<\37\2\u04eb\u04f9\5H%\2\u04ec\u04ed\7I")
        buf.write("\2\2\u04ed\u04fa\5(\25\2\u04ee\u04f0\7I\2\2\u04ef\u04ee")
        buf.write("\3\2\2\2\u04ef\u04f0\3\2\2\2\u04f0\u04f1\3\2\2\2\u04f1")
        buf.write("\u04f6\7=\2\2\u04f2\u04f4\5X-\2\u04f3\u04f5\7_\2\2\u04f4")
        buf.write("\u04f3\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u04f7\3\2\2\2")
        buf.write("\u04f6\u04f2\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7\u04f8\3")
        buf.write("\2\2\2\u04f8\u04fa\7>\2\2\u04f9\u04ec\3\2\2\2\u04f9\u04ef")
        buf.write("\3\2\2\2\u04fa\u04fc\3\2\2\2\u04fb\u04dc\3\2\2\2\u04fb")
        buf.write("\u04e7\3\2\2\2\u04fc\65\3\2\2\2\u04fd\u0502\5(\25\2\u04fe")
        buf.write("\u04ff\7_\2\2\u04ff\u0501\5(\25\2\u0500\u04fe\3\2\2\2")
        buf.write("\u0501\u0504\3\2\2\2\u0502\u0500\3\2\2\2\u0502\u0503\3")
        buf.write("\2\2\2\u0503\u0506\3\2\2\2\u0504\u0502\3\2\2\2\u0505\u04fd")
        buf.write("\3\2\2\2\u0505\u0506\3\2\2\2\u0506\u0531\3\2\2\2\u0507")
        buf.write("\u0509\5<\37\2\u0508\u0507\3\2\2\2\u0508\u0509\3\2\2\2")
        buf.write("\u0509\u0518\3\2\2\2\u050a\u050c\5H%\2\u050b\u050d\5V")
        buf.write(",\2\u050c\u050b\3\2\2\2\u050c\u050d\3\2\2\2\u050d\u0515")
        buf.write("\3\2\2\2\u050e\u050f\7_\2\2\u050f\u0511\5H%\2\u0510\u0512")
        buf.write("\5V,\2\u0511\u0510\3\2\2\2\u0511\u0512\3\2\2\2\u0512\u0514")
        buf.write("\3\2\2\2\u0513\u050e\3\2\2\2\u0514\u0517\3\2\2\2\u0515")
        buf.write("\u0513\3\2\2\2\u0515\u0516\3\2\2\2\u0516\u0519\3\2\2\2")
        buf.write("\u0517\u0515\3\2\2\2\u0518\u050a\3\2\2\2\u0518\u0519\3")
        buf.write("\2\2\2\u0519\u0531\3\2\2\2\u051a\u051c\5D#\2\u051b\u051a")
        buf.write("\3\2\2\2\u051c\u051d\3\2\2\2\u051d\u051b\3\2\2\2\u051d")
        buf.write("\u051e\3\2\2\2\u051e\u0520\3\2\2\2\u051f\u0521\5<\37\2")
        buf.write("\u0520\u051f\3\2\2\2\u0520\u0521\3\2\2\2\u0521\u0522\3")
        buf.write("\2\2\2\u0522\u0524\5H%\2\u0523\u0525\5V,\2\u0524\u0523")
        buf.write("\3\2\2\2\u0524\u0525\3\2\2\2\u0525\u052d\3\2\2\2\u0526")
        buf.write("\u0527\7_\2\2\u0527\u0529\5H%\2\u0528\u052a\5V,\2\u0529")
        buf.write("\u0528\3\2\2\2\u0529\u052a\3\2\2\2\u052a\u052c\3\2\2\2")
        buf.write("\u052b\u0526\3\2\2\2\u052c\u052f\3\2\2\2\u052d\u052b\3")
        buf.write("\2\2\2\u052d\u052e\3\2\2\2\u052e\u0531\3\2\2\2\u052f\u052d")
        buf.write("\3\2\2\2\u0530\u0505\3\2\2\2\u0530\u0508\3\2\2\2\u0530")
        buf.write("\u051b\3\2\2\2\u0531\u0532\3\2\2\2\u0532\u0533\7e\2\2")
        buf.write("\u0533\67\3\2\2\2\u0534\u0535\7\33\2\2\u0535\u0536\7i")
        buf.write("\2\2\u0536\u0537\7e\2\2\u05379\3\2\2\2\u0538\u053a\5<")
        buf.write("\37\2\u0539\u0538\3\2\2\2\u0539\u053a\3\2\2\2\u053a\u0549")
        buf.write("\3\2\2\2\u053b\u053d\5H%\2\u053c\u053e\5V,\2\u053d\u053c")
        buf.write("\3\2\2\2\u053d\u053e\3\2\2\2\u053e\u0546\3\2\2\2\u053f")
        buf.write("\u0540\7_\2\2\u0540\u0542\5H%\2\u0541\u0543\5V,\2\u0542")
        buf.write("\u0541\3\2\2\2\u0542\u0543\3\2\2\2\u0543\u0545\3\2\2\2")
        buf.write("\u0544\u053f\3\2\2\2\u0545\u0548\3\2\2\2\u0546\u0544\3")
        buf.write("\2\2\2\u0546\u0547\3\2\2\2\u0547\u054a\3\2\2\2\u0548\u0546")
        buf.write("\3\2\2\2\u0549\u053b\3\2\2\2\u0549\u054a\3\2\2\2\u054a")
        buf.write("\u054b\3\2\2\2\u054b\u061f\7e\2\2\u054c\u054e\5D#\2\u054d")
        buf.write("\u054c\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u054d\3\2\2\2")
        buf.write("\u054f\u0550\3\2\2\2\u0550\u0562\3\2\2\2\u0551\u0553\5")
        buf.write("<\37\2\u0552\u0551\3\2\2\2\u0552\u0553\3\2\2\2\u0553\u0554")
        buf.write("\3\2\2\2\u0554\u0556\5H%\2\u0555\u0557\5V,\2\u0556\u0555")
        buf.write("\3\2\2\2\u0556\u0557\3\2\2\2\u0557\u055f\3\2\2\2\u0558")
        buf.write("\u0559\7_\2\2\u0559\u055b\5H%\2\u055a\u055c\5V,\2\u055b")
        buf.write("\u055a\3\2\2\2\u055b\u055c\3\2\2\2\u055c\u055e\3\2\2\2")
        buf.write("\u055d\u0558\3\2\2\2\u055e\u0561\3\2\2\2\u055f\u055d\3")
        buf.write("\2\2\2\u055f\u0560\3\2\2\2\u0560\u0563\3\2\2\2\u0561\u055f")
        buf.write("\3\2\2\2\u0562\u0552\3\2\2\2\u0562\u0563\3\2\2\2\u0563")
        buf.write("\u0564\3\2\2\2\u0564\u0565\7e\2\2\u0565\u061f\3\2\2\2")
        buf.write("\u0566\u0568\5D#\2\u0567\u0566\3\2\2\2\u0568\u056b\3\2")
        buf.write("\2\2\u0569\u0567\3\2\2\2\u0569\u056a\3\2\2\2\u056a\u05a0")
        buf.write("\3\2\2\2\u056b\u0569\3\2\2\2\u056c\u056d\7\66\2\2\u056d")
        buf.write("\u056f\7 \2\2\u056e\u0570\5\6\4\2\u056f\u056e\3\2\2\2")
        buf.write("\u056f\u0570\3\2\2\2\u0570\u0571\3\2\2\2\u0571\u0572\7")
        buf.write("i\2\2\u0572\u05a1\7e\2\2\u0573\u0575\5<\37\2\u0574\u0573")
        buf.write("\3\2\2\2\u0574\u0575\3\2\2\2\u0575\u0576\3\2\2\2\u0576")
        buf.write("\u057a\5H%\2\u0577\u0579\t\f\2\2\u0578\u0577\3\2\2\2\u0579")
        buf.write("\u057c\3\2\2\2\u057a\u0578\3\2\2\2\u057a\u057b\3\2\2\2")
        buf.write("\u057b\u059e\3\2\2\2\u057c\u057a\3\2\2\2\u057d\u057e\7")
        buf.write("c\2\2\u057e\u0580\5b\62\2\u057f\u057d\3\2\2\2\u057f\u0580")
        buf.write("\3\2\2\2\u0580\u0581\3\2\2\2\u0581\u0585\7=\2\2\u0582")
        buf.write("\u0584\5.\30\2\u0583\u0582\3\2\2\2\u0584\u0587\3\2\2\2")
        buf.write("\u0585\u0583\3\2\2\2\u0585\u0586\3\2\2\2\u0586\u0588\3")
        buf.write("\2\2\2\u0587\u0585\3\2\2\2\u0588\u059f\7>\2\2\u0589\u058c")
        buf.write("\7\62\2\2\u058a\u058b\7c\2\2\u058b\u058d\5b\62\2\u058c")
        buf.write("\u058a\3\2\2\2\u058c\u058d\3\2\2\2\u058d\u058e\3\2\2\2")
        buf.write("\u058e\u0592\7=\2\2\u058f\u0591\5.\30\2\u0590\u058f\3")
        buf.write("\2\2\2\u0591\u0594\3\2\2\2\u0592\u0590\3\2\2\2\u0592\u0593")
        buf.write("\3\2\2\2\u0593\u0595\3\2\2\2\u0594\u0592\3\2\2\2\u0595")
        buf.write("\u0597\7>\2\2\u0596\u0598\5j\66\2\u0597\u0596\3\2\2\2")
        buf.write("\u0598\u0599\3\2\2\2\u0599\u0597\3\2\2\2\u0599\u059a\3")
        buf.write("\2\2\2\u059a\u059f\3\2\2\2\u059b\u059c\7I\2\2\u059c\u059d")
        buf.write("\t\r\2\2\u059d\u059f\7e\2\2\u059e\u057f\3\2\2\2\u059e")
        buf.write("\u0589\3\2\2\2\u059e\u059b\3\2\2\2\u059f\u05a1\3\2\2\2")
        buf.write("\u05a0\u056c\3\2\2\2\u05a0\u0574\3\2\2\2\u05a1\u061f\3")
        buf.write("\2\2\2\u05a2\u05a3\7\7\2\2\u05a3\u05a4\79\2\2\u05a4\u05a5")
        buf.write("\7q\2\2\u05a5\u05a6\7:\2\2\u05a6\u061f\7e\2\2\u05a7\u05a8")
        buf.write("\7 \2\2\u05a8\u05a9\7i\2\2\u05a9\u05ab\7I\2\2\u05aa\u05ac")
        buf.write("\5\6\4\2\u05ab\u05aa\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac")
        buf.write("\u05ad\3\2\2\2\u05ad\u05ae\7i\2\2\u05ae\u061f\7e\2\2\u05af")
        buf.write("\u05ce\7\66\2\2\u05b0\u05b6\7d\2\2\u05b1\u05b3\7\64\2")
        buf.write("\2\u05b2\u05b1\3\2\2\2\u05b2\u05b3\3\2\2\2\u05b3\u05b4")
        buf.write("\3\2\2\2\u05b4\u05b6\5\6\4\2\u05b5\u05b0\3\2\2\2\u05b5")
        buf.write("\u05b2\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7\u05cf\5\4\3\2")
        buf.write("\u05b8\u05bc\7i\2\2\u05b9\u05bb\5D#\2\u05ba\u05b9\3\2")
        buf.write("\2\2\u05bb\u05be\3\2\2\2\u05bc\u05ba\3\2\2\2\u05bc\u05bd")
        buf.write("\3\2\2\2\u05bd\u05bf\3\2\2\2\u05be\u05bc\3\2\2\2\u05bf")
        buf.write("\u05c1\7I\2\2\u05c0\u05c2\5> \2\u05c1\u05c0\3\2\2\2\u05c2")
        buf.write("\u05c3\3\2\2\2\u05c3\u05c1\3\2\2\2\u05c3\u05c4\3\2\2\2")
        buf.write("\u05c4\u05c8\3\2\2\2\u05c5\u05c7\5D#\2\u05c6\u05c5\3\2")
        buf.write("\2\2\u05c7\u05ca\3\2\2\2\u05c8\u05c6\3\2\2\2\u05c8\u05c9")
        buf.write("\3\2\2\2\u05c9\u05cc\3\2\2\2\u05ca\u05c8\3\2\2\2\u05cb")
        buf.write("\u05cd\5P)\2\u05cc\u05cb\3\2\2\2\u05cc\u05cd\3\2\2\2\u05cd")
        buf.write("\u05cf\3\2\2\2\u05ce\u05b5\3\2\2\2\u05ce\u05b8\3\2\2\2")
        buf.write("\u05cf\u05d0\3\2\2\2\u05d0\u05d1\7e\2\2\u05d1\u061f\3")
        buf.write("\2\2\2\u05d2\u05d3\7+\2\2\u05d3\u05d4\79\2\2\u05d4\u05d5")
        buf.write("\5,\27\2\u05d5\u05d6\7_\2\2\u05d6\u05d7\7q\2\2\u05d7\u05d8")
        buf.write("\7:\2\2\u05d8\u05d9\7e\2\2\u05d9\u061f\3\2\2\2\u05da\u05dc")
        buf.write("\7\25\2\2\u05db\u05dd\t\13\2\2\u05dc\u05db\3\2\2\2\u05dc")
        buf.write("\u05dd\3\2\2\2\u05dd\u05e1\3\2\2\2\u05de\u05e0\5D#\2\u05df")
        buf.write("\u05de\3\2\2\2\u05e0\u05e3\3\2\2\2\u05e1\u05df\3\2\2\2")
        buf.write("\u05e1\u05e2\3\2\2\2\u05e2\u05e4\3\2\2\2\u05e3\u05e1\3")
        buf.write("\2\2\2\u05e4\u05f1\7i\2\2\u05e5\u05e7\7c\2\2\u05e6\u05e8")
        buf.write("\5> \2\u05e7\u05e6\3\2\2\2\u05e8\u05e9\3\2\2\2\u05e9\u05e7")
        buf.write("\3\2\2\2\u05e9\u05ea\3\2\2\2\u05ea\u05ee\3\2\2\2\u05eb")
        buf.write("\u05ed\5D#\2\u05ec\u05eb\3\2\2\2\u05ed\u05f0\3\2\2\2\u05ee")
        buf.write("\u05ec\3\2\2\2\u05ee\u05ef\3\2\2\2\u05ef\u05f2\3\2\2\2")
        buf.write("\u05f0\u05ee\3\2\2\2\u05f1\u05e5\3\2\2\2\u05f1\u05f2\3")
        buf.write("\2\2\2\u05f2\u05f3\3\2\2\2\u05f3\u061f\7e\2\2\u05f4\u05f5")
        buf.write("\7.\2\2\u05f5\u05f7\7J\2\2\u05f6\u05f8\5d\63\2\u05f7\u05f6")
        buf.write("\3\2\2\2\u05f7\u05f8\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9")
        buf.write("\u05ff\7K\2\2\u05fa\u05fc\7\27\2\2\u05fb\u05fa\3\2\2\2")
        buf.write("\u05fb\u05fc\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fd\u05ff\7")
        buf.write(".\2\2\u05fe\u05f4\3\2\2\2\u05fe\u05fb\3\2\2\2\u05ff\u0600")
        buf.write("\3\2\2\2\u0600\u061f\5:\36\2\u0601\u0602\7\27\2\2\u0602")
        buf.write("\u060c\7q\2\2\u0603\u0607\7=\2\2\u0604\u0606\5:\36\2\u0605")
        buf.write("\u0604\3\2\2\2\u0606\u0609\3\2\2\2\u0607\u0605\3\2\2\2")
        buf.write("\u0607\u0608\3\2\2\2\u0608\u060a\3\2\2\2\u0609\u0607\3")
        buf.write("\2\2\2\u060a\u060d\7>\2\2\u060b\u060d\5:\36\2\u060c\u0603")
        buf.write("\3\2\2\2\u060c\u060b\3\2\2\2\u060d\u061f\3\2\2\2\u060e")
        buf.write("\u0610\7\35\2\2\u060f\u060e\3\2\2\2\u060f\u0610\3\2\2")
        buf.write("\2\u0610\u0611\3\2\2\2\u0611\u0613\7 \2\2\u0612\u0614")
        buf.write("\7i\2\2\u0613\u0612\3\2\2\2\u0613\u0614\3\2\2\2\u0614")
        buf.write("\u0615\3\2\2\2\u0615\u0619\7=\2\2\u0616\u0618\5:\36\2")
        buf.write("\u0617\u0616\3\2\2\2\u0618\u061b\3\2\2\2\u0619\u0617\3")
        buf.write("\2\2\2\u0619\u061a\3\2\2\2\u061a\u061c\3\2\2\2\u061b\u0619")
        buf.write("\3\2\2\2\u061c\u061f\7>\2\2\u061d\u061f\7e\2\2\u061e\u0539")
        buf.write("\3\2\2\2\u061e\u054d\3\2\2\2\u061e\u0569\3\2\2\2\u061e")
        buf.write("\u05a2\3\2\2\2\u061e\u05a7\3\2\2\2\u061e\u05af\3\2\2\2")
        buf.write("\u061e\u05d2\3\2\2\2\u061e\u05da\3\2\2\2\u061e\u05fe\3")
        buf.write("\2\2\2\u061e\u0601\3\2\2\2\u061e\u060f\3\2\2\2\u061e\u061d")
        buf.write("\3\2\2\2\u061f;\3\2\2\2\u0620\u0627\7\'\2\2\u0621\u0627")
        buf.write("\7\37\2\2\u0622\u0627\7\27\2\2\u0623\u0627\5> \2\u0624")
        buf.write("\u0627\7\35\2\2\u0625\u0627\7\67\2\2\u0626\u0620\3\2\2")
        buf.write("\2\u0626\u0621\3\2\2\2\u0626\u0622\3\2\2\2\u0626\u0623")
        buf.write("\3\2\2\2\u0626\u0624\3\2\2\2\u0626\u0625\3\2\2\2\u0627")
        buf.write("\u0628\3\2\2\2\u0628\u0626\3\2\2\2\u0628\u0629\3\2\2\2")
        buf.write("\u0629\u062d\3\2\2\2\u062a\u062c\5D#\2\u062b\u062a\3\2")
        buf.write("\2\2\u062c\u062f\3\2\2\2\u062d\u062b\3\2\2\2\u062d\u062e")
        buf.write("\3\2\2\2\u062e=\3\2\2\2\u062f\u062d\3\2\2\2\u0630\u0694")
        buf.write("\5@!\2\u0631\u0635\t\16\2\2\u0632\u0634\5D#\2\u0633\u0632")
        buf.write("\3\2\2\2\u0634\u0637\3\2\2\2\u0635\u0633\3\2\2\2\u0635")
        buf.write("\u0636\3\2\2\2\u0636\u0646\3\2\2\2\u0637\u0635\3\2\2\2")
        buf.write("\u0638\u063a\5\6\4\2\u0639\u0638\3\2\2\2\u0639\u063a\3")
        buf.write("\2\2\2\u063a\u063b\3\2\2\2\u063b\u0641\7i\2\2\u063c\u063e")
        buf.write("\7J\2\2\u063d\u063f\5f\64\2\u063e\u063d\3\2\2\2\u063e")
        buf.write("\u063f\3\2\2\2\u063f\u0640\3\2\2\2\u0640\u0642\7K\2\2")
        buf.write("\u0641\u063c\3\2\2\2\u0641\u0642\3\2\2\2\u0642\u0644\3")
        buf.write("\2\2\2\u0643\u0645\7\31\2\2\u0644\u0643\3\2\2\2\u0644")
        buf.write("\u0645\3\2\2\2\u0645\u0647\3\2\2\2\u0646\u0639\3\2\2\2")
        buf.write("\u0646\u0647\3\2\2\2\u0647\u0657\3\2\2\2\u0648\u0649\7")
        buf.write("c\2\2\u0649\u064b\5`\61\2\u064a\u064c\7h\2\2\u064b\u064a")
        buf.write("\3\2\2\2\u064b\u064c\3\2\2\2\u064c\u0654\3\2\2\2\u064d")
        buf.write("\u064e\7_\2\2\u064e\u0650\5`\61\2\u064f\u0651\7h\2\2\u0650")
        buf.write("\u064f\3\2\2\2\u0650\u0651\3\2\2\2\u0651\u0653\3\2\2\2")
        buf.write("\u0652\u064d\3\2\2\2\u0653\u0656\3\2\2\2\u0654\u0652\3")
        buf.write("\2\2\2\u0654\u0655\3\2\2\2\u0655\u0658\3\2\2\2\u0656\u0654")
        buf.write("\3\2\2\2\u0657\u0648\3\2\2\2\u0657\u0658\3\2\2\2\u0658")
        buf.write("\u0659\3\2\2\2\u0659\u065d\7=\2\2\u065a\u065e\5Z.\2\u065b")
        buf.write("\u065c\7&\2\2\u065c\u065e\7c\2\2\u065d\u065a\3\2\2\2\u065d")
        buf.write("\u065b\3\2\2\2\u065d\u065e\3\2\2\2\u065e\u065f\3\2\2\2")
        buf.write("\u065f\u0694\7>\2\2\u0660\u0662\7\25\2\2\u0661\u0663\t")
        buf.write("\13\2\2\u0662\u0661\3\2\2\2\u0662\u0663\3\2\2\2\u0663")
        buf.write("\u0667\3\2\2\2\u0664\u0666\5D#\2\u0665\u0664\3\2\2\2\u0666")
        buf.write("\u0669\3\2\2\2\u0667\u0665\3\2\2\2\u0667\u0668\3\2\2\2")
        buf.write("\u0668\u066e\3\2\2\2\u0669\u0667\3\2\2\2\u066a\u066c\5")
        buf.write("\6\4\2\u066b\u066a\3\2\2\2\u066b\u066c\3\2\2\2\u066c\u066d")
        buf.write("\3\2\2\2\u066d\u066f\7i\2\2\u066e\u066b\3\2\2\2\u066e")
        buf.write("\u066f\3\2\2\2\u066f\u067c\3\2\2\2\u0670\u0672\7c\2\2")
        buf.write("\u0671\u0673\5> \2\u0672\u0671\3\2\2\2\u0673\u0674\3\2")
        buf.write("\2\2\u0674\u0672\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u0679")
        buf.write("\3\2\2\2\u0676\u0678\5D#\2\u0677\u0676\3\2\2\2\u0678\u067b")
        buf.write("\3\2\2\2\u0679\u0677\3\2\2\2\u0679\u067a\3\2\2\2\u067a")
        buf.write("\u067d\3\2\2\2\u067b\u0679\3\2\2\2\u067c\u0670\3\2\2\2")
        buf.write("\u067c\u067d\3\2\2\2\u067d\u067e\3\2\2\2\u067e\u067f\7")
        buf.write("=\2\2\u067f\u0682\7i\2\2\u0680\u0681\7I\2\2\u0681\u0683")
        buf.write("\5,\27\2\u0682\u0680\3\2\2\2\u0682\u0683\3\2\2\2\u0683")
        buf.write("\u068c\3\2\2\2\u0684\u0685\7_\2\2\u0685\u0688\7i\2\2\u0686")
        buf.write("\u0687\7I\2\2\u0687\u0689\5,\27\2\u0688\u0686\3\2\2\2")
        buf.write("\u0688\u0689\3\2\2\2\u0689\u068b\3\2\2\2\u068a\u0684\3")
        buf.write("\2\2\2\u068b\u068e\3\2\2\2\u068c\u068d\3\2\2\2\u068c\u068a")
        buf.write("\3\2\2\2\u068d\u0690\3\2\2\2\u068e\u068c\3\2\2\2\u068f")
        buf.write("\u0691\7_\2\2\u0690\u068f\3\2\2\2\u0690\u0691\3\2\2\2")
        buf.write("\u0691\u0692\3\2\2\2\u0692\u0694\7>\2\2\u0693\u0630\3")
        buf.write("\2\2\2\u0693\u0631\3\2\2\2\u0693\u0660\3\2\2\2\u0694?")
        buf.write("\3\2\2\2\u0695\u06c4\5B\"\2\u0696\u06ad\t\16\2\2\u0697")
        buf.write("\u0699\5D#\2\u0698\u0697\3\2\2\2\u0699\u069c\3\2\2\2\u069a")
        buf.write("\u0698\3\2\2\2\u069a\u069b\3\2\2\2\u069b\u069e\3\2\2\2")
        buf.write("\u069c\u069a\3\2\2\2\u069d\u069f\5\6\4\2\u069e\u069d\3")
        buf.write("\2\2\2\u069e\u069f\3\2\2\2\u069f\u06a0\3\2\2\2\u06a0\u06ae")
        buf.write("\7i\2\2\u06a1\u06a3\5\6\4\2\u06a2\u06a4\7.\2\2\u06a3\u06a2")
        buf.write("\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a6\3\2\2\2\u06a5")
        buf.write("\u06a1\3\2\2\2\u06a5\u06a6\3\2\2\2\u06a6\u06a7\3\2\2\2")
        buf.write("\u06a7\u06a8\7i\2\2\u06a8\u06aa\7J\2\2\u06a9\u06ab\5f")
        buf.write("\64\2\u06aa\u06a9\3\2\2\2\u06aa\u06ab\3\2\2\2\u06ab\u06ac")
        buf.write("\3\2\2\2\u06ac\u06ae\7K\2\2\u06ad\u069a\3\2\2\2\u06ad")
        buf.write("\u06a5\3\2\2\2\u06ae\u06c4\3\2\2\2\u06af\u06b1\7\25\2")
        buf.write("\2\u06b0\u06b2\5\6\4\2\u06b1\u06b0\3\2\2\2\u06b1\u06b2")
        buf.write("\3\2\2\2\u06b2\u06b3\3\2\2\2\u06b3\u06c4\7i\2\2\u06b4")
        buf.write("\u06b5\7\64\2\2\u06b5\u06c0\5\6\4\2\u06b6\u06c1\7i\2\2")
        buf.write("\u06b7\u06b9\7.\2\2\u06b8\u06b7\3\2\2\2\u06b8\u06b9\3")
        buf.write("\2\2\2\u06b9\u06ba\3\2\2\2\u06ba\u06bb\7i\2\2\u06bb\u06bd")
        buf.write("\7J\2\2\u06bc\u06be\5f\64\2\u06bd\u06bc\3\2\2\2\u06bd")
        buf.write("\u06be\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf\u06c1\7K\2\2")
        buf.write("\u06c0\u06b6\3\2\2\2\u06c0\u06b8\3\2\2\2\u06c1\u06c4\3")
        buf.write("\2\2\2\u06c2\u06c4\7\r\2\2\u06c3\u0695\3\2\2\2\u06c3\u0696")
        buf.write("\3\2\2\2\u06c3\u06af\3\2\2\2\u06c3\u06b4\3\2\2\2\u06c3")
        buf.write("\u06c2\3\2\2\2\u06c4A\3\2\2\2\u06c5\u06c7\5\6\4\2\u06c6")
        buf.write("\u06c5\3\2\2\2\u06c6\u06c7\3\2\2\2\u06c7\u06c8\3\2\2\2")
        buf.write("\u06c8\u06ce\7i\2\2\u06c9\u06cb\7J\2\2\u06ca\u06cc\5f")
        buf.write("\64\2\u06cb\u06ca\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc\u06cd")
        buf.write("\3\2\2\2\u06cd\u06cf\7K\2\2\u06ce\u06c9\3\2\2\2\u06ce")
        buf.write("\u06cf\3\2\2\2\u06cf\u06eb\3\2\2\2\u06d0\u06d1\5\6\4\2")
        buf.write("\u06d1\u06d2\7.\2\2\u06d2\u06d3\7i\2\2\u06d3\u06d5\7J")
        buf.write("\2\2\u06d4\u06d6\5f\64\2\u06d5\u06d4\3\2\2\2\u06d5\u06d6")
        buf.write("\3\2\2\2\u06d6\u06d7\3\2\2\2\u06d7\u06d8\7K\2\2\u06d8")
        buf.write("\u06eb\3\2\2\2\u06d9\u06eb\7\36\2\2\u06da\u06eb\7)\2\2")
        buf.write("\u06db\u06eb\7\b\2\2\u06dc\u06dd\7\20\2\2\u06dd\u06e7")
        buf.write("\79\2\2\u06de\u06e3\5(\25\2\u06df\u06e0\7_\2\2\u06e0\u06e2")
        buf.write("\5(\25\2\u06e1\u06df\3\2\2\2\u06e2\u06e5\3\2\2\2\u06e3")
        buf.write("\u06e1\3\2\2\2\u06e3\u06e4\3\2\2\2\u06e4\u06e8\3\2\2\2")
        buf.write("\u06e5\u06e3\3\2\2\2\u06e6\u06e8\7\b\2\2\u06e7\u06de\3")
        buf.write("\2\2\2\u06e7\u06e6\3\2\2\2\u06e8\u06e9\3\2\2\2\u06e9\u06eb")
        buf.write("\7:\2\2\u06ea\u06c6\3\2\2\2\u06ea\u06d0\3\2\2\2\u06ea")
        buf.write("\u06d9\3\2\2\2\u06ea\u06da\3\2\2\2\u06ea\u06db\3\2\2\2")
        buf.write("\u06ea\u06dc\3\2\2\2\u06ebC\3\2\2\2\u06ec\u06ed\7;\2\2")
        buf.write("\u06ed\u0700\7;\2\2\u06ee\u06f1\7i\2\2\u06ef\u06f0\7d")
        buf.write("\2\2\u06f0\u06f2\7i\2\2\u06f1\u06ef\3\2\2\2\u06f1\u06f2")
        buf.write("\3\2\2\2\u06f2\u06fb\3\2\2\2\u06f3\u06f7\79\2\2\u06f4")
        buf.write("\u06f6\5F$\2\u06f5\u06f4\3\2\2\2\u06f6\u06f9\3\2\2\2\u06f7")
        buf.write("\u06f5\3\2\2\2\u06f7\u06f8\3\2\2\2\u06f8\u06fa\3\2\2\2")
        buf.write("\u06f9\u06f7\3\2\2\2\u06fa\u06fc\7:\2\2\u06fb\u06f3\3")
        buf.write("\2\2\2\u06fb\u06fc\3\2\2\2\u06fc\u06fe\3\2\2\2\u06fd\u06ff")
        buf.write("\7h\2\2\u06fe\u06fd\3\2\2\2\u06fe\u06ff\3\2\2\2\u06ff")
        buf.write("\u0701\3\2\2\2\u0700\u06ee\3\2\2\2\u0700\u0701\3\2\2\2")
        buf.write("\u0701\u0719\3\2\2\2\u0702\u0715\7_\2\2\u0703\u0706\7")
        buf.write("i\2\2\u0704\u0705\7d\2\2\u0705\u0707\7i\2\2\u0706\u0704")
        buf.write("\3\2\2\2\u0706\u0707\3\2\2\2\u0707\u0710\3\2\2\2\u0708")
        buf.write("\u070c\79\2\2\u0709\u070b\5F$\2\u070a\u0709\3\2\2\2\u070b")
        buf.write("\u070e\3\2\2\2\u070c\u070a\3\2\2\2\u070c\u070d\3\2\2\2")
        buf.write("\u070d\u070f\3\2\2\2\u070e\u070c\3\2\2\2\u070f\u0711\7")
        buf.write(":\2\2\u0710\u0708\3\2\2\2\u0710\u0711\3\2\2\2\u0711\u0713")
        buf.write("\3\2\2\2\u0712\u0714\7h\2\2\u0713\u0712\3\2\2\2\u0713")
        buf.write("\u0714\3\2\2\2\u0714\u0716\3\2\2\2\u0715\u0703\3\2\2\2")
        buf.write("\u0715\u0716\3\2\2\2\u0716\u0718\3\2\2\2\u0717\u0702\3")
        buf.write("\2\2\2\u0718\u071b\3\2\2\2\u0719\u0717\3\2\2\2\u0719\u071a")
        buf.write("\3\2\2\2\u071a\u071c\3\2\2\2\u071b\u0719\3\2\2\2\u071c")
        buf.write("\u071d\7<\2\2\u071d\u0737\7<\2\2\u071e\u071f\7\5\2\2\u071f")
        buf.write("\u072f\79\2\2\u0720\u0722\5> \2\u0721\u0720\3\2\2\2\u0722")
        buf.write("\u0723\3\2\2\2\u0723\u0721\3\2\2\2\u0723\u0724\3\2\2\2")
        buf.write("\u0724\u0728\3\2\2\2\u0725\u0727\5D#\2\u0726\u0725\3\2")
        buf.write("\2\2\u0727\u072a\3\2\2\2\u0728\u0726\3\2\2\2\u0728\u0729")
        buf.write("\3\2\2\2\u0729\u072c\3\2\2\2\u072a\u0728\3\2\2\2\u072b")
        buf.write("\u072d\5P)\2\u072c\u072b\3\2\2\2\u072c\u072d\3\2\2\2\u072d")
        buf.write("\u0730\3\2\2\2\u072e\u0730\5,\27\2\u072f\u0721\3\2\2\2")
        buf.write("\u072f\u072e\3\2\2\2\u0730\u0732\3\2\2\2\u0731\u0733\7")
        buf.write("h\2\2\u0732\u0731\3\2\2\2\u0732\u0733\3\2\2\2\u0733\u0734")
        buf.write("\3\2\2\2\u0734\u0735\7:\2\2\u0735\u0737\3\2\2\2\u0736")
        buf.write("\u06ec\3\2\2\2\u0736\u071e\3\2\2\2\u0737E\3\2\2\2\u0738")
        buf.write("\u073c\79\2\2\u0739\u073b\5F$\2\u073a\u0739\3\2\2\2\u073b")
        buf.write("\u073e\3\2\2\2\u073c\u073a\3\2\2\2\u073c\u073d\3\2\2\2")
        buf.write("\u073d\u073f\3\2\2\2\u073e\u073c\3\2\2\2\u073f\u0751\7")
        buf.write(":\2\2\u0740\u0744\7;\2\2\u0741\u0743\5F$\2\u0742\u0741")
        buf.write("\3\2\2\2\u0743\u0746\3\2\2\2\u0744\u0742\3\2\2\2\u0744")
        buf.write("\u0745\3\2\2\2\u0745\u0747\3\2\2\2\u0746\u0744\3\2\2\2")
        buf.write("\u0747\u0751\7<\2\2\u0748\u074c\7=\2\2\u0749\u074b\5F")
        buf.write("$\2\u074a\u0749\3\2\2\2\u074b\u074e\3\2\2\2\u074c\u074a")
        buf.write("\3\2\2\2\u074c\u074d\3\2\2\2\u074d\u074f\3\2\2\2\u074e")
        buf.write("\u074c\3\2\2\2\u074f\u0751\7>\2\2\u0750\u0738\3\2\2\2")
        buf.write("\u0750\u0740\3\2\2\2\u0750\u0748\3\2\2\2\u0751G\3\2\2")
        buf.write("\2\u0752\u0754\5N(\2\u0753\u0752\3\2\2\2\u0754\u0757\3")
        buf.write("\2\2\2\u0755\u0753\3\2\2\2\u0755\u0756\3\2\2\2\u0756\u0758")
        buf.write("\3\2\2\2\u0757\u0755\3\2\2\2\u0758\u076b\5J&\2\u0759\u075a")
        buf.write("\5J&\2\u075a\u075b\5L\'\2\u075b\u075d\7a\2\2\u075c\u075e")
        buf.write("\5@!\2\u075d\u075c\3\2\2\2\u075e\u075f\3\2\2\2\u075f\u075d")
        buf.write("\3\2\2\2\u075f\u0760\3\2\2\2\u0760\u0764\3\2\2\2\u0761")
        buf.write("\u0763\5D#\2\u0762\u0761\3\2\2\2\u0763\u0766\3\2\2\2\u0764")
        buf.write("\u0762\3\2\2\2\u0764\u0765\3\2\2\2\u0765\u0768\3\2\2\2")
        buf.write("\u0766\u0764\3\2\2\2\u0767\u0769\5P)\2\u0768\u0767\3\2")
        buf.write("\2\2\u0768\u0769\3\2\2\2\u0769\u076b\3\2\2\2\u076a\u0755")
        buf.write("\3\2\2\2\u076a\u0759\3\2\2\2\u076bI\3\2\2\2\u076c\u076e")
        buf.write("\b&\1\2\u076d\u076f\7h\2\2\u076e\u076d\3\2\2\2\u076e\u076f")
        buf.write("\3\2\2\2\u076f\u0774\3\2\2\2\u0770\u0772\5\6\4\2\u0771")
        buf.write("\u0773\7.\2\2\u0772\u0771\3\2\2\2\u0772\u0773\3\2\2\2")
        buf.write("\u0773\u0775\3\2\2\2\u0774\u0770\3\2\2\2\u0774\u0775\3")
        buf.write("\2\2\2\u0775\u0776\3\2\2\2\u0776\u077a\5\4\3\2\u0777\u0779")
        buf.write("\5D#\2\u0778\u0777\3\2\2\2\u0779\u077c\3\2\2\2\u077a\u0778")
        buf.write("\3\2\2\2\u077a\u077b\3\2\2\2\u077b\u0788\3\2\2\2\u077c")
        buf.write("\u077a\3\2\2\2\u077d\u0781\79\2\2\u077e\u0780\5N(\2\u077f")
        buf.write("\u077e\3\2\2\2\u0780\u0783\3\2\2\2\u0781\u077f\3\2\2\2")
        buf.write("\u0781\u0782\3\2\2\2\u0782\u0784\3\2\2\2\u0783\u0781\3")
        buf.write("\2\2\2\u0784\u0785\5J&\2\u0785\u0786\7:\2\2\u0786\u0788")
        buf.write("\3\2\2\2\u0787\u076c\3\2\2\2\u0787\u077d\3\2\2\2\u0788")
        buf.write("\u079a\3\2\2\2\u0789\u0796\f\4\2\2\u078a\u0797\5L\'\2")
        buf.write("\u078b\u078d\7;\2\2\u078c\u078e\5,\27\2\u078d\u078c\3")
        buf.write("\2\2\2\u078d\u078e\3\2\2\2\u078e\u078f\3\2\2\2\u078f\u0793")
        buf.write("\7<\2\2\u0790\u0792\5D#\2\u0791\u0790\3\2\2\2\u0792\u0795")
        buf.write("\3\2\2\2\u0793\u0791\3\2\2\2\u0793\u0794\3\2\2\2\u0794")
        buf.write("\u0797\3\2\2\2\u0795\u0793\3\2\2\2\u0796\u078a\3\2\2\2")
        buf.write("\u0796\u078b\3\2\2\2\u0797\u0799\3\2\2\2\u0798\u0789\3")
        buf.write("\2\2\2\u0799\u079c\3\2\2\2\u079a\u0798\3\2\2\2\u079a\u079b")
        buf.write("\3\2\2\2\u079bK\3\2\2\2\u079c\u079a\3\2\2\2\u079d\u07b6")
        buf.write("\79\2\2\u079e\u07a3\5T+\2\u079f\u07a0\7_\2\2\u07a0\u07a2")
        buf.write("\5T+\2\u07a1\u079f\3\2\2\2\u07a2\u07a5\3\2\2\2\u07a3\u07a1")
        buf.write("\3\2\2\2\u07a3\u07a4\3\2\2\2\u07a4\u07a7\3\2\2\2\u07a5")
        buf.write("\u07a3\3\2\2\2\u07a6\u079e\3\2\2\2\u07a6\u07a7\3\2\2\2")
        buf.write("\u07a7\u07a9\3\2\2\2\u07a8\u07aa\7h\2\2\u07a9\u07a8\3")
        buf.write("\2\2\2\u07a9\u07aa\3\2\2\2\u07aa\u07b7\3\2\2\2\u07ab\u07b0")
        buf.write("\5T+\2\u07ac\u07ad\7_\2\2\u07ad\u07af\5T+\2\u07ae\u07ac")
        buf.write("\3\2\2\2\u07af\u07b2\3\2\2\2\u07b0\u07ae\3\2\2\2\u07b0")
        buf.write("\u07b1\3\2\2\2\u07b1\u07b3\3\2\2\2\u07b2\u07b0\3\2\2\2")
        buf.write("\u07b3\u07b4\7_\2\2\u07b4\u07b5\7h\2\2\u07b5\u07b7\3\2")
        buf.write("\2\2\u07b6\u07a6\3\2\2\2\u07b6\u07ab\3\2\2\2\u07b7\u07b8")
        buf.write("\3\2\2\2\u07b8\u07bc\7:\2\2\u07b9\u07bb\7\r\2\2\u07ba")
        buf.write("\u07b9\3\2\2\2\u07bb\u07be\3\2\2\2\u07bc\u07ba\3\2\2\2")
        buf.write("\u07bc\u07bd\3\2\2\2\u07bd\u07c0\3\2\2\2\u07be\u07bc\3")
        buf.write("\2\2\2\u07bf\u07c1\t\17\2\2\u07c0\u07bf\3\2\2\2\u07c0")
        buf.write("\u07c1\3\2\2\2\u07c1\u07f6\3\2\2\2\u07c2\u07c3\7\60\2")
        buf.write("\2\u07c3\u07ec\79\2\2\u07c4\u07c6\5> \2\u07c5\u07c4\3")
        buf.write("\2\2\2\u07c6\u07c7\3\2\2\2\u07c7\u07c5\3\2\2\2\u07c7\u07c8")
        buf.write("\3\2\2\2\u07c8\u07cc\3\2\2\2\u07c9\u07cb\5D#\2\u07ca\u07c9")
        buf.write("\3\2\2\2\u07cb\u07ce\3\2\2\2\u07cc\u07ca\3\2\2\2\u07cc")
        buf.write("\u07cd\3\2\2\2\u07cd\u07d0\3\2\2\2\u07ce\u07cc\3\2\2\2")
        buf.write("\u07cf\u07d1\5P)\2\u07d0\u07cf\3\2\2\2\u07d0\u07d1\3\2")
        buf.write("\2\2\u07d1\u07d3\3\2\2\2\u07d2\u07d4\7h\2\2\u07d3\u07d2")
        buf.write("\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4\u07e9\3\2\2\2\u07d5")
        buf.write("\u07d7\7_\2\2\u07d6\u07d8\5> \2\u07d7\u07d6\3\2\2\2\u07d8")
        buf.write("\u07d9\3\2\2\2\u07d9\u07d7\3\2\2\2\u07d9\u07da\3\2\2\2")
        buf.write("\u07da\u07de\3\2\2\2\u07db\u07dd\5D#\2\u07dc\u07db\3\2")
        buf.write("\2\2\u07dd\u07e0\3\2\2\2\u07de\u07dc\3\2\2\2\u07de\u07df")
        buf.write("\3\2\2\2\u07df\u07e2\3\2\2\2\u07e0\u07de\3\2\2\2\u07e1")
        buf.write("\u07e3\5P)\2\u07e2\u07e1\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3")
        buf.write("\u07e5\3\2\2\2\u07e4\u07e6\7h\2\2\u07e5\u07e4\3\2\2\2")
        buf.write("\u07e5\u07e6\3\2\2\2\u07e6\u07e8\3\2\2\2\u07e7\u07d5\3")
        buf.write("\2\2\2\u07e8\u07eb\3\2\2\2\u07e9\u07e7\3\2\2\2\u07e9\u07ea")
        buf.write("\3\2\2\2\u07ea\u07ed\3\2\2\2\u07eb\u07e9\3\2\2\2\u07ec")
        buf.write("\u07c5\3\2\2\2\u07ec\u07ed\3\2\2\2\u07ed\u07ee\3\2\2\2")
        buf.write("\u07ee\u07f7\7:\2\2\u07ef\u07f4\7\"\2\2\u07f0\u07f1\7")
        buf.write("9\2\2\u07f1\u07f2\5,\27\2\u07f2\u07f3\7:\2\2\u07f3\u07f5")
        buf.write("\3\2\2\2\u07f4\u07f0\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5")
        buf.write("\u07f7\3\2\2\2\u07f6\u07c2\3\2\2\2\u07f6\u07ef\3\2\2\2")
        buf.write("\u07f6\u07f7\3\2\2\2\u07f7\u07fb\3\2\2\2\u07f8\u07fa\5")
        buf.write("D#\2\u07f9\u07f8\3\2\2\2\u07fa\u07fd\3\2\2\2\u07fb\u07f9")
        buf.write("\3\2\2\2\u07fb\u07fc\3\2\2\2\u07fcM\3\2\2\2\u07fd\u07fb")
        buf.write("\3\2\2\2\u07fe\u0800\5\6\4\2\u07ff\u07fe\3\2\2\2\u07ff")
        buf.write("\u0800\3\2\2\2\u0800\u0801\3\2\2\2\u0801\u0805\7A\2\2")
        buf.write("\u0802\u0804\5D#\2\u0803\u0802\3\2\2\2\u0804\u0807\3\2")
        buf.write("\2\2\u0805\u0803\3\2\2\2\u0805\u0806\3\2\2\2\u0806\u080b")
        buf.write("\3\2\2\2\u0807\u0805\3\2\2\2\u0808\u080a\7\r\2\2\u0809")
        buf.write("\u0808\3\2\2\2\u080a\u080d\3\2\2\2\u080b\u0809\3\2\2\2")
        buf.write("\u080b\u080c\3\2\2\2\u080c\u0816\3\2\2\2\u080d\u080b\3")
        buf.write("\2\2\2\u080e\u0812\t\17\2\2\u080f\u0811\5D#\2\u0810\u080f")
        buf.write("\3\2\2\2\u0811\u0814\3\2\2\2\u0812\u0810\3\2\2\2\u0812")
        buf.write("\u0813\3\2\2\2\u0813\u0816\3\2\2\2\u0814\u0812\3\2\2\2")
        buf.write("\u0815\u07ff\3\2\2\2\u0815\u080e\3\2\2\2\u0816O\3\2\2")
        buf.write("\2\u0817\u0819\5R*\2\u0818\u0817\3\2\2\2\u0818\u0819\3")
        buf.write("\2\2\2\u0819\u081a\3\2\2\2\u081a\u081b\5L\'\2\u081b\u081d")
        buf.write("\7a\2\2\u081c\u081e\5@!\2\u081d\u081c\3\2\2\2\u081e\u081f")
        buf.write("\3\2\2\2\u081f\u081d\3\2\2\2\u081f\u0820\3\2\2\2\u0820")
        buf.write("\u0824\3\2\2\2\u0821\u0823\5D#\2\u0822\u0821\3\2\2\2\u0823")
        buf.write("\u0826\3\2\2\2\u0824\u0822\3\2\2\2\u0824\u0825\3\2\2\2")
        buf.write("\u0825\u0828\3\2\2\2\u0826\u0824\3\2\2\2\u0827\u0818\3")
        buf.write("\2\2\2\u0828\u082b\3\2\2\2\u0829\u0827\3\2\2\2\u0829\u082a")
        buf.write("\3\2\2\2\u082a\u082f\3\2\2\2\u082b\u0829\3\2\2\2\u082c")
        buf.write("\u082e\5N(\2\u082d\u082c\3\2\2\2\u082e\u0831\3\2\2\2\u082f")
        buf.write("\u082d\3\2\2\2\u082f\u0830\3\2\2\2\u0830\u0845\3\2\2\2")
        buf.write("\u0831\u082f\3\2\2\2\u0832\u0846\5R*\2\u0833\u0842\7h")
        buf.write("\2\2\u0834\u0841\5L\'\2\u0835\u0837\7;\2\2\u0836\u0838")
        buf.write("\5,\27\2\u0837\u0836\3\2\2\2\u0837\u0838\3\2\2\2\u0838")
        buf.write("\u0839\3\2\2\2\u0839\u083d\7<\2\2\u083a\u083c\5D#\2\u083b")
        buf.write("\u083a\3\2\2\2\u083c\u083f\3\2\2\2\u083d\u083b\3\2\2\2")
        buf.write("\u083d\u083e\3\2\2\2\u083e\u0841\3\2\2\2\u083f\u083d\3")
        buf.write("\2\2\2\u0840\u0834\3\2\2\2\u0840\u0835\3\2\2\2\u0841\u0844")
        buf.write("\3\2\2\2\u0842\u0840\3\2\2\2\u0842\u0843\3\2\2\2\u0843")
        buf.write("\u0846\3\2\2\2\u0844\u0842\3\2\2\2\u0845\u0832\3\2\2\2")
        buf.write("\u0845\u0833\3\2\2\2\u0846Q\3\2\2\2\u0847\u0848\b*\1\2")
        buf.write("\u0848\u085f\5L\'\2\u0849\u084b\7;\2\2\u084a\u084c\5,")
        buf.write("\27\2\u084b\u084a\3\2\2\2\u084b\u084c\3\2\2\2\u084c\u084d")
        buf.write("\3\2\2\2\u084d\u0851\7<\2\2\u084e\u0850\5D#\2\u084f\u084e")
        buf.write("\3\2\2\2\u0850\u0853\3\2\2\2\u0851\u084f\3\2\2\2\u0851")
        buf.write("\u0852\3\2\2\2\u0852\u085f\3\2\2\2\u0853\u0851\3\2\2\2")
        buf.write("\u0854\u0858\79\2\2\u0855\u0857\5N(\2\u0856\u0855\3\2")
        buf.write("\2\2\u0857\u085a\3\2\2\2\u0858\u0856\3\2\2\2\u0858\u0859")
        buf.write("\3\2\2\2\u0859\u085b\3\2\2\2\u085a\u0858\3\2\2\2\u085b")
        buf.write("\u085c\5R*\2\u085c\u085d\7:\2\2\u085d\u085f\3\2\2\2\u085e")
        buf.write("\u0847\3\2\2\2\u085e\u0849\3\2\2\2\u085e\u0854\3\2\2\2")
        buf.write("\u085f\u0871\3\2\2\2\u0860\u086d\f\6\2\2\u0861\u086e\5")
        buf.write("L\'\2\u0862\u0864\7;\2\2\u0863\u0865\5,\27\2\u0864\u0863")
        buf.write("\3\2\2\2\u0864\u0865\3\2\2\2\u0865\u0866\3\2\2\2\u0866")
        buf.write("\u086a\7<\2\2\u0867\u0869\5D#\2\u0868\u0867\3\2\2\2\u0869")
        buf.write("\u086c\3\2\2\2\u086a\u0868\3\2\2\2\u086a\u086b\3\2\2\2")
        buf.write("\u086b\u086e\3\2\2\2\u086c\u086a\3\2\2\2\u086d\u0861\3")
        buf.write("\2\2\2\u086d\u0862\3\2\2\2\u086e\u0870\3\2\2\2\u086f\u0860")
        buf.write("\3\2\2\2\u0870\u0873\3\2\2\2\u0871\u086f\3\2\2\2\u0871")
        buf.write("\u0872\3\2\2\2\u0872S\3\2\2\2\u0873\u0871\3\2\2\2\u0874")
        buf.write("\u0876\5D#\2\u0875\u0874\3\2\2\2\u0876\u0879\3\2\2\2\u0877")
        buf.write("\u0875\3\2\2\2\u0877\u0878\3\2\2\2\u0878\u087a\3\2\2\2")
        buf.write("\u0879\u0877\3\2\2\2\u087a\u087d\5<\37\2\u087b\u087e\5")
        buf.write("H%\2\u087c\u087e\5P)\2\u087d\u087b\3\2\2\2\u087d\u087c")
        buf.write("\3\2\2\2\u087e\u088b\3\2\2\2\u087f\u0889\7I\2\2\u0880")
        buf.write("\u088a\5(\25\2\u0881\u0886\7=\2\2\u0882\u0884\5X-\2\u0883")
        buf.write("\u0885\7_\2\2\u0884\u0883\3\2\2\2\u0884\u0885\3\2\2\2")
        buf.write("\u0885\u0887\3\2\2\2\u0886\u0882\3\2\2\2\u0886\u0887\3")
        buf.write("\2\2\2\u0887\u0888\3\2\2\2\u0888\u088a\7>\2\2\u0889\u0880")
        buf.write("\3\2\2\2\u0889\u0881\3\2\2\2\u088a\u088c\3\2\2\2\u088b")
        buf.write("\u087f\3\2\2\2\u088b\u088c\3\2\2\2\u088cU\3\2\2\2\u088d")
        buf.write("\u088e\7I\2\2\u088e\u089f\5(\25\2\u088f\u0891\7I\2\2\u0890")
        buf.write("\u088f\3\2\2\2\u0890\u0891\3\2\2\2\u0891\u0892\3\2\2\2")
        buf.write("\u0892\u0897\7=\2\2\u0893\u0895\5X-\2\u0894\u0896\7_\2")
        buf.write("\2\u0895\u0894\3\2\2\2\u0895\u0896\3\2\2\2\u0896\u0898")
        buf.write("\3\2\2\2\u0897\u0893\3\2\2\2\u0897\u0898\3\2\2\2\u0898")
        buf.write("\u0899\3\2\2\2\u0899\u089f\7>\2\2\u089a\u089b\79\2\2\u089b")
        buf.write("\u089c\5X-\2\u089c\u089d\7:\2\2\u089d\u089f\3\2\2\2\u089e")
        buf.write("\u088d\3\2\2\2\u089e\u0890\3\2\2\2\u089e\u089a\3\2\2\2")
        buf.write("\u089fW\3\2\2\2\u08a0\u08aa\5(\25\2\u08a1\u08a6\7=\2\2")
        buf.write("\u08a2\u08a4\5X-\2\u08a3\u08a5\7_\2\2\u08a4\u08a3\3\2")
        buf.write("\2\2\u08a4\u08a5\3\2\2\2\u08a5\u08a7\3\2\2\2\u08a6\u08a2")
        buf.write("\3\2\2\2\u08a6\u08a7\3\2\2\2\u08a7\u08a8\3\2\2\2\u08a8")
        buf.write("\u08aa\7>\2\2\u08a9\u08a0\3\2\2\2\u08a9\u08a1\3\2\2\2")
        buf.write("\u08aa\u08ac\3\2\2\2\u08ab\u08ad\7h\2\2\u08ac\u08ab\3")
        buf.write("\2\2\2\u08ac\u08ad\3\2\2\2\u08ad\u08bf\3\2\2\2\u08ae\u08b8")
        buf.write("\7_\2\2\u08af\u08b9\5(\25\2\u08b0\u08b5\7=\2\2\u08b1\u08b3")
        buf.write("\5X-\2\u08b2\u08b4\7_\2\2\u08b3\u08b2\3\2\2\2\u08b3\u08b4")
        buf.write("\3\2\2\2\u08b4\u08b6\3\2\2\2\u08b5\u08b1\3\2\2\2\u08b5")
        buf.write("\u08b6\3\2\2\2\u08b6\u08b7\3\2\2\2\u08b7\u08b9\7>\2\2")
        buf.write("\u08b8\u08af\3\2\2\2\u08b8\u08b0\3\2\2\2\u08b9\u08bb\3")
        buf.write("\2\2\2\u08ba\u08bc\7h\2\2\u08bb\u08ba\3\2\2\2\u08bb\u08bc")
        buf.write("\3\2\2\2\u08bc\u08be\3\2\2\2\u08bd\u08ae\3\2\2\2\u08be")
        buf.write("\u08c1\3\2\2\2\u08bf\u08bd\3\2\2\2\u08bf\u08c0\3\2\2\2")
        buf.write("\u08c0Y\3\2\2\2\u08c1\u08bf\3\2\2\2\u08c2\u08c4\5D#\2")
        buf.write("\u08c3\u08c2\3\2\2\2\u08c4\u08c7\3\2\2\2\u08c5\u08c3\3")
        buf.write("\2\2\2\u08c5\u08c6\3\2\2\2\u08c6\u08c9\3\2\2\2\u08c7\u08c5")
        buf.write("\3\2\2\2\u08c8\u08ca\5<\37\2\u08c9\u08c8\3\2\2\2\u08c9")
        buf.write("\u08ca\3\2\2\2\u08ca\u0900\3\2\2\2\u08cb\u08d0\5\\/\2")
        buf.write("\u08cc\u08cd\7_\2\2\u08cd\u08cf\5\\/\2\u08ce\u08cc\3\2")
        buf.write("\2\2\u08cf\u08d2\3\2\2\2\u08d0\u08ce\3\2\2\2\u08d0\u08d1")
        buf.write("\3\2\2\2\u08d1\u08d4\3\2\2\2\u08d2\u08d0\3\2\2\2\u08d3")
        buf.write("\u08cb\3\2\2\2\u08d3\u08d4\3\2\2\2\u08d4\u08d5\3\2\2\2")
        buf.write("\u08d5\u0901\7e\2\2\u08d6\u08da\5H%\2\u08d7\u08d9\t\f")
        buf.write("\2\2\u08d8\u08d7\3\2\2\2\u08d9\u08dc\3\2\2\2\u08da\u08d8")
        buf.write("\3\2\2\2\u08da\u08db\3\2\2\2\u08db\u08fe\3\2\2\2\u08dc")
        buf.write("\u08da\3\2\2\2\u08dd\u08de\7c\2\2\u08de\u08e0\5b\62\2")
        buf.write("\u08df\u08dd\3\2\2\2\u08df\u08e0\3\2\2\2\u08e0\u08e1\3")
        buf.write("\2\2\2\u08e1\u08e5\7=\2\2\u08e2\u08e4\5.\30\2\u08e3\u08e2")
        buf.write("\3\2\2\2\u08e4\u08e7\3\2\2\2\u08e5\u08e3\3\2\2\2\u08e5")
        buf.write("\u08e6\3\2\2\2\u08e6\u08e8\3\2\2\2\u08e7\u08e5\3\2\2\2")
        buf.write("\u08e8\u08ff\7>\2\2\u08e9\u08ec\7\62\2\2\u08ea\u08eb\7")
        buf.write("c\2\2\u08eb\u08ed\5b\62\2\u08ec\u08ea\3\2\2\2\u08ec\u08ed")
        buf.write("\3\2\2\2\u08ed\u08ee\3\2\2\2\u08ee\u08f2\7=\2\2\u08ef")
        buf.write("\u08f1\5.\30\2\u08f0\u08ef\3\2\2\2\u08f1\u08f4\3\2\2\2")
        buf.write("\u08f2\u08f0\3\2\2\2\u08f2\u08f3\3\2\2\2\u08f3\u08f5\3")
        buf.write("\2\2\2\u08f4\u08f2\3\2\2\2\u08f5\u08f7\7>\2\2\u08f6\u08f8")
        buf.write("\5j\66\2\u08f7\u08f6\3\2\2\2\u08f8\u08f9\3\2\2\2\u08f9")
        buf.write("\u08f7\3\2\2\2\u08f9\u08fa\3\2\2\2\u08fa\u08ff\3\2\2\2")
        buf.write("\u08fb\u08fc\7I\2\2\u08fc\u08fd\t\r\2\2\u08fd\u08ff\7")
        buf.write("e\2\2\u08fe\u08df\3\2\2\2\u08fe\u08e9\3\2\2\2\u08fe\u08fb")
        buf.write("\3\2\2\2\u08ff\u0901\3\2\2\2\u0900\u08d3\3\2\2\2\u0900")
        buf.write("\u08d6\3\2\2\2\u0901\u0936\3\2\2\2\u0902\u0908\7\66\2")
        buf.write("\2\u0903\u0905\7\64\2\2\u0904\u0903\3\2\2\2\u0904\u0905")
        buf.write("\3\2\2\2\u0905\u0906\3\2\2\2\u0906\u0909\5\6\4\2\u0907")
        buf.write("\u0909\7d\2\2\u0908\u0904\3\2\2\2\u0908\u0907\3\2\2\2")
        buf.write("\u0909\u090a\3\2\2\2\u090a\u090b\5\4\3\2\u090b\u090c\7")
        buf.write("e\2\2\u090c\u0936\3\2\2\2\u090d\u090e\7+\2\2\u090e\u090f")
        buf.write("\79\2\2\u090f\u0910\5,\27\2\u0910\u0911\7_\2\2\u0911\u0912")
        buf.write("\7q\2\2\u0912\u0913\7:\2\2\u0913\u0914\7e\2\2\u0914\u0936")
        buf.write("\3\2\2\2\u0915\u0916\7.\2\2\u0916\u0917\7J\2\2\u0917\u0918")
        buf.write("\5d\63\2\u0918\u0919\7K\2\2\u0919\u091a\5:\36\2\u091a")
        buf.write("\u0936\3\2\2\2\u091b\u091c\7\66\2\2\u091c\u0920\7i\2\2")
        buf.write("\u091d\u091f\5D#\2\u091e\u091d\3\2\2\2\u091f\u0922\3\2")
        buf.write("\2\2\u0920\u091e\3\2\2\2\u0920\u0921\3\2\2\2\u0921\u0923")
        buf.write("\3\2\2\2\u0922\u0920\3\2\2\2\u0923\u0925\7I\2\2\u0924")
        buf.write("\u0926\5> \2\u0925\u0924\3\2\2\2\u0926\u0927\3\2\2\2\u0927")
        buf.write("\u0925\3\2\2\2\u0927\u0928\3\2\2\2\u0928\u092c\3\2\2\2")
        buf.write("\u0929\u092b\5D#\2\u092a\u0929\3\2\2\2\u092b\u092e\3\2")
        buf.write("\2\2\u092c\u092a\3\2\2\2\u092c\u092d\3\2\2\2\u092d\u0930")
        buf.write("\3\2\2\2\u092e\u092c\3\2\2\2\u092f\u0931\5P)\2\u0930\u092f")
        buf.write("\3\2\2\2\u0930\u0931\3\2\2\2\u0931\u0932\3\2\2\2\u0932")
        buf.write("\u0933\7e\2\2\u0933\u0936\3\2\2\2\u0934\u0936\7e\2\2\u0935")
        buf.write("\u08c5\3\2\2\2\u0935\u0902\3\2\2\2\u0935\u090d\3\2\2\2")
        buf.write("\u0935\u0915\3\2\2\2\u0935\u091b\3\2\2\2\u0935\u0934\3")
        buf.write("\2\2\2\u0936[\3\2\2\2\u0937\u0957\5H%\2\u0938\u093a\t")
        buf.write("\f\2\2\u0939\u0938\3\2\2\2\u093a\u093d\3\2\2\2\u093b\u0939")
        buf.write("\3\2\2\2\u093b\u093c\3\2\2\2\u093c\u093f\3\2\2\2\u093d")
        buf.write("\u093b\3\2\2\2\u093e\u0940\5^\60\2\u093f\u093e\3\2\2\2")
        buf.write("\u093f\u0940\3\2\2\2\u0940\u0958\3\2\2\2\u0941\u094b\7")
        buf.write("I\2\2\u0942\u094c\5(\25\2\u0943\u0948\7=\2\2\u0944\u0946")
        buf.write("\5X-\2\u0945\u0947\7_\2\2\u0946\u0945\3\2\2\2\u0946\u0947")
        buf.write("\3\2\2\2\u0947\u0949\3\2\2\2\u0948\u0944\3\2\2\2\u0948")
        buf.write("\u0949\3\2\2\2\u0949\u094a\3\2\2\2\u094a\u094c\7>\2\2")
        buf.write("\u094b\u0942\3\2\2\2\u094b\u0943\3\2\2\2\u094c\u0956\3")
        buf.write("\2\2\2\u094d\u0952\7=\2\2\u094e\u0950\5X-\2\u094f\u0951")
        buf.write("\7_\2\2\u0950\u094f\3\2\2\2\u0950\u0951\3\2\2\2\u0951")
        buf.write("\u0953\3\2\2\2\u0952\u094e\3\2\2\2\u0952\u0953\3\2\2\2")
        buf.write("\u0953\u0954\3\2\2\2\u0954\u0956\7>\2\2\u0955\u0941\3")
        buf.write("\2\2\2\u0955\u094d\3\2\2\2\u0955\u0956\3\2\2\2\u0956\u0958")
        buf.write("\3\2\2\2\u0957\u093b\3\2\2\2\u0957\u0955\3\2\2\2\u0958")
        buf.write("\u0965\3\2\2\2\u0959\u095b\7i\2\2\u095a\u0959\3\2\2\2")
        buf.write("\u095a\u095b\3\2\2\2\u095b\u095f\3\2\2\2\u095c\u095e\5")
        buf.write("D#\2\u095d\u095c\3\2\2\2\u095e\u0961\3\2\2\2\u095f\u095d")
        buf.write("\3\2\2\2\u095f\u0960\3\2\2\2\u0960\u0962\3\2\2\2\u0961")
        buf.write("\u095f\3\2\2\2\u0962\u0963\7c\2\2\u0963\u0965\5,\27\2")
        buf.write("\u0964\u0937\3\2\2\2\u0964\u095a\3\2\2\2\u0965]\3\2\2")
        buf.write("\2\u0966\u0967\7I\2\2\u0967\u0968\7l\2\2\u0968\u0969\b")
        buf.write("\60\1\2\u0969_\3\2\2\2\u096a\u096c\5D#\2\u096b\u096a\3")
        buf.write("\2\2\2\u096c\u096f\3\2\2\2\u096d\u096b\3\2\2\2\u096d\u096e")
        buf.write("\3\2\2\2\u096e\u0978\3\2\2\2\u096f\u096d\3\2\2\2\u0970")
        buf.write("\u0972\7\67\2\2\u0971\u0973\7&\2\2\u0972\u0971\3\2\2\2")
        buf.write("\u0972\u0973\3\2\2\2\u0973\u0979\3\2\2\2\u0974\u0976\7")
        buf.write("&\2\2\u0975\u0977\7\67\2\2\u0976\u0975\3\2\2\2\u0976\u0977")
        buf.write("\3\2\2\2\u0977\u0979\3\2\2\2\u0978\u0970\3\2\2\2\u0978")
        buf.write("\u0974\3\2\2\2\u0978\u0979\3\2\2\2\u0979\u0993\3\2\2\2")
        buf.write("\u097a\u097c\5\6\4\2\u097b\u097a\3\2\2\2\u097b\u097c\3")
        buf.write("\2\2\2\u097c\u097d\3\2\2\2\u097d\u0983\7i\2\2\u097e\u0980")
        buf.write("\7J\2\2\u097f\u0981\5f\64\2\u0980\u097f\3\2\2\2\u0980")
        buf.write("\u0981\3\2\2\2\u0981\u0982\3\2\2\2\u0982\u0984\7K\2\2")
        buf.write("\u0983\u097e\3\2\2\2\u0983\u0984\3\2\2\2\u0984\u0994\3")
        buf.write("\2\2\2\u0985\u0986\7\20\2\2\u0986\u0990\79\2\2\u0987\u098c")
        buf.write("\5(\25\2\u0988\u0989\7_\2\2\u0989\u098b\5(\25\2\u098a")
        buf.write("\u0988\3\2\2\2\u098b\u098e\3\2\2\2\u098c\u098a\3\2\2\2")
        buf.write("\u098c\u098d\3\2\2\2\u098d\u0991\3\2\2\2\u098e\u098c\3")
        buf.write("\2\2\2\u098f\u0991\7\b\2\2\u0990\u0987\3\2\2\2\u0990\u098f")
        buf.write("\3\2\2\2\u0991\u0992\3\2\2\2\u0992\u0994\7:\2\2\u0993")
        buf.write("\u097b\3\2\2\2\u0993\u0985\3\2\2\2\u0994a\3\2\2\2\u0995")
        buf.write("\u0997\5\6\4\2\u0996\u0995\3\2\2\2\u0996\u0997\3\2\2\2")
        buf.write("\u0997\u0998\3\2\2\2\u0998\u099e\7i\2\2\u0999\u099b\7")
        buf.write("J\2\2\u099a\u099c\5f\64\2\u099b\u099a\3\2\2\2\u099b\u099c")
        buf.write("\3\2\2\2\u099c\u099d\3\2\2\2\u099d\u099f\7K\2\2\u099e")
        buf.write("\u0999\3\2\2\2\u099e\u099f\3\2\2\2\u099f\u09b0\3\2\2\2")
        buf.write("\u09a0\u09a1\7\20\2\2\u09a1\u09ab\79\2\2\u09a2\u09a7\5")
        buf.write("(\25\2\u09a3\u09a4\7_\2\2\u09a4\u09a6\5(\25\2\u09a5\u09a3")
        buf.write("\3\2\2\2\u09a6\u09a9\3\2\2\2\u09a7\u09a5\3\2\2\2\u09a7")
        buf.write("\u09a8\3\2\2\2\u09a8\u09ac\3\2\2\2\u09a9\u09a7\3\2\2\2")
        buf.write("\u09aa\u09ac\7\b\2\2\u09ab\u09a2\3\2\2\2\u09ab\u09aa\3")
        buf.write("\2\2\2\u09ac\u09ad\3\2\2\2\u09ad\u09b0\7:\2\2\u09ae\u09b0")
        buf.write("\7i\2\2\u09af\u0996\3\2\2\2\u09af\u09a0\3\2\2\2\u09af")
        buf.write("\u09ae\3\2\2\2\u09b0\u09be\3\2\2\2\u09b1\u09b3\79\2\2")
        buf.write("\u09b2\u09b4\5X-\2\u09b3\u09b2\3\2\2\2\u09b3\u09b4\3\2")
        buf.write("\2\2\u09b4\u09b5\3\2\2\2\u09b5\u09bf\7:\2\2\u09b6\u09bb")
        buf.write("\7=\2\2\u09b7\u09b9\5X-\2\u09b8\u09ba\7_\2\2\u09b9\u09b8")
        buf.write("\3\2\2\2\u09b9\u09ba\3\2\2\2\u09ba\u09bc\3\2\2\2\u09bb")
        buf.write("\u09b7\3\2\2\2\u09bb\u09bc\3\2\2\2\u09bc\u09bd\3\2\2\2")
        buf.write("\u09bd\u09bf\7>\2\2\u09be\u09b1\3\2\2\2\u09be\u09b6\3")
        buf.write("\2\2\2\u09bf\u09c1\3\2\2\2\u09c0\u09c2\7h\2\2\u09c1\u09c0")
        buf.write("\3\2\2\2\u09c1\u09c2\3\2\2\2\u09c2\u09c5\3\2\2\2\u09c3")
        buf.write("\u09c4\7_\2\2\u09c4\u09c6\5b\62\2\u09c5\u09c3\3\2\2\2")
        buf.write("\u09c5\u09c6\3\2\2\2\u09c6c\3\2\2\2\u09c7\u09e0\t\20\2")
        buf.write("\2\u09c8\u09ca\7h\2\2\u09c9\u09c8\3\2\2\2\u09c9\u09ca")
        buf.write("\3\2\2\2\u09ca\u09cc\3\2\2\2\u09cb\u09cd\7i\2\2\u09cc")
        buf.write("\u09cb\3\2\2\2\u09cc\u09cd\3\2\2\2\u09cd\u09e1\3\2\2\2")
        buf.write("\u09ce\u09d0\7i\2\2\u09cf\u09ce\3\2\2\2\u09cf\u09d0\3")
        buf.write("\2\2\2\u09d0\u09d1\3\2\2\2\u09d1\u09d3\7I\2\2\u09d2\u09d4")
        buf.write("\5> \2\u09d3\u09d2\3\2\2\2\u09d4\u09d5\3\2\2\2\u09d5\u09d3")
        buf.write("\3\2\2\2\u09d5\u09d6\3\2\2\2\u09d6\u09da\3\2\2\2\u09d7")
        buf.write("\u09d9\5D#\2\u09d8\u09d7\3\2\2\2\u09d9\u09dc\3\2\2\2\u09da")
        buf.write("\u09d8\3\2\2\2\u09da\u09db\3\2\2\2\u09db\u09de\3\2\2\2")
        buf.write("\u09dc\u09da\3\2\2\2\u09dd\u09df\5P)\2\u09de\u09dd\3\2")
        buf.write("\2\2\u09de\u09df\3\2\2\2\u09df\u09e1\3\2\2\2\u09e0\u09c9")
        buf.write("\3\2\2\2\u09e0\u09cf\3\2\2\2\u09e1\u09fc\3\2\2\2\u09e2")
        buf.write("\u09e3\7.\2\2\u09e3\u09e4\7J\2\2\u09e4\u09e5\5d\63\2\u09e5")
        buf.write("\u09e6\7K\2\2\u09e6\u09f8\7\f\2\2\u09e7\u09e9\7h\2\2\u09e8")
        buf.write("\u09e7\3\2\2\2\u09e8\u09e9\3\2\2\2\u09e9\u09eb\3\2\2\2")
        buf.write("\u09ea\u09ec\7i\2\2\u09eb\u09ea\3\2\2\2\u09eb\u09ec\3")
        buf.write("\2\2\2\u09ec\u09f9\3\2\2\2\u09ed\u09ef\7i\2\2\u09ee\u09ed")
        buf.write("\3\2\2\2\u09ee\u09ef\3\2\2\2\u09ef\u09f0\3\2\2\2\u09f0")
        buf.write("\u09f5\7I\2\2\u09f1\u09f3\5\6\4\2\u09f2\u09f4\7.\2\2\u09f3")
        buf.write("\u09f2\3\2\2\2\u09f3\u09f4\3\2\2\2\u09f4\u09f6\3\2\2\2")
        buf.write("\u09f5\u09f1\3\2\2\2\u09f5\u09f6\3\2\2\2\u09f6\u09f7\3")
        buf.write("\2\2\2\u09f7\u09f9\5\4\3\2\u09f8\u09e8\3\2\2\2\u09f8\u09ee")
        buf.write("\3\2\2\2\u09f9\u09fc\3\2\2\2\u09fa\u09fc\5T+\2\u09fb\u09c7")
        buf.write("\3\2\2\2\u09fb\u09e2\3\2\2\2\u09fb\u09fa\3\2\2\2\u09fc")
        buf.write("\u0a36\3\2\2\2\u09fd\u0a32\7_\2\2\u09fe\u0a17\t\20\2\2")
        buf.write("\u09ff\u0a01\7h\2\2\u0a00\u09ff\3\2\2\2\u0a00\u0a01\3")
        buf.write("\2\2\2\u0a01\u0a03\3\2\2\2\u0a02\u0a04\7i\2\2\u0a03\u0a02")
        buf.write("\3\2\2\2\u0a03\u0a04\3\2\2\2\u0a04\u0a18\3\2\2\2\u0a05")
        buf.write("\u0a07\7i\2\2\u0a06\u0a05\3\2\2\2\u0a06\u0a07\3\2\2\2")
        buf.write("\u0a07\u0a08\3\2\2\2\u0a08\u0a0a\7I\2\2\u0a09\u0a0b\5")
        buf.write("> \2\u0a0a\u0a09\3\2\2\2\u0a0b\u0a0c\3\2\2\2\u0a0c\u0a0a")
        buf.write("\3\2\2\2\u0a0c\u0a0d\3\2\2\2\u0a0d\u0a11\3\2\2\2\u0a0e")
        buf.write("\u0a10\5D#\2\u0a0f\u0a0e\3\2\2\2\u0a10\u0a13\3\2\2\2\u0a11")
        buf.write("\u0a0f\3\2\2\2\u0a11\u0a12\3\2\2\2\u0a12\u0a15\3\2\2\2")
        buf.write("\u0a13\u0a11\3\2\2\2\u0a14\u0a16\5P)\2\u0a15\u0a14\3\2")
        buf.write("\2\2\u0a15\u0a16\3\2\2\2\u0a16\u0a18\3\2\2\2\u0a17\u0a00")
        buf.write("\3\2\2\2\u0a17\u0a06\3\2\2\2\u0a18\u0a33\3\2\2\2\u0a19")
        buf.write("\u0a1a\7.\2\2\u0a1a\u0a1b\7J\2\2\u0a1b\u0a1c\5d\63\2\u0a1c")
        buf.write("\u0a1d\7K\2\2\u0a1d\u0a2f\7\f\2\2\u0a1e\u0a20\7h\2\2\u0a1f")
        buf.write("\u0a1e\3\2\2\2\u0a1f\u0a20\3\2\2\2\u0a20\u0a22\3\2\2\2")
        buf.write("\u0a21\u0a23\7i\2\2\u0a22\u0a21\3\2\2\2\u0a22\u0a23\3")
        buf.write("\2\2\2\u0a23\u0a30\3\2\2\2\u0a24\u0a26\7i\2\2\u0a25\u0a24")
        buf.write("\3\2\2\2\u0a25\u0a26\3\2\2\2\u0a26\u0a27\3\2\2\2\u0a27")
        buf.write("\u0a2c\7I\2\2\u0a28\u0a2a\5\6\4\2\u0a29\u0a2b\7.\2\2\u0a2a")
        buf.write("\u0a29\3\2\2\2\u0a2a\u0a2b\3\2\2\2\u0a2b\u0a2d\3\2\2\2")
        buf.write("\u0a2c\u0a28\3\2\2\2\u0a2c\u0a2d\3\2\2\2\u0a2d\u0a2e\3")
        buf.write("\2\2\2\u0a2e\u0a30\5\4\3\2\u0a2f\u0a1f\3\2\2\2\u0a2f\u0a25")
        buf.write("\3\2\2\2\u0a30\u0a33\3\2\2\2\u0a31\u0a33\5T+\2\u0a32\u09fe")
        buf.write("\3\2\2\2\u0a32\u0a19\3\2\2\2\u0a32\u0a31\3\2\2\2\u0a33")
        buf.write("\u0a35\3\2\2\2\u0a34\u09fd\3\2\2\2\u0a35\u0a38\3\2\2\2")
        buf.write("\u0a36\u0a34\3\2\2\2\u0a36\u0a37\3\2\2\2\u0a37e\3\2\2")
        buf.write("\2\u0a38\u0a36\3\2\2\2\u0a39\u0a3b\5> \2\u0a3a\u0a39\3")
        buf.write("\2\2\2\u0a3b\u0a3c\3\2\2\2\u0a3c\u0a3a\3\2\2\2\u0a3c\u0a3d")
        buf.write("\3\2\2\2\u0a3d\u0a41\3\2\2\2\u0a3e\u0a40\5D#\2\u0a3f\u0a3e")
        buf.write("\3\2\2\2\u0a40\u0a43\3\2\2\2\u0a41\u0a3f\3\2\2\2\u0a41")
        buf.write("\u0a42\3\2\2\2\u0a42\u0a45\3\2\2\2\u0a43\u0a41\3\2\2\2")
        buf.write("\u0a44\u0a46\5P)\2\u0a45\u0a44\3\2\2\2\u0a45\u0a46\3\2")
        buf.write("\2\2\u0a46\u0a50\3\2\2\2\u0a47\u0a50\5,\27\2\u0a48\u0a4a")
        buf.write("\5\6\4\2\u0a49\u0a4b\7.\2\2\u0a4a\u0a49\3\2\2\2\u0a4a")
        buf.write("\u0a4b\3\2\2\2\u0a4b\u0a4d\3\2\2\2\u0a4c\u0a48\3\2\2\2")
        buf.write("\u0a4c\u0a4d\3\2\2\2\u0a4d\u0a4e\3\2\2\2\u0a4e\u0a50\5")
        buf.write("\4\3\2\u0a4f\u0a3a\3\2\2\2\u0a4f\u0a47\3\2\2\2\u0a4f\u0a4c")
        buf.write("\3\2\2\2\u0a50\u0a52\3\2\2\2\u0a51\u0a53\7h\2\2\u0a52")
        buf.write("\u0a51\3\2\2\2\u0a52\u0a53\3\2\2\2\u0a53\u0a72\3\2\2\2")
        buf.write("\u0a54\u0a6b\7_\2\2\u0a55\u0a57\5> \2\u0a56\u0a55\3\2")
        buf.write("\2\2\u0a57\u0a58\3\2\2\2\u0a58\u0a56\3\2\2\2\u0a58\u0a59")
        buf.write("\3\2\2\2\u0a59\u0a5d\3\2\2\2\u0a5a\u0a5c\5D#\2\u0a5b\u0a5a")
        buf.write("\3\2\2\2\u0a5c\u0a5f\3\2\2\2\u0a5d\u0a5b\3\2\2\2\u0a5d")
        buf.write("\u0a5e\3\2\2\2\u0a5e\u0a61\3\2\2\2\u0a5f\u0a5d\3\2\2\2")
        buf.write("\u0a60\u0a62\5P)\2\u0a61\u0a60\3\2\2\2\u0a61\u0a62\3\2")
        buf.write("\2\2\u0a62\u0a6c\3\2\2\2\u0a63\u0a6c\5,\27\2\u0a64\u0a66")
        buf.write("\5\6\4\2\u0a65\u0a67\7.\2\2\u0a66\u0a65\3\2\2\2\u0a66")
        buf.write("\u0a67\3\2\2\2\u0a67\u0a69\3\2\2\2\u0a68\u0a64\3\2\2\2")
        buf.write("\u0a68\u0a69\3\2\2\2\u0a69\u0a6a\3\2\2\2\u0a6a\u0a6c\5")
        buf.write("\4\3\2\u0a6b\u0a56\3\2\2\2\u0a6b\u0a63\3\2\2\2\u0a6b\u0a68")
        buf.write("\3\2\2\2\u0a6c\u0a6e\3\2\2\2\u0a6d\u0a6f\7h\2\2\u0a6e")
        buf.write("\u0a6d\3\2\2\2\u0a6e\u0a6f\3\2\2\2\u0a6f\u0a71\3\2\2\2")
        buf.write("\u0a70\u0a54\3\2\2\2\u0a71\u0a74\3\2\2\2\u0a72\u0a70\3")
        buf.write("\2\2\2\u0a72\u0a73\3\2\2\2\u0a73g\3\2\2\2\u0a74\u0a72")
        buf.write("\3\2\2\2\u0a75\u0a76\7\62\2\2\u0a76\u0a7a\7=\2\2\u0a77")
        buf.write("\u0a79\5.\30\2\u0a78\u0a77\3\2\2\2\u0a79\u0a7c\3\2\2\2")
        buf.write("\u0a7a\u0a78\3\2\2\2\u0a7a\u0a7b\3\2\2\2\u0a7b\u0a7d\3")
        buf.write("\2\2\2\u0a7c\u0a7a\3\2\2\2\u0a7d\u0a7f\7>\2\2\u0a7e\u0a80")
        buf.write("\5j\66\2\u0a7f\u0a7e\3\2\2\2\u0a80\u0a81\3\2\2\2\u0a81")
        buf.write("\u0a7f\3\2\2\2\u0a81\u0a82\3\2\2\2\u0a82i\3\2\2\2\u0a83")
        buf.write("\u0a84\7\13\2\2\u0a84\u0a9d\79\2\2\u0a85\u0a87\5D#\2\u0a86")
        buf.write("\u0a85\3\2\2\2\u0a87\u0a8a\3\2\2\2\u0a88\u0a86\3\2\2\2")
        buf.write("\u0a88\u0a89\3\2\2\2\u0a89\u0a8c\3\2\2\2\u0a8a\u0a88\3")
        buf.write("\2\2\2\u0a8b\u0a8d\5> \2\u0a8c\u0a8b\3\2\2\2\u0a8d\u0a8e")
        buf.write("\3\2\2\2\u0a8e\u0a8c\3\2\2\2\u0a8e\u0a8f\3\2\2\2\u0a8f")
        buf.write("\u0a93\3\2\2\2\u0a90\u0a92\5D#\2\u0a91\u0a90\3\2\2\2\u0a92")
        buf.write("\u0a95\3\2\2\2\u0a93\u0a91\3\2\2\2\u0a93\u0a94\3\2\2\2")
        buf.write("\u0a94\u0a9a\3\2\2\2\u0a95\u0a93\3\2\2\2\u0a96\u0a9b\5")
        buf.write("H%\2\u0a97\u0a99\5P)\2\u0a98\u0a97\3\2\2\2\u0a98\u0a99")
        buf.write("\3\2\2\2\u0a99\u0a9b\3\2\2\2\u0a9a\u0a96\3\2\2\2\u0a9a")
        buf.write("\u0a98\3\2\2\2\u0a9b\u0a9e\3\2\2\2\u0a9c\u0a9e\7h\2\2")
        buf.write("\u0a9d\u0a88\3\2\2\2\u0a9d\u0a9c\3\2\2\2\u0a9e\u0a9f\3")
        buf.write("\2\2\2\u0a9f\u0aa0\7:\2\2\u0aa0\u0aa4\7=\2\2\u0aa1\u0aa3")
        buf.write("\5.\30\2\u0aa2\u0aa1\3\2\2\2\u0aa3\u0aa6\3\2\2\2\u0aa4")
        buf.write("\u0aa2\3\2\2\2\u0aa4\u0aa5\3\2\2\2\u0aa5\u0aa7\3\2\2\2")
        buf.write("\u0aa6\u0aa4\3\2\2\2\u0aa7\u0aa8\7>\2\2\u0aa8k\3\2\2\2")
        buf.write("\u0aa9\u0ade\7!\2\2\u0aaa\u0ade\7\22\2\2\u0aab\u0aac\7")
        buf.write("!\2\2\u0aac\u0aad\7;\2\2\u0aad\u0ade\7<\2\2\u0aae\u0aaf")
        buf.write("\7\22\2\2\u0aaf\u0ab0\7;\2\2\u0ab0\u0ade\7<\2\2\u0ab1")
        buf.write("\u0ade\7?\2\2\u0ab2\u0ade\7@\2\2\u0ab3\u0ade\7A\2\2\u0ab4")
        buf.write("\u0ade\7B\2\2\u0ab5\u0ade\7C\2\2\u0ab6\u0ade\7D\2\2\u0ab7")
        buf.write("\u0ade\7E\2\2\u0ab8\u0ade\7F\2\2\u0ab9\u0ade\7G\2\2\u0aba")
        buf.write("\u0ade\7H\2\2\u0abb\u0ade\7I\2\2\u0abc\u0ade\7J\2\2\u0abd")
        buf.write("\u0ade\7K\2\2\u0abe\u0ade\7L\2\2\u0abf\u0ade\7M\2\2\u0ac0")
        buf.write("\u0ade\7N\2\2\u0ac1\u0ade\7O\2\2\u0ac2\u0ade\7P\2\2\u0ac3")
        buf.write("\u0ade\7Q\2\2\u0ac4\u0ade\7R\2\2\u0ac5\u0ade\7S\2\2\u0ac6")
        buf.write("\u0ade\7T\2\2\u0ac7\u0ac8\7K\2\2\u0ac8\u0aca\7K\2\2\u0ac9")
        buf.write("\u0acb\7I\2\2\u0aca\u0ac9\3\2\2\2\u0aca\u0acb\3\2\2\2")
        buf.write("\u0acb\u0ade\3\2\2\2\u0acc\u0ade\7U\2\2\u0acd\u0ade\7")
        buf.write("V\2\2\u0ace\u0ade\7W\2\2\u0acf\u0ade\7X\2\2\u0ad0\u0ade")
        buf.write("\7Y\2\2\u0ad1\u0ade\7Z\2\2\u0ad2\u0ade\7[\2\2\u0ad3\u0ade")
        buf.write("\7\\\2\2\u0ad4\u0ade\7]\2\2\u0ad5\u0ade\7_\2\2\u0ad6\u0ade")
        buf.write("\7`\2\2\u0ad7\u0ade\7a\2\2\u0ad8\u0ad9\79\2\2\u0ad9\u0ade")
        buf.write("\7:\2\2\u0ada\u0adb\7;\2\2\u0adb\u0ade\7<\2\2\u0adc\u0ade")
        buf.write("\7^\2\2\u0add\u0aa9\3\2\2\2\u0add\u0aaa\3\2\2\2\u0add")
        buf.write("\u0aab\3\2\2\2\u0add\u0aae\3\2\2\2\u0add\u0ab1\3\2\2\2")
        buf.write("\u0add\u0ab2\3\2\2\2\u0add\u0ab3\3\2\2\2\u0add\u0ab4\3")
        buf.write("\2\2\2\u0add\u0ab5\3\2\2\2\u0add\u0ab6\3\2\2\2\u0add\u0ab7")
        buf.write("\3\2\2\2\u0add\u0ab8\3\2\2\2\u0add\u0ab9\3\2\2\2\u0add")
        buf.write("\u0aba\3\2\2\2\u0add\u0abb\3\2\2\2\u0add\u0abc\3\2\2\2")
        buf.write("\u0add\u0abd\3\2\2\2\u0add\u0abe\3\2\2\2\u0add\u0abf\3")
        buf.write("\2\2\2\u0add\u0ac0\3\2\2\2\u0add\u0ac1\3\2\2\2\u0add\u0ac2")
        buf.write("\3\2\2\2\u0add\u0ac3\3\2\2\2\u0add\u0ac4\3\2\2\2\u0add")
        buf.write("\u0ac5\3\2\2\2\u0add\u0ac6\3\2\2\2\u0add\u0ac7\3\2\2\2")
        buf.write("\u0add\u0acc\3\2\2\2\u0add\u0acd\3\2\2\2\u0add\u0ace\3")
        buf.write("\2\2\2\u0add\u0acf\3\2\2\2\u0add\u0ad0\3\2\2\2\u0add\u0ad1")
        buf.write("\3\2\2\2\u0add\u0ad2\3\2\2\2\u0add\u0ad3\3\2\2\2\u0add")
        buf.write("\u0ad4\3\2\2\2\u0add\u0ad5\3\2\2\2\u0add\u0ad6\3\2\2\2")
        buf.write("\u0add\u0ad7\3\2\2\2\u0add\u0ad8\3\2\2\2\u0add\u0ada\3")
        buf.write("\2\2\2\u0add\u0adc\3\2\2\2\u0adem\3\2\2\2\u020fqw|\177")
        buf.write("\u0086\u008a\u008d\u0092\u0097\u009d\u00a0\u00aa\u00ae")
        buf.write("\u00b1\u00b6\u00b9\u00c2\u00c6\u00c9\u00ce\u00d3\u00d6")
        buf.write("\u00db\u00e4\u00e7\u00ea\u00f1\u00f7\u00fb\u0102\u0107")
        buf.write("\u010b\u010e\u0114\u0119\u011d\u0120\u0124\u0127\u012f")
        buf.write("\u0131\u0136\u013d\u0142\u0146\u0148\u0150\u0156\u0158")
        buf.write("\u015b\u0160\u0165\u0169\u016b\u016f\u0171\u017d\u017f")
        buf.write("\u0186\u018a\u018d\u0190\u0194\u0198\u019c\u019f\u01a2")
        buf.write("\u01a6\u01aa\u01ad\u01b0\u01b4\u01b7\u01bb\u01c1\u01c8")
        buf.write("\u01ce\u01d0\u01d3\u01d9\u01de\u01e1\u01e5\u01eb\u01ed")
        buf.write("\u01f0\u01f7\u01fc\u0200\u0204\u020c\u0218\u0221\u0226")
        buf.write("\u022a\u022e\u0230\u0235\u0239\u023e\u0241\u0244\u024b")
        buf.write("\u0250\u0256\u0259\u0263\u0267\u026a\u0276\u027b\u027f")
        buf.write("\u0287\u028e\u0293\u0297\u02a2\u02a9\u02ae\u02b8\u02be")
        buf.write("\u02c2\u02c9\u02ce\u02d3\u02d7\u02dd\u02e2\u02e6\u02ea")
        buf.write("\u02ee\u02f4\u02f6\u02f9\u02fd\u0305\u030c\u0315\u031a")
        buf.write("\u031d\u0320\u0325\u032d\u0332\u0336\u033c\u034c\u0351")
        buf.write("\u035c\u0367\u036f\u0378\u0383\u038e\u0396\u0398\u039b")
        buf.write("\u039d\u03a3\u03a5\u03b4\u03bb\u03c0\u03c5\u03cf\u03d8")
        buf.write("\u03db\u03e2\u03ec\u03f7\u0401\u0409\u040c\u0411\u041c")
        buf.write("\u0422\u0424\u0427\u0429\u0436\u0439\u043e\u0440\u0443")
        buf.write("\u044a\u044f\u0454\u0457\u045b\u0460\u0464\u046a\u046e")
        buf.write("\u0473\u0477\u047a\u0486\u048d\u0490\u0497\u049e\u04a3")
        buf.write("\u04a7\u04a9\u04b7\u04bc\u04c4\u04c9\u04cc\u04cf\u04d4")
        buf.write("\u04e1\u04e7\u04ef\u04f4\u04f6\u04f9\u04fb\u0502\u0505")
        buf.write("\u0508\u050c\u0511\u0515\u0518\u051d\u0520\u0524\u0529")
        buf.write("\u052d\u0530\u0539\u053d\u0542\u0546\u0549\u054f\u0552")
        buf.write("\u0556\u055b\u055f\u0562\u0569\u056f\u0574\u057a\u057f")
        buf.write("\u0585\u058c\u0592\u0599\u059e\u05a0\u05ab\u05b2\u05b5")
        buf.write("\u05bc\u05c3\u05c8\u05cc\u05ce\u05dc\u05e1\u05e9\u05ee")
        buf.write("\u05f1\u05f7\u05fb\u05fe\u0607\u060c\u060f\u0613\u0619")
        buf.write("\u061e\u0626\u0628\u062d\u0635\u0639\u063e\u0641\u0644")
        buf.write("\u0646\u064b\u0650\u0654\u0657\u065d\u0662\u0667\u066b")
        buf.write("\u066e\u0674\u0679\u067c\u0682\u0688\u068c\u0690\u0693")
        buf.write("\u069a\u069e\u06a3\u06a5\u06aa\u06ad\u06b1\u06b8\u06bd")
        buf.write("\u06c0\u06c3\u06c6\u06cb\u06ce\u06d5\u06e3\u06e7\u06ea")
        buf.write("\u06f1\u06f7\u06fb\u06fe\u0700\u0706\u070c\u0710\u0713")
        buf.write("\u0715\u0719\u0723\u0728\u072c\u072f\u0732\u0736\u073c")
        buf.write("\u0744\u074c\u0750\u0755\u075f\u0764\u0768\u076a\u076e")
        buf.write("\u0772\u0774\u077a\u0781\u0787\u078d\u0793\u0796\u079a")
        buf.write("\u07a3\u07a6\u07a9\u07b0\u07b6\u07bc\u07c0\u07c7\u07cc")
        buf.write("\u07d0\u07d3\u07d9\u07de\u07e2\u07e5\u07e9\u07ec\u07f4")
        buf.write("\u07f6\u07fb\u07ff\u0805\u080b\u0812\u0815\u0818\u081f")
        buf.write("\u0824\u0829\u082f\u0837\u083d\u0840\u0842\u0845\u084b")
        buf.write("\u0851\u0858\u085e\u0864\u086a\u086d\u0871\u0877\u087d")
        buf.write("\u0884\u0886\u0889\u088b\u0890\u0895\u0897\u089e\u08a4")
        buf.write("\u08a6\u08a9\u08ac\u08b3\u08b5\u08b8\u08bb\u08bf\u08c5")
        buf.write("\u08c9\u08d0\u08d3\u08da\u08df\u08e5\u08ec\u08f2\u08f9")
        buf.write("\u08fe\u0900\u0904\u0908\u0920\u0927\u092c\u0930\u0935")
        buf.write("\u093b\u093f\u0946\u0948\u094b\u0950\u0952\u0955\u0957")
        buf.write("\u095a\u095f\u0964\u096d\u0972\u0976\u0978\u097b\u0980")
        buf.write("\u0983\u098c\u0990\u0993\u0996\u099b\u099e\u09a7\u09ab")
        buf.write("\u09af\u09b3\u09b9\u09bb\u09be\u09c1\u09c5\u09c9\u09cc")
        buf.write("\u09cf\u09d5\u09da\u09de\u09e0\u09e8\u09eb\u09ee\u09f3")
        buf.write("\u09f5\u09f8\u09fb\u0a00\u0a03\u0a06\u0a0c\u0a11\u0a15")
        buf.write("\u0a17\u0a1f\u0a22\u0a25\u0a2a\u0a2c\u0a2f\u0a32\u0a36")
        buf.write("\u0a3c\u0a41\u0a45\u0a4a\u0a4c\u0a4f\u0a52\u0a58\u0a5d")
        buf.write("\u0a61\u0a66\u0a68\u0a6b\u0a6e\u0a72\u0a7a\u0a81\u0a88")
        buf.write("\u0a8e\u0a93\u0a98\u0a9a\u0a9d\u0aa4\u0aca\u0add")
        return buf.getvalue()


class CPP14Parser(Parser):
    grammarFileName = "CPP14.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = ["<INVALID>", "<INVALID>", "<INVALID>", "'alignas'",
                    "'alignof'", "'asm'", "'auto'", "'break'", "'case'",
                    "'catch'", "'class'", "<INVALID>", "<INVALID>", "'continue'",
                    "'decltype'", "'default'", "'delete'", "'do'", "'else'",
                    "'enum'", "'export'", "'extern'", "<INVALID>", "'final'",
                    "'for'", "'goto'", "'if'", "'inline'", "<INVALID>",
                    "'mutable'", "'namespace'", "'new'", "'noexcept'",
                    "'nullptr'", "'operator'", "'override'", "<INVALID>",
                    "<INVALID>", "'return'", "<INVALID>", "'sizeof'", "'static_assert'",
                    "'struct'", "'switch'", "'template'", "'this'", "'throw'",
                    "'true'", "'try'", "'typeid'", "'typename'", "'union'",
                    "'using'", "'virtual'", "'while'", "'('", "')'", "'['",
                    "']'", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'%'",
                    "'^'", "'&'", "'|'", "'~'", "'!'", "'='", "'<'", "'>'",
                    "'+='", "'-='", "'*='", "'/='", "'%='", "'^='", "'&='",
                    "'|='", "'<<'", "'<<='", "'=='", "'!='", "'<='", "'>='",
                    "'&&'", "'||'", "'++'", "'--'", "'?:'", "','", "'->*'",
                    "'->'", "'?'", "':'", "'::'", "';'", "'.'", "'.*'",
                    "'...'"]

    symbolicNames = ["<INVALID>", "MultiLineMacro", "Directive", "Alignas",
                     "Alignof", "Asm", "Auto", "Break", "Case", "Catch",
                     "Class", "ConstOrVolatile", "Cast", "Continue", "Decltype",
                     "Default", "Delete", "Do", "Else", "Enum", "Export",
                     "Extern", "TrueFalse", "Final", "For", "Goto", "If",
                     "Inline", "Types", "Mutable", "Namespace", "New",
                     "Noexcept", "Nullptr", "Operator", "Override", "PrivateProtectedPublic",
                     "Specifier", "Return", "SignedUnsigned", "Sizeof",
                     "Static_assert", "Struct", "Switch", "Template", "This",
                     "Throw", "TrueToken", "Try", "Typeid", "Typename",
                     "Union", "Using", "Virtual", "While", "LeftParen",
                     "RightParen", "LeftBracket", "RightBracket", "LeftBrace",
                     "RightBrace", "Plus", "Minus", "Star", "Div", "Mod",
                     "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less",
                     "Greater", "PlusAssign", "MinusAssign", "StarAssign",
                     "DivAssign", "ModAssign", "XorAssign", "AndAssign",
                     "OrAssign", "LeftShift", "LeftShiftAssign", "Equal",
                     "NotEqual", "LessEqual", "GreaterEqual", "AndAnd",
                     "OrOr", "PlusPlus", "MinusMinus", "UnaryCondition",
                     "Comma", "ArrowStar", "Arrow", "Question", "Colon",
                     "Doublecolon", "Semi", "Dot", "DotStar", "Ellipsis",
                     "Identifier", "Numberliteral", "Decimalliteral", "Octalliteral",
                     "Hexadecimalliteral", "Binaryliteral", "Integersuffix",
                     "Characterliteral", "Stringliteral", "Userdefinedliteral",
                     "Userdefinedstringliteral", "Whitespace", "Newline",
                     "BlockComment", "LineComment"]

    RULE_translationunit = 0
    RULE_unqualifiedid = 1
    RULE_nestednamespecifier = 2
    RULE_lambdadeclarator = 3
    RULE_postfix = 4
    RULE_postfixexpression = 5
    RULE_pseudodestructorname = 6
    RULE_unaryexpression = 7
    RULE_unaryincdecexpression = 8
    RULE_postfixunaryincdecexpression = 9
    RULE_newexpression = 10
    RULE_newdeclarator = 11
    RULE_deleteexpression = 12
    RULE_castexpression = 13
    RULE_shiftexpression = 14
    RULE_relationalexpression = 15
    RULE_equalityexpression = 16
    RULE_ternaryconditionalexpression = 17
    RULE_unaryconditionalexpression = 18
    RULE_assignmentexpression = 19
    RULE_assignmentoperator = 20
    RULE_constantexpression = 21
    RULE_statement = 22
    RULE_casestatement = 23
    RULE_elsestatement = 24
    RULE_condition = 25
    RULE_forinitstatement = 26
    RULE_gotostatement = 27
    RULE_declaration = 28
    RULE_declspecifierseq = 29
    RULE_typespecifier = 30
    RULE_trailingtypespecifier = 31
    RULE_simpletypespecifier = 32
    RULE_attributespecifier = 33
    RULE_balancedtoken = 34
    RULE_declarator = 35
    RULE_noptrdeclarator = 36
    RULE_parametersandqualifiers = 37
    RULE_ptroperator = 38
    RULE_abstractdeclarator = 39
    RULE_noptrabstractdeclarator = 40
    RULE_parameterdeclaration = 41
    RULE_initializer = 42
    RULE_initializerlist = 43
    RULE_memberdeclaration = 44
    RULE_memberdeclarator = 45
    RULE_purespecifier = 46
    RULE_basespecifier = 47
    RULE_meminitializerlist = 48
    RULE_templateparameterlist = 49
    RULE_templateargumentlist = 50
    RULE_tryblock = 51
    RULE_handler = 52
    RULE_theoperator = 53

    ruleNames = ["translationunit", "unqualifiedid", "nestednamespecifier",
                 "lambdadeclarator", "postfix", "postfixexpression", "pseudodestructorname",
                 "unaryexpression", "unaryincdecexpression", "postfixunaryincdecexpression",
                 "newexpression", "newdeclarator", "deleteexpression",
                 "castexpression", "shiftexpression", "relationalexpression",
                 "equalityexpression", "ternaryconditionalexpression",
                 "unaryconditionalexpression", "assignmentexpression",
                 "assignmentoperator", "constantexpression", "statement",
                 "casestatement", "elsestatement", "condition", "forinitstatement",
                 "gotostatement", "declaration", "declspecifierseq", "typespecifier",
                 "trailingtypespecifier", "simpletypespecifier", "attributespecifier",
                 "balancedtoken", "declarator", "noptrdeclarator", "parametersandqualifiers",
                 "ptroperator", "abstractdeclarator", "noptrabstractdeclarator",
                 "parameterdeclaration", "initializer", "initializerlist",
                 "memberdeclaration", "memberdeclarator", "purespecifier",
                 "basespecifier", "meminitializerlist", "templateparameterlist",
                 "templateargumentlist", "tryblock", "handler", "theoperator"]

    EOF = Token.EOF
    MultiLineMacro = 1
    Directive = 2
    Alignas = 3
    Alignof = 4
    Asm = 5
    Auto = 6
    Break = 7
    Case = 8
    Catch = 9
    Class = 10
    ConstOrVolatile = 11
    Cast = 12
    Continue = 13
    Decltype = 14
    Default = 15
    Delete = 16
    Do = 17
    Else = 18
    Enum = 19
    Export = 20
    Extern = 21
    TrueFalse = 22
    Final = 23
    For = 24
    Goto = 25
    If = 26
    Inline = 27
    Types = 28
    Mutable = 29
    Namespace = 30
    New = 31
    Noexcept = 32
    Nullptr = 33
    Operator = 34
    Override = 35
    PrivateProtectedPublic = 36
    Specifier = 37
    Return = 38
    SignedUnsigned = 39
    Sizeof = 40
    Static_assert = 41
    Struct = 42
    Switch = 43
    Template = 44
    This = 45
    Throw = 46
    TrueToken = 47
    Try = 48
    Typeid = 49
    Typename = 50
    Union = 51
    Using = 52
    Virtual = 53
    While = 54
    LeftParen = 55
    RightParen = 56
    LeftBracket = 57
    RightBracket = 58
    LeftBrace = 59
    RightBrace = 60
    Plus = 61
    Minus = 62
    Star = 63
    Div = 64
    Mod = 65
    Caret = 66
    And = 67
    Or = 68
    Tilde = 69
    Not = 70
    Assign = 71
    Less = 72
    Greater = 73
    PlusAssign = 74
    MinusAssign = 75
    StarAssign = 76
    DivAssign = 77
    ModAssign = 78
    XorAssign = 79
    AndAssign = 80
    OrAssign = 81
    LeftShift = 82
    LeftShiftAssign = 83
    Equal = 84
    NotEqual = 85
    LessEqual = 86
    GreaterEqual = 87
    AndAnd = 88
    OrOr = 89
    PlusPlus = 90
    MinusMinus = 91
    UnaryCondition = 92
    Comma = 93
    ArrowStar = 94
    Arrow = 95
    Question = 96
    Colon = 97
    Doublecolon = 98
    Semi = 99
    Dot = 100
    DotStar = 101
    Ellipsis = 102
    Identifier = 103
    Numberliteral = 104
    Decimalliteral = 105
    Octalliteral = 106
    Hexadecimalliteral = 107
    Binaryliteral = 108
    Integersuffix = 109
    Characterliteral = 110
    Stringliteral = 111
    Userdefinedliteral = 112
    Userdefinedstringliteral = 113
    Whitespace = 114
    Newline = 115
    BlockComment = 116
    LineComment = 117

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class TranslationunitContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CPP14Parser.EOF, 0)

        def declaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclarationContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_translationunit

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTranslationunit"):
                listener.enterTranslationunit(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTranslationunit"):
                listener.exitTranslationunit(self)

    def translationunit(self):

        localctx = CPP14Parser.TranslationunitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationunit)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (
                1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (
                1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                1 << CPP14Parser.Template) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.LeftParen) | (
                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and (
                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Semi - 67)) | (
                1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                self.state = 108
                self.declaration()
                self.state = 113
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 114
            self.match(CPP14Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnqualifiedidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def theoperator(self):
            return self.getTypedRuleContext(CPP14Parser.TheoperatorContext, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def ptroperator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PtroperatorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, i)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unqualifiedid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnqualifiedid"):
                listener.enterUnqualifiedid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnqualifiedid"):
                listener.exitUnqualifiedid(self)

    def unqualifiedid(self):

        localctx = CPP14Parser.UnqualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_unqualifiedid)
        self._la = 0  # Token type
        try:
            self.state = 175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Tilde:
                    self.state = 116
                    self.match(CPP14Parser.Tilde)

                self.state = 119
                self.match(CPP14Parser.Identifier)
                self.state = 125
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 3, self._ctx)
                if la_ == 1:
                    self.state = 120
                    self.match(CPP14Parser.Less)
                    self.state = 122
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                        1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 121
                        self.templateargumentlist()

                    self.state = 124
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 127
                self.match(CPP14Parser.Operator)
                self.state = 158
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Delete, CPP14Parser.New, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                             CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.Div, CPP14Parser.Mod,
                             CPP14Parser.Caret, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                             CPP14Parser.Assign, CPP14Parser.Less, CPP14Parser.Greater, CPP14Parser.PlusAssign,
                             CPP14Parser.MinusAssign, CPP14Parser.StarAssign, CPP14Parser.DivAssign,
                             CPP14Parser.ModAssign, CPP14Parser.XorAssign, CPP14Parser.AndAssign, CPP14Parser.OrAssign,
                             CPP14Parser.LeftShift, CPP14Parser.LeftShiftAssign, CPP14Parser.Equal,
                             CPP14Parser.NotEqual, CPP14Parser.LessEqual, CPP14Parser.GreaterEqual, CPP14Parser.AndAnd,
                             CPP14Parser.OrOr, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.UnaryCondition,
                             CPP14Parser.Comma, CPP14Parser.ArrowStar, CPP14Parser.Arrow, CPP14Parser.Stringliteral,
                             CPP14Parser.Userdefinedstringliteral]:
                    self.state = 132
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Delete, CPP14Parser.New, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                                 CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.Div,
                                 CPP14Parser.Mod, CPP14Parser.Caret, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde,
                                 CPP14Parser.Not, CPP14Parser.Assign, CPP14Parser.Less, CPP14Parser.Greater,
                                 CPP14Parser.PlusAssign, CPP14Parser.MinusAssign, CPP14Parser.StarAssign,
                                 CPP14Parser.DivAssign, CPP14Parser.ModAssign, CPP14Parser.XorAssign,
                                 CPP14Parser.AndAssign, CPP14Parser.OrAssign, CPP14Parser.LeftShift,
                                 CPP14Parser.LeftShiftAssign, CPP14Parser.Equal, CPP14Parser.NotEqual,
                                 CPP14Parser.LessEqual, CPP14Parser.GreaterEqual, CPP14Parser.AndAnd, CPP14Parser.OrOr,
                                 CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.UnaryCondition,
                                 CPP14Parser.Comma, CPP14Parser.ArrowStar, CPP14Parser.Arrow]:
                        self.state = 128
                        self.theoperator()
                        pass
                    elif token in [CPP14Parser.Stringliteral]:
                        self.state = 129
                        self.match(CPP14Parser.Stringliteral)
                        self.state = 130
                        self.match(CPP14Parser.Identifier)
                        pass
                    elif token in [CPP14Parser.Userdefinedstringliteral]:
                        self.state = 131
                        self.match(CPP14Parser.Userdefinedstringliteral)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 139
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 6, self._ctx)
                    if la_ == 1:
                        self.state = 134
                        self.match(CPP14Parser.Less)
                        self.state = 136
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                            1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                            1 << CPP14Parser.Enum) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                            1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                            1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                            1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                            1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                            1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                            1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 135
                            self.templateargumentlist()

                        self.state = 138
                        self.match(CPP14Parser.Greater)

                    pass
                elif token in [CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile, CPP14Parser.Decltype,
                               CPP14Parser.Enum, CPP14Parser.Types, CPP14Parser.SignedUnsigned, CPP14Parser.Struct,
                               CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Identifier]:
                    self.state = 142
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 141
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 144
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 7, self._ctx)

                    self.state = 149
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 8, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 146
                            self.attributespecifier()
                        self.state = 151
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 8, self._ctx)

                    self.state = 155
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 152
                            self.ptroperator()
                        self.state = 157
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 160
                self.match(CPP14Parser.Tilde)
                self.state = 161
                self.match(CPP14Parser.Decltype)
                self.state = 162
                self.match(CPP14Parser.LeftParen)
                self.state = 172
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 12, self._ctx)
                if la_ == 1:
                    self.state = 163
                    self.assignmentexpression()
                    self.state = 168
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 164
                        self.match(CPP14Parser.Comma)
                        self.state = 165
                        self.assignmentexpression()
                        self.state = 170
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 171
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 174
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestednamespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def templateargumentlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, i)

        def Template(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Template)
            else:
                return self.getToken(CPP14Parser.Template, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_nestednamespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNestednamespecifier"):
                listener.enterNestednamespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNestednamespecifier"):
                listener.exitNestednamespecifier(self)

    def nestednamespecifier(self):

        localctx = CPP14Parser.NestednamespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_nestednamespecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Identifier]:
                self.state = 177
                self.match(CPP14Parser.Identifier)
                self.state = 183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Less:
                    self.state = 178
                    self.match(CPP14Parser.Less)
                    self.state = 180
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                        1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 179
                        self.templateargumentlist()

                    self.state = 182
                    self.match(CPP14Parser.Greater)

                pass
            elif token in [CPP14Parser.Decltype]:
                self.state = 185
                self.match(CPP14Parser.Decltype)
                self.state = 186
                self.match(CPP14Parser.LeftParen)
                self.state = 196
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 17, self._ctx)
                if la_ == 1:
                    self.state = 187
                    self.assignmentexpression()
                    self.state = 192
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 188
                        self.match(CPP14Parser.Comma)
                        self.state = 189
                        self.assignmentexpression()
                        self.state = 194
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 195
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 198
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 201
            self.match(CPP14Parser.Doublecolon)
            self.state = 217
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 22, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 212
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 21, self._ctx)
                    if la_ == 1:
                        self.state = 202
                        self.match(CPP14Parser.Identifier)
                        pass

                    elif la_ == 2:
                        self.state = 204
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 203
                            self.match(CPP14Parser.Template)

                        self.state = 206
                        self.match(CPP14Parser.Identifier)
                        self.state = 207
                        self.match(CPP14Parser.Less)
                        self.state = 209
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                            1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                            1 << CPP14Parser.Enum) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                            1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                            1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                            1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                            1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                            1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                            1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 208
                            self.templateargumentlist()

                        self.state = 211
                        self.match(CPP14Parser.Greater)
                        pass

                    self.state = 214
                    self.match(CPP14Parser.Doublecolon)
                self.state = 219
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 22, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdadeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ParameterdeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, i)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def trailingtypespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TrailingtypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, i)

        def abstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AbstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdadeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambdadeclarator"):
                listener.enterLambdadeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambdadeclarator"):
                listener.exitLambdadeclarator(self)

    def lambdadeclarator(self):

        localctx = CPP14Parser.LambdadeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_lambdadeclarator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.match(CPP14Parser.LeftParen)
            self.state = 245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 27, self._ctx)
            if la_ == 1:
                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Specifier) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Typename) | (
                    1 << CPP14Parser.Union) | (1 << CPP14Parser.Virtual) | (
                    1 << CPP14Parser.LeftBracket))) != 0) or _la == CPP14Parser.Identifier:
                    self.state = 221
                    self.parameterdeclaration()
                    self.state = 226
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 222
                        self.match(CPP14Parser.Comma)
                        self.state = 223
                        self.parameterdeclaration()
                        self.state = 228
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 231
                    self.match(CPP14Parser.Ellipsis)

                pass

            elif la_ == 2:
                self.state = 234
                self.parameterdeclaration()
                self.state = 239
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 26, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 235
                        self.match(CPP14Parser.Comma)
                        self.state = 236
                        self.parameterdeclaration()
                    self.state = 241
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 26, self._ctx)

                self.state = 242
                self.match(CPP14Parser.Comma)
                self.state = 243
                self.match(CPP14Parser.Ellipsis)
                pass

            self.state = 247
            self.match(CPP14Parser.RightParen)
            self.state = 249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Mutable:
                self.state = 248
                self.match(CPP14Parser.Mutable)

            self.state = 303
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Throw]:
                self.state = 251
                self.match(CPP14Parser.Throw)
                self.state = 252
                self.match(CPP14Parser.LeftParen)
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.Types) | (1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union))) != 0) or _la == CPP14Parser.Identifier:
                    self.state = 254
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 253
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 256
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 29, self._ctx)

                    self.state = 261
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 30, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 258
                            self.attributespecifier()
                        self.state = 263
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 30, self._ctx)

                    self.state = 265
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 31, self._ctx)
                    if la_ == 1:
                        self.state = 264
                        self.abstractdeclarator()

                    self.state = 268
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 267
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 290
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 270
                        self.match(CPP14Parser.Comma)
                        self.state = 272
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 271
                                self.typespecifier()

                            else:
                                raise NoViableAltException(self)
                            self.state = 274
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 33, self._ctx)

                        self.state = 279
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 34, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 276
                                self.attributespecifier()
                            self.state = 281
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 34, self._ctx)

                        self.state = 283
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 35, self._ctx)
                        if la_ == 1:
                            self.state = 282
                            self.abstractdeclarator()

                        self.state = 286
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 285
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 292
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 295
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.Noexcept]:
                self.state = 296
                self.match(CPP14Parser.Noexcept)
                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.LeftParen:
                    self.state = 297
                    self.match(CPP14Parser.LeftParen)
                    self.state = 298
                    self.constantexpression()
                    self.state = 299
                    self.match(CPP14Parser.RightParen)

                pass
            elif token in [CPP14Parser.Alignas, CPP14Parser.LeftBracket, CPP14Parser.LeftBrace, CPP14Parser.Arrow]:
                pass
            else:
                pass
            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 305
                self.attributespecifier()
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Arrow:
                self.state = 311
                self.match(CPP14Parser.Arrow)
                self.state = 313
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 312
                        self.trailingtypespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 315
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 42, self._ctx)

                self.state = 320
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 43, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 317
                        self.attributespecifier()
                    self.state = 322
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 43, self._ctx)

                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                            (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                        1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 323
                    self.abstractdeclarator()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def pseudodestructorname(self):
            return self.getTypedRuleContext(CPP14Parser.PseudodestructornameContext, 0)

        def Template(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Template)
            else:
                return self.getToken(CPP14Parser.Template, i)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_postfix

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPostfix"):
                listener.enterPostfix(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPostfix"):
                listener.exitPostfix(self)

    def postfix(self):

        localctx = CPP14Parser.PostfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_postfix)
        self._la = 0  # Token type
        try:
            self.state = 367
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 328
                self.match(CPP14Parser.LeftBracket)
                self.state = 345
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                             CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                             CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                             CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                             CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                             CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                             CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                             CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Numberliteral,
                             CPP14Parser.Characterliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                             CPP14Parser.Userdefinedstringliteral]:
                    self.state = 329
                    self.assignmentexpression()
                    self.state = 334
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 330
                        self.match(CPP14Parser.Comma)
                        self.state = 331
                        self.assignmentexpression()
                        self.state = 336
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 337
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 342
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                        1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                        1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 338
                        self.initializerlist()
                        self.state = 340
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Comma:
                            self.state = 339
                            self.match(CPP14Parser.Comma)

                    self.state = 344
                    self.match(CPP14Parser.RightBrace)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 347
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 348
                self.match(CPP14Parser.LeftParen)
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                    1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                    1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                    1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                    1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                    1 << (CPP14Parser.Numberliteral - 67)) | (1 << (CPP14Parser.Characterliteral - 67)) | (
                    1 << (CPP14Parser.Stringliteral - 67)) | (1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 349
                    self.initializerlist()

                self.state = 352
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.Arrow, CPP14Parser.Dot]:
                self.enterOuterAlt(localctx, 3)
                self.state = 353
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Arrow or _la == CPP14Parser.Dot):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 365
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 54, self._ctx)
                if la_ == 1:
                    self.state = 355
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Template:
                        self.state = 354
                        self.match(CPP14Parser.Template)

                    self.state = 361
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 53, self._ctx)
                    if la_ == 1:
                        self.state = 357
                        self.nestednamespecifier()
                        self.state = 359
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 358
                            self.match(CPP14Parser.Template)

                    self.state = 363
                    self.unqualifiedid()
                    pass

                elif la_ == 2:
                    self.state = 364
                    self.pseudodestructorname()
                    pass

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Numberliteral(self):
            return self.getToken(CPP14Parser.Numberliteral, 0)

        def Characterliteral(self):
            return self.getToken(CPP14Parser.Characterliteral, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def TrueFalse(self):
            return self.getToken(CPP14Parser.TrueFalse, 0)

        def Nullptr(self):
            return self.getToken(CPP14Parser.Nullptr, 0)

        def Userdefinedliteral(self):
            return self.getToken(CPP14Parser.Userdefinedliteral, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def This(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.This)
            else:
                return self.getToken(CPP14Parser.This, i)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Typeid(self):
            return self.getToken(CPP14Parser.Typeid, 0)

        def postfix(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PostfixContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PostfixContext, i)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def lambdadeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.LambdadeclaratorContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def Cast(self):
            return self.getToken(CPP14Parser.Cast, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def initializer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InitializerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InitializerContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_postfixexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPostfixexpression"):
                listener.enterPostfixexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPostfixexpression"):
                listener.exitPostfixexpression(self)

    def postfixexpression(self):

        localctx = CPP14Parser.PostfixexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_postfixexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 96, self._ctx)
            if la_ == 1:
                self.state = 369
                self.match(CPP14Parser.Numberliteral)
                pass

            elif la_ == 2:
                self.state = 370
                self.match(CPP14Parser.Characterliteral)
                pass

            elif la_ == 3:
                self.state = 371
                self.match(CPP14Parser.Stringliteral)
                pass

            elif la_ == 4:
                self.state = 372
                self.match(CPP14Parser.TrueFalse)
                pass

            elif la_ == 5:
                self.state = 373
                self.match(CPP14Parser.Nullptr)
                pass

            elif la_ == 6:
                self.state = 374
                self.match(CPP14Parser.Userdefinedliteral)
                pass

            elif la_ == 7:
                self.state = 375
                self.match(CPP14Parser.Userdefinedstringliteral)
                pass

            elif la_ == 8:
                self.state = 376
                self.match(CPP14Parser.This)
                pass

            elif la_ == 9:
                self.state = 381
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 57, self._ctx)
                if la_ == 1:
                    self.state = 377
                    self.nestednamespecifier()
                    self.state = 379
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Template:
                        self.state = 378
                        self.match(CPP14Parser.Template)

                self.state = 383
                self.unqualifiedid()
                pass

            elif la_ == 10:
                self.state = 384
                self.match(CPP14Parser.LeftBracket)
                self.state = 437
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 72, self._ctx)
                if la_ == 1:
                    self.state = 385
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.And or _la == CPP14Parser.Assign):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 386
                        self.match(CPP14Parser.Comma)
                        self.state = 395
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.And, CPP14Parser.Identifier]:
                            self.state = 388
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.And:
                                self.state = 387
                                self.match(CPP14Parser.And)

                            self.state = 390
                            self.match(CPP14Parser.Identifier)
                            self.state = 392
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                    (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                                1 << (CPP14Parser.Assign - 55)))) != 0):
                                self.state = 391
                                self.initializer()

                            pass
                        elif token in [CPP14Parser.This]:
                            self.state = 394
                            self.match(CPP14Parser.This)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 398
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 397
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 404
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)


                elif la_ == 2:
                    self.state = 413
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.And, CPP14Parser.Identifier]:
                        self.state = 406
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.And:
                            self.state = 405
                            self.match(CPP14Parser.And)

                        self.state = 408
                        self.match(CPP14Parser.Identifier)
                        self.state = 410
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                            1 << (CPP14Parser.Assign - 55)))) != 0):
                            self.state = 409
                            self.initializer()

                        pass
                    elif token in [CPP14Parser.This]:
                        self.state = 412
                        self.match(CPP14Parser.This)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 416
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 415
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 434
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 418
                        self.match(CPP14Parser.Comma)
                        self.state = 427
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.And, CPP14Parser.Identifier]:
                            self.state = 420
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.And:
                                self.state = 419
                                self.match(CPP14Parser.And)

                            self.state = 422
                            self.match(CPP14Parser.Identifier)
                            self.state = 424
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                    (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                                1 << (CPP14Parser.Assign - 55)))) != 0):
                                self.state = 423
                                self.initializer()

                            pass
                        elif token in [CPP14Parser.This]:
                            self.state = 426
                            self.match(CPP14Parser.This)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 430
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 429
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 436
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 439
                self.match(CPP14Parser.RightBracket)
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.LeftParen:
                    self.state = 440
                    self.lambdadeclarator()

                self.state = 443
                self.match(CPP14Parser.LeftBrace)
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                    1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Continue) | (
                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (
                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Goto) | (
                    1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (
                    1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (
                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.Specifier) | (1 << CPP14Parser.Return) | (1 << CPP14Parser.SignedUnsigned) | (
                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                    1 << CPP14Parser.Try) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                    1 << CPP14Parser.Union) | (1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (
                    1 << CPP14Parser.While) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                    1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                    1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                            (1 << (CPP14Parser.And - 67)) | (
                                                                            1 << (CPP14Parser.Or - 67)) | (
                                                                        1 << (CPP14Parser.Tilde - 67)) | (
                                                                    1 << (CPP14Parser.Not - 67)) | (
                                                                1 << (CPP14Parser.AndAnd - 67)) | (
                                                            1 << (CPP14Parser.PlusPlus - 67)) | (
                                                        1 << (CPP14Parser.MinusMinus - 67)) | (
                                                    1 << (CPP14Parser.Doublecolon - 67)) | (
                                                1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                                1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 444
                    self.statement()
                    self.state = 449
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 450
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 11:
                self.state = 451
                self.simpletypespecifier()
                self.state = 465
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.LeftParen]:
                    self.state = 452
                    self.match(CPP14Parser.LeftParen)
                    self.state = 454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                        1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                        1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 453
                        self.initializerlist()

                    self.state = 456
                    self.match(CPP14Parser.RightParen)
                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 457
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 462
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                        1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                        1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 458
                        self.initializerlist()
                        self.state = 460
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Comma:
                            self.state = 459
                            self.match(CPP14Parser.Comma)

                    self.state = 464
                    self.match(CPP14Parser.RightBrace)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 12:
                self.state = 467
                self.match(CPP14Parser.Typename)
                self.state = 468
                self.nestednamespecifier()
                self.state = 479
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 81, self._ctx)
                if la_ == 1:
                    self.state = 469
                    self.match(CPP14Parser.Identifier)
                    pass

                elif la_ == 2:
                    self.state = 471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Template:
                        self.state = 470
                        self.match(CPP14Parser.Template)

                    self.state = 473
                    self.match(CPP14Parser.Identifier)
                    self.state = 474
                    self.match(CPP14Parser.Less)
                    self.state = 476
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                        1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 475
                        self.templateargumentlist()

                    self.state = 478
                    self.match(CPP14Parser.Greater)
                    pass

                self.state = 494
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.LeftParen]:
                    self.state = 481
                    self.match(CPP14Parser.LeftParen)
                    self.state = 483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                        1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                        1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 482
                        self.initializerlist()

                    self.state = 485
                    self.match(CPP14Parser.RightParen)
                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 486
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                        1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                        1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 487
                        self.initializerlist()
                        self.state = 489
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Comma:
                            self.state = 488
                            self.match(CPP14Parser.Comma)

                    self.state = 493
                    self.match(CPP14Parser.RightBrace)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Cast:
                    self.state = 496
                    self.match(CPP14Parser.Cast)
                    self.state = 497
                    self.match(CPP14Parser.Less)
                    self.state = 499
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 498
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 501
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 86, self._ctx)

                    self.state = 506
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 87, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 503
                            self.attributespecifier()
                        self.state = 508
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 87, self._ctx)

                    self.state = 510
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                            1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 509
                        self.abstractdeclarator()

                    self.state = 512
                    self.match(CPP14Parser.Greater)

                self.state = 516
                self.match(CPP14Parser.LeftParen)
                self.state = 517
                self.assignmentexpression()
                self.state = 522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 518
                    self.match(CPP14Parser.Comma)
                    self.state = 519
                    self.assignmentexpression()
                    self.state = 524
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 525
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 14:
                self.state = 527
                self.match(CPP14Parser.Typeid)
                self.state = 556
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 95, self._ctx)
                if la_ == 1:
                    self.state = 528
                    self.match(CPP14Parser.LeftParen)
                    self.state = 529
                    self.assignmentexpression()
                    self.state = 534
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 530
                        self.match(CPP14Parser.Comma)
                        self.state = 531
                        self.assignmentexpression()
                        self.state = 536
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 537
                    self.match(CPP14Parser.RightParen)
                    pass

                elif la_ == 2:
                    self.state = 539
                    self.match(CPP14Parser.LeftParen)
                    self.state = 541
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 540
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 543
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 92, self._ctx)

                    self.state = 548
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 93, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 545
                            self.attributespecifier()
                        self.state = 550
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 93, self._ctx)

                    self.state = 552
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                            1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 551
                        self.abstractdeclarator()

                    self.state = 554
                    self.match(CPP14Parser.RightParen)
                    pass

                pass

            self.state = 563
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 97, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 560
                    self.postfix()
                self.state = 565
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 97, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PseudodestructornameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateargumentlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, i)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pseudodestructorname

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPseudodestructorname"):
                listener.enterPseudodestructorname(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPseudodestructorname"):
                listener.exitPseudodestructorname(self)

    def pseudodestructorname(self):

        localctx = CPP14Parser.PseudodestructornameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_pseudodestructorname)
        self._la = 0  # Token type
        try:
            self.state = 616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 108, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 590
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 103, self._ctx)
                if la_ == 1:
                    self.state = 567
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 98, self._ctx)
                    if la_ == 1:
                        self.state = 566
                        self.nestednamespecifier()

                    self.state = 578
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 569
                        self.match(CPP14Parser.Identifier)
                        self.state = 575
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Less:
                            self.state = 570
                            self.match(CPP14Parser.Less)
                            self.state = 572
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                                1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                                1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                                1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                            (1 << (CPP14Parser.And - 67)) | (
                                                                            1 << (CPP14Parser.Or - 67)) | (
                                                                        1 << (CPP14Parser.Tilde - 67)) | (
                                                                    1 << (CPP14Parser.Not - 67)) | (
                                                                1 << (CPP14Parser.PlusPlus - 67)) | (
                                                            1 << (CPP14Parser.MinusMinus - 67)) | (
                                                        1 << (CPP14Parser.Doublecolon - 67)) | (
                                                    1 << (CPP14Parser.Identifier - 67)) | (
                                                1 << (CPP14Parser.Numberliteral - 67)) | (
                                            1 << (CPP14Parser.Characterliteral - 67)) | (
                                        1 << (CPP14Parser.Stringliteral - 67)) | (
                                    1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                                self.state = 571
                                self.templateargumentlist()

                            self.state = 574
                            self.match(CPP14Parser.Greater)

                        self.state = 577
                        self.match(CPP14Parser.Doublecolon)

                    pass

                elif la_ == 2:
                    self.state = 580
                    self.nestednamespecifier()
                    self.state = 581
                    self.match(CPP14Parser.Template)
                    self.state = 582
                    self.match(CPP14Parser.Identifier)
                    self.state = 583
                    self.match(CPP14Parser.Less)
                    self.state = 585
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                        1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 584
                        self.templateargumentlist()

                    self.state = 587
                    self.match(CPP14Parser.Greater)
                    self.state = 588
                    self.match(CPP14Parser.Doublecolon)
                    pass

                self.state = 592
                self.match(CPP14Parser.Tilde)
                self.state = 593
                self.match(CPP14Parser.Identifier)
                self.state = 599
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 105, self._ctx)
                if la_ == 1:
                    self.state = 594
                    self.match(CPP14Parser.Less)
                    self.state = 596
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                        1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 595
                        self.templateargumentlist()

                    self.state = 598
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 601
                self.match(CPP14Parser.Tilde)
                self.state = 602
                self.match(CPP14Parser.Decltype)
                self.state = 603
                self.match(CPP14Parser.LeftParen)
                self.state = 613
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 107, self._ctx)
                if la_ == 1:
                    self.state = 604
                    self.assignmentexpression()
                    self.state = 609
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 605
                        self.match(CPP14Parser.Comma)
                        self.state = 606
                        self.assignmentexpression()
                        self.state = 611
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 612
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 615
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext, 0)

        def unaryincdecexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryincdecexpressionContext, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def Sizeof(self):
            return self.getToken(CPP14Parser.Sizeof, 0)

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Alignof(self):
            return self.getToken(CPP14Parser.Alignof, 0)

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def newexpression(self):
            return self.getTypedRuleContext(CPP14Parser.NewexpressionContext, 0)

        def deleteexpression(self):
            return self.getTypedRuleContext(CPP14Parser.DeleteexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryexpression"):
                listener.enterUnaryexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryexpression"):
                listener.exitUnaryexpression(self)

    def unaryexpression(self):

        localctx = CPP14Parser.UnaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_unaryexpression)
        self._la = 0  # Token type
        try:
            self.state = 679
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 117, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 618
                self.postfixexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 619
                self.unaryincdecexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 620
                _la = self._input.LA(1)
                if not (((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & (
                                        (1 << (CPP14Parser.Plus - 61)) | (1 << (CPP14Parser.Minus - 61)) | (
                                    1 << (CPP14Parser.Star - 61)) | (1 << (CPP14Parser.And - 61)) | (
                            1 << (CPP14Parser.Or - 61)) | (1 << (CPP14Parser.Tilde - 61)) | (
                    1 << (CPP14Parser.Not - 61)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 621
                self.castexpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 622
                self.match(CPP14Parser.Sizeof)
                self.state = 645
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 112, self._ctx)
                if la_ == 1:
                    self.state = 623
                    self.unaryexpression()
                    pass

                elif la_ == 2:
                    self.state = 624
                    self.match(CPP14Parser.LeftParen)
                    self.state = 626
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 625
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 628
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 109, self._ctx)

                    self.state = 633
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 110, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 630
                            self.attributespecifier()
                        self.state = 635
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 110, self._ctx)

                    self.state = 637
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                            1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 636
                        self.abstractdeclarator()

                    self.state = 639
                    self.match(CPP14Parser.RightParen)
                    pass

                elif la_ == 3:
                    self.state = 641
                    self.match(CPP14Parser.Ellipsis)
                    self.state = 642
                    self.match(CPP14Parser.LeftParen)
                    self.state = 643
                    self.match(CPP14Parser.Identifier)
                    self.state = 644
                    self.match(CPP14Parser.RightParen)
                    pass

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 647
                self.match(CPP14Parser.Alignof)
                self.state = 648
                self.match(CPP14Parser.LeftParen)
                self.state = 650
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 649
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 652
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 113, self._ctx)

                self.state = 657
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 114, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 654
                        self.attributespecifier()
                    self.state = 659
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 114, self._ctx)

                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                            (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                        1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 660
                    self.abstractdeclarator()

                self.state = 663
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 665
                self.match(CPP14Parser.Noexcept)
                self.state = 666
                self.match(CPP14Parser.LeftParen)
                self.state = 667
                self.assignmentexpression()
                self.state = 672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 668
                    self.match(CPP14Parser.Comma)
                    self.state = 669
                    self.assignmentexpression()
                    self.state = 674
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 675
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 677
                self.newexpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 678
                self.deleteexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryincdecexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def postfixunaryincdecexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixunaryincdecexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryincdecexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryincdecexpression"):
                listener.enterUnaryincdecexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryincdecexpression"):
                listener.exitUnaryincdecexpression(self)

    def unaryincdecexpression(self):

        localctx = CPP14Parser.UnaryincdecexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_unaryincdecexpression)
        self._la = 0  # Token type
        try:
            self.state = 684
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.PlusPlus, CPP14Parser.MinusMinus]:
                self.enterOuterAlt(localctx, 1)
                self.state = 681
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.PlusPlus or _la == CPP14Parser.MinusMinus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 682
                self.castexpression()
                pass
            elif token in [CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype, CPP14Parser.TrueFalse,
                           CPP14Parser.Types, CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.SignedUnsigned,
                           CPP14Parser.This, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                           CPP14Parser.LeftBracket, CPP14Parser.Tilde, CPP14Parser.Identifier,
                           CPP14Parser.Numberliteral, CPP14Parser.Characterliteral, CPP14Parser.Stringliteral,
                           CPP14Parser.Userdefinedliteral, CPP14Parser.Userdefinedstringliteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 683
                self.postfixunaryincdecexpression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixunaryincdecexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext, 0)

        def postfixunaryincdecexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixunaryincdecexpressionContext, 0)

        def postfix(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PostfixContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PostfixContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_postfixunaryincdecexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPostfixunaryincdecexpression"):
                listener.enterPostfixunaryincdecexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPostfixunaryincdecexpression"):
                listener.exitPostfixunaryincdecexpression(self)

    def postfixunaryincdecexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PostfixunaryincdecexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 18
        self.enterRecursionRule(localctx, 18, self.RULE_postfixunaryincdecexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.postfixexpression()
            self.state = 688
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.PlusPlus or _la == CPP14Parser.MinusMinus):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self._ctx.stop = self._input.LT(-1)
            self.state = 700
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 120, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.PostfixunaryincdecexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixunaryincdecexpression)
                    self.state = 690
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 694
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBracket - 55)) | (
                            1 << (CPP14Parser.Arrow - 55)) | (1 << (CPP14Parser.Dot - 55)))) != 0):
                        self.state = 691
                        self.postfix()
                        self.state = 696
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 697
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.PlusPlus or _la == CPP14Parser.MinusMinus):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                self.state = 702
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 120, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class NewexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def initializerlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InitializerlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewexpression"):
                listener.enterNewexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewexpression"):
                listener.exitNewexpression(self)

    def newexpression(self):

        localctx = CPP14Parser.NewexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_newexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Doublecolon:
                self.state = 703
                self.match(CPP14Parser.Doublecolon)

            self.state = 706
            self.match(CPP14Parser.New)
            self.state = 711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 122, self._ctx)
            if la_ == 1:
                self.state = 707
                self.match(CPP14Parser.LeftParen)
                self.state = 708
                self.initializerlist()
                self.state = 709
                self.match(CPP14Parser.RightParen)

            self.state = 744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile, CPP14Parser.Decltype,
                         CPP14Parser.Enum, CPP14Parser.Types, CPP14Parser.SignedUnsigned, CPP14Parser.Struct,
                         CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Identifier]:
                self.state = 714
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 713
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 716
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 123, self._ctx)

                self.state = 721
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 124, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 718
                        self.attributespecifier()
                    self.state = 723
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 124, self._ctx)

                self.state = 725
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 125, self._ctx)
                if la_ == 1:
                    self.state = 724
                    self.newdeclarator()

                pass
            elif token in [CPP14Parser.LeftParen]:
                self.state = 727
                self.match(CPP14Parser.LeftParen)
                self.state = 729
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 728
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 731
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 126, self._ctx)

                self.state = 736
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 127, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 733
                        self.attributespecifier()
                    self.state = 738
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 127, self._ctx)

                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                            (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                        1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 739
                    self.abstractdeclarator()

                self.state = 742
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 133, self._ctx)
            if la_ == 1:
                self.state = 746
                self.match(CPP14Parser.LeftParen)
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                    1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                    1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                    1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                    1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                    1 << (CPP14Parser.Numberliteral - 67)) | (1 << (CPP14Parser.Characterliteral - 67)) | (
                    1 << (CPP14Parser.Stringliteral - 67)) | (1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 747
                    self.initializerlist()

                self.state = 750
                self.match(CPP14Parser.RightParen)

            elif la_ == 2:
                self.state = 751
                self.match(CPP14Parser.LeftBrace)
                self.state = 756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                    1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                    1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                    1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                    1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                    1 << (CPP14Parser.Numberliteral - 67)) | (1 << (CPP14Parser.Characterliteral - 67)) | (
                    1 << (CPP14Parser.Stringliteral - 67)) | (1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 752
                    self.initializerlist()
                    self.state = 754
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Comma:
                        self.state = 753
                        self.match(CPP14Parser.Comma)

                self.state = 758
                self.match(CPP14Parser.RightBrace)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def constantexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ConstantexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewdeclarator"):
                listener.enterNewdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewdeclarator"):
                listener.exitNewdeclarator(self)

    def newdeclarator(self):

        localctx = CPP14Parser.NewdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_newdeclarator)
        self._la = 0  # Token type
        try:
            self.state = 795
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                         CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 761
                self.ptroperator()
                self.state = 763
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 134, self._ctx)
                if la_ == 1:
                    self.state = 762
                    self.newdeclarator()

                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 765
                self.match(CPP14Parser.LeftBracket)
                self.state = 766
                self.assignmentexpression()
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 767
                    self.match(CPP14Parser.Comma)
                    self.state = 768
                    self.assignmentexpression()
                    self.state = 773
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 774
                self.match(CPP14Parser.RightBracket)
                self.state = 778
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 136, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 775
                        self.attributespecifier()
                    self.state = 780
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 136, self._ctx)

                self.state = 792
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 138, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 781
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 782
                        self.constantexpression()
                        self.state = 783
                        self.match(CPP14Parser.RightBracket)
                        self.state = 787
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 137, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 784
                                self.attributespecifier()
                            self.state = 789
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 137, self._ctx)

                    self.state = 794
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 138, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_deleteexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeleteexpression"):
                listener.enterDeleteexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeleteexpression"):
                listener.exitDeleteexpression(self)

    def deleteexpression(self):

        localctx = CPP14Parser.DeleteexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_deleteexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Doublecolon:
                self.state = 797
                self.match(CPP14Parser.Doublecolon)

            self.state = 800
            self.match(CPP14Parser.Delete)
            self.state = 803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 141, self._ctx)
            if la_ == 1:
                self.state = 801
                self.match(CPP14Parser.LeftBracket)
                self.state = 802
                self.match(CPP14Parser.RightBracket)

            self.state = 805
            self.castexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AbstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_castexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCastexpression"):
                listener.enterCastexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCastexpression"):
                listener.exitCastexpression(self)

    def castexpression(self):

        localctx = CPP14Parser.CastexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_castexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 145, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 807
                    self.match(CPP14Parser.LeftParen)
                    self.state = 809
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 808
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 811
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 142, self._ctx)

                    self.state = 816
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 143, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 813
                            self.attributespecifier()
                        self.state = 818
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 143, self._ctx)

                    self.state = 820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                            1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 819
                        self.abstractdeclarator()

                    self.state = 822
                    self.match(CPP14Parser.RightParen)
                self.state = 828
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 145, self._ctx)

            self.state = 829
            self.unaryexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShiftexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.CastexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, i)

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_shiftexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShiftexpression"):
                listener.enterShiftexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShiftexpression"):
                listener.exitShiftexpression(self)

    def shiftexpression(self):

        localctx = CPP14Parser.ShiftexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_shiftexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.castexpression()
            self.state = 847
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 147, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 842
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.DotStar]:
                        self.state = 832
                        self.match(CPP14Parser.DotStar)
                        pass
                    elif token in [CPP14Parser.ArrowStar]:
                        self.state = 833
                        self.match(CPP14Parser.ArrowStar)
                        pass
                    elif token in [CPP14Parser.Star]:
                        self.state = 834
                        self.match(CPP14Parser.Star)
                        pass
                    elif token in [CPP14Parser.Div]:
                        self.state = 835
                        self.match(CPP14Parser.Div)
                        pass
                    elif token in [CPP14Parser.Mod]:
                        self.state = 836
                        self.match(CPP14Parser.Mod)
                        pass
                    elif token in [CPP14Parser.Plus]:
                        self.state = 837
                        self.match(CPP14Parser.Plus)
                        pass
                    elif token in [CPP14Parser.Minus]:
                        self.state = 838
                        self.match(CPP14Parser.Minus)
                        pass
                    elif token in [CPP14Parser.LeftShift]:
                        self.state = 839
                        self.match(CPP14Parser.LeftShift)
                        pass
                    elif token in [CPP14Parser.Greater]:
                        self.state = 840
                        self.match(CPP14Parser.Greater)
                        self.state = 841
                        self.match(CPP14Parser.Greater)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 844
                    self.castexpression()
                self.state = 849
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 147, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext, 0)

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_relationalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelationalexpression"):
                listener.enterRelationalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelationalexpression"):
                listener.exitRelationalexpression(self)

    def relationalexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.RelationalexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_relationalexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.shiftexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 858
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 148, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                    self.state = 853
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 854
                    _la = self._input.LA(1)
                    if not (((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & (
                                (1 << (CPP14Parser.Less - 72)) | (1 << (CPP14Parser.Greater - 72)) | (
                            1 << (CPP14Parser.LessEqual - 72)) | (1 << (CPP14Parser.GreaterEqual - 72)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 855
                    self.shiftexpression()
                self.state = 860
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 148, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EqualityexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext, 0)

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_equalityexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEqualityexpression"):
                listener.enterEqualityexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEqualityexpression"):
                listener.exitEqualityexpression(self)

    def equalityexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EqualityexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 32
        self.enterRecursionRule(localctx, 32, self.RULE_equalityexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.relationalexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 869
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 149, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                    self.state = 864
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 865
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Equal or _la == CPP14Parser.NotEqual):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 866
                    self.relationalexpression(0)
                self.state = 871
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 149, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TernaryconditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.EqualityexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, i)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ternaryconditionalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTernaryconditionalexpression"):
                listener.enterTernaryconditionalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTernaryconditionalexpression"):
                listener.exitTernaryconditionalexpression(self)

    def ternaryconditionalexpression(self):

        localctx = CPP14Parser.TernaryconditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_ternaryconditionalexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.equalityexpression(0)
            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                            (1 << (CPP14Parser.Caret - 66)) | (1 << (CPP14Parser.And - 66)) | (
                        1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                1 << (CPP14Parser.OrOr - 66)))) != 0):
                self.state = 873
                _la = self._input.LA(1)
                if not (((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                (1 << (CPP14Parser.Caret - 66)) | (1 << (CPP14Parser.And - 66)) | (
                            1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                    1 << (CPP14Parser.OrOr - 66)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 874
                self.equalityexpression(0)
                self.state = 879
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 880
            self.match(CPP14Parser.Question)
            self.state = 881
            self.assignmentexpression()
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Comma:
                self.state = 882
                self.match(CPP14Parser.Comma)
                self.state = 883
                self.assignmentexpression()
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 889
            self.match(CPP14Parser.Colon)
            self.state = 890
            self.assignmentexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryconditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.EqualityexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, i)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryconditionalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryconditionalexpression"):
                listener.enterUnaryconditionalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryconditionalexpression"):
                listener.exitUnaryconditionalexpression(self)

    def unaryconditionalexpression(self):

        localctx = CPP14Parser.UnaryconditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_unaryconditionalexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.equalityexpression(0)
            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                            (1 << (CPP14Parser.Caret - 66)) | (1 << (CPP14Parser.And - 66)) | (
                        1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                1 << (CPP14Parser.OrOr - 66)))) != 0):
                self.state = 893
                _la = self._input.LA(1)
                if not (((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                (1 << (CPP14Parser.Caret - 66)) | (1 << (CPP14Parser.And - 66)) | (
                            1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                    1 << (CPP14Parser.OrOr - 66)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 894
                self.equalityexpression(0)
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 900
            self.match(CPP14Parser.UnaryCondition)
            self.state = 901
            self.assignmentexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.EqualityexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, i)

        def assignmentoperator(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentoperatorContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def ternaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.TernaryconditionalexpressionContext, 0)

        def unaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryconditionalexpressionContext, 0)

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentexpression"):
                listener.enterAssignmentexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentexpression"):
                listener.exitAssignmentexpression(self)

    def assignmentexpression(self):

        localctx = CPP14Parser.AssignmentexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_assignmentexpression)
        self._la = 0  # Token type
        try:
            self.state = 931
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 159, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 903
                self.equalityexpression(0)
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                (1 << (CPP14Parser.Caret - 66)) | (1 << (CPP14Parser.And - 66)) | (
                            1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                    1 << (CPP14Parser.OrOr - 66)))) != 0):
                    self.state = 904
                    _la = self._input.LA(1)
                    if not (((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                    (1 << (CPP14Parser.Caret - 66)) | (1 << (CPP14Parser.And - 66)) | (
                                1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                        1 << (CPP14Parser.OrOr - 66)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 905
                    self.equalityexpression(0)
                    self.state = 910
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 923
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 157, self._ctx)
                if la_ == 1:
                    self.state = 911
                    self.assignmentoperator()
                    self.state = 921
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                 CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                                 CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                 CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                 CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                 CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                 CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                 CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                 CPP14Parser.Userdefinedstringliteral]:
                        self.state = 912
                        self.assignmentexpression()
                        pass
                    elif token in [CPP14Parser.LeftBrace]:
                        self.state = 913
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 918
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (
                            1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                            1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                            1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                            1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                            1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                            1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 914
                            self.initializerlist()
                            self.state = 916
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Comma:
                                self.state = 915
                                self.match(CPP14Parser.Comma)

                        self.state = 920
                        self.match(CPP14Parser.RightBrace)
                        pass
                    else:
                        raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 925
                self.ternaryconditionalexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 926
                self.unaryconditionalexpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 927
                self.match(CPP14Parser.Throw)
                self.state = 929
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                    1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                    1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and (
                    (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Or - 67)) | (
                    1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                    1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                    1 << (CPP14Parser.Numberliteral - 67)) | (1 << (CPP14Parser.Characterliteral - 67)) | (
                    1 << (CPP14Parser.Stringliteral - 67)) | (1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 928
                    self.assignmentexpression()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentoperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentoperator"):
                listener.enterAssignmentoperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentoperator"):
                listener.exitAssignmentoperator(self)

    def assignmentoperator(self):

        localctx = CPP14Parser.AssignmentoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_assignmentoperator)
        try:
            self.state = 946
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 933
                self.match(CPP14Parser.Assign)
                pass
            elif token in [CPP14Parser.StarAssign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 934
                self.match(CPP14Parser.StarAssign)
                pass
            elif token in [CPP14Parser.DivAssign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 935
                self.match(CPP14Parser.DivAssign)
                pass
            elif token in [CPP14Parser.ModAssign]:
                self.enterOuterAlt(localctx, 4)
                self.state = 936
                self.match(CPP14Parser.ModAssign)
                pass
            elif token in [CPP14Parser.PlusAssign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 937
                self.match(CPP14Parser.PlusAssign)
                pass
            elif token in [CPP14Parser.MinusAssign]:
                self.enterOuterAlt(localctx, 6)
                self.state = 938
                self.match(CPP14Parser.MinusAssign)
                pass
            elif token in [CPP14Parser.Greater]:
                self.enterOuterAlt(localctx, 7)
                self.state = 939
                self.match(CPP14Parser.Greater)
                self.state = 940
                self.match(CPP14Parser.Greater)
                self.state = 941
                self.match(CPP14Parser.Assign)
                pass
            elif token in [CPP14Parser.LeftShiftAssign]:
                self.enterOuterAlt(localctx, 8)
                self.state = 942
                self.match(CPP14Parser.LeftShiftAssign)
                pass
            elif token in [CPP14Parser.AndAssign]:
                self.enterOuterAlt(localctx, 9)
                self.state = 943
                self.match(CPP14Parser.AndAssign)
                pass
            elif token in [CPP14Parser.XorAssign]:
                self.enterOuterAlt(localctx, 10)
                self.state = 944
                self.match(CPP14Parser.XorAssign)
                pass
            elif token in [CPP14Parser.OrAssign]:
                self.enterOuterAlt(localctx, 11)
                self.state = 945
                self.match(CPP14Parser.OrAssign)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.EqualityexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, i)

        def ternaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.TernaryconditionalexpressionContext, 0)

        def unaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryconditionalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_constantexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstantexpression"):
                listener.enterConstantexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstantexpression"):
                listener.exitConstantexpression(self)

    def constantexpression(self):

        localctx = CPP14Parser.ConstantexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_constantexpression)
        self._la = 0  # Token type
        try:
            self.state = 958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 162, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 948
                self.equalityexpression(0)
                self.state = 953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                (1 << (CPP14Parser.Caret - 66)) | (1 << (CPP14Parser.And - 66)) | (
                            1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                    1 << (CPP14Parser.OrOr - 66)))) != 0):
                    self.state = 949
                    _la = self._input.LA(1)
                    if not (((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                    (1 << (CPP14Parser.Caret - 66)) | (1 << (CPP14Parser.And - 66)) | (
                                1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                        1 << (CPP14Parser.OrOr - 66)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 950
                    self.equalityexpression(0)
                    self.state = 955
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 956
                self.ternaryconditionalexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 957
                self.unaryconditionalexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def casestatement(self):
            return self.getTypedRuleContext(CPP14Parser.CasestatementContext, 0)

        def If(self):
            return self.getToken(CPP14Parser.If, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext, 0)

        def Do(self):
            return self.getToken(CPP14Parser.Do, 0)

        def While(self):
            return self.getToken(CPP14Parser.While, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def For(self):
            return self.getToken(CPP14Parser.For, 0)

        def Return(self):
            return self.getToken(CPP14Parser.Return, 0)

        def gotostatement(self):
            return self.getTypedRuleContext(CPP14Parser.GotostatementContext, 0)

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def tryblock(self):
            return self.getTypedRuleContext(CPP14Parser.TryblockContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Break(self):
            return self.getToken(CPP14Parser.Break, 0)

        def Continue(self):
            return self.getToken(CPP14Parser.Continue, 0)

        def Switch(self):
            return self.getToken(CPP14Parser.Switch, 0)

        def elsestatement(self):
            return self.getTypedRuleContext(CPP14Parser.ElsestatementContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def forinitstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ForinitstatementContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, i)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def initializer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InitializerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InitializerContext, i)

        def Asm(self):
            return self.getToken(CPP14Parser.Asm, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

    def statement(self):

        localctx = CPP14Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_statement)
        self._la = 0  # Token type
        try:
            self.state = 1229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 209, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 963
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 163, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 960
                        self.attributespecifier()
                    self.state = 965
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 163, self._ctx)

                self.state = 1101
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 185, self._ctx)
                if la_ == 1:
                    self.state = 973
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Identifier]:
                        self.state = 966
                        self.match(CPP14Parser.Identifier)
                        self.state = 967
                        self.match(CPP14Parser.Colon)
                        pass
                    elif token in [CPP14Parser.Switch, CPP14Parser.While]:
                        self.state = 968
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Switch or _la == CPP14Parser.While):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 969
                        self.match(CPP14Parser.LeftParen)
                        self.state = 970
                        self.condition()
                        self.state = 971
                        self.match(CPP14Parser.RightParen)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 975
                    self.statement()
                    pass

                elif la_ == 2:
                    self.state = 976
                    self.casestatement()
                    pass

                elif la_ == 3:
                    self.state = 985
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                        1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                        1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and (
                        (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Or - 67)) | (
                        1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                        1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                        1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                        1 << (CPP14Parser.Numberliteral - 67)) | (1 << (CPP14Parser.Characterliteral - 67)) | (
                        1 << (CPP14Parser.Stringliteral - 67)) | (1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 977
                        self.assignmentexpression()
                        self.state = 982
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 978
                            self.match(CPP14Parser.Comma)
                            self.state = 979
                            self.assignmentexpression()
                            self.state = 984
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 987
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 4:
                    self.state = 988
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 992
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                        1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Class) | (
                        1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Continue) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Goto) | (
                        1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (
                        1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Specifier) | (1 << CPP14Parser.Return) | (1 << CPP14Parser.SignedUnsigned) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                        1 << CPP14Parser.Try) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.Union) | (1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (
                        1 << CPP14Parser.While) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                        1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                                (1 << (CPP14Parser.And - 67)) | (
                                                                                1 << (CPP14Parser.Or - 67)) | (
                                                                            1 << (CPP14Parser.Tilde - 67)) | (
                                                                        1 << (CPP14Parser.Not - 67)) | (
                                                                    1 << (CPP14Parser.AndAnd - 67)) | (
                                                                1 << (CPP14Parser.PlusPlus - 67)) | (
                                                            1 << (CPP14Parser.MinusMinus - 67)) | (
                                                        1 << (CPP14Parser.Doublecolon - 67)) | (
                                                    1 << (CPP14Parser.Semi - 67)) | (
                                                1 << (CPP14Parser.Ellipsis - 67)) | (
                                            1 << (CPP14Parser.Identifier - 67)) | (
                                        1 << (CPP14Parser.Numberliteral - 67)) | (
                                    1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 989
                        self.statement()
                        self.state = 994
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 995
                    self.match(CPP14Parser.RightBrace)
                    pass

                elif la_ == 5:
                    self.state = 996
                    self.match(CPP14Parser.If)
                    self.state = 997
                    self.match(CPP14Parser.LeftParen)
                    self.state = 998
                    self.condition()
                    self.state = 999
                    self.match(CPP14Parser.RightParen)
                    self.state = 1000
                    self.statement()
                    self.state = 1002
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 168, self._ctx)
                    if la_ == 1:
                        self.state = 1001
                        self.elsestatement()

                    pass

                elif la_ == 6:
                    self.state = 1004
                    self.match(CPP14Parser.Do)
                    self.state = 1005
                    self.statement()
                    self.state = 1006
                    self.match(CPP14Parser.While)
                    self.state = 1007
                    self.match(CPP14Parser.LeftParen)
                    self.state = 1008
                    self.assignmentexpression()
                    self.state = 1013
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1009
                        self.match(CPP14Parser.Comma)
                        self.state = 1010
                        self.assignmentexpression()
                        self.state = 1015
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1016
                    self.match(CPP14Parser.RightParen)
                    self.state = 1017
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 7:
                    self.state = 1019
                    self.match(CPP14Parser.For)

                    self.state = 1020
                    self.match(CPP14Parser.LeftParen)
                    self.state = 1063
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 178, self._ctx)
                    if la_ == 1:
                        self.state = 1021
                        self.forinitstatement()
                        self.state = 1023
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                            1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                            1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Inline) | (
                            1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.Specifier) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                        (1 << (CPP14Parser.And - 67)) | (
                                                                        1 << (CPP14Parser.Or - 67)) | (
                                                                    1 << (CPP14Parser.Tilde - 67)) | (
                                                                1 << (CPP14Parser.Not - 67)) | (
                                                            1 << (CPP14Parser.PlusPlus - 67)) | (
                                                        1 << (CPP14Parser.MinusMinus - 67)) | (
                                                    1 << (CPP14Parser.Doublecolon - 67)) | (
                                                1 << (CPP14Parser.Identifier - 67)) | (
                                            1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 1022
                            self.condition()

                        self.state = 1025
                        self.match(CPP14Parser.Semi)
                        self.state = 1034
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                        (1 << (CPP14Parser.And - 67)) | (
                                                                        1 << (CPP14Parser.Or - 67)) | (
                                                                    1 << (CPP14Parser.Tilde - 67)) | (
                                                                1 << (CPP14Parser.Not - 67)) | (
                                                            1 << (CPP14Parser.PlusPlus - 67)) | (
                                                        1 << (CPP14Parser.MinusMinus - 67)) | (
                                                    1 << (CPP14Parser.Doublecolon - 67)) | (
                                                1 << (CPP14Parser.Identifier - 67)) | (
                                            1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 1026
                            self.assignmentexpression()
                            self.state = 1031
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 1027
                                self.match(CPP14Parser.Comma)
                                self.state = 1028
                                self.assignmentexpression()
                                self.state = 1033
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 1039
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                            self.state = 1036
                            self.attributespecifier()
                            self.state = 1041
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1042
                        self.declspecifierseq()
                        self.state = 1043
                        self.declarator()
                        self.state = 1044
                        self.match(CPP14Parser.Colon)
                        self.state = 1061
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                     CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                     CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                     CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This,
                                     CPP14Parser.Throw, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                     CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                     CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                     CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                     CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                     CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                     CPP14Parser.Userdefinedstringliteral]:
                            self.state = 1045
                            self.assignmentexpression()
                            self.state = 1050
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 1046
                                self.match(CPP14Parser.Comma)
                                self.state = 1047
                                self.assignmentexpression()
                                self.state = 1052
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass
                        elif token in [CPP14Parser.LeftBrace]:
                            self.state = 1053
                            self.match(CPP14Parser.LeftBrace)
                            self.state = 1058
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                                1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                                1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                                1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Or - 67)) | (
                                1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                                1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                                1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                                self.state = 1054
                                self.initializerlist()
                                self.state = 1056
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == CPP14Parser.Comma:
                                    self.state = 1055
                                    self.match(CPP14Parser.Comma)

                            self.state = 1060
                            self.match(CPP14Parser.RightBrace)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    self.state = 1065
                    self.match(CPP14Parser.RightParen)
                    self.state = 1066
                    self.statement()
                    pass

                elif la_ == 8:
                    self.state = 1068
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Break or _la == CPP14Parser.Continue):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1069
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 9:
                    self.state = 1070
                    self.match(CPP14Parser.Return)
                    self.state = 1089
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                 CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                                 CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                 CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                 CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                 CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                 CPP14Parser.Semi, CPP14Parser.Identifier, CPP14Parser.Numberliteral,
                                 CPP14Parser.Characterliteral, CPP14Parser.Stringliteral,
                                 CPP14Parser.Userdefinedliteral, CPP14Parser.Userdefinedstringliteral]:
                        self.state = 1079
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                        (1 << (CPP14Parser.And - 67)) | (
                                                                        1 << (CPP14Parser.Or - 67)) | (
                                                                    1 << (CPP14Parser.Tilde - 67)) | (
                                                                1 << (CPP14Parser.Not - 67)) | (
                                                            1 << (CPP14Parser.PlusPlus - 67)) | (
                                                        1 << (CPP14Parser.MinusMinus - 67)) | (
                                                    1 << (CPP14Parser.Doublecolon - 67)) | (
                                                1 << (CPP14Parser.Identifier - 67)) | (
                                            1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 1071
                            self.assignmentexpression()
                            self.state = 1076
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 1072
                                self.match(CPP14Parser.Comma)
                                self.state = 1073
                                self.assignmentexpression()
                                self.state = 1078
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                        pass
                    elif token in [CPP14Parser.LeftBrace]:
                        self.state = 1081
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 1086
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (
                            1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                            1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                            1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                            1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                            1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                            1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 1082
                            self.initializerlist()
                            self.state = 1084
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Comma:
                                self.state = 1083
                                self.match(CPP14Parser.Comma)

                        self.state = 1088
                        self.match(CPP14Parser.RightBrace)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1091
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 10:
                    self.state = 1092
                    self.gotostatement()
                    pass

                elif la_ == 11:
                    self.state = 1093
                    self.match(CPP14Parser.Using)
                    self.state = 1094
                    self.match(CPP14Parser.Namespace)
                    self.state = 1096
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 184, self._ctx)
                    if la_ == 1:
                        self.state = 1095
                        self.nestednamespecifier()

                    self.state = 1098
                    self.match(CPP14Parser.Identifier)
                    self.state = 1099
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 12:
                    self.state = 1100
                    self.tryblock()
                    pass

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1103
                    self.attributespecifier()
                    self.state = 1106
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket):
                        break

                self.state = 1109
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 187, self._ctx)
                if la_ == 1:
                    self.state = 1108
                    self.declspecifierseq()

                self.state = 1111
                self.declarator()
                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                        (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                    1 << (CPP14Parser.Assign - 55)))) != 0):
                    self.state = 1112
                    self.initializer()

                self.state = 1122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 1115
                    self.match(CPP14Parser.Comma)
                    self.state = 1116
                    self.declarator()
                    self.state = 1118
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                            (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                        1 << (CPP14Parser.Assign - 55)))) != 0):
                        self.state = 1117
                        self.initializer()

                    self.state = 1124
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1125
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1128
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 191, self._ctx)
                if la_ == 1:
                    self.state = 1127
                    self.declspecifierseq()

                self.state = 1144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.LeftParen) | (
                    1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                            1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1130
                    self.declarator()
                    self.state = 1132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                            (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                        1 << (CPP14Parser.Assign - 55)))) != 0):
                        self.state = 1131
                        self.initializer()

                    self.state = 1141
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1134
                        self.match(CPP14Parser.Comma)
                        self.state = 1135
                        self.declarator()
                        self.state = 1137
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                            1 << (CPP14Parser.Assign - 55)))) != 0):
                            self.state = 1136
                            self.initializer()

                        self.state = 1143
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1146
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1147
                self.match(CPP14Parser.Asm)
                self.state = 1148
                self.match(CPP14Parser.LeftParen)
                self.state = 1149
                self.match(CPP14Parser.Stringliteral)
                self.state = 1150
                self.match(CPP14Parser.RightParen)
                self.state = 1151
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1152
                self.match(CPP14Parser.Namespace)
                self.state = 1153
                self.match(CPP14Parser.Identifier)
                self.state = 1154
                self.match(CPP14Parser.Assign)
                self.state = 1156
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 196, self._ctx)
                if la_ == 1:
                    self.state = 1155
                    self.nestednamespecifier()

                self.state = 1158
                self.match(CPP14Parser.Identifier)
                self.state = 1159
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1160
                self.match(CPP14Parser.Using)
                self.state = 1191
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 203, self._ctx)
                if la_ == 1:
                    self.state = 1166
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Doublecolon]:
                        self.state = 1161
                        self.match(CPP14Parser.Doublecolon)
                        pass
                    elif token in [CPP14Parser.Decltype, CPP14Parser.Typename, CPP14Parser.Identifier]:
                        self.state = 1163
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Typename:
                            self.state = 1162
                            self.match(CPP14Parser.Typename)

                        self.state = 1165
                        self.nestednamespecifier()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1168
                    self.unqualifiedid()
                    pass

                elif la_ == 2:
                    self.state = 1169
                    self.match(CPP14Parser.Identifier)
                    self.state = 1173
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1170
                        self.attributespecifier()
                        self.state = 1175
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1176
                    self.match(CPP14Parser.Assign)
                    self.state = 1178
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1177
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1180
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 200, self._ctx)

                    self.state = 1185
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 201, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1182
                            self.attributespecifier()
                        self.state = 1187
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 201, self._ctx)

                    self.state = 1189
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                            1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 1188
                        self.abstractdeclarator()

                    pass

                self.state = 1193
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1195
                self.match(CPP14Parser.Static_assert)
                self.state = 1196
                self.match(CPP14Parser.LeftParen)
                self.state = 1197
                self.constantexpression()
                self.state = 1198
                self.match(CPP14Parser.Comma)
                self.state = 1199
                self.match(CPP14Parser.Stringliteral)
                self.state = 1200
                self.match(CPP14Parser.RightParen)
                self.state = 1201
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1203
                self.match(CPP14Parser.Enum)
                self.state = 1205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Class or _la == CPP14Parser.Struct:
                    self.state = 1204
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Class or _la == CPP14Parser.Struct):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1207
                    self.attributespecifier()
                    self.state = 1212
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1213
                self.match(CPP14Parser.Identifier)
                self.state = 1226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1214
                    self.match(CPP14Parser.Colon)
                    self.state = 1216
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1215
                        self.typespecifier()
                        self.state = 1218
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                                            (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                                                        1 << CPP14Parser.ConstOrVolatile) | (
                                                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (
                                            1 << CPP14Parser.Types) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Struct) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union))) != 0) or _la == CPP14Parser.Identifier):
                            break

                    self.state = 1223
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1220
                        self.attributespecifier()
                        self.state = 1225
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1228
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CasestatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def Case(self):
            return self.getToken(CPP14Parser.Case, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_casestatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCasestatement"):
                listener.enterCasestatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCasestatement"):
                listener.exitCasestatement(self)

    def casestatement(self):

        localctx = CPP14Parser.CasestatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_casestatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Case]:
                self.state = 1231
                self.match(CPP14Parser.Case)
                self.state = 1232
                self.constantexpression()
                pass
            elif token in [CPP14Parser.Default]:
                self.state = 1233
                self.match(CPP14Parser.Default)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1236
            self.match(CPP14Parser.Colon)
            self.state = 1237
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElsestatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(CPP14Parser.Else, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_elsestatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElsestatement"):
                listener.enterElsestatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElsestatement"):
                listener.exitElsestatement(self)

    def elsestatement(self):

        localctx = CPP14Parser.ElsestatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_elsestatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self.match(CPP14Parser.Else)
            self.state = 1240
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_condition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCondition"):
                listener.enterCondition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCondition"):
                listener.exitCondition(self)

    def condition(self):

        localctx = CPP14Parser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_condition)
        self._la = 0  # Token type
        try:
            self.state = 1273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 217, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1242
                self.assignmentexpression()
                self.state = 1247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 1243
                    self.match(CPP14Parser.Comma)
                    self.state = 1244
                    self.assignmentexpression()
                    self.state = 1249
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1250
                    self.attributespecifier()
                    self.state = 1255
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1256
                self.declspecifierseq()
                self.state = 1257
                self.declarator()
                self.state = 1271
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 216, self._ctx)
                if la_ == 1:
                    self.state = 1258
                    self.match(CPP14Parser.Assign)
                    self.state = 1259
                    self.assignmentexpression()
                    pass

                elif la_ == 2:
                    self.state = 1261
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Assign:
                        self.state = 1260
                        self.match(CPP14Parser.Assign)

                    self.state = 1263
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 1268
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                        1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                        1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 1264
                        self.initializerlist()
                        self.state = 1266
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Comma:
                            self.state = 1265
                            self.match(CPP14Parser.Comma)

                    self.state = 1270
                    self.match(CPP14Parser.RightBrace)
                    pass

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForinitstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, i)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def initializer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InitializerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InitializerContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_forinitstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForinitstatement"):
                listener.enterForinitstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForinitstatement"):
                listener.exitForinitstatement(self)

    def forinitstatement(self):

        localctx = CPP14Parser.ForinitstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_forinitstatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 230, self._ctx)
            if la_ == 1:
                self.state = 1283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                    1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                    1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and (
                    (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Or - 67)) | (
                    1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                    1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                    1 << (CPP14Parser.Numberliteral - 67)) | (1 << (CPP14Parser.Characterliteral - 67)) | (
                    1 << (CPP14Parser.Stringliteral - 67)) | (1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 1275
                    self.assignmentexpression()
                    self.state = 1280
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1276
                        self.match(CPP14Parser.Comma)
                        self.state = 1277
                        self.assignmentexpression()
                        self.state = 1282
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1286
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 220, self._ctx)
                if la_ == 1:
                    self.state = 1285
                    self.declspecifierseq()

                self.state = 1302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.LeftParen) | (
                    1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                            1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1288
                    self.declarator()
                    self.state = 1290
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                            (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                        1 << (CPP14Parser.Assign - 55)))) != 0):
                        self.state = 1289
                        self.initializer()

                    self.state = 1299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1292
                        self.match(CPP14Parser.Comma)
                        self.state = 1293
                        self.declarator()
                        self.state = 1295
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                            1 << (CPP14Parser.Assign - 55)))) != 0):
                            self.state = 1294
                            self.initializer()

                        self.state = 1301
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1304
                    self.attributespecifier()
                    self.state = 1307
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket):
                        break

                self.state = 1310
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 226, self._ctx)
                if la_ == 1:
                    self.state = 1309
                    self.declspecifierseq()

                self.state = 1312
                self.declarator()
                self.state = 1314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                        (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                    1 << (CPP14Parser.Assign - 55)))) != 0):
                    self.state = 1313
                    self.initializer()

                self.state = 1323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 1316
                    self.match(CPP14Parser.Comma)
                    self.state = 1317
                    self.declarator()
                    self.state = 1319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                            (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                        1 << (CPP14Parser.Assign - 55)))) != 0):
                        self.state = 1318
                        self.initializer()

                    self.state = 1325
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            self.state = 1328
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GotostatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Goto(self):
            return self.getToken(CPP14Parser.Goto, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_gotostatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGotostatement"):
                listener.enterGotostatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGotostatement"):
                listener.exitGotostatement(self)

    def gotostatement(self):

        localctx = CPP14Parser.GotostatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_gotostatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            self.match(CPP14Parser.Goto)
            self.state = 1331
            self.match(CPP14Parser.Identifier)
            self.state = 1332
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, i)

        def initializer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InitializerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InitializerContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def Override(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Override)
            else:
                return self.getToken(CPP14Parser.Override, i)

        def Final(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Final)
            else:
                return self.getToken(CPP14Parser.Final, i)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def handler(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.HandlerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.HandlerContext, i)

        def Asm(self):
            return self.getToken(CPP14Parser.Asm, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def declaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclarationContext, i)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclaration"):
                listener.enterDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclaration"):
                listener.exitDeclaration(self)

    def declaration(self):

        localctx = CPP14Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_declaration)
        self._la = 0  # Token type
        try:
            self.state = 1564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 274, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1335
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 231, self._ctx)
                if la_ == 1:
                    self.state = 1334
                    self.declspecifierseq()

                self.state = 1351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.LeftParen) | (
                    1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                            1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1337
                    self.declarator()
                    self.state = 1339
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                            (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                        1 << (CPP14Parser.Assign - 55)))) != 0):
                        self.state = 1338
                        self.initializer()

                    self.state = 1348
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1341
                        self.match(CPP14Parser.Comma)
                        self.state = 1342
                        self.declarator()
                        self.state = 1344
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                            1 << (CPP14Parser.Assign - 55)))) != 0):
                            self.state = 1343
                            self.initializer()

                        self.state = 1350
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1353
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1354
                    self.attributespecifier()
                    self.state = 1357
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket):
                        break

                self.state = 1376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (
                    1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Typename) | (
                    1 << CPP14Parser.Union) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.LeftParen) | (
                    1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                            1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1360
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 237, self._ctx)
                    if la_ == 1:
                        self.state = 1359
                        self.declspecifierseq()

                    self.state = 1362
                    self.declarator()
                    self.state = 1364
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                            (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                        1 << (CPP14Parser.Assign - 55)))) != 0):
                        self.state = 1363
                        self.initializer()

                    self.state = 1373
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1366
                        self.match(CPP14Parser.Comma)
                        self.state = 1367
                        self.declarator()
                        self.state = 1369
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                            1 << (CPP14Parser.Assign - 55)))) != 0):
                            self.state = 1368
                            self.initializer()

                        self.state = 1375
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1378
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1380
                    self.attributespecifier()
                    self.state = 1385
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1438
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Using]:
                    self.state = 1386
                    self.match(CPP14Parser.Using)
                    self.state = 1387
                    self.match(CPP14Parser.Namespace)
                    self.state = 1389
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 243, self._ctx)
                    if la_ == 1:
                        self.state = 1388
                        self.nestednamespecifier()

                    self.state = 1391
                    self.match(CPP14Parser.Identifier)
                    self.state = 1392
                    self.match(CPP14Parser.Semi)
                    pass
                elif token in [CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile, CPP14Parser.Decltype,
                               CPP14Parser.Enum, CPP14Parser.Extern, CPP14Parser.Inline, CPP14Parser.Types,
                               CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Specifier,
                               CPP14Parser.SignedUnsigned, CPP14Parser.Struct, CPP14Parser.Typename, CPP14Parser.Union,
                               CPP14Parser.Virtual, CPP14Parser.LeftParen, CPP14Parser.Star, CPP14Parser.And,
                               CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                    self.state = 1394
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 244, self._ctx)
                    if la_ == 1:
                        self.state = 1393
                        self.declspecifierseq()

                    self.state = 1396
                    self.declarator()
                    self.state = 1400
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Final or _la == CPP14Parser.Override:
                        self.state = 1397
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Final or _la == CPP14Parser.Override):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1402
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1436
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.LeftBrace, CPP14Parser.Colon]:
                        self.state = 1405
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Colon:
                            self.state = 1403
                            self.match(CPP14Parser.Colon)
                            self.state = 1404
                            self.meminitializerlist()

                        self.state = 1407
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 1411
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                            1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                            1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (
                            1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (
                            1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                            1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (1 << CPP14Parser.Return) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (
                            1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                            1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                            1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                                    (1 << (CPP14Parser.And - 67)) | (
                                                                                    1 << (CPP14Parser.Or - 67)) | (
                                                                                1 << (CPP14Parser.Tilde - 67)) | (
                                                                            1 << (CPP14Parser.Not - 67)) | (
                                                                        1 << (CPP14Parser.AndAnd - 67)) | (
                                                                    1 << (CPP14Parser.PlusPlus - 67)) | (
                                                                1 << (CPP14Parser.MinusMinus - 67)) | (
                                                            1 << (CPP14Parser.Doublecolon - 67)) | (
                                                        1 << (CPP14Parser.Semi - 67)) | (
                                                    1 << (CPP14Parser.Ellipsis - 67)) | (
                                                1 << (CPP14Parser.Identifier - 67)) | (
                                            1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 1408
                            self.statement()
                            self.state = 1413
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1414
                        self.match(CPP14Parser.RightBrace)
                        pass
                    elif token in [CPP14Parser.Try]:
                        self.state = 1415
                        self.match(CPP14Parser.Try)
                        self.state = 1418
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Colon:
                            self.state = 1416
                            self.match(CPP14Parser.Colon)
                            self.state = 1417
                            self.meminitializerlist()

                        self.state = 1420
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 1424
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                            1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                            1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (
                            1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (
                            1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                            1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (1 << CPP14Parser.Return) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (
                            1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                            1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                            1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                                    (1 << (CPP14Parser.And - 67)) | (
                                                                                    1 << (CPP14Parser.Or - 67)) | (
                                                                                1 << (CPP14Parser.Tilde - 67)) | (
                                                                            1 << (CPP14Parser.Not - 67)) | (
                                                                        1 << (CPP14Parser.AndAnd - 67)) | (
                                                                    1 << (CPP14Parser.PlusPlus - 67)) | (
                                                                1 << (CPP14Parser.MinusMinus - 67)) | (
                                                            1 << (CPP14Parser.Doublecolon - 67)) | (
                                                        1 << (CPP14Parser.Semi - 67)) | (
                                                    1 << (CPP14Parser.Ellipsis - 67)) | (
                                                1 << (CPP14Parser.Identifier - 67)) | (
                                            1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 1421
                            self.statement()
                            self.state = 1426
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1427
                        self.match(CPP14Parser.RightBrace)
                        self.state = 1429
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1428
                            self.handler()
                            self.state = 1431
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la == CPP14Parser.Catch):
                                break

                        pass
                    elif token in [CPP14Parser.Assign]:
                        self.state = 1433
                        self.match(CPP14Parser.Assign)
                        self.state = 1434
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Default or _la == CPP14Parser.Delete):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1435
                        self.match(CPP14Parser.Semi)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1440
                self.match(CPP14Parser.Asm)
                self.state = 1441
                self.match(CPP14Parser.LeftParen)
                self.state = 1442
                self.match(CPP14Parser.Stringliteral)
                self.state = 1443
                self.match(CPP14Parser.RightParen)
                self.state = 1444
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1445
                self.match(CPP14Parser.Namespace)
                self.state = 1446
                self.match(CPP14Parser.Identifier)
                self.state = 1447
                self.match(CPP14Parser.Assign)
                self.state = 1449
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 253, self._ctx)
                if la_ == 1:
                    self.state = 1448
                    self.nestednamespecifier()

                self.state = 1451
                self.match(CPP14Parser.Identifier)
                self.state = 1452
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1453
                self.match(CPP14Parser.Using)
                self.state = 1484
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 260, self._ctx)
                if la_ == 1:
                    self.state = 1459
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Doublecolon]:
                        self.state = 1454
                        self.match(CPP14Parser.Doublecolon)
                        pass
                    elif token in [CPP14Parser.Decltype, CPP14Parser.Typename, CPP14Parser.Identifier]:
                        self.state = 1456
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Typename:
                            self.state = 1455
                            self.match(CPP14Parser.Typename)

                        self.state = 1458
                        self.nestednamespecifier()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1461
                    self.unqualifiedid()
                    pass

                elif la_ == 2:
                    self.state = 1462
                    self.match(CPP14Parser.Identifier)
                    self.state = 1466
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1463
                        self.attributespecifier()
                        self.state = 1468
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1469
                    self.match(CPP14Parser.Assign)
                    self.state = 1471
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1470
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1473
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 257, self._ctx)

                    self.state = 1478
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 258, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1475
                            self.attributespecifier()
                        self.state = 1480
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 258, self._ctx)

                    self.state = 1482
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                            1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 1481
                        self.abstractdeclarator()

                    pass

                self.state = 1486
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1488
                self.match(CPP14Parser.Static_assert)
                self.state = 1489
                self.match(CPP14Parser.LeftParen)
                self.state = 1490
                self.constantexpression()
                self.state = 1491
                self.match(CPP14Parser.Comma)
                self.state = 1492
                self.match(CPP14Parser.Stringliteral)
                self.state = 1493
                self.match(CPP14Parser.RightParen)
                self.state = 1494
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1496
                self.match(CPP14Parser.Enum)
                self.state = 1498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Class or _la == CPP14Parser.Struct:
                    self.state = 1497
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Class or _la == CPP14Parser.Struct):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 1503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1500
                    self.attributespecifier()
                    self.state = 1505
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1506
                self.match(CPP14Parser.Identifier)
                self.state = 1519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1507
                    self.match(CPP14Parser.Colon)
                    self.state = 1509
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1508
                        self.typespecifier()
                        self.state = 1511
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                                            (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                                                        1 << CPP14Parser.ConstOrVolatile) | (
                                                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (
                                            1 << CPP14Parser.Types) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Struct) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union))) != 0) or _la == CPP14Parser.Identifier):
                            break

                    self.state = 1516
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1513
                        self.attributespecifier()
                        self.state = 1518
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1521
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1532
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 268, self._ctx)
                if la_ == 1:
                    self.state = 1522
                    self.match(CPP14Parser.Template)
                    self.state = 1523
                    self.match(CPP14Parser.Less)
                    self.state = 1525
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (
                        1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Specifier) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (
                        1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (1 << CPP14Parser.Virtual) | (
                        1 << CPP14Parser.LeftBracket))) != 0) or _la == CPP14Parser.Identifier:
                        self.state = 1524
                        self.templateparameterlist()

                    self.state = 1527
                    self.match(CPP14Parser.Greater)
                    pass

                elif la_ == 2:
                    self.state = 1529
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Extern:
                        self.state = 1528
                        self.match(CPP14Parser.Extern)

                    self.state = 1531
                    self.match(CPP14Parser.Template)
                    pass

                self.state = 1534
                self.declaration()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1535
                self.match(CPP14Parser.Extern)
                self.state = 1536
                self.match(CPP14Parser.Stringliteral)
                self.state = 1546
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.LeftBrace]:
                    self.state = 1537
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 1541
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                        1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                        1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (
                        1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Specifier) | (1 << CPP14Parser.SignedUnsigned) | (
                        1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (
                        1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (1 << CPP14Parser.Using) | (
                        1 << CPP14Parser.Virtual) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                        (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                    1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Semi - 67)) | (
                            1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 1538
                        self.declaration()
                        self.state = 1543
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1544
                    self.match(CPP14Parser.RightBrace)
                    pass
                elif token in [CPP14Parser.Alignas, CPP14Parser.Asm, CPP14Parser.Auto, CPP14Parser.Class,
                               CPP14Parser.ConstOrVolatile, CPP14Parser.Decltype, CPP14Parser.Enum, CPP14Parser.Extern,
                               CPP14Parser.Inline, CPP14Parser.Types, CPP14Parser.Mutable, CPP14Parser.Namespace,
                               CPP14Parser.Operator, CPP14Parser.Specifier, CPP14Parser.SignedUnsigned,
                               CPP14Parser.Static_assert, CPP14Parser.Struct, CPP14Parser.Template,
                               CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Using, CPP14Parser.Virtual,
                               CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Star, CPP14Parser.And,
                               CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Semi, CPP14Parser.Ellipsis,
                               CPP14Parser.Identifier]:
                    self.state = 1545
                    self.declaration()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Inline:
                    self.state = 1548
                    self.match(CPP14Parser.Inline)

                self.state = 1551
                self.match(CPP14Parser.Namespace)
                self.state = 1553
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 1552
                    self.match(CPP14Parser.Identifier)

                self.state = 1555
                self.match(CPP14Parser.LeftBrace)
                self.state = 1559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (
                    1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Template) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                    1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.LeftParen) | (
                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                    (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Semi - 67)) | (
                        1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1556
                    self.declaration()
                    self.state = 1561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1562
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1563
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclspecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Specifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Specifier)
            else:
                return self.getToken(CPP14Parser.Specifier, i)

        def Mutable(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Mutable)
            else:
                return self.getToken(CPP14Parser.Mutable, i)

        def Extern(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Extern)
            else:
                return self.getToken(CPP14Parser.Extern, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def Inline(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Inline)
            else:
                return self.getToken(CPP14Parser.Inline, i)

        def Virtual(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Virtual)
            else:
                return self.getToken(CPP14Parser.Virtual, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclspecifierseq"):
                listener.enterDeclspecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclspecifierseq"):
                listener.exitDeclspecifierseq(self)

    def declspecifierseq(self):

        localctx = CPP14Parser.DeclspecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_declspecifierseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1572
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1572
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Specifier]:
                        self.state = 1566
                        self.match(CPP14Parser.Specifier)
                        pass
                    elif token in [CPP14Parser.Mutable]:
                        self.state = 1567
                        self.match(CPP14Parser.Mutable)
                        pass
                    elif token in [CPP14Parser.Extern]:
                        self.state = 1568
                        self.match(CPP14Parser.Extern)
                        pass
                    elif token in [CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile,
                                   CPP14Parser.Decltype, CPP14Parser.Enum, CPP14Parser.Types,
                                   CPP14Parser.SignedUnsigned, CPP14Parser.Struct, CPP14Parser.Typename,
                                   CPP14Parser.Union, CPP14Parser.Identifier]:
                        self.state = 1569
                        self.typespecifier()
                        pass
                    elif token in [CPP14Parser.Inline]:
                        self.state = 1570
                        self.match(CPP14Parser.Inline)
                        pass
                    elif token in [CPP14Parser.Virtual]:
                        self.state = 1571
                        self.match(CPP14Parser.Virtual)
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 1574
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 276, self._ctx)

            self.state = 1579
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 277, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1576
                    self.attributespecifier()
                self.state = 1581
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 277, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def Union(self):
            return self.getToken(CPP14Parser.Union, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def basespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BasespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BasespecifierContext, i)

        def memberdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclarationContext, 0)

        def PrivateProtectedPublic(self):
            return self.getToken(CPP14Parser.PrivateProtectedPublic, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def constantexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ConstantexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypespecifier"):
                listener.enterTypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypespecifier"):
                listener.exitTypespecifier(self)

    def typespecifier(self):

        localctx = CPP14Parser.TypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_typespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 300, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1582
                self.trailingtypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1583
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Class) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Union))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1584
                    self.attributespecifier()
                    self.state = 1589
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Identifier:
                    self.state = 1591
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 279, self._ctx)
                    if la_ == 1:
                        self.state = 1590
                        self.nestednamespecifier()

                    self.state = 1593
                    self.match(CPP14Parser.Identifier)
                    self.state = 1599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Less:
                        self.state = 1594
                        self.match(CPP14Parser.Less)
                        self.state = 1596
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                            1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                            1 << CPP14Parser.Enum) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                            1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                            1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                            1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                            1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                            1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                            1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 1595
                            self.templateargumentlist()

                        self.state = 1598
                        self.match(CPP14Parser.Greater)

                    self.state = 1602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Final:
                        self.state = 1601
                        self.match(CPP14Parser.Final)

                self.state = 1621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1606
                    self.match(CPP14Parser.Colon)
                    self.state = 1607
                    self.basespecifier()
                    self.state = 1609
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 1608
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 1618
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1611
                        self.match(CPP14Parser.Comma)
                        self.state = 1612
                        self.basespecifier()
                        self.state = 1614
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 1613
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 1620
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1623
                self.match(CPP14Parser.LeftBrace)
                self.state = 1627
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignas, CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile,
                             CPP14Parser.Decltype, CPP14Parser.Enum, CPP14Parser.Extern, CPP14Parser.Inline,
                             CPP14Parser.Types, CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Specifier,
                             CPP14Parser.SignedUnsigned, CPP14Parser.Static_assert, CPP14Parser.Struct,
                             CPP14Parser.Template, CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Using,
                             CPP14Parser.Virtual, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Star,
                             CPP14Parser.And, CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Colon,
                             CPP14Parser.Semi, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                    self.state = 1624
                    self.memberdeclaration()
                    pass
                elif token in [CPP14Parser.PrivateProtectedPublic]:
                    self.state = 1625
                    self.match(CPP14Parser.PrivateProtectedPublic)
                    self.state = 1626
                    self.match(CPP14Parser.Colon)
                    pass
                elif token in [CPP14Parser.RightBrace]:
                    pass
                else:
                    pass
                self.state = 1629
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1630
                self.match(CPP14Parser.Enum)
                self.state = 1632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Class or _la == CPP14Parser.Struct:
                    self.state = 1631
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Class or _la == CPP14Parser.Struct):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 1637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1634
                    self.attributespecifier()
                    self.state = 1639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Identifier:
                    self.state = 1641
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 291, self._ctx)
                    if la_ == 1:
                        self.state = 1640
                        self.nestednamespecifier()

                    self.state = 1643
                    self.match(CPP14Parser.Identifier)

                self.state = 1658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1646
                    self.match(CPP14Parser.Colon)
                    self.state = 1648
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1647
                        self.typespecifier()
                        self.state = 1650
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                                            (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                                                        1 << CPP14Parser.ConstOrVolatile) | (
                                                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (
                                            1 << CPP14Parser.Types) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Struct) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union))) != 0) or _la == CPP14Parser.Identifier):
                            break

                    self.state = 1655
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1652
                        self.attributespecifier()
                        self.state = 1657
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1660
                self.match(CPP14Parser.LeftBrace)
                self.state = 1661
                self.match(CPP14Parser.Identifier)
                self.state = 1664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Assign:
                    self.state = 1662
                    self.match(CPP14Parser.Assign)
                    self.state = 1663
                    self.constantexpression()

                self.state = 1674
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 298, self._ctx)
                while _alt != 1 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1 + 1:
                        self.state = 1666
                        self.match(CPP14Parser.Comma)
                        self.state = 1667
                        self.match(CPP14Parser.Identifier)
                        self.state = 1670
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Assign:
                            self.state = 1668
                            self.match(CPP14Parser.Assign)
                            self.state = 1669
                            self.constantexpression()

                    self.state = 1676
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 298, self._ctx)

                self.state = 1678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Comma:
                    self.state = 1677
                    self.match(CPP14Parser.Comma)

                self.state = 1680
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingtypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def Union(self):
            return self.getToken(CPP14Parser.Union, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def ConstOrVolatile(self):
            return self.getToken(CPP14Parser.ConstOrVolatile, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrailingtypespecifier"):
                listener.enterTrailingtypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrailingtypespecifier"):
                listener.exitTrailingtypespecifier(self)

    def trailingtypespecifier(self):

        localctx = CPP14Parser.TrailingtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_trailingtypespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1729
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Decltype, CPP14Parser.Types, CPP14Parser.SignedUnsigned,
                         CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1683
                self.simpletypespecifier()
                pass
            elif token in [CPP14Parser.Class, CPP14Parser.Struct, CPP14Parser.Union]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1684
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Class) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Union))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1707
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 306, self._ctx)
                if la_ == 1:
                    self.state = 1688
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1685
                        self.attributespecifier()
                        self.state = 1690
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1692
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 302, self._ctx)
                    if la_ == 1:
                        self.state = 1691
                        self.nestednamespecifier()

                    self.state = 1694
                    self.match(CPP14Parser.Identifier)
                    pass

                elif la_ == 2:
                    self.state = 1699
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 304, self._ctx)
                    if la_ == 1:
                        self.state = 1695
                        self.nestednamespecifier()
                        self.state = 1697
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 1696
                            self.match(CPP14Parser.Template)

                    self.state = 1701
                    self.match(CPP14Parser.Identifier)
                    self.state = 1702
                    self.match(CPP14Parser.Less)
                    self.state = 1704
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                        1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 1703
                        self.templateargumentlist()

                    self.state = 1706
                    self.match(CPP14Parser.Greater)
                    pass

                pass
            elif token in [CPP14Parser.Enum]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1709
                self.match(CPP14Parser.Enum)
                self.state = 1711
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 307, self._ctx)
                if la_ == 1:
                    self.state = 1710
                    self.nestednamespecifier()

                self.state = 1713
                self.match(CPP14Parser.Identifier)
                pass
            elif token in [CPP14Parser.Typename]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1714
                self.match(CPP14Parser.Typename)
                self.state = 1715
                self.nestednamespecifier()
                self.state = 1726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 310, self._ctx)
                if la_ == 1:
                    self.state = 1716
                    self.match(CPP14Parser.Identifier)
                    pass

                elif la_ == 2:
                    self.state = 1718
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Template:
                        self.state = 1717
                        self.match(CPP14Parser.Template)

                    self.state = 1720
                    self.match(CPP14Parser.Identifier)
                    self.state = 1721
                    self.match(CPP14Parser.Less)
                    self.state = 1723
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                        1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 1722
                        self.templateargumentlist()

                    self.state = 1725
                    self.match(CPP14Parser.Greater)
                    pass

                pass
            elif token in [CPP14Parser.ConstOrVolatile]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1728
                self.match(CPP14Parser.ConstOrVolatile)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpletypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Types(self):
            return self.getToken(CPP14Parser.Types, 0)

        def SignedUnsigned(self):
            return self.getToken(CPP14Parser.SignedUnsigned, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_simpletypespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpletypespecifier"):
                listener.enterSimpletypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpletypespecifier"):
                listener.exitSimpletypespecifier(self)

    def simpletypespecifier(self):

        localctx = CPP14Parser.SimpletypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_simpletypespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1768
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 318, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1732
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 312, self._ctx)
                if la_ == 1:
                    self.state = 1731
                    self.nestednamespecifier()

                self.state = 1734
                self.match(CPP14Parser.Identifier)
                self.state = 1740
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 314, self._ctx)
                if la_ == 1:
                    self.state = 1735
                    self.match(CPP14Parser.Less)
                    self.state = 1737
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                        1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 1736
                        self.templateargumentlist()

                    self.state = 1739
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1742
                self.nestednamespecifier()
                self.state = 1743
                self.match(CPP14Parser.Template)
                self.state = 1744
                self.match(CPP14Parser.Identifier)
                self.state = 1745
                self.match(CPP14Parser.Less)
                self.state = 1747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                    1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                    1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                    1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                    1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                    1 << (CPP14Parser.Numberliteral - 67)) | (1 << (CPP14Parser.Characterliteral - 67)) | (
                    1 << (CPP14Parser.Stringliteral - 67)) | (1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 1746
                    self.templateargumentlist()

                self.state = 1749
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1751
                self.match(CPP14Parser.Types)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1752
                self.match(CPP14Parser.SignedUnsigned)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1753
                self.match(CPP14Parser.Auto)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1754
                self.match(CPP14Parser.Decltype)
                self.state = 1755
                self.match(CPP14Parser.LeftParen)
                self.state = 1765
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 317, self._ctx)
                if la_ == 1:
                    self.state = 1756
                    self.assignmentexpression()
                    self.state = 1761
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1757
                        self.match(CPP14Parser.Comma)
                        self.state = 1758
                        self.assignmentexpression()
                        self.state = 1763
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1764
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 1767
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def balancedtoken(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BalancedtokenContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BalancedtokenContext, i)

        def Alignas(self):
            return self.getToken(CPP14Parser.Alignas, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributespecifier"):
                listener.enterAttributespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributespecifier"):
                listener.exitAttributespecifier(self)

    def attributespecifier(self):

        localctx = CPP14Parser.AttributespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_attributespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1844
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1770
                self.match(CPP14Parser.LeftBracket)
                self.state = 1771
                self.match(CPP14Parser.LeftBracket)
                self.state = 1790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 1772
                    self.match(CPP14Parser.Identifier)
                    self.state = 1775
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Doublecolon:
                        self.state = 1773
                        self.match(CPP14Parser.Doublecolon)
                        self.state = 1774
                        self.match(CPP14Parser.Identifier)

                    self.state = 1785
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.LeftParen:
                        self.state = 1777
                        self.match(CPP14Parser.LeftParen)
                        self.state = 1781
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                            1 << CPP14Parser.LeftBrace))) != 0):
                            self.state = 1778
                            self.balancedtoken()
                            self.state = 1783
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1784
                        self.match(CPP14Parser.RightParen)

                    self.state = 1788
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 1787
                        self.match(CPP14Parser.Ellipsis)

                self.state = 1815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 1792
                    self.match(CPP14Parser.Comma)
                    self.state = 1811
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 1793
                        self.match(CPP14Parser.Identifier)
                        self.state = 1796
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Doublecolon:
                            self.state = 1794
                            self.match(CPP14Parser.Doublecolon)
                            self.state = 1795
                            self.match(CPP14Parser.Identifier)

                        self.state = 1806
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.LeftParen:
                            self.state = 1798
                            self.match(CPP14Parser.LeftParen)
                            self.state = 1802
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.LeftBrace))) != 0):
                                self.state = 1799
                                self.balancedtoken()
                                self.state = 1804
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 1805
                            self.match(CPP14Parser.RightParen)

                        self.state = 1809
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 1808
                            self.match(CPP14Parser.Ellipsis)

                    self.state = 1817
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1818
                self.match(CPP14Parser.RightBracket)
                self.state = 1819
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.Alignas]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1820
                self.match(CPP14Parser.Alignas)
                self.state = 1821
                self.match(CPP14Parser.LeftParen)
                self.state = 1837
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 333, self._ctx)
                if la_ == 1:
                    self.state = 1823
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1822
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1825
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 330, self._ctx)

                    self.state = 1830
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 331, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1827
                            self.attributespecifier()
                        self.state = 1832
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 331, self._ctx)

                    self.state = 1834
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 332, self._ctx)
                    if la_ == 1:
                        self.state = 1833
                        self.abstractdeclarator()

                    pass

                elif la_ == 2:
                    self.state = 1836
                    self.constantexpression()
                    pass

                self.state = 1840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1839
                    self.match(CPP14Parser.Ellipsis)

                self.state = 1842
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BalancedtokenContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtoken(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BalancedtokenContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BalancedtokenContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtoken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBalancedtoken"):
                listener.enterBalancedtoken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBalancedtoken"):
                listener.exitBalancedtoken(self)

    def balancedtoken(self):

        localctx = CPP14Parser.BalancedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_balancedtoken)
        self._la = 0  # Token type
        try:
            self.state = 1870
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1846
                self.match(CPP14Parser.LeftParen)
                self.state = 1850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                    1 << CPP14Parser.LeftBrace))) != 0):
                    self.state = 1847
                    self.balancedtoken()
                    self.state = 1852
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1853
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1854
                self.match(CPP14Parser.LeftBracket)
                self.state = 1858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                    1 << CPP14Parser.LeftBrace))) != 0):
                    self.state = 1855
                    self.balancedtoken()
                    self.state = 1860
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1861
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1862
                self.match(CPP14Parser.LeftBrace)
                self.state = 1866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                    1 << CPP14Parser.LeftBrace))) != 0):
                    self.state = 1863
                    self.balancedtoken()
                    self.state = 1868
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1869
                self.match(CPP14Parser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext, 0)

        def ptroperator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PtroperatorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, i)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def trailingtypespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TrailingtypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclarator"):
                listener.enterDeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclarator"):
                listener.exitDeclarator(self)

    def declarator(self):

        localctx = CPP14Parser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_declarator)
        try:
            self.state = 1896
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 344, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1875
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 340, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1872
                        self.ptroperator()
                    self.state = 1877
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 340, self._ctx)

                self.state = 1878
                self.noptrdeclarator(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1879
                self.noptrdeclarator(0)
                self.state = 1880
                self.parametersandqualifiers()
                self.state = 1881
                self.match(CPP14Parser.Arrow)
                self.state = 1883
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1882
                        self.trailingtypespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1885
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 341, self._ctx)

                self.state = 1890
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 342, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1887
                        self.attributespecifier()
                    self.state = 1892
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 342, self._ctx)

                self.state = 1894
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 343, self._ctx)
                if la_ == 1:
                    self.state = 1893
                    self.abstractdeclarator()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext, 0)

        def ptroperator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PtroperatorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, i)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrdeclarator"):
                listener.enterNoptrdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrdeclarator"):
                listener.exitNoptrdeclarator(self)

    def noptrdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 72
        self.enterRecursionRule(localctx, 72, self.RULE_noptrdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1925
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Operator, CPP14Parser.Tilde, CPP14Parser.Ellipsis,
                         CPP14Parser.Identifier]:
                self.state = 1900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1899
                    self.match(CPP14Parser.Ellipsis)

                self.state = 1906
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 347, self._ctx)
                if la_ == 1:
                    self.state = 1902
                    self.nestednamespecifier()
                    self.state = 1904
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Template:
                        self.state = 1903
                        self.match(CPP14Parser.Template)

                self.state = 1908
                self.unqualifiedid()
                self.state = 1912
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 348, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1909
                        self.attributespecifier()
                    self.state = 1914
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 348, self._ctx)

                pass
            elif token in [CPP14Parser.LeftParen]:
                self.state = 1915
                self.match(CPP14Parser.LeftParen)
                self.state = 1919
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 349, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1916
                        self.ptroperator()
                    self.state = 1921
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 349, self._ctx)

                self.state = 1922
                self.noptrdeclarator(0)
                self.state = 1923
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1944
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 354, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoptrdeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                    self.state = 1927
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1940
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.LeftParen]:
                        self.state = 1928
                        self.parametersandqualifiers()
                        pass
                    elif token in [CPP14Parser.LeftBracket]:
                        self.state = 1929
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1931
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (
                            1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                        (1 << (CPP14Parser.And - 67)) | (
                                                                        1 << (CPP14Parser.Or - 67)) | (
                                                                    1 << (CPP14Parser.Tilde - 67)) | (
                                                                1 << (CPP14Parser.Not - 67)) | (
                                                            1 << (CPP14Parser.PlusPlus - 67)) | (
                                                        1 << (CPP14Parser.MinusMinus - 67)) | (
                                                    1 << (CPP14Parser.Doublecolon - 67)) | (
                                                1 << (CPP14Parser.Identifier - 67)) | (
                                            1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 1930
                            self.constantexpression()

                        self.state = 1933
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1937
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 352, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1934
                                self.attributespecifier()
                            self.state = 1939
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 352, self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 1946
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 354, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParametersandqualifiersContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ParameterdeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, i)

        def ConstOrVolatile(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.ConstOrVolatile)
            else:
                return self.getToken(CPP14Parser.ConstOrVolatile, i)

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def abstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AbstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parametersandqualifiers

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParametersandqualifiers"):
                listener.enterParametersandqualifiers(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParametersandqualifiers"):
                listener.exitParametersandqualifiers(self)

    def parametersandqualifiers(self):

        localctx = CPP14Parser.ParametersandqualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_parametersandqualifiers)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1947
            self.match(CPP14Parser.LeftParen)
            self.state = 1972
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 359, self._ctx)
            if la_ == 1:
                self.state = 1956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Specifier) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Typename) | (
                    1 << CPP14Parser.Union) | (1 << CPP14Parser.Virtual) | (
                    1 << CPP14Parser.LeftBracket))) != 0) or _la == CPP14Parser.Identifier:
                    self.state = 1948
                    self.parameterdeclaration()
                    self.state = 1953
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1949
                        self.match(CPP14Parser.Comma)
                        self.state = 1950
                        self.parameterdeclaration()
                        self.state = 1955
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1958
                    self.match(CPP14Parser.Ellipsis)

                pass

            elif la_ == 2:
                self.state = 1961
                self.parameterdeclaration()
                self.state = 1966
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 358, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1962
                        self.match(CPP14Parser.Comma)
                        self.state = 1963
                        self.parameterdeclaration()
                    self.state = 1968
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 358, self._ctx)

                self.state = 1969
                self.match(CPP14Parser.Comma)
                self.state = 1970
                self.match(CPP14Parser.Ellipsis)
                pass

            self.state = 1974
            self.match(CPP14Parser.RightParen)
            self.state = 1978
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 360, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1975
                    self.match(CPP14Parser.ConstOrVolatile)
                self.state = 1980
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 360, self._ctx)

            self.state = 1982
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 361, self._ctx)
            if la_ == 1:
                self.state = 1981
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 2036
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 373, self._ctx)
            if la_ == 1:
                self.state = 1984
                self.match(CPP14Parser.Throw)
                self.state = 1985
                self.match(CPP14Parser.LeftParen)
                self.state = 2026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.Types) | (1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union))) != 0) or _la == CPP14Parser.Identifier:
                    self.state = 1987
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1986
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1989
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 362, self._ctx)

                    self.state = 1994
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 363, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1991
                            self.attributespecifier()
                        self.state = 1996
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 363, self._ctx)

                    self.state = 1998
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 364, self._ctx)
                    if la_ == 1:
                        self.state = 1997
                        self.abstractdeclarator()

                    self.state = 2001
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2000
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2023
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 2003
                        self.match(CPP14Parser.Comma)
                        self.state = 2005
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 2004
                                self.typespecifier()

                            else:
                                raise NoViableAltException(self)
                            self.state = 2007
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 366, self._ctx)

                        self.state = 2012
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 367, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 2009
                                self.attributespecifier()
                            self.state = 2014
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 367, self._ctx)

                        self.state = 2016
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 368, self._ctx)
                        if la_ == 1:
                            self.state = 2015
                            self.abstractdeclarator()

                        self.state = 2019
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 2018
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 2025
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 2028
                self.match(CPP14Parser.RightParen)

            elif la_ == 2:
                self.state = 2029
                self.match(CPP14Parser.Noexcept)
                self.state = 2034
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 372, self._ctx)
                if la_ == 1:
                    self.state = 2030
                    self.match(CPP14Parser.LeftParen)
                    self.state = 2031
                    self.constantexpression()
                    self.state = 2032
                    self.match(CPP14Parser.RightParen)

            self.state = 2041
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 374, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2038
                    self.attributespecifier()
                self.state = 2043
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 374, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtroperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def ConstOrVolatile(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.ConstOrVolatile)
            else:
                return self.getToken(CPP14Parser.ConstOrVolatile, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptroperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPtroperator"):
                listener.enterPtroperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPtroperator"):
                listener.exitPtroperator(self)

    def ptroperator(self):

        localctx = CPP14Parser.PtroperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_ptroperator)
        self._la = 0  # Token type
        try:
            self.state = 2067
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2045
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Identifier:
                    self.state = 2044
                    self.nestednamespecifier()

                self.state = 2047
                self.match(CPP14Parser.Star)
                self.state = 2051
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 376, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2048
                        self.attributespecifier()
                    self.state = 2053
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 376, self._ctx)

                self.state = 2057
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 377, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2054
                        self.match(CPP14Parser.ConstOrVolatile)
                    self.state = 2059
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 377, self._ctx)

                pass
            elif token in [CPP14Parser.And, CPP14Parser.AndAnd]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2060
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2064
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 378, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2061
                        self.attributespecifier()
                    self.state = 2066
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 378, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.NoptrabstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, i)

        def parametersandqualifiers(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ParametersandqualifiersContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, i)

        def ptroperator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PtroperatorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, i)

        def trailingtypespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TrailingtypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def constantexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ConstantexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbstractdeclarator"):
                listener.enterAbstractdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbstractdeclarator"):
                listener.exitAbstractdeclarator(self)

    def abstractdeclarator(self):

        localctx = CPP14Parser.AbstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_abstractdeclarator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2087
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 383, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2070
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 380, self._ctx)
                    if la_ == 1:
                        self.state = 2069
                        self.noptrabstractdeclarator(0)

                    self.state = 2072
                    self.parametersandqualifiers()
                    self.state = 2073
                    self.match(CPP14Parser.Arrow)
                    self.state = 2075
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2074
                            self.trailingtypespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 2077
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 381, self._ctx)

                    self.state = 2082
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 382, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2079
                            self.attributespecifier()
                        self.state = 2084
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 382, self._ctx)

                self.state = 2089
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 383, self._ctx)

            self.state = 2093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Decltype or _la == CPP14Parser.Star or ((((_la - 67)) & ~0x3f) == 0 and (
                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                1 << (CPP14Parser.Identifier - 67)))) != 0):
                self.state = 2090
                self.ptroperator()
                self.state = 2095
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2115
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen, CPP14Parser.LeftBracket]:
                self.state = 2096
                self.noptrabstractdeclarator(0)
                pass
            elif token in [CPP14Parser.Ellipsis]:
                self.state = 2097
                self.match(CPP14Parser.Ellipsis)
                self.state = 2112
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 388, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2110
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.LeftParen]:
                            self.state = 2098
                            self.parametersandqualifiers()
                            pass
                        elif token in [CPP14Parser.LeftBracket]:
                            self.state = 2099
                            self.match(CPP14Parser.LeftBracket)
                            self.state = 2101
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                                1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                                1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (
                                1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Or - 67)) | (
                                1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                                1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                                1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                                self.state = 2100
                                self.constantexpression()

                            self.state = 2103
                            self.match(CPP14Parser.RightBracket)
                            self.state = 2107
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 386, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 2104
                                    self.attributespecifier()
                                self.state = 2109
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 386, self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                    self.state = 2114
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 388, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def ptroperator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PtroperatorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrabstractdeclarator"):
                listener.enterNoptrabstractdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrabstractdeclarator"):
                listener.exitNoptrabstractdeclarator(self)

    def noptrabstractdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_noptrabstractdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 393, self._ctx)
            if la_ == 1:
                self.state = 2118
                self.parametersandqualifiers()
                pass

            elif la_ == 2:
                self.state = 2119
                self.match(CPP14Parser.LeftBracket)
                self.state = 2121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                    1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                (1 << (CPP14Parser.And - 67)) | (
                                                                1 << (CPP14Parser.Or - 67)) | (
                                                            1 << (CPP14Parser.Tilde - 67)) | (
                                                        1 << (CPP14Parser.Not - 67)) | (
                                                    1 << (CPP14Parser.PlusPlus - 67)) | (
                                                1 << (CPP14Parser.MinusMinus - 67)) | (
                                            1 << (CPP14Parser.Doublecolon - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                                1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 2120
                    self.constantexpression()

                self.state = 2123
                self.match(CPP14Parser.RightBracket)
                self.state = 2127
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 391, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2124
                        self.attributespecifier()
                    self.state = 2129
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 391, self._ctx)

                pass

            elif la_ == 3:
                self.state = 2130
                self.match(CPP14Parser.LeftParen)
                self.state = 2134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Decltype or _la == CPP14Parser.Star or ((((_la - 67)) & ~0x3f) == 0 and (
                    (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 2131
                    self.ptroperator()
                    self.state = 2136
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2137
                self.noptrabstractdeclarator(0)
                self.state = 2138
                self.match(CPP14Parser.RightParen)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 2159
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 397, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                    self.state = 2142
                    if not self.precpred(self._ctx, 4):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                    self.state = 2155
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.LeftParen]:
                        self.state = 2143
                        self.parametersandqualifiers()
                        pass
                    elif token in [CPP14Parser.LeftBracket]:
                        self.state = 2144
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 2146
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (
                            1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                        (1 << (CPP14Parser.And - 67)) | (
                                                                        1 << (CPP14Parser.Or - 67)) | (
                                                                    1 << (CPP14Parser.Tilde - 67)) | (
                                                                1 << (CPP14Parser.Not - 67)) | (
                                                            1 << (CPP14Parser.PlusPlus - 67)) | (
                                                        1 << (CPP14Parser.MinusMinus - 67)) | (
                                                    1 << (CPP14Parser.Doublecolon - 67)) | (
                                                1 << (CPP14Parser.Identifier - 67)) | (
                                            1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 2145
                            self.constantexpression()

                        self.state = 2148
                        self.match(CPP14Parser.RightBracket)
                        self.state = 2152
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 395, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 2149
                                self.attributespecifier()
                            self.state = 2154
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 395, self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 2161
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 397, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParameterdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterdeclaration"):
                listener.enterParameterdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterdeclaration"):
                listener.exitParameterdeclaration(self)

    def parameterdeclaration(self):

        localctx = CPP14Parser.ParameterdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_parameterdeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 2162
                self.attributespecifier()
                self.state = 2167
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2168
            self.declspecifierseq()
            self.state = 2171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 399, self._ctx)
            if la_ == 1:
                self.state = 2169
                self.declarator()
                pass

            elif la_ == 2:
                self.state = 2170
                self.abstractdeclarator()
                pass

            self.state = 2185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Assign:
                self.state = 2173
                self.match(CPP14Parser.Assign)
                self.state = 2183
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                             CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                             CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                             CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                             CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                             CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                             CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                             CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Numberliteral,
                             CPP14Parser.Characterliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                             CPP14Parser.Userdefinedstringliteral]:
                    self.state = 2174
                    self.assignmentexpression()
                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 2175
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 2180
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                        1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                        1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 2176
                        self.initializerlist()
                        self.state = 2178
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Comma:
                            self.state = 2177
                            self.match(CPP14Parser.Comma)

                    self.state = 2182
                    self.match(CPP14Parser.RightBrace)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitializer"):
                listener.enterInitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitializer"):
                listener.exitInitializer(self)

    def initializer(self):

        localctx = CPP14Parser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_initializer)
        self._la = 0  # Token type
        try:
            self.state = 2204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 407, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2187
                self.match(CPP14Parser.Assign)
                self.state = 2188
                self.assignmentexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Assign:
                    self.state = 2189
                    self.match(CPP14Parser.Assign)

                self.state = 2192
                self.match(CPP14Parser.LeftBrace)
                self.state = 2197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                    1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                    1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                    1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                    1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                    1 << (CPP14Parser.Numberliteral - 67)) | (1 << (CPP14Parser.Characterliteral - 67)) | (
                    1 << (CPP14Parser.Stringliteral - 67)) | (1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 2193
                    self.initializerlist()
                    self.state = 2195
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Comma:
                        self.state = 2194
                        self.match(CPP14Parser.Comma)

                self.state = 2199
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2200
                self.match(CPP14Parser.LeftParen)
                self.state = 2201
                self.initializerlist()
                self.state = 2202
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def initializerlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InitializerlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitializerlist"):
                listener.enterInitializerlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitializerlist"):
                listener.exitInitializerlist(self)

    def initializerlist(self):

        localctx = CPP14Parser.InitializerlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_initializerlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2215
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                         CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                         CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.SignedUnsigned,
                         CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw, CPP14Parser.Typeid,
                         CPP14Parser.Typename, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus,
                         CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde,
                         CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                         CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                         CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                         CPP14Parser.Userdefinedstringliteral]:
                self.state = 2206
                self.assignmentexpression()
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.state = 2207
                self.match(CPP14Parser.LeftBrace)
                self.state = 2212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                    1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                    1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                    1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                    1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                    1 << (CPP14Parser.Numberliteral - 67)) | (1 << (CPP14Parser.Characterliteral - 67)) | (
                    1 << (CPP14Parser.Stringliteral - 67)) | (1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 2208
                    self.initializerlist()
                    self.state = 2210
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Comma:
                        self.state = 2209
                        self.match(CPP14Parser.Comma)

                self.state = 2214
                self.match(CPP14Parser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Ellipsis:
                self.state = 2217
                self.match(CPP14Parser.Ellipsis)

            self.state = 2237
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 416, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2220
                    self.match(CPP14Parser.Comma)
                    self.state = 2230
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                 CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                                 CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                 CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                 CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                 CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                 CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                 CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                 CPP14Parser.Userdefinedstringliteral]:
                        self.state = 2221
                        self.assignmentexpression()
                        pass
                    elif token in [CPP14Parser.LeftBrace]:
                        self.state = 2222
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 2227
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (
                            1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                            1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                            1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                            1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                            1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                            1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 2223
                            self.initializerlist()
                            self.state = 2225
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Comma:
                                self.state = 2224
                                self.match(CPP14Parser.Comma)

                        self.state = 2229
                        self.match(CPP14Parser.RightBrace)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2233
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2232
                        self.match(CPP14Parser.Ellipsis)

                self.state = 2239
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 416, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def memberdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.MemberdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorContext, i)

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def Override(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Override)
            else:
                return self.getToken(CPP14Parser.Override, i)

        def Final(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Final)
            else:
                return self.getToken(CPP14Parser.Final, i)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def handler(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.HandlerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.HandlerContext, i)

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberdeclaration"):
                listener.enterMemberdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberdeclaration"):
                listener.exitMemberdeclaration(self)

    def memberdeclaration(self):

        localctx = CPP14Parser.MemberdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_memberdeclaration)
        self._la = 0  # Token type
        try:
            self.state = 2355
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 435, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2243
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 417, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2240
                        self.attributespecifier()
                    self.state = 2245
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 417, self._ctx)

                self.state = 2247
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 418, self._ctx)
                if la_ == 1:
                    self.state = 2246
                    self.declspecifierseq()

                self.state = 2302
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 428, self._ctx)
                if la_ == 1:
                    self.state = 2257
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Decltype) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                        (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                    1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Colon - 67)) | (
                            1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 2249
                        self.memberdeclarator()
                        self.state = 2254
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 2250
                            self.match(CPP14Parser.Comma)
                            self.state = 2251
                            self.memberdeclarator()
                            self.state = 2256
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 2259
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 2:
                    self.state = 2260
                    self.declarator()
                    self.state = 2264
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Final or _la == CPP14Parser.Override:
                        self.state = 2261
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Final or _la == CPP14Parser.Override):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2266
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2300
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.LeftBrace, CPP14Parser.Colon]:
                        self.state = 2269
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Colon:
                            self.state = 2267
                            self.match(CPP14Parser.Colon)
                            self.state = 2268
                            self.meminitializerlist()

                        self.state = 2271
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 2275
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                            1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                            1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (
                            1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (
                            1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                            1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (1 << CPP14Parser.Return) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (
                            1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                            1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                            1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                                    (1 << (CPP14Parser.And - 67)) | (
                                                                                    1 << (CPP14Parser.Or - 67)) | (
                                                                                1 << (CPP14Parser.Tilde - 67)) | (
                                                                            1 << (CPP14Parser.Not - 67)) | (
                                                                        1 << (CPP14Parser.AndAnd - 67)) | (
                                                                    1 << (CPP14Parser.PlusPlus - 67)) | (
                                                                1 << (CPP14Parser.MinusMinus - 67)) | (
                                                            1 << (CPP14Parser.Doublecolon - 67)) | (
                                                        1 << (CPP14Parser.Semi - 67)) | (
                                                    1 << (CPP14Parser.Ellipsis - 67)) | (
                                                1 << (CPP14Parser.Identifier - 67)) | (
                                            1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 2272
                            self.statement()
                            self.state = 2277
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2278
                        self.match(CPP14Parser.RightBrace)
                        pass
                    elif token in [CPP14Parser.Try]:
                        self.state = 2279
                        self.match(CPP14Parser.Try)
                        self.state = 2282
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Colon:
                            self.state = 2280
                            self.match(CPP14Parser.Colon)
                            self.state = 2281
                            self.meminitializerlist()

                        self.state = 2284
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 2288
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                            1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                            1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (
                            1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (
                            1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                            1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (1 << CPP14Parser.Return) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (
                            1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                            1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                            1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                                    (1 << (CPP14Parser.And - 67)) | (
                                                                                    1 << (CPP14Parser.Or - 67)) | (
                                                                                1 << (CPP14Parser.Tilde - 67)) | (
                                                                            1 << (CPP14Parser.Not - 67)) | (
                                                                        1 << (CPP14Parser.AndAnd - 67)) | (
                                                                    1 << (CPP14Parser.PlusPlus - 67)) | (
                                                                1 << (CPP14Parser.MinusMinus - 67)) | (
                                                            1 << (CPP14Parser.Doublecolon - 67)) | (
                                                        1 << (CPP14Parser.Semi - 67)) | (
                                                    1 << (CPP14Parser.Ellipsis - 67)) | (
                                                1 << (CPP14Parser.Identifier - 67)) | (
                                            1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 2285
                            self.statement()
                            self.state = 2290
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2291
                        self.match(CPP14Parser.RightBrace)
                        self.state = 2293
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 2292
                            self.handler()
                            self.state = 2295
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la == CPP14Parser.Catch):
                                break

                        pass
                    elif token in [CPP14Parser.Assign]:
                        self.state = 2297
                        self.match(CPP14Parser.Assign)
                        self.state = 2298
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Default or _la == CPP14Parser.Delete):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2299
                        self.match(CPP14Parser.Semi)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2304
                self.match(CPP14Parser.Using)
                self.state = 2310
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Decltype, CPP14Parser.Typename, CPP14Parser.Identifier]:
                    self.state = 2306
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Typename:
                        self.state = 2305
                        self.match(CPP14Parser.Typename)

                    self.state = 2308
                    self.nestednamespecifier()
                    pass
                elif token in [CPP14Parser.Doublecolon]:
                    self.state = 2309
                    self.match(CPP14Parser.Doublecolon)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2312
                self.unqualifiedid()
                self.state = 2313
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2315
                self.match(CPP14Parser.Static_assert)
                self.state = 2316
                self.match(CPP14Parser.LeftParen)
                self.state = 2317
                self.constantexpression()
                self.state = 2318
                self.match(CPP14Parser.Comma)
                self.state = 2319
                self.match(CPP14Parser.Stringliteral)
                self.state = 2320
                self.match(CPP14Parser.RightParen)
                self.state = 2321
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2323
                self.match(CPP14Parser.Template)
                self.state = 2324
                self.match(CPP14Parser.Less)
                self.state = 2325
                self.templateparameterlist()
                self.state = 2326
                self.match(CPP14Parser.Greater)
                self.state = 2327
                self.declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2329
                self.match(CPP14Parser.Using)
                self.state = 2330
                self.match(CPP14Parser.Identifier)
                self.state = 2334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2331
                    self.attributespecifier()
                    self.state = 2336
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2337
                self.match(CPP14Parser.Assign)
                self.state = 2339
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2338
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2341
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 432, self._ctx)

                self.state = 2346
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 433, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2343
                        self.attributespecifier()
                    self.state = 2348
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 433, self._ctx)

                self.state = 2350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                            (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                        1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 2349
                    self.abstractdeclarator()

                self.state = 2352
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2354
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def purespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.PurespecifierContext, 0)

        def Override(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Override)
            else:
                return self.getToken(CPP14Parser.Override, i)

        def Final(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Final)
            else:
                return self.getToken(CPP14Parser.Final, i)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberdeclarator"):
                listener.enterMemberdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberdeclarator"):
                listener.exitMemberdeclarator(self)

    def memberdeclarator(self):

        localctx = CPP14Parser.MemberdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_memberdeclarator)
        self._la = 0  # Token type
        try:
            self.state = 2402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 447, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2357
                self.declarator()
                self.state = 2389
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 444, self._ctx)
                if la_ == 1:
                    self.state = 2361
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Final or _la == CPP14Parser.Override:
                        self.state = 2358
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Final or _la == CPP14Parser.Override):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2363
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2365
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Assign:
                        self.state = 2364
                        self.purespecifier()

                    pass

                elif la_ == 2:
                    self.state = 2387
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Assign]:
                        self.state = 2367
                        self.match(CPP14Parser.Assign)
                        self.state = 2377
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                     CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                     CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                     CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This,
                                     CPP14Parser.Throw, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                     CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                     CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                     CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                     CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                     CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                     CPP14Parser.Userdefinedstringliteral]:
                            self.state = 2368
                            self.assignmentexpression()
                            pass
                        elif token in [CPP14Parser.LeftBrace]:
                            self.state = 2369
                            self.match(CPP14Parser.LeftBrace)
                            self.state = 2374
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                                1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                                1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                                1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Or - 67)) | (
                                1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                                1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                                1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                                self.state = 2370
                                self.initializerlist()
                                self.state = 2372
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == CPP14Parser.Comma:
                                    self.state = 2371
                                    self.match(CPP14Parser.Comma)

                            self.state = 2376
                            self.match(CPP14Parser.RightBrace)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [CPP14Parser.LeftBrace]:
                        self.state = 2379
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 2384
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (
                            1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                            1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                            1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                            1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                            1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                            1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 2380
                            self.initializerlist()
                            self.state = 2382
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Comma:
                                self.state = 2381
                                self.match(CPP14Parser.Comma)

                        self.state = 2386
                        self.match(CPP14Parser.RightBrace)
                        pass
                    elif token in [CPP14Parser.Comma, CPP14Parser.Semi]:
                        pass
                    else:
                        pass
                    pass

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 2391
                    self.match(CPP14Parser.Identifier)

                self.state = 2397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2394
                    self.attributespecifier()
                    self.state = 2399
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2400
                self.match(CPP14Parser.Colon)
                self.state = 2401
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PurespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None  # Token

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Octalliteral(self):
            return self.getToken(CPP14Parser.Octalliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_purespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPurespecifier"):
                listener.enterPurespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPurespecifier"):
                listener.exitPurespecifier(self)

    def purespecifier(self):

        localctx = CPP14Parser.PurespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_purespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2404
            self.match(CPP14Parser.Assign)
            self.state = 2405
            localctx.val = self.match(CPP14Parser.Octalliteral)
            if (None if localctx.val is None else localctx.val.text).compareTo('0') != 0:
                raise InputMismatchException(self)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BasespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def PrivateProtectedPublic(self):
            return self.getToken(CPP14Parser.PrivateProtectedPublic, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBasespecifier"):
                listener.enterBasespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBasespecifier"):
                listener.exitBasespecifier(self)

    def basespecifier(self):

        localctx = CPP14Parser.BasespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_basespecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 2408
                self.attributespecifier()
                self.state = 2413
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2422
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Virtual]:
                self.state = 2414
                self.match(CPP14Parser.Virtual)
                self.state = 2416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.PrivateProtectedPublic:
                    self.state = 2415
                    self.match(CPP14Parser.PrivateProtectedPublic)

                pass
            elif token in [CPP14Parser.PrivateProtectedPublic]:
                self.state = 2418
                self.match(CPP14Parser.PrivateProtectedPublic)
                self.state = 2420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Virtual:
                    self.state = 2419
                    self.match(CPP14Parser.Virtual)

                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Identifier]:
                pass
            else:
                pass
            self.state = 2449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 457, self._ctx)
            if la_ == 1:
                self.state = 2425
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 452, self._ctx)
                if la_ == 1:
                    self.state = 2424
                    self.nestednamespecifier()

                self.state = 2427
                self.match(CPP14Parser.Identifier)
                self.state = 2433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Less:
                    self.state = 2428
                    self.match(CPP14Parser.Less)
                    self.state = 2430
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                        1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 2429
                        self.templateargumentlist()

                    self.state = 2432
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 2:
                self.state = 2435
                self.match(CPP14Parser.Decltype)
                self.state = 2436
                self.match(CPP14Parser.LeftParen)
                self.state = 2446
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 456, self._ctx)
                if la_ == 1:
                    self.state = 2437
                    self.assignmentexpression()
                    self.state = 2442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 2438
                        self.match(CPP14Parser.Comma)
                        self.state = 2439
                        self.assignmentexpression()
                        self.state = 2444
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 2445
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 2448
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeminitializerlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializerlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeminitializerlist"):
                listener.enterMeminitializerlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeminitializerlist"):
                listener.exitMeminitializerlist(self)

    def meminitializerlist(self):

        localctx = CPP14Parser.MeminitializerlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_meminitializerlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 463, self._ctx)
            if la_ == 1:
                self.state = 2452
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 458, self._ctx)
                if la_ == 1:
                    self.state = 2451
                    self.nestednamespecifier()

                self.state = 2454
                self.match(CPP14Parser.Identifier)
                self.state = 2460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Less:
                    self.state = 2455
                    self.match(CPP14Parser.Less)
                    self.state = 2457
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)) | (1 << (CPP14Parser.Numberliteral - 67)) | (
                        1 << (CPP14Parser.Characterliteral - 67)) | (1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 2456
                        self.templateargumentlist()

                    self.state = 2459
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 2:
                self.state = 2462
                self.match(CPP14Parser.Decltype)
                self.state = 2463
                self.match(CPP14Parser.LeftParen)
                self.state = 2473
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 462, self._ctx)
                if la_ == 1:
                    self.state = 2464
                    self.assignmentexpression()
                    self.state = 2469
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 2465
                        self.match(CPP14Parser.Comma)
                        self.state = 2466
                        self.assignmentexpression()
                        self.state = 2471
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 2472
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 2475
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 3:
                self.state = 2476
                self.match(CPP14Parser.Identifier)
                pass

            self.state = 2492
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.state = 2479
                self.match(CPP14Parser.LeftParen)
                self.state = 2481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                    1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                    1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                    1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                    1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                    1 << (CPP14Parser.Numberliteral - 67)) | (1 << (CPP14Parser.Characterliteral - 67)) | (
                    1 << (CPP14Parser.Stringliteral - 67)) | (1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 2480
                    self.initializerlist()

                self.state = 2483
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.state = 2484
                self.match(CPP14Parser.LeftBrace)
                self.state = 2489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                    1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                    1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                    1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                    1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                    1 << (CPP14Parser.Numberliteral - 67)) | (1 << (CPP14Parser.Characterliteral - 67)) | (
                    1 << (CPP14Parser.Stringliteral - 67)) | (1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 2485
                    self.initializerlist()
                    self.state = 2487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Comma:
                        self.state = 2486
                        self.match(CPP14Parser.Comma)

                self.state = 2491
                self.match(CPP14Parser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Ellipsis:
                self.state = 2494
                self.match(CPP14Parser.Ellipsis)

            self.state = 2499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Comma:
                self.state = 2497
                self.match(CPP14Parser.Comma)
                self.state = 2498
                self.meminitializerlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateparameterlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Template)
            else:
                return self.getToken(CPP14Parser.Template, i)

        def templateparameterlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateparameterlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, i)

        def Class(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Class)
            else:
                return self.getToken(CPP14Parser.Class, i)

        def parameterdeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ParameterdeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, i)

        def Typename(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Typename)
            else:
                return self.getToken(CPP14Parser.Typename, i)

        def unqualifiedid(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.UnqualifiedidContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, i)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AbstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, i)

        def nestednamespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.NestednamespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameterlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateparameterlist"):
                listener.enterTemplateparameterlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateparameterlist"):
                listener.exitTemplateparameterlist(self)

    def templateparameterlist(self):

        localctx = CPP14Parser.TemplateparameterlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_templateparameterlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 483, self._ctx)
            if la_ == 1:
                self.state = 2501
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Class or _la == CPP14Parser.Typename):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2526
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 476, self._ctx)
                if la_ == 1:
                    self.state = 2503
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2502
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2506
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2505
                        self.match(CPP14Parser.Identifier)

                    pass

                elif la_ == 2:
                    self.state = 2509
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2508
                        self.match(CPP14Parser.Identifier)

                    self.state = 2511
                    self.match(CPP14Parser.Assign)
                    self.state = 2513
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2512
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 2515
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 473, self._ctx)

                    self.state = 2520
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 474, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2517
                            self.attributespecifier()
                        self.state = 2522
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 474, self._ctx)

                    self.state = 2524
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                            1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 2523
                        self.abstractdeclarator()

                    pass

                pass

            elif la_ == 2:
                self.state = 2528
                self.match(CPP14Parser.Template)
                self.state = 2529
                self.match(CPP14Parser.Less)
                self.state = 2530
                self.templateparameterlist()
                self.state = 2531
                self.match(CPP14Parser.Greater)
                self.state = 2532
                self.match(CPP14Parser.Class)
                self.state = 2550
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 482, self._ctx)
                if la_ == 1:
                    self.state = 2534
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2533
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2537
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2536
                        self.match(CPP14Parser.Identifier)

                    pass

                elif la_ == 2:
                    self.state = 2540
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2539
                        self.match(CPP14Parser.Identifier)

                    self.state = 2542
                    self.match(CPP14Parser.Assign)
                    self.state = 2547
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 481, self._ctx)
                    if la_ == 1:
                        self.state = 2543
                        self.nestednamespecifier()
                        self.state = 2545
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 2544
                            self.match(CPP14Parser.Template)

                    self.state = 2549
                    self.unqualifiedid()
                    pass

                pass

            elif la_ == 3:
                self.state = 2552
                self.parameterdeclaration()
                pass

            self.state = 2612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Comma:
                self.state = 2555
                self.match(CPP14Parser.Comma)
                self.state = 2608
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 497, self._ctx)
                if la_ == 1:
                    self.state = 2556
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Class or _la == CPP14Parser.Typename):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2581
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 490, self._ctx)
                    if la_ == 1:
                        self.state = 2558
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 2557
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 2561
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Identifier:
                            self.state = 2560
                            self.match(CPP14Parser.Identifier)

                        pass

                    elif la_ == 2:
                        self.state = 2564
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Identifier:
                            self.state = 2563
                            self.match(CPP14Parser.Identifier)

                        self.state = 2566
                        self.match(CPP14Parser.Assign)
                        self.state = 2568
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 2567
                                self.typespecifier()

                            else:
                                raise NoViableAltException(self)
                            self.state = 2570
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 487, self._ctx)

                        self.state = 2575
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 488, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 2572
                                self.attributespecifier()
                            self.state = 2577
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 488, self._ctx)

                        self.state = 2579
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                    (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                                1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                            self.state = 2578
                            self.abstractdeclarator()

                        pass

                    pass

                elif la_ == 2:
                    self.state = 2583
                    self.match(CPP14Parser.Template)
                    self.state = 2584
                    self.match(CPP14Parser.Less)
                    self.state = 2585
                    self.templateparameterlist()
                    self.state = 2586
                    self.match(CPP14Parser.Greater)
                    self.state = 2587
                    self.match(CPP14Parser.Class)
                    self.state = 2605
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 496, self._ctx)
                    if la_ == 1:
                        self.state = 2589
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 2588
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 2592
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Identifier:
                            self.state = 2591
                            self.match(CPP14Parser.Identifier)

                        pass

                    elif la_ == 2:
                        self.state = 2595
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Identifier:
                            self.state = 2594
                            self.match(CPP14Parser.Identifier)

                        self.state = 2597
                        self.match(CPP14Parser.Assign)
                        self.state = 2602
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 495, self._ctx)
                        if la_ == 1:
                            self.state = 2598
                            self.nestednamespecifier()
                            self.state = 2600
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Template:
                                self.state = 2599
                                self.match(CPP14Parser.Template)

                        self.state = 2604
                        self.unqualifiedid()
                        pass

                    pass

                elif la_ == 3:
                    self.state = 2607
                    self.parameterdeclaration()
                    pass

                self.state = 2614
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateargumentlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ConstantexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, i)

        def unqualifiedid(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.UnqualifiedidContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AbstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, i)

        def nestednamespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.NestednamespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, i)

        def Template(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Template)
            else:
                return self.getToken(CPP14Parser.Template, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargumentlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateargumentlist"):
                listener.enterTemplateargumentlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateargumentlist"):
                listener.exitTemplateargumentlist(self)

    def templateargumentlist(self):

        localctx = CPP14Parser.TemplateargumentlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_templateargumentlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 504, self._ctx)
            if la_ == 1:
                self.state = 2616
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2615
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2618
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 499, self._ctx)

                self.state = 2623
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 500, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2620
                        self.attributespecifier()
                    self.state = 2625
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 500, self._ctx)

                self.state = 2627
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 501, self._ctx)
                if la_ == 1:
                    self.state = 2626
                    self.abstractdeclarator()

                pass

            elif la_ == 2:
                self.state = 2629
                self.constantexpression()
                pass

            elif la_ == 3:
                self.state = 2634
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 503, self._ctx)
                if la_ == 1:
                    self.state = 2630
                    self.nestednamespecifier()
                    self.state = 2632
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Template:
                        self.state = 2631
                        self.match(CPP14Parser.Template)

                self.state = 2636
                self.unqualifiedid()
                pass

            self.state = 2640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Ellipsis:
                self.state = 2639
                self.match(CPP14Parser.Ellipsis)

            self.state = 2672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Comma:
                self.state = 2642
                self.match(CPP14Parser.Comma)
                self.state = 2665
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 511, self._ctx)
                if la_ == 1:
                    self.state = 2644
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2643
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 2646
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 506, self._ctx)

                    self.state = 2651
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 507, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2648
                            self.attributespecifier()
                        self.state = 2653
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 507, self._ctx)

                    self.state = 2655
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 508, self._ctx)
                    if la_ == 1:
                        self.state = 2654
                        self.abstractdeclarator()

                    pass

                elif la_ == 2:
                    self.state = 2657
                    self.constantexpression()
                    pass

                elif la_ == 3:
                    self.state = 2662
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 510, self._ctx)
                    if la_ == 1:
                        self.state = 2658
                        self.nestednamespecifier()
                        self.state = 2660
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 2659
                            self.match(CPP14Parser.Template)

                    self.state = 2664
                    self.unqualifiedid()
                    pass

                self.state = 2668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 2667
                    self.match(CPP14Parser.Ellipsis)

                self.state = 2674
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryblockContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def handler(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.HandlerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.HandlerContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_tryblock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTryblock"):
                listener.enterTryblock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTryblock"):
                listener.exitTryblock(self)

    def tryblock(self):

        localctx = CPP14Parser.TryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_tryblock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2675
            self.match(CPP14Parser.Try)
            self.state = 2676
            self.match(CPP14Parser.LeftBrace)
            self.state = 2680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (
                1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (
                1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (
                1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (
                1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (
                1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (1 << CPP14Parser.Return) | (
                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_assert) | (
                1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (
                1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (1 << CPP14Parser.Typeid) | (
                1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (1 << CPP14Parser.Using) | (
                1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (1 << CPP14Parser.LeftParen) | (
                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (
                1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and (
                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Or - 67)) | (
                1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (
                1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                1 << (CPP14Parser.Numberliteral - 67)) | (1 << (CPP14Parser.Characterliteral - 67)) | (
                1 << (CPP14Parser.Stringliteral - 67)) | (1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                self.state = 2677
                self.statement()
                self.state = 2682
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2683
            self.match(CPP14Parser.RightBrace)
            self.state = 2685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2684
                self.handler()
                self.state = 2687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Catch):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(CPP14Parser.Catch, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_handler

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHandler"):
                listener.enterHandler(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHandler"):
                listener.exitHandler(self)

    def handler(self):

        localctx = CPP14Parser.HandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_handler)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2689
            self.match(CPP14Parser.Catch)
            self.state = 2690
            self.match(CPP14Parser.LeftParen)
            self.state = 2715
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignas, CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile,
                         CPP14Parser.Decltype, CPP14Parser.Enum, CPP14Parser.Types, CPP14Parser.SignedUnsigned,
                         CPP14Parser.Struct, CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.LeftBracket,
                         CPP14Parser.Identifier]:
                self.state = 2694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2691
                    self.attributespecifier()
                    self.state = 2696
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2698
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2697
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2700
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 517, self._ctx)

                self.state = 2705
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 518, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2702
                        self.attributespecifier()
                    self.state = 2707
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 518, self._ctx)

                self.state = 2712
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 520, self._ctx)
                if la_ == 1:
                    self.state = 2708
                    self.declarator()
                    pass

                elif la_ == 2:
                    self.state = 2710
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                            1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 2709
                        self.abstractdeclarator()

                    pass

                pass
            elif token in [CPP14Parser.Ellipsis]:
                self.state = 2714
                self.match(CPP14Parser.Ellipsis)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2717
            self.match(CPP14Parser.RightParen)
            self.state = 2718
            self.match(CPP14Parser.LeftBrace)
            self.state = 2722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (
                1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (
                1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (
                1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (
                1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (
                1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (1 << CPP14Parser.Return) | (
                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_assert) | (
                1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (
                1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (1 << CPP14Parser.Typeid) | (
                1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (1 << CPP14Parser.Using) | (
                1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (1 << CPP14Parser.LeftParen) | (
                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (
                1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and (
                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Or - 67)) | (
                1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (
                1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                1 << (CPP14Parser.Numberliteral - 67)) | (1 << (CPP14Parser.Characterliteral - 67)) | (
                1 << (CPP14Parser.Stringliteral - 67)) | (1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                self.state = 2719
                self.statement()
                self.state = 2724
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2725
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TheoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_theoperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTheoperator"):
                listener.enterTheoperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTheoperator"):
                listener.exitTheoperator(self)

    def theoperator(self):

        localctx = CPP14Parser.TheoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_theoperator)
        try:
            self.state = 2779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 524, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2727
                self.match(CPP14Parser.New)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2728
                self.match(CPP14Parser.Delete)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2729
                self.match(CPP14Parser.New)
                self.state = 2730
                self.match(CPP14Parser.LeftBracket)
                self.state = 2731
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2732
                self.match(CPP14Parser.Delete)
                self.state = 2733
                self.match(CPP14Parser.LeftBracket)
                self.state = 2734
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2735
                self.match(CPP14Parser.Plus)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2736
                self.match(CPP14Parser.Minus)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2737
                self.match(CPP14Parser.Star)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2738
                self.match(CPP14Parser.Div)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2739
                self.match(CPP14Parser.Mod)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2740
                self.match(CPP14Parser.Caret)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2741
                self.match(CPP14Parser.And)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2742
                self.match(CPP14Parser.Or)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2743
                self.match(CPP14Parser.Tilde)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2744
                self.match(CPP14Parser.Not)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2745
                self.match(CPP14Parser.Assign)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2746
                self.match(CPP14Parser.Less)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2747
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2748
                self.match(CPP14Parser.PlusAssign)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2749
                self.match(CPP14Parser.MinusAssign)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2750
                self.match(CPP14Parser.StarAssign)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2751
                self.match(CPP14Parser.DivAssign)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2752
                self.match(CPP14Parser.ModAssign)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2753
                self.match(CPP14Parser.XorAssign)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2754
                self.match(CPP14Parser.AndAssign)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2755
                self.match(CPP14Parser.OrAssign)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2756
                self.match(CPP14Parser.LeftShift)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2757
                self.match(CPP14Parser.Greater)
                self.state = 2758
                self.match(CPP14Parser.Greater)
                self.state = 2760
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 523, self._ctx)
                if la_ == 1:
                    self.state = 2759
                    self.match(CPP14Parser.Assign)

                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2762
                self.match(CPP14Parser.LeftShiftAssign)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2763
                self.match(CPP14Parser.Equal)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2764
                self.match(CPP14Parser.NotEqual)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2765
                self.match(CPP14Parser.LessEqual)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2766
                self.match(CPP14Parser.GreaterEqual)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2767
                self.match(CPP14Parser.AndAnd)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 2768
                self.match(CPP14Parser.OrOr)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 2769
                self.match(CPP14Parser.PlusPlus)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 2770
                self.match(CPP14Parser.MinusMinus)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 2771
                self.match(CPP14Parser.Comma)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2772
                self.match(CPP14Parser.ArrowStar)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2773
                self.match(CPP14Parser.Arrow)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2774
                self.match(CPP14Parser.LeftParen)
                self.state = 2775
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2776
                self.match(CPP14Parser.LeftBracket)
                self.state = 2777
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 2778
                self.match(CPP14Parser.UnaryCondition)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[9] = self.postfixunaryincdecexpression_sempred
        self._predicates[15] = self.relationalexpression_sempred
        self._predicates[16] = self.equalityexpression_sempred
        self._predicates[36] = self.noptrdeclarator_sempred
        self._predicates[40] = self.noptrabstractdeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def postfixunaryincdecexpression_sempred(self, localctx: PostfixunaryincdecexpressionContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 1)

    def relationalexpression_sempred(self, localctx: RelationalexpressionContext, predIndex: int):
        if predIndex == 1:
            return self.precpred(self._ctx, 1)

    def equalityexpression_sempred(self, localctx: EqualityexpressionContext, predIndex: int):
        if predIndex == 2:
            return self.precpred(self._ctx, 1)

    def noptrdeclarator_sempred(self, localctx: NoptrdeclaratorContext, predIndex: int):
        if predIndex == 3:
            return self.precpred(self._ctx, 2)

    def noptrabstractdeclarator_sempred(self, localctx: NoptrabstractdeclaratorContext, predIndex: int):
        if predIndex == 4:
            return self.precpred(self._ctx, 4)
