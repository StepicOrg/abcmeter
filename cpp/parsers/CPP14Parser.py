# Generated from /home/meanmail/MyProjects/antlr/cpp/grammars/CPP14.g4 by ANTLR 4.7
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *
from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0091")
        buf.write("\u0919\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\3\2\5\2\u00b4\n\2\3\2\3\2\3\3\3\3")
        buf.write("\5\3\u00ba\n\3\5\3\u00bc\n\3\3\3\3\3\3\4\3\4\3\4\5\4\u00c3")
        buf.write("\n\4\3\4\5\4\u00c6\n\4\3\4\3\4\3\4\3\4\5\4\u00cc\n\4\3")
        buf.write("\4\5\4\u00cf\n\4\3\4\3\4\7\4\u00d3\n\4\f\4\16\4\u00d6")
        buf.write("\13\4\5\4\u00d8\n\4\3\4\3\4\3\4\3\4\5\4\u00de\n\4\3\4")
        buf.write("\3\4\5\4\u00e2\n\4\3\4\5\4\u00e5\n\4\3\4\3\4\3\4\3\4\5")
        buf.write("\4\u00eb\n\4\3\4\5\4\u00ee\n\4\3\4\3\4\3\4\3\4\5\4\u00f4")
        buf.write("\n\4\3\4\5\4\u00f7\n\4\5\4\u00f9\n\4\3\5\3\5\3\5\3\5\5")
        buf.write("\5\u00ff\n\5\3\5\5\5\u0102\n\5\3\5\3\5\3\5\3\5\5\5\u0108")
        buf.write("\n\5\3\5\5\5\u010b\n\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0113")
        buf.write("\n\5\3\5\3\5\3\5\5\5\u0118\n\5\3\5\3\5\5\5\u011c\n\5\7")
        buf.write("\5\u011e\n\5\f\5\16\5\u0121\13\5\3\6\3\6\3\6\5\6\u0126")
        buf.write("\n\6\3\6\3\6\3\6\3\6\5\6\u012c\n\6\7\6\u012e\n\6\f\6\16")
        buf.write("\6\u0131\13\6\3\7\5\7\u0134\n\7\3\7\3\7\5\7\u0138\n\7")
        buf.write("\3\7\5\7\u013b\n\7\3\b\3\b\3\b\3\b\5\b\u0141\n\b\3\b\3")
        buf.write("\b\3\b\5\b\u0146\n\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u014e")
        buf.write("\n\b\5\b\u0150\n\b\3\b\5\b\u0153\n\b\3\b\3\b\3\b\5\b\u0158")
        buf.write("\n\b\5\b\u015a\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5")
        buf.write("\t\u0172\n\t\3\t\5\t\u0175\n\t\3\t\3\t\5\t\u0179\n\t\3")
        buf.write("\t\3\t\7\t\u017d\n\t\f\t\16\t\u0180\13\t\3\t\3\t\3\t\3")
        buf.write("\t\5\t\u0186\n\t\3\t\3\t\3\t\3\t\5\t\u018c\n\t\5\t\u018e")
        buf.write("\n\t\3\t\5\t\u0191\n\t\3\t\3\t\3\t\3\t\5\t\u0197\n\t\3")
        buf.write("\t\3\t\3\t\5\t\u019c\n\t\3\t\5\t\u019f\n\t\3\t\3\t\5\t")
        buf.write("\u01a3\n\t\3\t\3\t\3\t\3\t\5\t\u01a9\n\t\5\t\u01ab\n\t")
        buf.write("\3\t\5\t\u01ae\n\t\3\t\3\t\3\t\3\t\5\t\u01b4\n\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u01bf\n\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u01ca\n\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\5\t\u01d5\n\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u01e4\n\t\3\t\3")
        buf.write("\t\5\t\u01e8\n\t\5\t\u01ea\n\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\5\t\u01f2\n\t\5\t\u01f4\n\t\3\t\5\t\u01f7\n\t\3\t\3\t")
        buf.write("\3\t\5\t\u01fc\n\t\3\t\5\t\u01ff\n\t\3\t\3\t\5\t\u0203")
        buf.write("\n\t\3\t\3\t\5\t\u0207\n\t\3\t\5\t\u020a\n\t\7\t\u020c")
        buf.write("\n\t\f\t\16\t\u020f\13\t\3\n\5\n\u0212\n\n\3\n\3\n\3\n")
        buf.write("\5\n\u0217\n\n\3\n\5\n\u021a\n\n\3\n\5\n\u021d\n\n\3\n")
        buf.write("\3\n\3\n\3\n\5\n\u0223\n\n\3\n\5\n\u0226\n\n\3\n\3\n\3")
        buf.write("\n\3\n\3\n\5\n\u022d\n\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u0235")
        buf.write("\n\n\3\n\5\n\u0238\n\n\3\n\3\n\3\n\3\n\3\n\5\n\u023f\n")
        buf.write("\n\3\n\5\n\u0242\n\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\5\13\u024d\n\13\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\5\13\u0255\n\13\3\13\3\13\3\13\3\13\5\13\u025b\n\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u0266")
        buf.write("\n\13\3\f\3\f\3\f\3\r\5\r\u026c\n\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\5\r\u0273\n\r\3\r\3\r\5\r\u0277\n\r\3\r\3\r\3\r\5\r")
        buf.write("\u027c\n\r\3\r\3\r\5\r\u0280\n\r\3\r\3\r\5\r\u0284\n\r")
        buf.write("\3\r\3\r\3\r\3\r\5\r\u028a\n\r\5\r\u028c\n\r\3\r\5\r\u028f")
        buf.write("\n\r\3\16\3\16\5\16\u0293\n\16\3\16\5\16\u0296\n\16\3")
        buf.write("\17\3\17\3\17\3\17\3\17\5\17\u029d\n\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\5\17\u02a4\n\17\7\17\u02a6\n\17\f\17\16\17")
        buf.write("\u02a9\13\17\3\20\5\20\u02ac\n\20\3\20\3\20\3\20\5\20")
        buf.write("\u02b1\n\20\3\20\3\20\3\21\3\21\3\21\3\21\5\21\u02b9\n")
        buf.write("\21\3\21\3\21\3\21\5\21\u02be\n\21\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\7\22\u02c6\n\22\f\22\16\22\u02c9\13\22\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\7\23\u02d1\n\23\f\23\16\23\u02d4")
        buf.write("\13\23\3\24\3\24\3\24\3\24\3\24\3\24\7\24\u02dc\n\24\f")
        buf.write("\24\16\24\u02df\13\24\3\25\3\25\3\25\3\25\3\25\3\25\3")
        buf.write("\25\5\25\u02e8\n\25\3\25\7\25\u02eb\n\25\f\25\16\25\u02ee")
        buf.write("\13\25\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u02f6\n\26\f")
        buf.write("\26\16\26\u02f9\13\26\3\27\3\27\3\27\3\27\3\27\3\27\7")
        buf.write("\27\u0301\n\27\f\27\16\27\u0304\13\27\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\7\30\u030c\n\30\f\30\16\30\u030f\13\30\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\7\31\u0317\n\31\f\31\16\31")
        buf.write("\u031a\13\31\3\32\3\32\3\32\3\32\3\32\3\32\7\32\u0322")
        buf.write("\n\32\f\32\16\32\u0325\13\32\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\7\33\u032d\n\33\f\33\16\33\u0330\13\33\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\7\34\u0338\n\34\f\34\16\34\u033b")
        buf.write("\13\34\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3")
        buf.write("\36\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u034d\n\37\5\37")
        buf.write("\u034f\n\37\3\37\5\37\u0352\n\37\5\37\u0354\n\37\3\37")
        buf.write("\3\37\3\37\3\37\5\37\u035a\n\37\5\37\u035c\n\37\3 \3 ")
        buf.write("\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u036b\n \3!\3!\3")
        buf.write("!\3!\3!\3!\7!\u0373\n!\f!\16!\u0376\13!\3\"\3\"\3\"\5")
        buf.write("\"\u037b\n\"\3#\5#\u037e\n#\3#\3#\3#\3#\3#\3#\5#\u0386")
        buf.write("\n#\3#\3#\3#\7#\u038b\n#\f#\16#\u038e\13#\3#\3#\3#\3#")
        buf.write("\3#\3#\3#\5#\u0397\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\3#\5#\u03ab\n#\3#\3#\5#\u03af\n#\3")
        buf.write("#\5#\u03b2\n#\3#\3#\3#\3#\3#\3#\3#\5#\u03bb\n#\5#\u03bd")
        buf.write("\n#\3#\5#\u03c0\n#\5#\u03c2\n#\3#\3#\3#\3#\3#\3#\3#\5")
        buf.write("#\u03cb\n#\3#\3#\3#\5#\u03d0\n#\5#\u03d2\n#\3#\5#\u03d5")
        buf.write("\n#\3#\3#\3#\3#\3#\5#\u03dc\n#\3#\3#\3#\5#\u03e1\n#\3")
        buf.write("#\3#\5#\u03e5\n#\3#\3#\3#\3#\5#\u03eb\n#\3#\5#\u03ee\n")
        buf.write("#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u03fa\n#\3#\3#\3#\3")
        buf.write("#\3#\5#\u0401\n#\3#\5#\u0404\n#\3#\3#\3#\5#\u0409\n#\3")
        buf.write("#\3#\3#\5#\u040e\n#\5#\u0410\n#\3#\3#\3#\3#\3#\3#\3#\3")
        buf.write("#\3#\3#\3#\3#\5#\u041e\n#\3#\5#\u0421\n#\3#\3#\3#\5#\u0426")
        buf.write("\n#\3#\5#\u0429\n#\3$\3$\3$\3$\3$\3%\3%\3%\3%\3&\3&\3")
        buf.write("&\3\'\3\'\5\'\u0439\n\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5")
        buf.write("\'\u0442\n\'\5\'\u0444\n\'\3\'\5\'\u0447\n\'\3\'\3\'\3")
        buf.write("\'\5\'\u044c\n\'\5\'\u044e\n\'\3\'\5\'\u0451\n\'\5\'\u0453")
        buf.write("\n\'\3(\5(\u0456\n(\3(\5(\u0459\n(\3(\5(\u045c\n(\3(\3")
        buf.write("(\5(\u0460\n(\3(\3(\5(\u0464\n(\3(\3(\3)\3)\3)\3)\3*\3")
        buf.write("*\3*\3*\3*\7*\u0471\n*\f*\16*\u0474\13*\3+\5+\u0477\n")
        buf.write("+\3+\5+\u047a\n+\3+\3+\3+\5+\u047f\n+\3+\5+\u0482\n+\3")
        buf.write("+\3+\3+\5+\u0487\n+\3+\3+\3+\5+\u048c\n+\3+\3+\3+\5+\u0491")
        buf.write("\n+\3+\3+\5+\u0495\n+\3+\3+\5+\u0499\n+\3+\3+\7+\u049d")
        buf.write("\n+\f+\16+\u04a0\13+\3+\3+\3+\3+\5+\u04a6\n+\3+\3+\7+")
        buf.write("\u04aa\n+\f+\16+\u04ad\13+\3+\3+\6+\u04b1\n+\r+\16+\u04b2")
        buf.write("\3+\3+\3+\5+\u04b8\n+\5+\u04ba\n+\3+\3+\3+\3+\3+\3+\3")
        buf.write("+\3+\3+\5+\u04c5\n+\3+\3+\3+\3+\3+\5+\u04cc\n+\3+\5+\u04cf")
        buf.write("\n+\3+\3+\3+\3+\3+\5+\u04d6\n+\3+\3+\3+\5+\u04db\n+\3")
        buf.write("+\3+\5+\u04df\n+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u04eb")
        buf.write("\n+\3+\5+\u04ee\n+\3+\3+\3+\5+\u04f3\n+\3+\3+\3+\3+\5")
        buf.write("+\u04f9\n+\3+\3+\3+\5+\u04fe\n+\3+\3+\3+\3+\3+\3+\5+\u0506")
        buf.write("\n+\3+\3+\5+\u050a\n+\3+\5+\u050d\n+\3+\3+\3+\3+\5+\u0513")
        buf.write("\n+\3+\3+\3+\5+\u0518\n+\3+\5+\u051b\n+\3+\5+\u051e\n")
        buf.write("+\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u052c\n,\3,\3")
        buf.write(",\5,\u0530\n,\3-\3-\3-\5-\u0535\n-\3-\5-\u0538\n-\3-\3")
        buf.write("-\3-\5-\u053d\n-\3-\5-\u0540\n-\3-\5-\u0543\n-\5-\u0545")
        buf.write("\n-\3-\3-\5-\u0549\n-\3-\3-\3-\3-\5-\u054f\n-\3-\3-\3")
        buf.write("-\5-\u0554\n-\3-\5-\u0557\n-\3-\5-\u055a\n-\3-\5-\u055d")
        buf.write("\n-\3-\3-\5-\u0561\n-\3-\3-\5-\u0565\n-\3-\5-\u0568\n")
        buf.write("-\3-\5-\u056b\n-\3.\3.\3.\5.\u0570\n.\3.\5.\u0573\n.\3")
        buf.write(".\3.\3.\5.\u0578\n.\5.\u057a\n.\3.\3.\3.\5.\u057f\n.\3")
        buf.write(".\5.\u0582\n.\3.\3.\5.\u0586\n.\3.\3.\3.\3.\3.\5.\u058d")
        buf.write("\n.\3.\3.\3.\5.\u0592\n.\3.\5.\u0595\n.\3.\5.\u0598\n")
        buf.write(".\3/\3/\3/\5/\u059d\n/\3\60\3\60\3\60\5\60\u05a2\n\60")
        buf.write("\3\61\5\61\u05a5\n\61\3\61\3\61\3\61\5\61\u05aa\n\61\3")
        buf.write("\61\5\61\u05ad\n\61\3\61\3\61\3\61\3\61\3\61\5\61\u05b4")
        buf.write("\n\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61")
        buf.write("\u05ca\n\61\3\61\5\61\u05cd\n\61\3\62\3\62\3\62\3\62\5")
        buf.write("\62\u05d3\n\62\3\62\3\62\3\62\3\62\3\62\5\62\u05da\n\62")
        buf.write("\7\62\u05dc\n\62\f\62\16\62\u05df\13\62\3\63\3\63\3\63")
        buf.write("\3\63\3\63\7\63\u05e6\n\63\f\63\16\63\u05e9\13\63\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u05f5")
        buf.write("\n\64\3\64\5\64\u05f8\n\64\3\64\5\64\u05fb\n\64\3\64\3")
        buf.write("\64\5\64\u05ff\n\64\3\65\3\65\3\65\5\65\u0604\n\65\5\65")
        buf.write("\u0606\n\65\3\65\3\65\3\65\3\65\5\65\u060c\n\65\5\65\u060e")
        buf.write("\n\65\7\65\u0610\n\65\f\65\16\65\u0613\13\65\3\66\3\66")
        buf.write("\3\66\5\66\u0618\n\66\3\66\3\66\3\66\3\66\5\66\u061e\n")
        buf.write("\66\3\67\3\67\5\67\u0622\n\67\3\67\3\67\7\67\u0626\n\67")
        buf.write("\f\67\16\67\u0629\13\67\38\38\38\38\38\38\38\38\38\38")
        buf.write("\38\38\58\u0637\n8\39\39\39\59\u063c\n9\39\39\39\39\5")
        buf.write("9\u0642\n9\79\u0644\n9\f9\169\u0647\139\3:\3:\3:\3:\3")
        buf.write(":\3:\5:\u064f\n:\5:\u0651\n:\3;\3;\3;\3;\5;\u0657\n;\3")
        buf.write("<\3<\5<\u065b\n<\3<\3<\5<\u065f\n<\3<\3<\3<\3<\5<\u0665")
        buf.write("\n<\3<\3<\3<\3<\5<\u066b\n<\3<\3<\5<\u066f\n<\5<\u0671")
        buf.write("\n<\7<\u0673\n<\f<\16<\u0676\13<\3=\3=\3=\3=\7=\u067c")
        buf.write("\n=\f=\16=\u067f\13=\3=\5=\u0682\n=\3=\3=\3=\5=\u0687")
        buf.write("\n=\3=\3=\3=\3=\3=\3=\5=\u068f\n=\5=\u0691\n=\3=\5=\u0694")
        buf.write("\n=\3>\5>\u0697\n>\3>\3>\5>\u069b\n>\3>\7>\u069e\n>\f")
        buf.write(">\16>\u06a1\13>\3>\3>\5>\u06a5\n>\5>\u06a7\n>\3?\3?\5")
        buf.write("?\u06ab\n?\3?\3?\3?\3?\5?\u06b1\n?\3?\5?\u06b4\n?\3@\3")
        buf.write("@\3@\5@\u06b9\n@\5@\u06bb\n@\3A\3A\3A\3A\5A\u06c1\nA\3")
        buf.write("A\3A\5A\u06c5\nA\3A\3A\3A\3A\5A\u06cb\nA\3A\3A\3A\3A\3")
        buf.write("A\5A\u06d2\nA\3A\3A\5A\u06d6\nA\7A\u06d8\nA\fA\16A\u06db")
        buf.write("\13A\3B\3B\3B\3B\5B\u06e1\nB\3C\3C\3C\3C\3C\3C\3C\5C\u06ea")
        buf.write("\nC\3C\3C\5C\u06ee\nC\5C\u06f0\nC\7C\u06f2\nC\fC\16C\u06f5")
        buf.write("\13C\3D\5D\u06f8\nD\3D\5D\u06fb\nD\3D\3D\3D\3D\5D\u0701")
        buf.write("\nD\3E\3E\3E\3E\3E\3E\7E\u0709\nE\fE\16E\u070c\13E\3F")
        buf.write("\5F\u070f\nF\3F\3F\3F\5F\u0714\nF\3F\3F\3F\3F\3F\5F\u071b")
        buf.write("\nF\5F\u071d\nF\3F\5F\u0720\nF\5F\u0722\nF\3G\3G\3G\3")
        buf.write("G\3G\5G\u0729\nG\5G\u072b\nG\3G\5G\u072e\nG\3G\3G\3G\5")
        buf.write("G\u0733\nG\5G\u0735\nG\3G\3G\3G\3G\3G\5G\u073c\nG\3H\3")
        buf.write("H\3H\3H\3H\5H\u0743\nH\5H\u0745\nH\3H\5H\u0748\nH\3H\5")
        buf.write("H\u074b\nH\3H\3H\3H\3H\3H\3H\5H\u0753\nH\5H\u0755\nH\3")
        buf.write("H\5H\u0758\nH\3H\5H\u075b\nH\7H\u075d\nH\fH\16H\u0760")
        buf.write("\13H\3I\5I\u0763\nI\3I\5I\u0766\nI\3I\5I\u0769\nI\3I\3")
        buf.write("I\3I\5I\u076e\nI\3I\3I\5I\u0772\nI\3I\3I\7I\u0776\nI\f")
        buf.write("I\16I\u0779\13I\3I\3I\3I\3I\5I\u077f\nI\3I\3I\7I\u0783")
        buf.write("\nI\fI\16I\u0786\13I\3I\3I\6I\u078a\nI\rI\16I\u078b\3")
        buf.write("I\3I\3I\5I\u0791\nI\5I\u0793\nI\3I\3I\5I\u0797\nI\3I\3")
        buf.write("I\5I\u079b\nI\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3")
        buf.write("I\3I\3I\3I\3I\3I\3I\5I\u07b1\nI\3I\3I\3I\5I\u07b6\nI\3")
        buf.write("I\3I\3I\5I\u07bb\nI\3J\3J\3J\3J\3J\3J\7J\u07c3\nJ\fJ\16")
        buf.write("J\u07c6\13J\3K\3K\5K\u07ca\nK\3K\5K\u07cd\nK\3K\3K\3K")
        buf.write("\3K\3K\5K\u07d4\nK\5K\u07d6\nK\3K\5K\u07d9\nK\3K\3K\3")
        buf.write("K\5K\u07de\nK\5K\u07e0\nK\3K\5K\u07e3\nK\5K\u07e5\nK\3")
        buf.write("K\5K\u07e8\nK\3K\5K\u07eb\nK\3K\3K\5K\u07ef\nK\3L\3L\3")
        buf.write("L\3L\3L\7L\u07f6\nL\fL\16L\u07f9\13L\3M\3M\3M\3M\3N\3")
        buf.write("N\3N\5N\u0802\nN\3N\3N\3N\3N\5N\u0808\nN\7N\u080a\nN\f")
        buf.write("N\16N\u080d\13N\3O\5O\u0810\nO\3O\3O\5O\u0814\nO\3O\3")
        buf.write("O\5O\u0818\nO\5O\u081a\nO\3O\3O\3P\5P\u081f\nP\3P\3P\3")
        buf.write("P\5P\u0824\nP\3P\5P\u0827\nP\3P\3P\3P\3P\5P\u082d\nP\3")
        buf.write("P\5P\u0830\nP\3Q\3Q\5Q\u0834\nQ\3Q\3Q\5Q\u0838\nQ\3Q\3")
        buf.write("Q\3Q\3Q\5Q\u083e\nQ\5Q\u0840\nQ\3Q\5Q\u0843\nQ\3Q\5Q\u0846")
        buf.write("\nQ\3Q\3Q\5Q\u084a\nQ\3R\3R\3R\3R\3R\3R\7R\u0852\nR\f")
        buf.write("R\16R\u0855\13R\3S\3S\5S\u0859\nS\3S\5S\u085c\nS\3S\5")
        buf.write("S\u085f\nS\3S\3S\3S\5S\u0864\nS\5S\u0866\nS\3S\3S\5S\u086a")
        buf.write("\nS\3S\5S\u086d\nS\3S\5S\u0870\nS\3S\3S\3S\5S\u0875\n")
        buf.write("S\5S\u0877\nS\3S\3S\3S\3S\3S\3S\5S\u087f\nS\3S\5S\u0882")
        buf.write("\nS\3S\5S\u0885\nS\3S\3S\5S\u0889\nS\3S\5S\u088c\nS\3")
        buf.write("T\3T\3T\5T\u0891\nT\3T\3T\3T\3T\5T\u0897\nT\7T\u0899\n")
        buf.write("T\fT\16T\u089c\13T\3U\3U\5U\u08a0\nU\3U\3U\5U\u08a4\n")
        buf.write("U\3V\3V\3V\7V\u08a9\nV\fV\16V\u08ac\13V\3V\3V\6V\u08b0")
        buf.write("\nV\rV\16V\u08b1\3W\3W\3W\5W\u08b7\nW\3W\3W\3W\5W\u08bc")
        buf.write("\nW\5W\u08be\nW\3W\5W\u08c1\nW\3W\3W\3W\7W\u08c6\nW\f")
        buf.write("W\16W\u08c9\13W\3W\3W\3X\3X\3X\5X\u08d0\nX\3X\5X\u08d3")
        buf.write("\nX\3X\3X\3X\3X\5X\u08d9\nX\3X\5X\u08dc\nX\7X\u08de\n")
        buf.write("X\fX\16X\u08e1\13X\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3")
        buf.write("Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3")
        buf.write("Y\3Y\3Y\3Y\5Y\u0904\nY\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3")
        buf.write("Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0917\nY\3Y\2#\b\n\20\34\"$&(*")
        buf.write(",.\60\62\64\66@Rbdhlpv\u0080\u0084\u0088\u008e\u0092\u0096")
        buf.write("\u009a\u00a2\u00a6\u00aeZ\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`b")
        buf.write("dfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0")
        buf.write("\2\24\4\2\\\\``\4\2xx}}\3\2st\4\2VX\\_\4\2ww~~\3\2XZ\3")
        buf.write("\2VW\4\2abop\3\2mn\4\2>>OO\4\2\n\n\24\24\4\2\20\20==\3")
        buf.write("\2\26\27\5\2\20\20==HH\3\2\61\63\4\2\21\21MM\4\2\\\\q")
        buf.write("q\4\2!!\60\60\2\u0afa\2\u00b3\3\2\2\2\4\u00bb\3\2\2\2")
        buf.write("\6\u00f8\3\2\2\2\b\u00fa\3\2\2\2\n\u0122\3\2\2\2\f\u013a")
        buf.write("\3\2\2\2\16\u013c\3\2\2\2\20\u01e9\3\2\2\2\22\u0241\3")
        buf.write("\2\2\2\24\u0265\3\2\2\2\26\u0267\3\2\2\2\30\u026b\3\2")
        buf.write("\2\2\32\u0295\3\2\2\2\34\u0297\3\2\2\2\36\u02ab\3\2\2")
        buf.write("\2 \u02bd\3\2\2\2\"\u02bf\3\2\2\2$\u02ca\3\2\2\2&\u02d5")
        buf.write("\3\2\2\2(\u02e0\3\2\2\2*\u02ef\3\2\2\2,\u02fa\3\2\2\2")
        buf.write(".\u0305\3\2\2\2\60\u0310\3\2\2\2\62\u031b\3\2\2\2\64\u0326")
        buf.write("\3\2\2\2\66\u0331\3\2\2\28\u033c\3\2\2\2:\u0342\3\2\2")
        buf.write("\2<\u035b\3\2\2\2>\u036a\3\2\2\2@\u036c\3\2\2\2B\u037a")
        buf.write("\3\2\2\2D\u0428\3\2\2\2F\u042a\3\2\2\2H\u042f\3\2\2\2")
        buf.write("J\u0433\3\2\2\2L\u0452\3\2\2\2N\u0463\3\2\2\2P\u0467\3")
        buf.write("\2\2\2R\u046b\3\2\2\2T\u051d\3\2\2\2V\u052b\3\2\2\2X\u056a")
        buf.write("\3\2\2\2Z\u0597\3\2\2\2\\\u0599\3\2\2\2^\u059e\3\2\2\2")
        buf.write("`\u05cc\3\2\2\2b\u05ce\3\2\2\2d\u05e0\3\2\2\2f\u05fe\3")
        buf.write("\2\2\2h\u0600\3\2\2\2j\u0614\3\2\2\2l\u061f\3\2\2\2n\u0636")
        buf.write("\3\2\2\2p\u0638\3\2\2\2r\u0650\3\2\2\2t\u0656\3\2\2\2")
        buf.write("v\u0664\3\2\2\2x\u0677\3\2\2\2z\u06a6\3\2\2\2|\u06b3\3")
        buf.write("\2\2\2~\u06ba\3\2\2\2\u0080\u06ca\3\2\2\2\u0082\u06e0")
        buf.write("\3\2\2\2\u0084\u06e2\3\2\2\2\u0086\u0700\3\2\2\2\u0088")
        buf.write("\u0702\3\2\2\2\u008a\u070e\3\2\2\2\u008c\u073b\3\2\2\2")
        buf.write("\u008e\u073d\3\2\2\2\u0090\u07ba\3\2\2\2\u0092\u07bc\3")
        buf.write("\2\2\2\u0094\u07ee\3\2\2\2\u0096\u07f0\3\2\2\2\u0098\u07fa")
        buf.write("\3\2\2\2\u009a\u07fe\3\2\2\2\u009c\u080f\3\2\2\2\u009e")
        buf.write("\u082f\3\2\2\2\u00a0\u0833\3\2\2\2\u00a2\u084b\3\2\2\2")
        buf.write("\u00a4\u088b\3\2\2\2\u00a6\u088d\3\2\2\2\u00a8\u08a3\3")
        buf.write("\2\2\2\u00aa\u08a5\3\2\2\2\u00ac\u08b3\3\2\2\2\u00ae\u08cc")
        buf.write("\3\2\2\2\u00b0\u0916\3\2\2\2\u00b2\u00b4\5R*\2\u00b3\u00b2")
        buf.write("\3\2\2\2\u00b3\u00b4\3\2\2\2\u00b4\u00b5\3\2\2\2\u00b5")
        buf.write("\u00b6\7\2\2\3\u00b6\3\3\2\2\2\u00b7\u00b9\5\b\5\2\u00b8")
        buf.write("\u00ba\7?\2\2\u00b9\u00b8\3\2\2\2\u00b9\u00ba\3\2\2\2")
        buf.write("\u00ba\u00bc\3\2\2\2\u00bb\u00b7\3\2\2\2\u00bb\u00bc\3")
        buf.write("\2\2\2\u00bc\u00bd\3\2\2\2\u00bd\u00be\5\6\4\2\u00be\5")
        buf.write("\3\2\2\2\u00bf\u00c5\7\u0080\2\2\u00c0\u00c2\7a\2\2\u00c1")
        buf.write("\u00c3\5\u00a6T\2\u00c2\u00c1\3\2\2\2\u00c2\u00c3\3\2")
        buf.write("\2\2\u00c3\u00c4\3\2\2\2\u00c4\u00c6\7b\2\2\u00c5\u00c0")
        buf.write("\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6\u00f9\3\2\2\2\u00c7")
        buf.write("\u00d7\7/\2\2\u00c8\u00ce\5\u00b0Y\2\u00c9\u00cb\7a\2")
        buf.write("\2\u00ca\u00cc\5\u00a6T\2\u00cb\u00ca\3\2\2\2\u00cb\u00cc")
        buf.write("\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd\u00cf\7b\2\2\u00ce")
        buf.write("\u00c9\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00d8\3\2\2\2")
        buf.write("\u00d0\u00d4\5\\/\2\u00d1\u00d3\5z>\2\u00d2\u00d1\3\2")
        buf.write("\2\2\u00d3\u00d6\3\2\2\2\u00d4\u00d2\3\2\2\2\u00d4\u00d5")
        buf.write("\3\2\2\2\u00d5\u00d8\3\2\2\2\u00d6\u00d4\3\2\2\2\u00d7")
        buf.write("\u00c8\3\2\2\2\u00d7\u00d0\3\2\2\2\u00d8\u00f9\3\2\2\2")
        buf.write("\u00d9\u00dd\7/\2\2\u00da\u00db\7\u0089\2\2\u00db\u00de")
        buf.write("\7\u0080\2\2\u00dc\u00de\7\u008c\2\2\u00dd\u00da\3\2\2")
        buf.write("\2\u00dd\u00dc\3\2\2\2\u00de\u00e4\3\2\2\2\u00df\u00e1")
        buf.write("\7a\2\2\u00e0\u00e2\5\u00a6T\2\u00e1\u00e0\3\2\2\2\u00e1")
        buf.write("\u00e2\3\2\2\2\u00e2\u00e3\3\2\2\2\u00e3\u00e5\7b\2\2")
        buf.write("\u00e4\u00df\3\2\2\2\u00e4\u00e5\3\2\2\2\u00e5\u00f9\3")
        buf.write("\2\2\2\u00e6\u00f6\7^\2\2\u00e7\u00ed\7\u0080\2\2\u00e8")
        buf.write("\u00ea\7a\2\2\u00e9\u00eb\5\u00a6T\2\u00ea\u00e9\3\2\2")
        buf.write("\2\u00ea\u00eb\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00ee")
        buf.write("\7b\2\2\u00ed\u00e8\3\2\2\2\u00ed\u00ee\3\2\2\2\u00ee")
        buf.write("\u00f7\3\2\2\2\u00ef\u00f0\7\25\2\2\u00f0\u00f3\7P\2\2")
        buf.write("\u00f1\u00f4\5@!\2\u00f2\u00f4\7\b\2\2\u00f3\u00f1\3\2")
        buf.write("\2\2\u00f3\u00f2\3\2\2\2\u00f4\u00f5\3\2\2\2\u00f5\u00f7")
        buf.write("\7Q\2\2\u00f6\u00e7\3\2\2\2\u00f6\u00ef\3\2\2\2\u00f7")
        buf.write("\u00f9\3\2\2\2\u00f8\u00bf\3\2\2\2\u00f8\u00c7\3\2\2\2")
        buf.write("\u00f8\u00d9\3\2\2\2\u00f8\u00e6\3\2\2\2\u00f9\7\3\2\2")
        buf.write("\2\u00fa\u010a\b\5\1\2\u00fb\u0101\7\u0080\2\2\u00fc\u00fe")
        buf.write("\7a\2\2\u00fd\u00ff\5\u00a6T\2\u00fe\u00fd\3\2\2\2\u00fe")
        buf.write("\u00ff\3\2\2\2\u00ff\u0100\3\2\2\2\u0100\u0102\7b\2\2")
        buf.write("\u0101\u00fc\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u010b\3")
        buf.write("\2\2\2\u0103\u0104\7\25\2\2\u0104\u0107\7P\2\2\u0105\u0108")
        buf.write("\5@!\2\u0106\u0108\7\b\2\2\u0107\u0105\3\2\2\2\u0107\u0106")
        buf.write("\3\2\2\2\u0108\u0109\3\2\2\2\u0109\u010b\7Q\2\2\u010a")
        buf.write("\u00fb\3\2\2\2\u010a\u0103\3\2\2\2\u010b\u010c\3\2\2\2")
        buf.write("\u010c\u010d\7{\2\2\u010d\u011f\3\2\2\2\u010e\u011b\f")
        buf.write("\3\2\2\u010f\u0110\7\u0080\2\2\u0110\u011c\7{\2\2\u0111")
        buf.write("\u0113\7?\2\2\u0112\u0111\3\2\2\2\u0112\u0113\3\2\2\2")
        buf.write("\u0113\u0114\3\2\2\2\u0114\u0115\7\u0080\2\2\u0115\u0117")
        buf.write("\7a\2\2\u0116\u0118\5\u00a6T\2\u0117\u0116\3\2\2\2\u0117")
        buf.write("\u0118\3\2\2\2\u0118\u0119\3\2\2\2\u0119\u011a\7b\2\2")
        buf.write("\u011a\u011c\7{\2\2\u011b\u010f\3\2\2\2\u011b\u0112\3")
        buf.write("\2\2\2\u011c\u011e\3\2\2\2\u011d\u010e\3\2\2\2\u011e\u0121")
        buf.write("\3\2\2\2\u011f\u011d\3\2\2\2\u011f\u0120\3\2\2\2\u0120")
        buf.write("\t\3\2\2\2\u0121\u011f\3\2\2\2\u0122\u0123\b\6\1\2\u0123")
        buf.write("\u0125\5\f\7\2\u0124\u0126\7\177\2\2\u0125\u0124\3\2\2")
        buf.write("\2\u0125\u0126\3\2\2\2\u0126\u012f\3\2\2\2\u0127\u0128")
        buf.write("\f\3\2\2\u0128\u0129\7v\2\2\u0129\u012b\5\f\7\2\u012a")
        buf.write("\u012c\7\177\2\2\u012b\u012a\3\2\2\2\u012b\u012c\3\2\2")
        buf.write("\2\u012c\u012e\3\2\2\2\u012d\u0127\3\2\2\2\u012e\u0131")
        buf.write("\3\2\2\2\u012f\u012d\3\2\2\2\u012f\u0130\3\2\2\2\u0130")
        buf.write("\13\3\2\2\2\u0131\u012f\3\2\2\2\u0132\u0134\7\\\2\2\u0133")
        buf.write("\u0132\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u0135\3\2\2\2")
        buf.write("\u0135\u0137\7\u0080\2\2\u0136\u0138\5\u008cG\2\u0137")
        buf.write("\u0136\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u013b\3\2\2\2")
        buf.write("\u0139\u013b\7@\2\2\u013a\u0133\3\2\2\2\u013a\u0139\3")
        buf.write("\2\2\2\u013b\r\3\2\2\2\u013c\u013d\7P\2\2\u013d\u013e")
        buf.write("\5\u0086D\2\u013e\u0140\7Q\2\2\u013f\u0141\7*\2\2\u0140")
        buf.write("\u013f\3\2\2\2\u0140\u0141\3\2\2\2\u0141\u014f\3\2\2\2")
        buf.write("\u0142\u0143\7B\2\2\u0143\u0145\7P\2\2\u0144\u0146\5\u00ae")
        buf.write("X\2\u0145\u0144\3\2\2\2\u0145\u0146\3\2\2\2\u0146\u0147")
        buf.write("\3\2\2\2\u0147\u0150\7Q\2\2\u0148\u014d\7-\2\2\u0149\u014a")
        buf.write("\7P\2\2\u014a\u014b\5B\"\2\u014b\u014c\7Q\2\2\u014c\u014e")
        buf.write("\3\2\2\2\u014d\u0149\3\2\2\2\u014d\u014e\3\2\2\2\u014e")
        buf.write("\u0150\3\2\2\2\u014f\u0142\3\2\2\2\u014f\u0148\3\2\2\2")
        buf.write("\u014f\u0150\3\2\2\2\u0150\u0152\3\2\2\2\u0151\u0153\5")
        buf.write("d\63\2\u0152\u0151\3\2\2\2\u0152\u0153\3\2\2\2\u0153\u0159")
        buf.write("\3\2\2\2\u0154\u0155\7x\2\2\u0155\u0157\5^\60\2\u0156")
        buf.write("\u0158\5|?\2\u0157\u0156\3\2\2\2\u0157\u0158\3\2\2\2\u0158")
        buf.write("\u015a\3\2\2\2\u0159\u0154\3\2\2\2\u0159\u015a\3\2\2\2")
        buf.write("\u015a\17\3\2\2\2\u015b\u015c\b\t\1\2\u015c\u01ea\7\u0081")
        buf.write("\2\2\u015d\u01ea\7\u0087\2\2\u015e\u01ea\7\u0088\2\2\u015f")
        buf.write("\u01ea\7\u0089\2\2\u0160\u01ea\7 \2\2\u0161\u01ea\7C\2")
        buf.write("\2\u0162\u01ea\7.\2\2\u0163\u01ea\7\u008a\2\2\u0164\u01ea")
        buf.write("\7\u008b\2\2\u0165\u01ea\7\u008c\2\2\u0166\u01ea\7\u008d")
        buf.write("\2\2\u0167\u01ea\7@\2\2\u0168\u0169\7P\2\2\u0169\u016a")
        buf.write("\5@!\2\u016a\u016b\7Q\2\2\u016b\u01ea\3\2\2\2\u016c\u01ea")
        buf.write("\5\4\3\2\u016d\u0174\7R\2\2\u016e\u0171\t\2\2\2\u016f")
        buf.write("\u0170\7v\2\2\u0170\u0172\5\n\6\2\u0171\u016f\3\2\2\2")
        buf.write("\u0171\u0172\3\2\2\2\u0172\u0175\3\2\2\2\u0173\u0175\5")
        buf.write("\n\6\2\u0174\u016e\3\2\2\2\u0174\u0173\3\2\2\2\u0174\u0175")
        buf.write("\3\2\2\2\u0175\u0176\3\2\2\2\u0176\u0178\7S\2\2\u0177")
        buf.write("\u0179\5\16\b\2\u0178\u0177\3\2\2\2\u0178\u0179\3\2\2")
        buf.write("\2\u0179\u017a\3\2\2\2\u017a\u017e\7T\2\2\u017b\u017d")
        buf.write("\5D#\2\u017c\u017b\3\2\2\2\u017d\u0180\3\2\2\2\u017e\u017c")
        buf.write("\3\2\2\2\u017e\u017f\3\2\2\2\u017f\u0181\3\2\2\2\u0180")
        buf.write("\u017e\3\2\2\2\u0181\u01ea\7U\2\2\u0182\u0190\5`\61\2")
        buf.write("\u0183\u0185\7P\2\2\u0184\u0186\5\u008eH\2\u0185\u0184")
        buf.write("\3\2\2\2\u0185\u0186\3\2\2\2\u0186\u0187\3\2\2\2\u0187")
        buf.write("\u0191\7Q\2\2\u0188\u018d\7T\2\2\u0189\u018b\5\u008eH")
        buf.write("\2\u018a\u018c\7v\2\2\u018b\u018a\3\2\2\2\u018b\u018c")
        buf.write("\3\2\2\2\u018c\u018e\3\2\2\2\u018d\u0189\3\2\2\2\u018d")
        buf.write("\u018e\3\2\2\2\u018e\u018f\3\2\2\2\u018f\u0191\7U\2\2")
        buf.write("\u0190\u0183\3\2\2\2\u0190\u0188\3\2\2\2\u0191\u01ea\3")
        buf.write("\2\2\2\u0192\u0193\7G\2\2\u0193\u019e\5\b\5\2\u0194\u019f")
        buf.write("\7\u0080\2\2\u0195\u0197\7?\2\2\u0196\u0195\3\2\2\2\u0196")
        buf.write("\u0197\3\2\2\2\u0197\u0198\3\2\2\2\u0198\u0199\7\u0080")
        buf.write("\2\2\u0199\u019b\7a\2\2\u019a\u019c\5\u00a6T\2\u019b\u019a")
        buf.write("\3\2\2\2\u019b\u019c\3\2\2\2\u019c\u019d\3\2\2\2\u019d")
        buf.write("\u019f\7b\2\2\u019e\u0194\3\2\2\2\u019e\u0196\3\2\2\2")
        buf.write("\u019f\u01ad\3\2\2\2\u01a0\u01a2\7P\2\2\u01a1\u01a3\5")
        buf.write("\u008eH\2\u01a2\u01a1\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3")
        buf.write("\u01a4\3\2\2\2\u01a4\u01ae\7Q\2\2\u01a5\u01aa\7T\2\2\u01a6")
        buf.write("\u01a8\5\u008eH\2\u01a7\u01a9\7v\2\2\u01a8\u01a7\3\2\2")
        buf.write("\2\u01a8\u01a9\3\2\2\2\u01a9\u01ab\3\2\2\2\u01aa\u01a6")
        buf.write("\3\2\2\2\u01aa\u01ab\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac")
        buf.write("\u01ae\7U\2\2\u01ad\u01a0\3\2\2\2\u01ad\u01a5\3\2\2\2")
        buf.write("\u01ae\u01ea\3\2\2\2\u01af\u01b0\7\32\2\2\u01b0\u01b1")
        buf.write("\7a\2\2\u01b1\u01b3\5\\/\2\u01b2\u01b4\5|?\2\u01b3\u01b2")
        buf.write("\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5")
        buf.write("\u01b6\7b\2\2\u01b6\u01b7\7P\2\2\u01b7\u01b8\5@!\2\u01b8")
        buf.write("\u01b9\7Q\2\2\u01b9\u01ea\3\2\2\2\u01ba\u01bb\7<\2\2\u01bb")
        buf.write("\u01bc\7a\2\2\u01bc\u01be\5\\/\2\u01bd\u01bf\5|?\2\u01be")
        buf.write("\u01bd\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\u01c0\3\2\2\2")
        buf.write("\u01c0\u01c1\7b\2\2\u01c1\u01c2\7P\2\2\u01c2\u01c3\5@")
        buf.write("!\2\u01c3\u01c4\7Q\2\2\u01c4\u01ea\3\2\2\2\u01c5\u01c6")
        buf.write("\7\65\2\2\u01c6\u01c7\7a\2\2\u01c7\u01c9\5\\/\2\u01c8")
        buf.write("\u01ca\5|?\2\u01c9\u01c8\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca")
        buf.write("\u01cb\3\2\2\2\u01cb\u01cc\7b\2\2\u01cc\u01cd\7P\2\2\u01cd")
        buf.write("\u01ce\5@!\2\u01ce\u01cf\7Q\2\2\u01cf\u01ea\3\2\2\2\u01d0")
        buf.write("\u01d1\7\23\2\2\u01d1\u01d2\7a\2\2\u01d2\u01d4\5\\/\2")
        buf.write("\u01d3\u01d5\5|?\2\u01d4\u01d3\3\2\2\2\u01d4\u01d5\3\2")
        buf.write("\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01d7\7b\2\2\u01d7\u01d8")
        buf.write("\7P\2\2\u01d8\u01d9\5@!\2\u01d9\u01da\7Q\2\2\u01da\u01ea")
        buf.write("\3\2\2\2\u01db\u01e7\7F\2\2\u01dc\u01dd\7P\2\2\u01dd\u01de")
        buf.write("\5@!\2\u01de\u01df\7Q\2\2\u01df\u01e8\3\2\2\2\u01e0\u01e1")
        buf.write("\7P\2\2\u01e1\u01e3\5\\/\2\u01e2\u01e4\5|?\2\u01e3\u01e2")
        buf.write("\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5")
        buf.write("\u01e6\7Q\2\2\u01e6\u01e8\3\2\2\2\u01e7\u01dc\3\2\2\2")
        buf.write("\u01e7\u01e0\3\2\2\2\u01e8\u01ea\3\2\2\2\u01e9\u015b\3")
        buf.write("\2\2\2\u01e9\u015d\3\2\2\2\u01e9\u015e\3\2\2\2\u01e9\u015f")
        buf.write("\3\2\2\2\u01e9\u0160\3\2\2\2\u01e9\u0161\3\2\2\2\u01e9")
        buf.write("\u0162\3\2\2\2\u01e9\u0163\3\2\2\2\u01e9\u0164\3\2\2\2")
        buf.write("\u01e9\u0165\3\2\2\2\u01e9\u0166\3\2\2\2\u01e9\u0167\3")
        buf.write("\2\2\2\u01e9\u0168\3\2\2\2\u01e9\u016c\3\2\2\2\u01e9\u016d")
        buf.write("\3\2\2\2\u01e9\u0182\3\2\2\2\u01e9\u0192\3\2\2\2\u01e9")
        buf.write("\u01af\3\2\2\2\u01e9\u01ba\3\2\2\2\u01e9\u01c5\3\2\2\2")
        buf.write("\u01e9\u01d0\3\2\2\2\u01e9\u01db\3\2\2\2\u01ea\u020d\3")
        buf.write("\2\2\2\u01eb\u0209\f\b\2\2\u01ec\u01f6\7R\2\2\u01ed\u01f7")
        buf.write("\5@!\2\u01ee\u01f3\7T\2\2\u01ef\u01f1\5\u008eH\2\u01f0")
        buf.write("\u01f2\7v\2\2\u01f1\u01f0\3\2\2\2\u01f1\u01f2\3\2\2\2")
        buf.write("\u01f2\u01f4\3\2\2\2\u01f3\u01ef\3\2\2\2\u01f3\u01f4\3")
        buf.write("\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f7\7U\2\2\u01f6\u01ed")
        buf.write("\3\2\2\2\u01f6\u01ee\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8")
        buf.write("\u01ff\7S\2\2\u01f9\u01fb\7P\2\2\u01fa\u01fc\5\u008eH")
        buf.write("\2\u01fb\u01fa\3\2\2\2\u01fb\u01fc\3\2\2\2\u01fc\u01fd")
        buf.write("\3\2\2\2\u01fd\u01ff\7Q\2\2\u01fe\u01ec\3\2\2\2\u01fe")
        buf.write("\u01f9\3\2\2\2\u01ff\u020a\3\2\2\2\u0200\u0206\t\3\2\2")
        buf.write("\u0201\u0203\7?\2\2\u0202\u0201\3\2\2\2\u0202\u0203\3")
        buf.write("\2\2\2\u0203\u0204\3\2\2\2\u0204\u0207\5\4\3\2\u0205\u0207")
        buf.write("\5\22\n\2\u0206\u0202\3\2\2\2\u0206\u0205\3\2\2\2\u0207")
        buf.write("\u020a\3\2\2\2\u0208\u020a\t\4\2\2\u0209\u01fe\3\2\2\2")
        buf.write("\u0209\u0200\3\2\2\2\u0209\u0208\3\2\2\2\u020a\u020c\3")
        buf.write("\2\2\2\u020b\u01eb\3\2\2\2\u020c\u020f\3\2\2\2\u020d\u020b")
        buf.write("\3\2\2\2\u020d\u020e\3\2\2\2\u020e\21\3\2\2\2\u020f\u020d")
        buf.write("\3\2\2\2\u0210\u0212\5\b\5\2\u0211\u0210\3\2\2\2\u0211")
        buf.write("\u0212\3\2\2\2\u0212\u021c\3\2\2\2\u0213\u0219\7\u0080")
        buf.write("\2\2\u0214\u0216\7a\2\2\u0215\u0217\5\u00a6T\2\u0216\u0215")
        buf.write("\3\2\2\2\u0216\u0217\3\2\2\2\u0217\u0218\3\2\2\2\u0218")
        buf.write("\u021a\7b\2\2\u0219\u0214\3\2\2\2\u0219\u021a\3\2\2\2")
        buf.write("\u021a\u021b\3\2\2\2\u021b\u021d\7{\2\2\u021c\u0213\3")
        buf.write("\2\2\2\u021c\u021d\3\2\2\2\u021d\u021e\3\2\2\2\u021e\u021f")
        buf.write("\7^\2\2\u021f\u0225\7\u0080\2\2\u0220\u0222\7a\2\2\u0221")
        buf.write("\u0223\5\u00a6T\2\u0222\u0221\3\2\2\2\u0222\u0223\3\2")
        buf.write("\2\2\u0223\u0224\3\2\2\2\u0224\u0226\7b\2\2\u0225\u0220")
        buf.write("\3\2\2\2\u0225\u0226\3\2\2\2\u0226\u0242\3\2\2\2\u0227")
        buf.write("\u0228\5\b\5\2\u0228\u0229\7?\2\2\u0229\u022a\7\u0080")
        buf.write("\2\2\u022a\u022c\7a\2\2\u022b\u022d\5\u00a6T\2\u022c\u022b")
        buf.write("\3\2\2\2\u022c\u022d\3\2\2\2\u022d\u022e\3\2\2\2\u022e")
        buf.write("\u022f\7b\2\2\u022f\u0230\7{\2\2\u0230\u0231\7^\2\2\u0231")
        buf.write("\u0237\7\u0080\2\2\u0232\u0234\7a\2\2\u0233\u0235\5\u00a6")
        buf.write("T\2\u0234\u0233\3\2\2\2\u0234\u0235\3\2\2\2\u0235\u0236")
        buf.write("\3\2\2\2\u0236\u0238\7b\2\2\u0237\u0232\3\2\2\2\u0237")
        buf.write("\u0238\3\2\2\2\u0238\u0242\3\2\2\2\u0239\u023a\7^\2\2")
        buf.write("\u023a\u023b\7\25\2\2\u023b\u023e\7P\2\2\u023c\u023f\5")
        buf.write("@!\2\u023d\u023f\7\b\2\2\u023e\u023c\3\2\2\2\u023e\u023d")
        buf.write("\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u0242\7Q\2\2\u0241")
        buf.write("\u0211\3\2\2\2\u0241\u0227\3\2\2\2\u0241\u0239\3\2\2\2")
        buf.write("\u0242\23\3\2\2\2\u0243\u0266\5\20\t\2\u0244\u0266\5\26")
        buf.write("\f\2\u0245\u0246\t\5\2\2\u0246\u0266\5 \21\2\u0247\u0254")
        buf.write("\79\2\2\u0248\u0255\5\24\13\2\u0249\u024a\7P\2\2\u024a")
        buf.write("\u024c\5\\/\2\u024b\u024d\5|?\2\u024c\u024b\3\2\2\2\u024c")
        buf.write("\u024d\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u024f\7Q\2\2")
        buf.write("\u024f\u0255\3\2\2\2\u0250\u0251\7\177\2\2\u0251\u0252")
        buf.write("\7P\2\2\u0252\u0253\7\u0080\2\2\u0253\u0255\7Q\2\2\u0254")
        buf.write("\u0248\3\2\2\2\u0254\u0249\3\2\2\2\u0254\u0250\3\2\2\2")
        buf.write("\u0255\u0266\3\2\2\2\u0256\u0257\7\6\2\2\u0257\u0258\7")
        buf.write("P\2\2\u0258\u025a\5\\/\2\u0259\u025b\5|?\2\u025a\u0259")
        buf.write("\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u025c\3\2\2\2\u025c")
        buf.write("\u025d\7Q\2\2\u025d\u0266\3\2\2\2\u025e\u025f\7-\2\2\u025f")
        buf.write("\u0260\7P\2\2\u0260\u0261\5@!\2\u0261\u0262\7Q\2\2\u0262")
        buf.write("\u0266\3\2\2\2\u0263\u0266\5\30\r\2\u0264\u0266\5\36\20")
        buf.write("\2\u0265\u0243\3\2\2\2\u0265\u0244\3\2\2\2\u0265\u0245")
        buf.write("\3\2\2\2\u0265\u0247\3\2\2\2\u0265\u0256\3\2\2\2\u0265")
        buf.write("\u025e\3\2\2\2\u0265\u0263\3\2\2\2\u0265\u0264\3\2\2\2")
        buf.write("\u0266\25\3\2\2\2\u0267\u0268\t\4\2\2\u0268\u0269\5 \21")
        buf.write("\2\u0269\27\3\2\2\2\u026a\u026c\7{\2\2\u026b\u026a\3\2")
        buf.write("\2\2\u026b\u026c\3\2\2\2\u026c\u026d\3\2\2\2\u026d\u0272")
        buf.write("\7,\2\2\u026e\u026f\7P\2\2\u026f\u0270\5\u008eH\2\u0270")
        buf.write("\u0271\7Q\2\2\u0271\u0273\3\2\2\2\u0272\u026e\3\2\2\2")
        buf.write("\u0272\u0273\3\2\2\2\u0273\u027f\3\2\2\2\u0274\u0276\5")
        buf.write("\\/\2\u0275\u0277\5\32\16\2\u0276\u0275\3\2\2\2\u0276")
        buf.write("\u0277\3\2\2\2\u0277\u0280\3\2\2\2\u0278\u0279\7P\2\2")
        buf.write("\u0279\u027b\5\\/\2\u027a\u027c\5|?\2\u027b\u027a\3\2")
        buf.write("\2\2\u027b\u027c\3\2\2\2\u027c\u027d\3\2\2\2\u027d\u027e")
        buf.write("\7Q\2\2\u027e\u0280\3\2\2\2\u027f\u0274\3\2\2\2\u027f")
        buf.write("\u0278\3\2\2\2\u0280\u028e\3\2\2\2\u0281\u0283\7P\2\2")
        buf.write("\u0282\u0284\5\u008eH\2\u0283\u0282\3\2\2\2\u0283\u0284")
        buf.write("\3\2\2\2\u0284\u0285\3\2\2\2\u0285\u028f\7Q\2\2\u0286")
        buf.write("\u028b\7T\2\2\u0287\u0289\5\u008eH\2\u0288\u028a\7v\2")
        buf.write("\2\u0289\u0288\3\2\2\2\u0289\u028a\3\2\2\2\u028a\u028c")
        buf.write("\3\2\2\2\u028b\u0287\3\2\2\2\u028b\u028c\3\2\2\2\u028c")
        buf.write("\u028d\3\2\2\2\u028d\u028f\7U\2\2\u028e\u0281\3\2\2\2")
        buf.write("\u028e\u0286\3\2\2\2\u028e\u028f\3\2\2\2\u028f\31\3\2")
        buf.write("\2\2\u0290\u0292\5z>\2\u0291\u0293\5\32\16\2\u0292\u0291")
        buf.write("\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u0296\3\2\2\2\u0294")
        buf.write("\u0296\5\34\17\2\u0295\u0290\3\2\2\2\u0295\u0294\3\2\2")
        buf.write("\2\u0296\33\3\2\2\2\u0297\u0298\b\17\1\2\u0298\u0299\7")
        buf.write("R\2\2\u0299\u029a\5@!\2\u029a\u029c\7S\2\2\u029b\u029d")
        buf.write("\5d\63\2\u029c\u029b\3\2\2\2\u029c\u029d\3\2\2\2\u029d")
        buf.write("\u02a7\3\2\2\2\u029e\u029f\f\3\2\2\u029f\u02a0\7R\2\2")
        buf.write("\u02a0\u02a1\5B\"\2\u02a1\u02a3\7S\2\2\u02a2\u02a4\5d")
        buf.write("\63\2\u02a3\u02a2\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4\u02a6")
        buf.write("\3\2\2\2\u02a5\u029e\3\2\2\2\u02a6\u02a9\3\2\2\2\u02a7")
        buf.write("\u02a5\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8\35\3\2\2\2\u02a9")
        buf.write("\u02a7\3\2\2\2\u02aa\u02ac\7{\2\2\u02ab\u02aa\3\2\2\2")
        buf.write("\u02ab\u02ac\3\2\2\2\u02ac\u02ad\3\2\2\2\u02ad\u02b0\7")
        buf.write("\27\2\2\u02ae\u02af\7R\2\2\u02af\u02b1\7S\2\2\u02b0\u02ae")
        buf.write("\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2")
        buf.write("\u02b3\5 \21\2\u02b3\37\3\2\2\2\u02b4\u02be\5\24\13\2")
        buf.write("\u02b5\u02b6\7P\2\2\u02b6\u02b8\5\\/\2\u02b7\u02b9\5|")
        buf.write("?\2\u02b8\u02b7\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02ba")
        buf.write("\3\2\2\2\u02ba\u02bb\7Q\2\2\u02bb\u02bc\5 \21\2\u02bc")
        buf.write("\u02be\3\2\2\2\u02bd\u02b4\3\2\2\2\u02bd\u02b5\3\2\2\2")
        buf.write("\u02be!\3\2\2\2\u02bf\u02c0\b\22\1\2\u02c0\u02c1\5 \21")
        buf.write("\2\u02c1\u02c7\3\2\2\2\u02c2\u02c3\f\3\2\2\u02c3\u02c4")
        buf.write("\t\6\2\2\u02c4\u02c6\5 \21\2\u02c5\u02c2\3\2\2\2\u02c6")
        buf.write("\u02c9\3\2\2\2\u02c7\u02c5\3\2\2\2\u02c7\u02c8\3\2\2\2")
        buf.write("\u02c8#\3\2\2\2\u02c9\u02c7\3\2\2\2\u02ca\u02cb\b\23\1")
        buf.write("\2\u02cb\u02cc\5\"\22\2\u02cc\u02d2\3\2\2\2\u02cd\u02ce")
        buf.write("\f\3\2\2\u02ce\u02cf\t\7\2\2\u02cf\u02d1\5\"\22\2\u02d0")
        buf.write("\u02cd\3\2\2\2\u02d1\u02d4\3\2\2\2\u02d2\u02d0\3\2\2\2")
        buf.write("\u02d2\u02d3\3\2\2\2\u02d3%\3\2\2\2\u02d4\u02d2\3\2\2")
        buf.write("\2\u02d5\u02d6\b\24\1\2\u02d6\u02d7\5$\23\2\u02d7\u02dd")
        buf.write("\3\2\2\2\u02d8\u02d9\f\3\2\2\u02d9\u02da\t\b\2\2\u02da")
        buf.write("\u02dc\5$\23\2\u02db\u02d8\3\2\2\2\u02dc\u02df\3\2\2\2")
        buf.write("\u02dd\u02db\3\2\2\2\u02dd\u02de\3\2\2\2\u02de\'\3\2\2")
        buf.write("\2\u02df\u02dd\3\2\2\2\u02e0\u02e1\b\25\1\2\u02e1\u02e2")
        buf.write("\5&\24\2\u02e2\u02ec\3\2\2\2\u02e3\u02e7\f\3\2\2\u02e4")
        buf.write("\u02e8\7k\2\2\u02e5\u02e6\7b\2\2\u02e6\u02e8\7b\2\2\u02e7")
        buf.write("\u02e4\3\2\2\2\u02e7\u02e5\3\2\2\2\u02e8\u02e9\3\2\2\2")
        buf.write("\u02e9\u02eb\5&\24\2\u02ea\u02e3\3\2\2\2\u02eb\u02ee\3")
        buf.write("\2\2\2\u02ec\u02ea\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed)")
        buf.write("\3\2\2\2\u02ee\u02ec\3\2\2\2\u02ef\u02f0\b\26\1\2\u02f0")
        buf.write("\u02f1\5(\25\2\u02f1\u02f7\3\2\2\2\u02f2\u02f3\f\3\2\2")
        buf.write("\u02f3\u02f4\t\t\2\2\u02f4\u02f6\5(\25\2\u02f5\u02f2\3")
        buf.write("\2\2\2\u02f6\u02f9\3\2\2\2\u02f7\u02f5\3\2\2\2\u02f7\u02f8")
        buf.write("\3\2\2\2\u02f8+\3\2\2\2\u02f9\u02f7\3\2\2\2\u02fa\u02fb")
        buf.write("\b\27\1\2\u02fb\u02fc\5*\26\2\u02fc\u0302\3\2\2\2\u02fd")
        buf.write("\u02fe\f\3\2\2\u02fe\u02ff\t\n\2\2\u02ff\u0301\5*\26\2")
        buf.write("\u0300\u02fd\3\2\2\2\u0301\u0304\3\2\2\2\u0302\u0300\3")
        buf.write("\2\2\2\u0302\u0303\3\2\2\2\u0303-\3\2\2\2\u0304\u0302")
        buf.write("\3\2\2\2\u0305\u0306\b\30\1\2\u0306\u0307\5,\27\2\u0307")
        buf.write("\u030d\3\2\2\2\u0308\u0309\f\3\2\2\u0309\u030a\7\\\2\2")
        buf.write("\u030a\u030c\5,\27\2\u030b\u0308\3\2\2\2\u030c\u030f\3")
        buf.write("\2\2\2\u030d\u030b\3\2\2\2\u030d\u030e\3\2\2\2\u030e/")
        buf.write("\3\2\2\2\u030f\u030d\3\2\2\2\u0310\u0311\b\31\1\2\u0311")
        buf.write("\u0312\5.\30\2\u0312\u0318\3\2\2\2\u0313\u0314\f\3\2\2")
        buf.write("\u0314\u0315\7[\2\2\u0315\u0317\5.\30\2\u0316\u0313\3")
        buf.write("\2\2\2\u0317\u031a\3\2\2\2\u0318\u0316\3\2\2\2\u0318\u0319")
        buf.write("\3\2\2\2\u0319\61\3\2\2\2\u031a\u0318\3\2\2\2\u031b\u031c")
        buf.write("\b\32\1\2\u031c\u031d\5\60\31\2\u031d\u0323\3\2\2\2\u031e")
        buf.write("\u031f\f\3\2\2\u031f\u0320\7]\2\2\u0320\u0322\5\60\31")
        buf.write("\2\u0321\u031e\3\2\2\2\u0322\u0325\3\2\2\2\u0323\u0321")
        buf.write("\3\2\2\2\u0323\u0324\3\2\2\2\u0324\63\3\2\2\2\u0325\u0323")
        buf.write("\3\2\2\2\u0326\u0327\b\33\1\2\u0327\u0328\5\62\32\2\u0328")
        buf.write("\u032e\3\2\2\2\u0329\u032a\f\3\2\2\u032a\u032b\7q\2\2")
        buf.write("\u032b\u032d\5\62\32\2\u032c\u0329\3\2\2\2\u032d\u0330")
        buf.write("\3\2\2\2\u032e\u032c\3\2\2\2\u032e\u032f\3\2\2\2\u032f")
        buf.write("\65\3\2\2\2\u0330\u032e\3\2\2\2\u0331\u0332\b\34\1\2\u0332")
        buf.write("\u0333\5\64\33\2\u0333\u0339\3\2\2\2\u0334\u0335\f\3\2")
        buf.write("\2\u0335\u0336\7r\2\2\u0336\u0338\5\64\33\2\u0337\u0334")
        buf.write("\3\2\2\2\u0338\u033b\3\2\2\2\u0339\u0337\3\2\2\2\u0339")
        buf.write("\u033a\3\2\2\2\u033a\67\3\2\2\2\u033b\u0339\3\2\2\2\u033c")
        buf.write("\u033d\5\66\34\2\u033d\u033e\7y\2\2\u033e\u033f\5@!\2")
        buf.write("\u033f\u0340\7z\2\2\u0340\u0341\5<\37\2\u03419\3\2\2\2")
        buf.write("\u0342\u0343\5\66\34\2\u0343\u0344\7u\2\2\u0344\u0345")
        buf.write("\5<\37\2\u0345;\3\2\2\2\u0346\u0353\5\66\34\2\u0347\u0351")
        buf.write("\5> \2\u0348\u0352\5<\37\2\u0349\u034e\7T\2\2\u034a\u034c")
        buf.write("\5\u008eH\2\u034b\u034d\7v\2\2\u034c\u034b\3\2\2\2\u034c")
        buf.write("\u034d\3\2\2\2\u034d\u034f\3\2\2\2\u034e\u034a\3\2\2\2")
        buf.write("\u034e\u034f\3\2\2\2\u034f\u0350\3\2\2\2\u0350\u0352\7")
        buf.write("U\2\2\u0351\u0348\3\2\2\2\u0351\u0349\3\2\2\2\u0352\u0354")
        buf.write("\3\2\2\2\u0353\u0347\3\2\2\2\u0353\u0354\3\2\2\2\u0354")
        buf.write("\u035c\3\2\2\2\u0355\u035c\58\35\2\u0356\u035c\5:\36\2")
        buf.write("\u0357\u0359\7B\2\2\u0358\u035a\5<\37\2\u0359\u0358\3")
        buf.write("\2\2\2\u0359\u035a\3\2\2\2\u035a\u035c\3\2\2\2\u035b\u0346")
        buf.write("\3\2\2\2\u035b\u0355\3\2\2\2\u035b\u0356\3\2\2\2\u035b")
        buf.write("\u0357\3\2\2\2\u035c=\3\2\2\2\u035d\u036b\7`\2\2\u035e")
        buf.write("\u036b\7e\2\2\u035f\u036b\7f\2\2\u0360\u036b\7g\2\2\u0361")
        buf.write("\u036b\7c\2\2\u0362\u036b\7d\2\2\u0363\u0364\7b\2\2\u0364")
        buf.write("\u0365\7b\2\2\u0365\u036b\7`\2\2\u0366\u036b\7l\2\2\u0367")
        buf.write("\u036b\7i\2\2\u0368\u036b\7h\2\2\u0369\u036b\7j\2\2\u036a")
        buf.write("\u035d\3\2\2\2\u036a\u035e\3\2\2\2\u036a\u035f\3\2\2\2")
        buf.write("\u036a\u0360\3\2\2\2\u036a\u0361\3\2\2\2\u036a\u0362\3")
        buf.write("\2\2\2\u036a\u0363\3\2\2\2\u036a\u0366\3\2\2\2\u036a\u0367")
        buf.write("\3\2\2\2\u036a\u0368\3\2\2\2\u036a\u0369\3\2\2\2\u036b")
        buf.write("?\3\2\2\2\u036c\u036d\b!\1\2\u036d\u036e\5<\37\2\u036e")
        buf.write("\u0374\3\2\2\2\u036f\u0370\f\3\2\2\u0370\u0371\7v\2\2")
        buf.write("\u0371\u0373\5<\37\2\u0372\u036f\3\2\2\2\u0373\u0376\3")
        buf.write("\2\2\2\u0374\u0372\3\2\2\2\u0374\u0375\3\2\2\2\u0375A")
        buf.write("\3\2\2\2\u0376\u0374\3\2\2\2\u0377\u037b\5\66\34\2\u0378")
        buf.write("\u037b\58\35\2\u0379\u037b\5:\36\2\u037a\u0377\3\2\2\2")
        buf.write("\u037a\u0378\3\2\2\2\u037a\u0379\3\2\2\2\u037bC\3\2\2")
        buf.write("\2\u037c\u037e\5d\63\2\u037d\u037c\3\2\2\2\u037d\u037e")
        buf.write("\3\2\2\2\u037e\u03e0\3\2\2\2\u037f\u0380\7\u0080\2\2\u0380")
        buf.write("\u0381\7z\2\2\u0381\u03e1\5D#\2\u0382\u03e1\5F$\2\u0383")
        buf.write("\u03e1\5H%\2\u0384\u0386\5@!\2\u0385\u0384\3\2\2\2\u0385")
        buf.write("\u0386\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u03e1\7|\2\2")
        buf.write("\u0388\u038c\7T\2\2\u0389\u038b\5D#\2\u038a\u0389\3\2")
        buf.write("\2\2\u038b\u038e\3\2\2\2\u038c\u038a\3\2\2\2\u038c\u038d")
        buf.write("\3\2\2\2\u038d\u038f\3\2\2\2\u038e\u038c\3\2\2\2\u038f")
        buf.write("\u03e1\7U\2\2\u0390\u0391\7&\2\2\u0391\u0392\7P\2\2\u0392")
        buf.write("\u0393\5L\'\2\u0393\u0394\7Q\2\2\u0394\u0396\5D#\2\u0395")
        buf.write("\u0397\5J&\2\u0396\u0395\3\2\2\2\u0396\u0397\3\2\2\2\u0397")
        buf.write("\u03e1\3\2\2\2\u0398\u0399\t\13\2\2\u0399\u039a\7P\2\2")
        buf.write("\u039a\u039b\5L\'\2\u039b\u039c\7Q\2\2\u039c\u039d\5D")
        buf.write("#\2\u039d\u03e1\3\2\2\2\u039e\u039f\7\30\2\2\u039f\u03a0")
        buf.write("\5D#\2\u03a0\u03a1\7O\2\2\u03a1\u03a2\7P\2\2\u03a2\u03a3")
        buf.write("\5@!\2\u03a3\u03a4\7Q\2\2\u03a4\u03a5\7|\2\2\u03a5\u03e1")
        buf.write("\3\2\2\2\u03a6\u03a7\7#\2\2\u03a7\u03c1\7P\2\2\u03a8\u03aa")
        buf.write("\5N(\2\u03a9\u03ab\5L\'\2\u03aa\u03a9\3\2\2\2\u03aa\u03ab")
        buf.write("\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03ae\7|\2\2\u03ad")
        buf.write("\u03af\5@!\2\u03ae\u03ad\3\2\2\2\u03ae\u03af\3\2\2\2\u03af")
        buf.write("\u03c2\3\2\2\2\u03b0\u03b2\5d\63\2\u03b1\u03b0\3\2\2\2")
        buf.write("\u03b1\u03b2\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b4\5")
        buf.write("V,\2\u03b4\u03b5\5r:\2\u03b5\u03bf\7z\2\2\u03b6\u03c0")
        buf.write("\5@!\2\u03b7\u03bc\7T\2\2\u03b8\u03ba\5\u008eH\2\u03b9")
        buf.write("\u03bb\7v\2\2\u03ba\u03b9\3\2\2\2\u03ba\u03bb\3\2\2\2")
        buf.write("\u03bb\u03bd\3\2\2\2\u03bc\u03b8\3\2\2\2\u03bc\u03bd\3")
        buf.write("\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03c0\7U\2\2\u03bf\u03b6")
        buf.write("\3\2\2\2\u03bf\u03b7\3\2\2\2\u03c0\u03c2\3\2\2\2\u03c1")
        buf.write("\u03a8\3\2\2\2\u03c1\u03b1\3\2\2\2\u03c2\u03c3\3\2\2\2")
        buf.write("\u03c3\u03c4\7Q\2\2\u03c4\u03c5\5D#\2\u03c5\u03e1\3\2")
        buf.write("\2\2\u03c6\u03c7\t\f\2\2\u03c7\u03e1\7|\2\2\u03c8\u03d4")
        buf.write("\7\66\2\2\u03c9\u03cb\5@!\2\u03ca\u03c9\3\2\2\2\u03ca")
        buf.write("\u03cb\3\2\2\2\u03cb\u03d5\3\2\2\2\u03cc\u03d1\7T\2\2")
        buf.write("\u03cd\u03cf\5\u008eH\2\u03ce\u03d0\7v\2\2\u03cf\u03ce")
        buf.write("\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0\u03d2\3\2\2\2\u03d1")
        buf.write("\u03cd\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d3\3\2\2\2")
        buf.write("\u03d3\u03d5\7U\2\2\u03d4\u03ca\3\2\2\2\u03d4\u03cc\3")
        buf.write("\2\2\2\u03d5\u03d6\3\2\2\2\u03d6\u03e1\7|\2\2\u03d7\u03e1")
        buf.write("\5P)\2\u03d8\u03d9\7J\2\2\u03d9\u03db\7+\2\2\u03da\u03dc")
        buf.write("\5\b\5\2\u03db\u03da\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc")
        buf.write("\u03dd\3\2\2\2\u03dd\u03de\7\u0080\2\2\u03de\u03e1\7|")
        buf.write("\2\2\u03df\u03e1\5\u00aaV\2\u03e0\u037f\3\2\2\2\u03e0")
        buf.write("\u0382\3\2\2\2\u03e0\u0383\3\2\2\2\u03e0\u0385\3\2\2\2")
        buf.write("\u03e0\u0388\3\2\2\2\u03e0\u0390\3\2\2\2\u03e0\u0398\3")
        buf.write("\2\2\2\u03e0\u039e\3\2\2\2\u03e0\u03a6\3\2\2\2\u03e0\u03c6")
        buf.write("\3\2\2\2\u03e0\u03c8\3\2\2\2\u03e0\u03d7\3\2\2\2\u03e0")
        buf.write("\u03d8\3\2\2\2\u03e0\u03df\3\2\2\2\u03e1\u0429\3\2\2\2")
        buf.write("\u03e2\u03e4\5d\63\2\u03e3\u03e5\5V,\2\u03e4\u03e3\3\2")
        buf.write("\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03e7")
        buf.write("\5p9\2\u03e7\u03e8\7|\2\2\u03e8\u0429\3\2\2\2\u03e9\u03eb")
        buf.write("\5V,\2\u03ea\u03e9\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u03ed")
        buf.write("\3\2\2\2\u03ec\u03ee\5p9\2\u03ed\u03ec\3\2\2\2\u03ed\u03ee")
        buf.write("\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u0429\7|\2\2\u03f0")
        buf.write("\u03f1\7\7\2\2\u03f1\u03f2\7P\2\2\u03f2\u03f3\7\u0089")
        buf.write("\2\2\u03f3\u03f4\7Q\2\2\u03f4\u0429\7|\2\2\u03f5\u03f6")
        buf.write("\7+\2\2\u03f6\u03f7\7\u0080\2\2\u03f7\u03f9\7`\2\2\u03f8")
        buf.write("\u03fa\5\b\5\2\u03f9\u03f8\3\2\2\2\u03f9\u03fa\3\2\2\2")
        buf.write("\u03fa\u03fb\3\2\2\2\u03fb\u03fc\7\u0080\2\2\u03fc\u0429")
        buf.write("\7|\2\2\u03fd\u040f\7J\2\2\u03fe\u0404\7{\2\2\u03ff\u0401")
        buf.write("\7G\2\2\u0400\u03ff\3\2\2\2\u0400\u0401\3\2\2\2\u0401")
        buf.write("\u0402\3\2\2\2\u0402\u0404\5\b\5\2\u0403\u03fe\3\2\2\2")
        buf.write("\u0403\u0400\3\2\2\2\u0404\u0405\3\2\2\2\u0405\u0410\5")
        buf.write("\6\4\2\u0406\u0408\7\u0080\2\2\u0407\u0409\5d\63\2\u0408")
        buf.write("\u0407\3\2\2\2\u0408\u0409\3\2\2\2\u0409\u040a\3\2\2\2")
        buf.write("\u040a\u040b\7`\2\2\u040b\u040d\5\\/\2\u040c\u040e\5|")
        buf.write("?\2\u040d\u040c\3\2\2\2\u040d\u040e\3\2\2\2\u040e\u0410")
        buf.write("\3\2\2\2\u040f\u0403\3\2\2\2\u040f\u0406\3\2\2\2\u0410")
        buf.write("\u0411\3\2\2\2\u0411\u0412\7|\2\2\u0412\u0429\3\2\2\2")
        buf.write("\u0413\u0414\7;\2\2\u0414\u0415\7P\2\2\u0415\u0416\5B")
        buf.write("\"\2\u0416\u0417\7v\2\2\u0417\u0418\7\u0089\2\2\u0418")
        buf.write("\u0419\7Q\2\2\u0419\u041a\7|\2\2\u041a\u0429\3\2\2\2\u041b")
        buf.write("\u041d\7\34\2\2\u041c\u041e\t\r\2\2\u041d\u041c\3\2\2")
        buf.write("\2\u041d\u041e\3\2\2\2\u041e\u0420\3\2\2\2\u041f\u0421")
        buf.write("\5d\63\2\u0420\u041f\3\2\2\2\u0420\u0421\3\2\2\2\u0421")
        buf.write("\u0422\3\2\2\2\u0422\u0425\7\u0080\2\2\u0423\u0424\7z")
        buf.write("\2\2\u0424\u0426\5\\/\2\u0425\u0423\3\2\2\2\u0425\u0426")
        buf.write("\3\2\2\2\u0426\u0427\3\2\2\2\u0427\u0429\7|\2\2\u0428")
        buf.write("\u037d\3\2\2\2\u0428\u03e2\3\2\2\2\u0428\u03ea\3\2\2\2")
        buf.write("\u0428\u03f0\3\2\2\2\u0428\u03f5\3\2\2\2\u0428\u03fd\3")
        buf.write("\2\2\2\u0428\u0413\3\2\2\2\u0428\u041b\3\2\2\2\u0429E")
        buf.write("\3\2\2\2\u042a\u042b\7\13\2\2\u042b\u042c\5B\"\2\u042c")
        buf.write("\u042d\7z\2\2\u042d\u042e\5D#\2\u042eG\3\2\2\2\u042f\u0430")
        buf.write("\7\26\2\2\u0430\u0431\7z\2\2\u0431\u0432\5D#\2\u0432I")
        buf.write("\3\2\2\2\u0433\u0434\7\33\2\2\u0434\u0435\5D#\2\u0435")
        buf.write("K\3\2\2\2\u0436\u0453\5@!\2\u0437\u0439\5d\63\2\u0438")
        buf.write("\u0437\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u043a\3\2\2\2")
        buf.write("\u043a\u043b\5V,\2\u043b\u0450\5r:\2\u043c\u0446\7`\2")
        buf.write("\2\u043d\u0447\5<\37\2\u043e\u0443\7T\2\2\u043f\u0441")
        buf.write("\5\u008eH\2\u0440\u0442\7v\2\2\u0441\u0440\3\2\2\2\u0441")
        buf.write("\u0442\3\2\2\2\u0442\u0444\3\2\2\2\u0443\u043f\3\2\2\2")
        buf.write("\u0443\u0444\3\2\2\2\u0444\u0445\3\2\2\2\u0445\u0447\7")
        buf.write("U\2\2\u0446\u043d\3\2\2\2\u0446\u043e\3\2\2\2\u0447\u0451")
        buf.write("\3\2\2\2\u0448\u044d\7T\2\2\u0449\u044b\5\u008eH\2\u044a")
        buf.write("\u044c\7v\2\2\u044b\u044a\3\2\2\2\u044b\u044c\3\2\2\2")
        buf.write("\u044c\u044e\3\2\2\2\u044d\u0449\3\2\2\2\u044d\u044e\3")
        buf.write("\2\2\2\u044e\u044f\3\2\2\2\u044f\u0451\7U\2\2\u0450\u043c")
        buf.write("\3\2\2\2\u0450\u0448\3\2\2\2\u0451\u0453\3\2\2\2\u0452")
        buf.write("\u0436\3\2\2\2\u0452\u0438\3\2\2\2\u0453M\3\2\2\2\u0454")
        buf.write("\u0456\5@!\2\u0455\u0454\3\2\2\2\u0455\u0456\3\2\2\2\u0456")
        buf.write("\u0464\3\2\2\2\u0457\u0459\5V,\2\u0458\u0457\3\2\2\2\u0458")
        buf.write("\u0459\3\2\2\2\u0459\u045b\3\2\2\2\u045a\u045c\5p9\2\u045b")
        buf.write("\u045a\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u0464\3\2\2\2")
        buf.write("\u045d\u045f\5d\63\2\u045e\u0460\5V,\2\u045f\u045e\3\2")
        buf.write("\2\2\u045f\u0460\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0462")
        buf.write("\5p9\2\u0462\u0464\3\2\2\2\u0463\u0455\3\2\2\2\u0463\u0458")
        buf.write("\3\2\2\2\u0463\u045d\3\2\2\2\u0464\u0465\3\2\2\2\u0465")
        buf.write("\u0466\7|\2\2\u0466O\3\2\2\2\u0467\u0468\7%\2\2\u0468")
        buf.write("\u0469\7\u0080\2\2\u0469\u046a\7|\2\2\u046aQ\3\2\2\2\u046b")
        buf.write("\u046c\b*\1\2\u046c\u046d\5T+\2\u046d\u0472\3\2\2\2\u046e")
        buf.write("\u046f\f\3\2\2\u046f\u0471\5T+\2\u0470\u046e\3\2\2\2\u0471")
        buf.write("\u0474\3\2\2\2\u0472\u0470\3\2\2\2\u0472\u0473\3\2\2\2")
        buf.write("\u0473S\3\2\2\2\u0474\u0472\3\2\2\2\u0475\u0477\5V,\2")
        buf.write("\u0476\u0475\3\2\2\2\u0476\u0477\3\2\2\2\u0477\u0479\3")
        buf.write("\2\2\2\u0478\u047a\5p9\2\u0479\u0478\3\2\2\2\u0479\u047a")
        buf.write("\3\2\2\2\u047a\u047b\3\2\2\2\u047b\u051e\7|\2\2\u047c")
        buf.write("\u0481\5d\63\2\u047d\u047f\5V,\2\u047e\u047d\3\2\2\2\u047e")
        buf.write("\u047f\3\2\2\2\u047f\u0480\3\2\2\2\u0480\u0482\5p9\2\u0481")
        buf.write("\u047e\3\2\2\2\u0481\u0482\3\2\2\2\u0482\u0483\3\2\2\2")
        buf.write("\u0483\u0484\7|\2\2\u0484\u051e\3\2\2\2\u0485\u0487\5")
        buf.write("d\63\2\u0486\u0485\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u04b9")
        buf.write("\3\2\2\2\u0488\u0489\7J\2\2\u0489\u048b\7+\2\2\u048a\u048c")
        buf.write("\5\b\5\2\u048b\u048a\3\2\2\2\u048b\u048c\3\2\2\2\u048c")
        buf.write("\u048d\3\2\2\2\u048d\u048e\7\u0080\2\2\u048e\u04ba\7|")
        buf.write("\2\2\u048f\u0491\5V,\2\u0490\u048f\3\2\2\2\u0490\u0491")
        buf.write("\3\2\2\2\u0491\u0492\3\2\2\2\u0492\u0494\5r:\2\u0493\u0495")
        buf.write("\5\u0096L\2\u0494\u0493\3\2\2\2\u0494\u0495\3\2\2\2\u0495")
        buf.write("\u04b7\3\2\2\2\u0496\u0497\7z\2\2\u0497\u0499\5\u00a0")
        buf.write("Q\2\u0498\u0496\3\2\2\2\u0498\u0499\3\2\2\2\u0499\u049a")
        buf.write("\3\2\2\2\u049a\u049e\7T\2\2\u049b\u049d\5D#\2\u049c\u049b")
        buf.write("\3\2\2\2\u049d\u04a0\3\2\2\2\u049e\u049c\3\2\2\2\u049e")
        buf.write("\u049f\3\2\2\2\u049f\u04a1\3\2\2\2\u04a0\u049e\3\2\2\2")
        buf.write("\u04a1\u04b8\7U\2\2\u04a2\u04a5\7D\2\2\u04a3\u04a4\7z")
        buf.write("\2\2\u04a4\u04a6\5\u00a0Q\2\u04a5\u04a3\3\2\2\2\u04a5")
        buf.write("\u04a6\3\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\u04ab\7T\2\2")
        buf.write("\u04a8\u04aa\5D#\2\u04a9\u04a8\3\2\2\2\u04aa\u04ad\3\2")
        buf.write("\2\2\u04ab\u04a9\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac\u04ae")
        buf.write("\3\2\2\2\u04ad\u04ab\3\2\2\2\u04ae\u04b0\7U\2\2\u04af")
        buf.write("\u04b1\5\u00acW\2\u04b0\u04af\3\2\2\2\u04b1\u04b2\3\2")
        buf.write("\2\2\u04b2\u04b0\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3\u04b8")
        buf.write("\3\2\2\2\u04b4\u04b5\7`\2\2\u04b5\u04b6\t\16\2\2\u04b6")
        buf.write("\u04b8\7|\2\2\u04b7\u0498\3\2\2\2\u04b7\u04a2\3\2\2\2")
        buf.write("\u04b7\u04b4\3\2\2\2\u04b8\u04ba\3\2\2\2\u04b9\u0488\3")
        buf.write("\2\2\2\u04b9\u0490\3\2\2\2\u04ba\u051e\3\2\2\2\u04bb\u04bc")
        buf.write("\7\7\2\2\u04bc\u04bd\7P\2\2\u04bd\u04be\7\u0089\2\2\u04be")
        buf.write("\u04bf\7Q\2\2\u04bf\u051e\7|\2\2\u04c0\u04c1\7+\2\2\u04c1")
        buf.write("\u04c2\7\u0080\2\2\u04c2\u04c4\7`\2\2\u04c3\u04c5\5\b")
        buf.write("\5\2\u04c4\u04c3\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04c6")
        buf.write("\3\2\2\2\u04c6\u04c7\7\u0080\2\2\u04c7\u051e\7|\2\2\u04c8")
        buf.write("\u04de\7J\2\2\u04c9\u04cf\7{\2\2\u04ca\u04cc\7G\2\2\u04cb")
        buf.write("\u04ca\3\2\2\2\u04cb\u04cc\3\2\2\2\u04cc\u04cd\3\2\2\2")
        buf.write("\u04cd\u04cf\5\b\5\2\u04ce\u04c9\3\2\2\2\u04ce\u04cb\3")
        buf.write("\2\2\2\u04cf\u04d0\3\2\2\2\u04d0\u04d1\5\6\4\2\u04d1\u04d2")
        buf.write("\7|\2\2\u04d2\u04df\3\2\2\2\u04d3\u04d5\7\u0080\2\2\u04d4")
        buf.write("\u04d6\5d\63\2\u04d5\u04d4\3\2\2\2\u04d5\u04d6\3\2\2\2")
        buf.write("\u04d6\u04d7\3\2\2\2\u04d7\u04d8\7`\2\2\u04d8\u04da\5")
        buf.write("\\/\2\u04d9\u04db\5|?\2\u04da\u04d9\3\2\2\2\u04da\u04db")
        buf.write("\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc\u04dd\7|\2\2\u04dd")
        buf.write("\u04df\3\2\2\2\u04de\u04ce\3\2\2\2\u04de\u04d3\3\2\2\2")
        buf.write("\u04df\u051e\3\2\2\2\u04e0\u04e1\7;\2\2\u04e1\u04e2\7")
        buf.write("P\2\2\u04e2\u04e3\5B\"\2\u04e3\u04e4\7v\2\2\u04e4\u04e5")
        buf.write("\7\u0089\2\2\u04e5\u04e6\7Q\2\2\u04e6\u04e7\7|\2\2\u04e7")
        buf.write("\u051e\3\2\2\2\u04e8\u04ea\7\34\2\2\u04e9\u04eb\t\r\2")
        buf.write("\2\u04ea\u04e9\3\2\2\2\u04ea\u04eb\3\2\2\2\u04eb\u04ed")
        buf.write("\3\2\2\2\u04ec\u04ee\5d\63\2\u04ed\u04ec\3\2\2\2\u04ed")
        buf.write("\u04ee\3\2\2\2\u04ee\u04ef\3\2\2\2\u04ef\u04f2\7\u0080")
        buf.write("\2\2\u04f0\u04f1\7z\2\2\u04f1\u04f3\5\\/\2\u04f2\u04f0")
        buf.write("\3\2\2\2\u04f2\u04f3\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4")
        buf.write("\u051e\7|\2\2\u04f5\u04f6\7?\2\2\u04f6\u04f8\7a\2\2\u04f7")
        buf.write("\u04f9\5\u00a2R\2\u04f8\u04f7\3\2\2\2\u04f8\u04f9\3\2")
        buf.write("\2\2\u04f9\u04fa\3\2\2\2\u04fa\u04fb\7b\2\2\u04fb\u051e")
        buf.write("\5T+\2\u04fc\u04fe\7\37\2\2\u04fd\u04fc\3\2\2\2\u04fd")
        buf.write("\u04fe\3\2\2\2\u04fe\u04ff\3\2\2\2\u04ff\u0500\7?\2\2")
        buf.write("\u0500\u051e\5T+\2\u0501\u0502\7\37\2\2\u0502\u0509\7")
        buf.write("\u0089\2\2\u0503\u0505\7T\2\2\u0504\u0506\5R*\2\u0505")
        buf.write("\u0504\3\2\2\2\u0505\u0506\3\2\2\2\u0506\u0507\3\2\2\2")
        buf.write("\u0507\u050a\7U\2\2\u0508\u050a\5T+\2\u0509\u0503\3\2")
        buf.write("\2\2\u0509\u0508\3\2\2\2\u050a\u051e\3\2\2\2\u050b\u050d")
        buf.write("\7\'\2\2\u050c\u050b\3\2\2\2\u050c\u050d\3\2\2\2\u050d")
        buf.write("\u050e\3\2\2\2\u050e\u051a\7+\2\2\u050f\u0510\7\u0080")
        buf.write("\2\2\u0510\u0512\7T\2\2\u0511\u0513\5R*\2\u0512\u0511")
        buf.write("\3\2\2\2\u0512\u0513\3\2\2\2\u0513\u0514\3\2\2\2\u0514")
        buf.write("\u051b\7U\2\2\u0515\u0517\7T\2\2\u0516\u0518\5R*\2\u0517")
        buf.write("\u0516\3\2\2\2\u0517\u0518\3\2\2\2\u0518\u0519\3\2\2\2")
        buf.write("\u0519\u051b\7U\2\2\u051a\u050f\3\2\2\2\u051a\u0515\3")
        buf.write("\2\2\2\u051b\u051e\3\2\2\2\u051c\u051e\7|\2\2\u051d\u0476")
        buf.write("\3\2\2\2\u051d\u047c\3\2\2\2\u051d\u0486\3\2\2\2\u051d")
        buf.write("\u04bb\3\2\2\2\u051d\u04c0\3\2\2\2\u051d\u04c8\3\2\2\2")
        buf.write("\u051d\u04e0\3\2\2\2\u051d\u04e8\3\2\2\2\u051d\u04f5\3")
        buf.write("\2\2\2\u051d\u04fd\3\2\2\2\u051d\u0501\3\2\2\2\u051d\u050c")
        buf.write("\3\2\2\2\u051d\u051c\3\2\2\2\u051eU\3\2\2\2\u051f\u052c")
        buf.write("\7\64\2\2\u0520\u052c\7:\2\2\u0521\u052c\7A\2\2\u0522")
        buf.write("\u052c\7\37\2\2\u0523\u052c\7*\2\2\u0524\u052c\5X-\2\u0525")
        buf.write("\u052c\7\'\2\2\u0526\u052c\7K\2\2\u0527\u052c\7\35\2\2")
        buf.write("\u0528\u052c\7$\2\2\u0529\u052c\7E\2\2\u052a\u052c\7\22")
        buf.write("\2\2\u052b\u051f\3\2\2\2\u052b\u0520\3\2\2\2\u052b\u0521")
        buf.write("\3\2\2\2\u052b\u0522\3\2\2\2\u052b\u0523\3\2\2\2\u052b")
        buf.write("\u0524\3\2\2\2\u052b\u0525\3\2\2\2\u052b\u0526\3\2\2\2")
        buf.write("\u052b\u0527\3\2\2\2\u052b\u0528\3\2\2\2\u052b\u0529\3")
        buf.write("\2\2\2\u052b\u052a\3\2\2\2\u052c\u052f\3\2\2\2\u052d\u0530")
        buf.write("\5d\63\2\u052e\u0530\5V,\2\u052f\u052d\3\2\2\2\u052f\u052e")
        buf.write("\3\2\2\2\u052f\u0530\3\2\2\2\u0530W\3\2\2\2\u0531\u056b")
        buf.write("\5Z.\2\u0532\u0534\t\17\2\2\u0533\u0535\5d\63\2\u0534")
        buf.write("\u0533\3\2\2\2\u0534\u0535\3\2\2\2\u0535\u0544\3\2\2\2")
        buf.write("\u0536\u0538\5\b\5\2\u0537\u0536\3\2\2\2\u0537\u0538\3")
        buf.write("\2\2\2\u0538\u0539\3\2\2\2\u0539\u053f\7\u0080\2\2\u053a")
        buf.write("\u053c\7a\2\2\u053b\u053d\5\u00a6T\2\u053c\u053b\3\2\2")
        buf.write("\2\u053c\u053d\3\2\2\2\u053d\u053e\3\2\2\2\u053e\u0540")
        buf.write("\7b\2\2\u053f\u053a\3\2\2\2\u053f\u0540\3\2\2\2\u0540")
        buf.write("\u0542\3\2\2\2\u0541\u0543\7!\2\2\u0542\u0541\3\2\2\2")
        buf.write("\u0542\u0543\3\2\2\2\u0543\u0545\3\2\2\2\u0544\u0537\3")
        buf.write("\2\2\2\u0544\u0545\3\2\2\2\u0545\u0548\3\2\2\2\u0546\u0547")
        buf.write("\7z\2\2\u0547\u0549\5\u009aN\2\u0548\u0546\3\2\2\2\u0548")
        buf.write("\u0549\3\2\2\2\u0549\u054a\3\2\2\2\u054a\u054e\7T\2\2")
        buf.write("\u054b\u054f\5\u0090I\2\u054c\u054d\t\20\2\2\u054d\u054f")
        buf.write("\7z\2\2\u054e\u054b\3\2\2\2\u054e\u054c\3\2\2\2\u054e")
        buf.write("\u054f\3\2\2\2\u054f\u0550\3\2\2\2\u0550\u056b\7U\2\2")
        buf.write("\u0551\u0553\7\34\2\2\u0552\u0554\t\r\2\2\u0553\u0552")
        buf.write("\3\2\2\2\u0553\u0554\3\2\2\2\u0554\u0556\3\2\2\2\u0555")
        buf.write("\u0557\5d\63\2\u0556\u0555\3\2\2\2\u0556\u0557\3\2\2\2")
        buf.write("\u0557\u055c\3\2\2\2\u0558\u055a\5\b\5\2\u0559\u0558\3")
        buf.write("\2\2\2\u0559\u055a\3\2\2\2\u055a\u055b\3\2\2\2\u055b\u055d")
        buf.write("\7\u0080\2\2\u055c\u0559\3\2\2\2\u055c\u055d\3\2\2\2\u055d")
        buf.write("\u0560\3\2\2\2\u055e\u055f\7z\2\2\u055f\u0561\5\\/\2\u0560")
        buf.write("\u055e\3\2\2\2\u0560\u0561\3\2\2\2\u0561\u0562\3\2\2\2")
        buf.write("\u0562\u0564\7T\2\2\u0563\u0565\5b\62\2\u0564\u0563\3")
        buf.write("\2\2\2\u0564\u0565\3\2\2\2\u0565\u0567\3\2\2\2\u0566\u0568")
        buf.write("\7v\2\2\u0567\u0566\3\2\2\2\u0567\u0568\3\2\2\2\u0568")
        buf.write("\u0569\3\2\2\2\u0569\u056b\7U\2\2\u056a\u0531\3\2\2\2")
        buf.write("\u056a\u0532\3\2\2\2\u056a\u0551\3\2\2\2\u056bY\3\2\2")
        buf.write("\2\u056c\u0598\5`\61\2\u056d\u0581\t\17\2\2\u056e\u0570")
        buf.write("\5d\63\2\u056f\u056e\3\2\2\2\u056f\u0570\3\2\2\2\u0570")
        buf.write("\u0572\3\2\2\2\u0571\u0573\5\b\5\2\u0572\u0571\3\2\2\2")
        buf.write("\u0572\u0573\3\2\2\2\u0573\u0574\3\2\2\2\u0574\u0582\7")
        buf.write("\u0080\2\2\u0575\u0577\5\b\5\2\u0576\u0578\7?\2\2\u0577")
        buf.write("\u0576\3\2\2\2\u0577\u0578\3\2\2\2\u0578\u057a\3\2\2\2")
        buf.write("\u0579\u0575\3\2\2\2\u0579\u057a\3\2\2\2\u057a\u057b\3")
        buf.write("\2\2\2\u057b\u057c\7\u0080\2\2\u057c\u057e\7a\2\2\u057d")
        buf.write("\u057f\5\u00a6T\2\u057e\u057d\3\2\2\2\u057e\u057f\3\2")
        buf.write("\2\2\u057f\u0580\3\2\2\2\u0580\u0582\7b\2\2\u0581\u056f")
        buf.write("\3\2\2\2\u0581\u0579\3\2\2\2\u0582\u0598\3\2\2\2\u0583")
        buf.write("\u0585\7\34\2\2\u0584\u0586\5\b\5\2\u0585\u0584\3\2\2")
        buf.write("\2\u0585\u0586\3\2\2\2\u0586\u0587\3\2\2\2\u0587\u0598")
        buf.write("\7\u0080\2\2\u0588\u0589\7G\2\2\u0589\u0594\5\b\5\2\u058a")
        buf.write("\u0595\7\u0080\2\2\u058b\u058d\7?\2\2\u058c\u058b\3\2")
        buf.write("\2\2\u058c\u058d\3\2\2\2\u058d\u058e\3\2\2\2\u058e\u058f")
        buf.write("\7\u0080\2\2\u058f\u0591\7a\2\2\u0590\u0592\5\u00a6T\2")
        buf.write("\u0591\u0590\3\2\2\2\u0591\u0592\3\2\2\2\u0592\u0593\3")
        buf.write("\2\2\2\u0593\u0595\7b\2\2\u0594\u058a\3\2\2\2\u0594\u058c")
        buf.write("\3\2\2\2\u0595\u0598\3\2\2\2\u0596\u0598\t\21\2\2\u0597")
        buf.write("\u056c\3\2\2\2\u0597\u056d\3\2\2\2\u0597\u0583\3\2\2\2")
        buf.write("\u0597\u0588\3\2\2\2\u0597\u0596\3\2\2\2\u0598[\3\2\2")
        buf.write("\2\u0599\u059c\5X-\2\u059a\u059d\5d\63\2\u059b\u059d\5")
        buf.write("\\/\2\u059c\u059a\3\2\2\2\u059c\u059b\3\2\2\2\u059c\u059d")
        buf.write("\3\2\2\2\u059d]\3\2\2\2\u059e\u05a1\5Z.\2\u059f\u05a2")
        buf.write("\5d\63\2\u05a0\u05a2\5^\60\2\u05a1\u059f\3\2\2\2\u05a1")
        buf.write("\u05a0\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2_\3\2\2\2\u05a3")
        buf.write("\u05a5\5\b\5\2\u05a4\u05a3\3\2\2\2\u05a4\u05a5\3\2\2\2")
        buf.write("\u05a5\u05a6\3\2\2\2\u05a6\u05ac\7\u0080\2\2\u05a7\u05a9")
        buf.write("\7a\2\2\u05a8\u05aa\5\u00a6T\2\u05a9\u05a8\3\2\2\2\u05a9")
        buf.write("\u05aa\3\2\2\2\u05aa\u05ab\3\2\2\2\u05ab\u05ad\7b\2\2")
        buf.write("\u05ac\u05a7\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad\u05cd\3")
        buf.write("\2\2\2\u05ae\u05af\5\b\5\2\u05af\u05b0\7?\2\2\u05b0\u05b1")
        buf.write("\7\u0080\2\2\u05b1\u05b3\7a\2\2\u05b2\u05b4\5\u00a6T\2")
        buf.write("\u05b3\u05b2\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b5\3")
        buf.write("\2\2\2\u05b5\u05b6\7b\2\2\u05b6\u05cd\3\2\2\2\u05b7\u05cd")
        buf.write("\7\r\2\2\u05b8\u05cd\7\16\2\2\u05b9\u05cd\7\17\2\2\u05ba")
        buf.write("\u05cd\7N\2\2\u05bb\u05cd\7\t\2\2\u05bc\u05cd\7\67\2\2")
        buf.write("\u05bd\u05cd\7(\2\2\u05be\u05cd\7)\2\2\u05bf\u05cd\78")
        buf.write("\2\2\u05c0\u05cd\7I\2\2\u05c1\u05cd\7\"\2\2\u05c2\u05cd")
        buf.write("\7\31\2\2\u05c3\u05cd\7L\2\2\u05c4\u05cd\7\b\2\2\u05c5")
        buf.write("\u05c6\7\25\2\2\u05c6\u05c9\7P\2\2\u05c7\u05ca\5@!\2\u05c8")
        buf.write("\u05ca\7\b\2\2\u05c9\u05c7\3\2\2\2\u05c9\u05c8\3\2\2\2")
        buf.write("\u05ca\u05cb\3\2\2\2\u05cb\u05cd\7Q\2\2\u05cc\u05a4\3")
        buf.write("\2\2\2\u05cc\u05ae\3\2\2\2\u05cc\u05b7\3\2\2\2\u05cc\u05b8")
        buf.write("\3\2\2\2\u05cc\u05b9\3\2\2\2\u05cc\u05ba\3\2\2\2\u05cc")
        buf.write("\u05bb\3\2\2\2\u05cc\u05bc\3\2\2\2\u05cc\u05bd\3\2\2\2")
        buf.write("\u05cc\u05be\3\2\2\2\u05cc\u05bf\3\2\2\2\u05cc\u05c0\3")
        buf.write("\2\2\2\u05cc\u05c1\3\2\2\2\u05cc\u05c2\3\2\2\2\u05cc\u05c3")
        buf.write("\3\2\2\2\u05cc\u05c4\3\2\2\2\u05cc\u05c5\3\2\2\2\u05cd")
        buf.write("a\3\2\2\2\u05ce\u05cf\b\62\1\2\u05cf\u05d2\7\u0080\2\2")
        buf.write("\u05d0\u05d1\7`\2\2\u05d1\u05d3\5B\"\2\u05d2\u05d0\3\2")
        buf.write("\2\2\u05d2\u05d3\3\2\2\2\u05d3\u05dd\3\2\2\2\u05d4\u05d5")
        buf.write("\f\3\2\2\u05d5\u05d6\7v\2\2\u05d6\u05d9\7\u0080\2\2\u05d7")
        buf.write("\u05d8\7`\2\2\u05d8\u05da\5B\"\2\u05d9\u05d7\3\2\2\2\u05d9")
        buf.write("\u05da\3\2\2\2\u05da\u05dc\3\2\2\2\u05db\u05d4\3\2\2\2")
        buf.write("\u05dc\u05df\3\2\2\2\u05dd\u05db\3\2\2\2\u05dd\u05de\3")
        buf.write("\2\2\2\u05dec\3\2\2\2\u05df\u05dd\3\2\2\2\u05e0\u05e1")
        buf.write("\b\63\1\2\u05e1\u05e2\5f\64\2\u05e2\u05e7\3\2\2\2\u05e3")
        buf.write("\u05e4\f\3\2\2\u05e4\u05e6\5f\64\2\u05e5\u05e3\3\2\2\2")
        buf.write("\u05e6\u05e9\3\2\2\2\u05e7\u05e5\3\2\2\2\u05e7\u05e8\3")
        buf.write("\2\2\2\u05e8e\3\2\2\2\u05e9\u05e7\3\2\2\2\u05ea\u05eb")
        buf.write("\7R\2\2\u05eb\u05ec\7R\2\2\u05ec\u05ed\5h\65\2\u05ed\u05ee")
        buf.write("\7S\2\2\u05ee\u05ef\7S\2\2\u05ef\u05ff\3\2\2\2\u05f0\u05f1")
        buf.write("\7\5\2\2\u05f1\u05f7\7P\2\2\u05f2\u05f4\5\\/\2\u05f3\u05f5")
        buf.write("\5|?\2\u05f4\u05f3\3\2\2\2\u05f4\u05f5\3\2\2\2\u05f5\u05f8")
        buf.write("\3\2\2\2\u05f6\u05f8\5B\"\2\u05f7\u05f2\3\2\2\2\u05f7")
        buf.write("\u05f6\3\2\2\2\u05f8\u05fa\3\2\2\2\u05f9\u05fb\7\177\2")
        buf.write("\2\u05fa\u05f9\3\2\2\2\u05fa\u05fb\3\2\2\2\u05fb\u05fc")
        buf.write("\3\2\2\2\u05fc\u05fd\7Q\2\2\u05fd\u05ff\3\2\2\2\u05fe")
        buf.write("\u05ea\3\2\2\2\u05fe\u05f0\3\2\2\2\u05ffg\3\2\2\2\u0600")
        buf.write("\u0605\b\65\1\2\u0601\u0603\5j\66\2\u0602\u0604\7\177")
        buf.write("\2\2\u0603\u0602\3\2\2\2\u0603\u0604\3\2\2\2\u0604\u0606")
        buf.write("\3\2\2\2\u0605\u0601\3\2\2\2\u0605\u0606\3\2\2\2\u0606")
        buf.write("\u0611\3\2\2\2\u0607\u0608\f\3\2\2\u0608\u060d\7v\2\2")
        buf.write("\u0609\u060b\5j\66\2\u060a\u060c\7\177\2\2\u060b\u060a")
        buf.write("\3\2\2\2\u060b\u060c\3\2\2\2\u060c\u060e\3\2\2\2\u060d")
        buf.write("\u0609\3\2\2\2\u060d\u060e\3\2\2\2\u060e\u0610\3\2\2\2")
        buf.write("\u060f\u0607\3\2\2\2\u0610\u0613\3\2\2\2\u0611\u060f\3")
        buf.write("\2\2\2\u0611\u0612\3\2\2\2\u0612i\3\2\2\2\u0613\u0611")
        buf.write("\3\2\2\2\u0614\u0617\7\u0080\2\2\u0615\u0616\7{\2\2\u0616")
        buf.write("\u0618\7\u0080\2\2\u0617\u0615\3\2\2\2\u0617\u0618\3\2")
        buf.write("\2\2\u0618\u061d\3\2\2\2\u0619\u061a\7P\2\2\u061a\u061b")
        buf.write("\5l\67\2\u061b\u061c\7Q\2\2\u061c\u061e\3\2\2\2\u061d")
        buf.write("\u0619\3\2\2\2\u061d\u061e\3\2\2\2\u061ek\3\2\2\2\u061f")
        buf.write("\u0621\b\67\1\2\u0620\u0622\5n8\2\u0621\u0620\3\2\2\2")
        buf.write("\u0621\u0622\3\2\2\2\u0622\u0627\3\2\2\2\u0623\u0624\f")
        buf.write("\3\2\2\u0624\u0626\5n8\2\u0625\u0623\3\2\2\2\u0626\u0629")
        buf.write("\3\2\2\2\u0627\u0625\3\2\2\2\u0627\u0628\3\2\2\2\u0628")
        buf.write("m\3\2\2\2\u0629\u0627\3\2\2\2\u062a\u062b\7P\2\2\u062b")
        buf.write("\u062c\5l\67\2\u062c\u062d\7Q\2\2\u062d\u0637\3\2\2\2")
        buf.write("\u062e\u062f\7R\2\2\u062f\u0630\5l\67\2\u0630\u0631\7")
        buf.write("S\2\2\u0631\u0637\3\2\2\2\u0632\u0633\7T\2\2\u0633\u0634")
        buf.write("\5l\67\2\u0634\u0635\7U\2\2\u0635\u0637\3\2\2\2\u0636")
        buf.write("\u062a\3\2\2\2\u0636\u062e\3\2\2\2\u0636\u0632\3\2\2\2")
        buf.write("\u0637o\3\2\2\2\u0638\u0639\b9\1\2\u0639\u063b\5r:\2\u063a")
        buf.write("\u063c\5\u008cG\2\u063b\u063a\3\2\2\2\u063b\u063c\3\2")
        buf.write("\2\2\u063c\u0645\3\2\2\2\u063d\u063e\f\3\2\2\u063e\u063f")
        buf.write("\7v\2\2\u063f\u0641\5r:\2\u0640\u0642\5\u008cG\2\u0641")
        buf.write("\u0640\3\2\2\2\u0641\u0642\3\2\2\2\u0642\u0644\3\2\2\2")
        buf.write("\u0643\u063d\3\2\2\2\u0644\u0647\3\2\2\2\u0645\u0643\3")
        buf.write("\2\2\2\u0645\u0646\3\2\2\2\u0646q\3\2\2\2\u0647\u0645")
        buf.write("\3\2\2\2\u0648\u0651\5t;\2\u0649\u064a\5v<\2\u064a\u064b")
        buf.write("\5x=\2\u064b\u064c\7x\2\2\u064c\u064e\5^\60\2\u064d\u064f")
        buf.write("\5|?\2\u064e\u064d\3\2\2\2\u064e\u064f\3\2\2\2\u064f\u0651")
        buf.write("\3\2\2\2\u0650\u0648\3\2\2\2\u0650\u0649\3\2\2\2\u0651")
        buf.write("s\3\2\2\2\u0652\u0657\5v<\2\u0653\u0654\5z>\2\u0654\u0655")
        buf.write("\5t;\2\u0655\u0657\3\2\2\2\u0656\u0652\3\2\2\2\u0656\u0653")
        buf.write("\3\2\2\2\u0657u\3\2\2\2\u0658\u065a\b<\1\2\u0659\u065b")
        buf.write("\7\177\2\2\u065a\u0659\3\2\2\2\u065a\u065b\3\2\2\2\u065b")
        buf.write("\u065c\3\2\2\2\u065c\u065e\5\4\3\2\u065d\u065f\5d\63\2")
        buf.write("\u065e\u065d\3\2\2\2\u065e\u065f\3\2\2\2\u065f\u0665\3")
        buf.write("\2\2\2\u0660\u0661\7P\2\2\u0661\u0662\5t;\2\u0662\u0663")
        buf.write("\7Q\2\2\u0663\u0665\3\2\2\2\u0664\u0658\3\2\2\2\u0664")
        buf.write("\u0660\3\2\2\2\u0665\u0674\3\2\2\2\u0666\u0670\f\4\2\2")
        buf.write("\u0667\u0671\5x=\2\u0668\u066a\7R\2\2\u0669\u066b\5B\"")
        buf.write("\2\u066a\u0669\3\2\2\2\u066a\u066b\3\2\2\2\u066b\u066c")
        buf.write("\3\2\2\2\u066c\u066e\7S\2\2\u066d\u066f\5d\63\2\u066e")
        buf.write("\u066d\3\2\2\2\u066e\u066f\3\2\2\2\u066f\u0671\3\2\2\2")
        buf.write("\u0670\u0667\3\2\2\2\u0670\u0668\3\2\2\2\u0671\u0673\3")
        buf.write("\2\2\2\u0672\u0666\3\2\2\2\u0673\u0676\3\2\2\2\u0674\u0672")
        buf.write("\3\2\2\2\u0674\u0675\3\2\2\2\u0675w\3\2\2\2\u0676\u0674")
        buf.write("\3\2\2\2\u0677\u0678\7P\2\2\u0678\u0679\5\u0086D\2\u0679")
        buf.write("\u067d\7Q\2\2\u067a\u067c\t\21\2\2\u067b\u067a\3\2\2\2")
        buf.write("\u067c\u067f\3\2\2\2\u067d\u067b\3\2\2\2\u067d\u067e\3")
        buf.write("\2\2\2\u067e\u0681\3\2\2\2\u067f\u067d\3\2\2\2\u0680\u0682")
        buf.write("\t\22\2\2\u0681\u0680\3\2\2\2\u0681\u0682\3\2\2\2\u0682")
        buf.write("\u0690\3\2\2\2\u0683\u0684\7B\2\2\u0684\u0686\7P\2\2\u0685")
        buf.write("\u0687\5\u00aeX\2\u0686\u0685\3\2\2\2\u0686\u0687\3\2")
        buf.write("\2\2\u0687\u0688\3\2\2\2\u0688\u0691\7Q\2\2\u0689\u068e")
        buf.write("\7-\2\2\u068a\u068b\7P\2\2\u068b\u068c\5B\"\2\u068c\u068d")
        buf.write("\7Q\2\2\u068d\u068f\3\2\2\2\u068e\u068a\3\2\2\2\u068e")
        buf.write("\u068f\3\2\2\2\u068f\u0691\3\2\2\2\u0690\u0683\3\2\2\2")
        buf.write("\u0690\u0689\3\2\2\2\u0690\u0691\3\2\2\2\u0691\u0693\3")
        buf.write("\2\2\2\u0692\u0694\5d\63\2\u0693\u0692\3\2\2\2\u0693\u0694")
        buf.write("\3\2\2\2\u0694y\3\2\2\2\u0695\u0697\5\b\5\2\u0696\u0695")
        buf.write("\3\2\2\2\u0696\u0697\3\2\2\2\u0697\u0698\3\2\2\2\u0698")
        buf.write("\u069a\7X\2\2\u0699\u069b\5d\63\2\u069a\u0699\3\2\2\2")
        buf.write("\u069a\u069b\3\2\2\2\u069b\u069f\3\2\2\2\u069c\u069e\t")
        buf.write("\21\2\2\u069d\u069c\3\2\2\2\u069e\u06a1\3\2\2\2\u069f")
        buf.write("\u069d\3\2\2\2\u069f\u06a0\3\2\2\2\u06a0\u06a7\3\2\2\2")
        buf.write("\u06a1\u069f\3\2\2\2\u06a2\u06a4\t\22\2\2\u06a3\u06a5")
        buf.write("\5d\63\2\u06a4\u06a3\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5")
        buf.write("\u06a7\3\2\2\2\u06a6\u0696\3\2\2\2\u06a6\u06a2\3\2\2\2")
        buf.write("\u06a7{\3\2\2\2\u06a8\u06b4\5~@\2\u06a9\u06ab\5\u0080")
        buf.write("A\2\u06aa\u06a9\3\2\2\2\u06aa\u06ab\3\2\2\2\u06ab\u06ac")
        buf.write("\3\2\2\2\u06ac\u06ad\5x=\2\u06ad\u06ae\7x\2\2\u06ae\u06b0")
        buf.write("\5^\60\2\u06af\u06b1\5|?\2\u06b0\u06af\3\2\2\2\u06b0\u06b1")
        buf.write("\3\2\2\2\u06b1\u06b4\3\2\2\2\u06b2\u06b4\5\u0082B\2\u06b3")
        buf.write("\u06a8\3\2\2\2\u06b3\u06aa\3\2\2\2\u06b3\u06b2\3\2\2\2")
        buf.write("\u06b4}\3\2\2\2\u06b5\u06bb\5\u0080A\2\u06b6\u06b8\5z")
        buf.write(">\2\u06b7\u06b9\5~@\2\u06b8\u06b7\3\2\2\2\u06b8\u06b9")
        buf.write("\3\2\2\2\u06b9\u06bb\3\2\2\2\u06ba\u06b5\3\2\2\2\u06ba")
        buf.write("\u06b6\3\2\2\2\u06bb\177\3\2\2\2\u06bc\u06bd\bA\1\2\u06bd")
        buf.write("\u06cb\5x=\2\u06be\u06c0\7R\2\2\u06bf\u06c1\5B\"\2\u06c0")
        buf.write("\u06bf\3\2\2\2\u06c0\u06c1\3\2\2\2\u06c1\u06c2\3\2\2\2")
        buf.write("\u06c2\u06c4\7S\2\2\u06c3\u06c5\5d\63\2\u06c4\u06c3\3")
        buf.write("\2\2\2\u06c4\u06c5\3\2\2\2\u06c5\u06cb\3\2\2\2\u06c6\u06c7")
        buf.write("\7P\2\2\u06c7\u06c8\5~@\2\u06c8\u06c9\7Q\2\2\u06c9\u06cb")
        buf.write("\3\2\2\2\u06ca\u06bc\3\2\2\2\u06ca\u06be\3\2\2\2\u06ca")
        buf.write("\u06c6\3\2\2\2\u06cb\u06d9\3\2\2\2\u06cc\u06cd\f\7\2\2")
        buf.write("\u06cd\u06d8\5x=\2\u06ce\u06cf\f\5\2\2\u06cf\u06d1\7R")
        buf.write("\2\2\u06d0\u06d2\5B\"\2\u06d1\u06d0\3\2\2\2\u06d1\u06d2")
        buf.write("\3\2\2\2\u06d2\u06d3\3\2\2\2\u06d3\u06d5\7S\2\2\u06d4")
        buf.write("\u06d6\5d\63\2\u06d5\u06d4\3\2\2\2\u06d5\u06d6\3\2\2\2")
        buf.write("\u06d6\u06d8\3\2\2\2\u06d7\u06cc\3\2\2\2\u06d7\u06ce\3")
        buf.write("\2\2\2\u06d8\u06db\3\2\2\2\u06d9\u06d7\3\2\2\2\u06d9\u06da")
        buf.write("\3\2\2\2\u06da\u0081\3\2\2\2\u06db\u06d9\3\2\2\2\u06dc")
        buf.write("\u06e1\5\u0084C\2\u06dd\u06de\5z>\2\u06de\u06df\5\u0082")
        buf.write("B\2\u06df\u06e1\3\2\2\2\u06e0\u06dc\3\2\2\2\u06e0\u06dd")
        buf.write("\3\2\2\2\u06e1\u0083\3\2\2\2\u06e2\u06e3\bC\1\2\u06e3")
        buf.write("\u06e4\7\177\2\2\u06e4\u06f3\3\2\2\2\u06e5\u06ef\f\4\2")
        buf.write("\2\u06e6\u06f0\5x=\2\u06e7\u06e9\7R\2\2\u06e8\u06ea\5")
        buf.write("B\"\2\u06e9\u06e8\3\2\2\2\u06e9\u06ea\3\2\2\2\u06ea\u06eb")
        buf.write("\3\2\2\2\u06eb\u06ed\7S\2\2\u06ec\u06ee\5d\63\2\u06ed")
        buf.write("\u06ec\3\2\2\2\u06ed\u06ee\3\2\2\2\u06ee\u06f0\3\2\2\2")
        buf.write("\u06ef\u06e6\3\2\2\2\u06ef\u06e7\3\2\2\2\u06f0\u06f2\3")
        buf.write("\2\2\2\u06f1\u06e5\3\2\2\2\u06f2\u06f5\3\2\2\2\u06f3\u06f1")
        buf.write("\3\2\2\2\u06f3\u06f4\3\2\2\2\u06f4\u0085\3\2\2\2\u06f5")
        buf.write("\u06f3\3\2\2\2\u06f6\u06f8\5\u0088E\2\u06f7\u06f6\3\2")
        buf.write("\2\2\u06f7\u06f8\3\2\2\2\u06f8\u06fa\3\2\2\2\u06f9\u06fb")
        buf.write("\7\177\2\2\u06fa\u06f9\3\2\2\2\u06fa\u06fb\3\2\2\2\u06fb")
        buf.write("\u0701\3\2\2\2\u06fc\u06fd\5\u0088E\2\u06fd\u06fe\7v\2")
        buf.write("\2\u06fe\u06ff\7\177\2\2\u06ff\u0701\3\2\2\2\u0700\u06f7")
        buf.write("\3\2\2\2\u0700\u06fc\3\2\2\2\u0701\u0087\3\2\2\2\u0702")
        buf.write("\u0703\bE\1\2\u0703\u0704\5\u008aF\2\u0704\u070a\3\2\2")
        buf.write("\2\u0705\u0706\f\3\2\2\u0706\u0707\7v\2\2\u0707\u0709")
        buf.write("\5\u008aF\2\u0708\u0705\3\2\2\2\u0709\u070c\3\2\2\2\u070a")
        buf.write("\u0708\3\2\2\2\u070a\u070b\3\2\2\2\u070b\u0089\3\2\2\2")
        buf.write("\u070c\u070a\3\2\2\2\u070d\u070f\5d\63\2\u070e\u070d\3")
        buf.write("\2\2\2\u070e\u070f\3\2\2\2\u070f\u0710\3\2\2\2\u0710\u0713")
        buf.write("\5V,\2\u0711\u0714\5r:\2\u0712\u0714\5|?\2\u0713\u0711")
        buf.write("\3\2\2\2\u0713\u0712\3\2\2\2\u0714\u0721\3\2\2\2\u0715")
        buf.write("\u071f\7`\2\2\u0716\u0720\5<\37\2\u0717\u071c\7T\2\2\u0718")
        buf.write("\u071a\5\u008eH\2\u0719\u071b\7v\2\2\u071a\u0719\3\2\2")
        buf.write("\2\u071a\u071b\3\2\2\2\u071b\u071d\3\2\2\2\u071c\u0718")
        buf.write("\3\2\2\2\u071c\u071d\3\2\2\2\u071d\u071e\3\2\2\2\u071e")
        buf.write("\u0720\7U\2\2\u071f\u0716\3\2\2\2\u071f\u0717\3\2\2\2")
        buf.write("\u0720\u0722\3\2\2\2\u0721\u0715\3\2\2\2\u0721\u0722\3")
        buf.write("\2\2\2\u0722\u008b\3\2\2\2\u0723\u072d\7`\2\2\u0724\u072e")
        buf.write("\5<\37\2\u0725\u072a\7T\2\2\u0726\u0728\5\u008eH\2\u0727")
        buf.write("\u0729\7v\2\2\u0728\u0727\3\2\2\2\u0728\u0729\3\2\2\2")
        buf.write("\u0729\u072b\3\2\2\2\u072a\u0726\3\2\2\2\u072a\u072b\3")
        buf.write("\2\2\2\u072b\u072c\3\2\2\2\u072c\u072e\7U\2\2\u072d\u0724")
        buf.write("\3\2\2\2\u072d\u0725\3\2\2\2\u072e\u073c\3\2\2\2\u072f")
        buf.write("\u0734\7T\2\2\u0730\u0732\5\u008eH\2\u0731\u0733\7v\2")
        buf.write("\2\u0732\u0731\3\2\2\2\u0732\u0733\3\2\2\2\u0733\u0735")
        buf.write("\3\2\2\2\u0734\u0730\3\2\2\2\u0734\u0735\3\2\2\2\u0735")
        buf.write("\u0736\3\2\2\2\u0736\u073c\7U\2\2\u0737\u0738\7P\2\2\u0738")
        buf.write("\u0739\5\u008eH\2\u0739\u073a\7Q\2\2\u073a\u073c\3\2\2")
        buf.write("\2\u073b\u0723\3\2\2\2\u073b\u072f\3\2\2\2\u073b\u0737")
        buf.write("\3\2\2\2\u073c\u008d\3\2\2\2\u073d\u0747\bH\1\2\u073e")
        buf.write("\u0748\5<\37\2\u073f\u0744\7T\2\2\u0740\u0742\5\u008e")
        buf.write("H\2\u0741\u0743\7v\2\2\u0742\u0741\3\2\2\2\u0742\u0743")
        buf.write("\3\2\2\2\u0743\u0745\3\2\2\2\u0744\u0740\3\2\2\2\u0744")
        buf.write("\u0745\3\2\2\2\u0745\u0746\3\2\2\2\u0746\u0748\7U\2\2")
        buf.write("\u0747\u073e\3\2\2\2\u0747\u073f\3\2\2\2\u0748\u074a\3")
        buf.write("\2\2\2\u0749\u074b\7\177\2\2\u074a\u0749\3\2\2\2\u074a")
        buf.write("\u074b\3\2\2\2\u074b\u075e\3\2\2\2\u074c\u074d\f\3\2\2")
        buf.write("\u074d\u0757\7v\2\2\u074e\u0758\5<\37\2\u074f\u0754\7")
        buf.write("T\2\2\u0750\u0752\5\u008eH\2\u0751\u0753\7v\2\2\u0752")
        buf.write("\u0751\3\2\2\2\u0752\u0753\3\2\2\2\u0753\u0755\3\2\2\2")
        buf.write("\u0754\u0750\3\2\2\2\u0754\u0755\3\2\2\2\u0755\u0756\3")
        buf.write("\2\2\2\u0756\u0758\7U\2\2\u0757\u074e\3\2\2\2\u0757\u074f")
        buf.write("\3\2\2\2\u0758\u075a\3\2\2\2\u0759\u075b\7\177\2\2\u075a")
        buf.write("\u0759\3\2\2\2\u075a\u075b\3\2\2\2\u075b\u075d\3\2\2\2")
        buf.write("\u075c\u074c\3\2\2\2\u075d\u0760\3\2\2\2\u075e\u075c\3")
        buf.write("\2\2\2\u075e\u075f\3\2\2\2\u075f\u008f\3\2\2\2\u0760\u075e")
        buf.write("\3\2\2\2\u0761\u0763\5d\63\2\u0762\u0761\3\2\2\2\u0762")
        buf.write("\u0763\3\2\2\2\u0763\u0765\3\2\2\2\u0764\u0766\5V,\2\u0765")
        buf.write("\u0764\3\2\2\2\u0765\u0766\3\2\2\2\u0766\u0792\3\2\2\2")
        buf.write("\u0767\u0769\5\u0092J\2\u0768\u0767\3\2\2\2\u0768\u0769")
        buf.write("\3\2\2\2\u0769\u076a\3\2\2\2\u076a\u0793\7|\2\2\u076b")
        buf.write("\u076d\5r:\2\u076c\u076e\5\u0096L\2\u076d\u076c\3\2\2")
        buf.write("\2\u076d\u076e\3\2\2\2\u076e\u0790\3\2\2\2\u076f\u0770")
        buf.write("\7z\2\2\u0770\u0772\5\u00a0Q\2\u0771\u076f\3\2\2\2\u0771")
        buf.write("\u0772\3\2\2\2\u0772\u0773\3\2\2\2\u0773\u0777\7T\2\2")
        buf.write("\u0774\u0776\5D#\2\u0775\u0774\3\2\2\2\u0776\u0779\3\2")
        buf.write("\2\2\u0777\u0775\3\2\2\2\u0777\u0778\3\2\2\2\u0778\u077a")
        buf.write("\3\2\2\2\u0779\u0777\3\2\2\2\u077a\u0791\7U\2\2\u077b")
        buf.write("\u077e\7D\2\2\u077c\u077d\7z\2\2\u077d\u077f\5\u00a0Q")
        buf.write("\2\u077e\u077c\3\2\2\2\u077e\u077f\3\2\2\2\u077f\u0780")
        buf.write("\3\2\2\2\u0780\u0784\7T\2\2\u0781\u0783\5D#\2\u0782\u0781")
        buf.write("\3\2\2\2\u0783\u0786\3\2\2\2\u0784\u0782\3\2\2\2\u0784")
        buf.write("\u0785\3\2\2\2\u0785\u0787\3\2\2\2\u0786\u0784\3\2\2\2")
        buf.write("\u0787\u0789\7U\2\2\u0788\u078a\5\u00acW\2\u0789\u0788")
        buf.write("\3\2\2\2\u078a\u078b\3\2\2\2\u078b\u0789\3\2\2\2\u078b")
        buf.write("\u078c\3\2\2\2\u078c\u0791\3\2\2\2\u078d\u078e\7`\2\2")
        buf.write("\u078e\u078f\t\16\2\2\u078f\u0791\7|\2\2\u0790\u0771\3")
        buf.write("\2\2\2\u0790\u077b\3\2\2\2\u0790\u078d\3\2\2\2\u0791\u0793")
        buf.write("\3\2\2\2\u0792\u0768\3\2\2\2\u0792\u076b\3\2\2\2\u0793")
        buf.write("\u07bb\3\2\2\2\u0794\u079a\7J\2\2\u0795\u0797\7G\2\2\u0796")
        buf.write("\u0795\3\2\2\2\u0796\u0797\3\2\2\2\u0797\u0798\3\2\2\2")
        buf.write("\u0798\u079b\5\b\5\2\u0799\u079b\7{\2\2\u079a\u0796\3")
        buf.write("\2\2\2\u079a\u0799\3\2\2\2\u079b\u079c\3\2\2\2\u079c\u079d")
        buf.write("\5\6\4\2\u079d\u079e\7|\2\2\u079e\u07bb\3\2\2\2\u079f")
        buf.write("\u07a0\7;\2\2\u07a0\u07a1\7P\2\2\u07a1\u07a2\5B\"\2\u07a2")
        buf.write("\u07a3\7v\2\2\u07a3\u07a4\7\u0089\2\2\u07a4\u07a5\7Q\2")
        buf.write("\2\u07a5\u07a6\7|\2\2\u07a6\u07bb\3\2\2\2\u07a7\u07a8")
        buf.write("\7?\2\2\u07a8\u07a9\7a\2\2\u07a9\u07aa\5\u00a2R\2\u07aa")
        buf.write("\u07ab\7b\2\2\u07ab\u07ac\5T+\2\u07ac\u07bb\3\2\2\2\u07ad")
        buf.write("\u07ae\7J\2\2\u07ae\u07b0\7\u0080\2\2\u07af\u07b1\5d\63")
        buf.write("\2\u07b0\u07af\3\2\2\2\u07b0\u07b1\3\2\2\2\u07b1\u07b2")
        buf.write("\3\2\2\2\u07b2\u07b3\7`\2\2\u07b3\u07b5\5\\/\2\u07b4\u07b6")
        buf.write("\5|?\2\u07b5\u07b4\3\2\2\2\u07b5\u07b6\3\2\2\2\u07b6\u07b7")
        buf.write("\3\2\2\2\u07b7\u07b8\7|\2\2\u07b8\u07bb\3\2\2\2\u07b9")
        buf.write("\u07bb\7|\2\2\u07ba\u0762\3\2\2\2\u07ba\u0794\3\2\2\2")
        buf.write("\u07ba\u079f\3\2\2\2\u07ba\u07a7\3\2\2\2\u07ba\u07ad\3")
        buf.write("\2\2\2\u07ba\u07b9\3\2\2\2\u07bb\u0091\3\2\2\2\u07bc\u07bd")
        buf.write("\bJ\1\2\u07bd\u07be\5\u0094K\2\u07be\u07c4\3\2\2\2\u07bf")
        buf.write("\u07c0\f\3\2\2\u07c0\u07c1\7v\2\2\u07c1\u07c3\5\u0094")
        buf.write("K\2\u07c2\u07bf\3\2\2\2\u07c3\u07c6\3\2\2\2\u07c4\u07c2")
        buf.write("\3\2\2\2\u07c4\u07c5\3\2\2\2\u07c5\u0093\3\2\2\2\u07c6")
        buf.write("\u07c4\3\2\2\2\u07c7\u07e4\5r:\2\u07c8\u07ca\5\u0096L")
        buf.write("\2\u07c9\u07c8\3\2\2\2\u07c9\u07ca\3\2\2\2\u07ca\u07cc")
        buf.write("\3\2\2\2\u07cb\u07cd\5\u0098M\2\u07cc\u07cb\3\2\2\2\u07cc")
        buf.write("\u07cd\3\2\2\2\u07cd\u07e5\3\2\2\2\u07ce\u07d8\7`\2\2")
        buf.write("\u07cf\u07d9\5<\37\2\u07d0\u07d5\7T\2\2\u07d1\u07d3\5")
        buf.write("\u008eH\2\u07d2\u07d4\7v\2\2\u07d3\u07d2\3\2\2\2\u07d3")
        buf.write("\u07d4\3\2\2\2\u07d4\u07d6\3\2\2\2\u07d5\u07d1\3\2\2\2")
        buf.write("\u07d5\u07d6\3\2\2\2\u07d6\u07d7\3\2\2\2\u07d7\u07d9\7")
        buf.write("U\2\2\u07d8\u07cf\3\2\2\2\u07d8\u07d0\3\2\2\2\u07d9\u07e3")
        buf.write("\3\2\2\2\u07da\u07df\7T\2\2\u07db\u07dd\5\u008eH\2\u07dc")
        buf.write("\u07de\7v\2\2\u07dd\u07dc\3\2\2\2\u07dd\u07de\3\2\2\2")
        buf.write("\u07de\u07e0\3\2\2\2\u07df\u07db\3\2\2\2\u07df\u07e0\3")
        buf.write("\2\2\2\u07e0\u07e1\3\2\2\2\u07e1\u07e3\7U\2\2\u07e2\u07ce")
        buf.write("\3\2\2\2\u07e2\u07da\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3")
        buf.write("\u07e5\3\2\2\2\u07e4\u07c9\3\2\2\2\u07e4\u07e2\3\2\2\2")
        buf.write("\u07e5\u07ef\3\2\2\2\u07e6\u07e8\7\u0080\2\2\u07e7\u07e6")
        buf.write("\3\2\2\2\u07e7\u07e8\3\2\2\2\u07e8\u07ea\3\2\2\2\u07e9")
        buf.write("\u07eb\5d\63\2\u07ea\u07e9\3\2\2\2\u07ea\u07eb\3\2\2\2")
        buf.write("\u07eb\u07ec\3\2\2\2\u07ec\u07ed\7z\2\2\u07ed\u07ef\5")
        buf.write("B\"\2\u07ee\u07c7\3\2\2\2\u07ee\u07e7\3\2\2\2\u07ef\u0095")
        buf.write("\3\2\2\2\u07f0\u07f1\bL\1\2\u07f1\u07f2\t\23\2\2\u07f2")
        buf.write("\u07f7\3\2\2\2\u07f3\u07f4\f\3\2\2\u07f4\u07f6\t\23\2")
        buf.write("\2\u07f5\u07f3\3\2\2\2\u07f6\u07f9\3\2\2\2\u07f7\u07f5")
        buf.write("\3\2\2\2\u07f7\u07f8\3\2\2\2\u07f8\u0097\3\2\2\2\u07f9")
        buf.write("\u07f7\3\2\2\2\u07fa\u07fb\7`\2\2\u07fb\u07fc\7\u0083")
        buf.write("\2\2\u07fc\u07fd\bM\1\2\u07fd\u0099\3\2\2\2\u07fe\u07ff")
        buf.write("\bN\1\2\u07ff\u0801\5\u009cO\2\u0800\u0802\7\177\2\2\u0801")
        buf.write("\u0800\3\2\2\2\u0801\u0802\3\2\2\2\u0802\u080b\3\2\2\2")
        buf.write("\u0803\u0804\f\3\2\2\u0804\u0805\7v\2\2\u0805\u0807\5")
        buf.write("\u009cO\2\u0806\u0808\7\177\2\2\u0807\u0806\3\2\2\2\u0807")
        buf.write("\u0808\3\2\2\2\u0808\u080a\3\2\2\2\u0809\u0803\3\2\2\2")
        buf.write("\u080a\u080d\3\2\2\2\u080b\u0809\3\2\2\2\u080b\u080c\3")
        buf.write("\2\2\2\u080c\u009b\3\2\2\2\u080d\u080b\3\2\2\2\u080e\u0810")
        buf.write("\5d\63\2\u080f\u080e\3\2\2\2\u080f\u0810\3\2\2\2\u0810")
        buf.write("\u0819\3\2\2\2\u0811\u0813\7K\2\2\u0812\u0814\t\20\2\2")
        buf.write("\u0813\u0812\3\2\2\2\u0813\u0814\3\2\2\2\u0814\u081a\3")
        buf.write("\2\2\2\u0815\u0817\t\20\2\2\u0816\u0818\7K\2\2\u0817\u0816")
        buf.write("\3\2\2\2\u0817\u0818\3\2\2\2\u0818\u081a\3\2\2\2\u0819")
        buf.write("\u0811\3\2\2\2\u0819\u0815\3\2\2\2\u0819\u081a\3\2\2\2")
        buf.write("\u081a\u081b\3\2\2\2\u081b\u081c\5\u009eP\2\u081c\u009d")
        buf.write("\3\2\2\2\u081d\u081f\5\b\5\2\u081e\u081d\3\2\2\2\u081e")
        buf.write("\u081f\3\2\2\2\u081f\u0820\3\2\2\2\u0820\u0826\7\u0080")
        buf.write("\2\2\u0821\u0823\7a\2\2\u0822\u0824\5\u00a6T\2\u0823\u0822")
        buf.write("\3\2\2\2\u0823\u0824\3\2\2\2\u0824\u0825\3\2\2\2\u0825")
        buf.write("\u0827\7b\2\2\u0826\u0821\3\2\2\2\u0826\u0827\3\2\2\2")
        buf.write("\u0827\u0830\3\2\2\2\u0828\u0829\7\25\2\2\u0829\u082c")
        buf.write("\7P\2\2\u082a\u082d\5@!\2\u082b\u082d\7\b\2\2\u082c\u082a")
        buf.write("\3\2\2\2\u082c\u082b\3\2\2\2\u082d\u082e\3\2\2\2\u082e")
        buf.write("\u0830\7Q\2\2\u082f\u081e\3\2\2\2\u082f\u0828\3\2\2\2")
        buf.write("\u0830\u009f\3\2\2\2\u0831\u0834\5\u009eP\2\u0832\u0834")
        buf.write("\7\u0080\2\2\u0833\u0831\3\2\2\2\u0833\u0832\3\2\2\2\u0834")
        buf.write("\u0842\3\2\2\2\u0835\u0837\7P\2\2\u0836\u0838\5\u008e")
        buf.write("H\2\u0837\u0836\3\2\2\2\u0837\u0838\3\2\2\2\u0838\u0839")
        buf.write("\3\2\2\2\u0839\u0843\7Q\2\2\u083a\u083f\7T\2\2\u083b\u083d")
        buf.write("\5\u008eH\2\u083c\u083e\7v\2\2\u083d\u083c\3\2\2\2\u083d")
        buf.write("\u083e\3\2\2\2\u083e\u0840\3\2\2\2\u083f\u083b\3\2\2\2")
        buf.write("\u083f\u0840\3\2\2\2\u0840\u0841\3\2\2\2\u0841\u0843\7")
        buf.write("U\2\2\u0842\u0835\3\2\2\2\u0842\u083a\3\2\2\2\u0843\u0845")
        buf.write("\3\2\2\2\u0844\u0846\7\177\2\2\u0845\u0844\3\2\2\2\u0845")
        buf.write("\u0846\3\2\2\2\u0846\u0849\3\2\2\2\u0847\u0848\7v\2\2")
        buf.write("\u0848\u084a\5\u00a0Q\2\u0849\u0847\3\2\2\2\u0849\u084a")
        buf.write("\3\2\2\2\u084a\u00a1\3\2\2\2\u084b\u084c\bR\1\2\u084c")
        buf.write("\u084d\5\u00a4S\2\u084d\u0853\3\2\2\2\u084e\u084f\f\3")
        buf.write("\2\2\u084f\u0850\7v\2\2\u0850\u0852\5\u00a4S\2\u0851\u084e")
        buf.write("\3\2\2\2\u0852\u0855\3\2\2\2\u0853\u0851\3\2\2\2\u0853")
        buf.write("\u0854\3\2\2\2\u0854\u00a3\3\2\2\2\u0855\u0853\3\2\2\2")
        buf.write("\u0856\u0865\7\20\2\2\u0857\u0859\7\177\2\2\u0858\u0857")
        buf.write("\3\2\2\2\u0858\u0859\3\2\2\2\u0859\u085b\3\2\2\2\u085a")
        buf.write("\u085c\7\u0080\2\2\u085b\u085a\3\2\2\2\u085b\u085c\3\2")
        buf.write("\2\2\u085c\u0866\3\2\2\2\u085d\u085f\7\u0080\2\2\u085e")
        buf.write("\u085d\3\2\2\2\u085e\u085f\3\2\2\2\u085f\u0860\3\2\2\2")
        buf.write("\u0860\u0861\7`\2\2\u0861\u0863\5\\/\2\u0862\u0864\5|")
        buf.write("?\2\u0863\u0862\3\2\2\2\u0863\u0864\3\2\2\2\u0864\u0866")
        buf.write("\3\2\2\2\u0865\u0858\3\2\2\2\u0865\u085e\3\2\2\2\u0866")
        buf.write("\u088c\3\2\2\2\u0867\u0876\7G\2\2\u0868\u086a\7\177\2")
        buf.write("\2\u0869\u0868\3\2\2\2\u0869\u086a\3\2\2\2\u086a\u086c")
        buf.write("\3\2\2\2\u086b\u086d\7\u0080\2\2\u086c\u086b\3\2\2\2\u086c")
        buf.write("\u086d\3\2\2\2\u086d\u0877\3\2\2\2\u086e\u0870\7\u0080")
        buf.write("\2\2\u086f\u086e\3\2\2\2\u086f\u0870\3\2\2\2\u0870\u0871")
        buf.write("\3\2\2\2\u0871\u0872\7`\2\2\u0872\u0874\5\\/\2\u0873\u0875")
        buf.write("\5|?\2\u0874\u0873\3\2\2\2\u0874\u0875\3\2\2\2\u0875\u0877")
        buf.write("\3\2\2\2\u0876\u0869\3\2\2\2\u0876\u086f\3\2\2\2\u0877")
        buf.write("\u088c\3\2\2\2\u0878\u0879\7?\2\2\u0879\u087a\7a\2\2\u087a")
        buf.write("\u087b\5\u00a2R\2\u087b\u087c\7b\2\2\u087c\u0888\7\20")
        buf.write("\2\2\u087d\u087f\7\177\2\2\u087e\u087d\3\2\2\2\u087e\u087f")
        buf.write("\3\2\2\2\u087f\u0881\3\2\2\2\u0880\u0882\7\u0080\2\2\u0881")
        buf.write("\u0880\3\2\2\2\u0881\u0882\3\2\2\2\u0882\u0889\3\2\2\2")
        buf.write("\u0883\u0885\7\u0080\2\2\u0884\u0883\3\2\2\2\u0884\u0885")
        buf.write("\3\2\2\2\u0885\u0886\3\2\2\2\u0886\u0887\7`\2\2\u0887")
        buf.write("\u0889\5\4\3\2\u0888\u087e\3\2\2\2\u0888\u0884\3\2\2\2")
        buf.write("\u0889\u088c\3\2\2\2\u088a\u088c\5\u008aF\2\u088b\u0856")
        buf.write("\3\2\2\2\u088b\u0867\3\2\2\2\u088b\u0878\3\2\2\2\u088b")
        buf.write("\u088a\3\2\2\2\u088c\u00a5\3\2\2\2\u088d\u088e\bT\1\2")
        buf.write("\u088e\u0890\5\u00a8U\2\u088f\u0891\7\177\2\2\u0890\u088f")
        buf.write("\3\2\2\2\u0890\u0891\3\2\2\2\u0891\u089a\3\2\2\2\u0892")
        buf.write("\u0893\f\3\2\2\u0893\u0894\7v\2\2\u0894\u0896\5\u00a8")
        buf.write("U\2\u0895\u0897\7\177\2\2\u0896\u0895\3\2\2\2\u0896\u0897")
        buf.write("\3\2\2\2\u0897\u0899\3\2\2\2\u0898\u0892\3\2\2\2\u0899")
        buf.write("\u089c\3\2\2\2\u089a\u0898\3\2\2\2\u089a\u089b\3\2\2\2")
        buf.write("\u089b\u00a7\3\2\2\2\u089c\u089a\3\2\2\2\u089d\u089f\5")
        buf.write("\\/\2\u089e\u08a0\5|?\2\u089f\u089e\3\2\2\2\u089f\u08a0")
        buf.write("\3\2\2\2\u08a0\u08a4\3\2\2\2\u08a1\u08a4\5B\"\2\u08a2")
        buf.write("\u08a4\5\4\3\2\u08a3\u089d\3\2\2\2\u08a3\u08a1\3\2\2\2")
        buf.write("\u08a3\u08a2\3\2\2\2\u08a4\u00a9\3\2\2\2\u08a5\u08a6\7")
        buf.write("D\2\2\u08a6\u08aa\7T\2\2\u08a7\u08a9\5D#\2\u08a8\u08a7")
        buf.write("\3\2\2\2\u08a9\u08ac\3\2\2\2\u08aa\u08a8\3\2\2\2\u08aa")
        buf.write("\u08ab\3\2\2\2\u08ab\u08ad\3\2\2\2\u08ac\u08aa\3\2\2\2")
        buf.write("\u08ad\u08af\7U\2\2\u08ae\u08b0\5\u00acW\2\u08af\u08ae")
        buf.write("\3\2\2\2\u08b0\u08b1\3\2\2\2\u08b1\u08af\3\2\2\2\u08b1")
        buf.write("\u08b2\3\2\2\2\u08b2\u00ab\3\2\2\2\u08b3\u08b4\7\f\2\2")
        buf.write("\u08b4\u08c0\7P\2\2\u08b5\u08b7\5d\63\2\u08b6\u08b5\3")
        buf.write("\2\2\2\u08b6\u08b7\3\2\2\2\u08b7\u08b8\3\2\2\2\u08b8\u08bd")
        buf.write("\5\\/\2\u08b9\u08be\5r:\2\u08ba\u08bc\5|?\2\u08bb\u08ba")
        buf.write("\3\2\2\2\u08bb\u08bc\3\2\2\2\u08bc\u08be\3\2\2\2\u08bd")
        buf.write("\u08b9\3\2\2\2\u08bd\u08bb\3\2\2\2\u08be\u08c1\3\2\2\2")
        buf.write("\u08bf\u08c1\7\177\2\2\u08c0\u08b6\3\2\2\2\u08c0\u08bf")
        buf.write("\3\2\2\2\u08c1\u08c2\3\2\2\2\u08c2\u08c3\7Q\2\2\u08c3")
        buf.write("\u08c7\7T\2\2\u08c4\u08c6\5D#\2\u08c5\u08c4\3\2\2\2\u08c6")
        buf.write("\u08c9\3\2\2\2\u08c7\u08c5\3\2\2\2\u08c7\u08c8\3\2\2\2")
        buf.write("\u08c8\u08ca\3\2\2\2\u08c9\u08c7\3\2\2\2\u08ca\u08cb\7")
        buf.write("U\2\2\u08cb\u00ad\3\2\2\2\u08cc\u08cd\bX\1\2\u08cd\u08cf")
        buf.write("\5\\/\2\u08ce\u08d0\5|?\2\u08cf\u08ce\3\2\2\2\u08cf\u08d0")
        buf.write("\3\2\2\2\u08d0\u08d2\3\2\2\2\u08d1\u08d3\7\177\2\2\u08d2")
        buf.write("\u08d1\3\2\2\2\u08d2\u08d3\3\2\2\2\u08d3\u08df\3\2\2\2")
        buf.write("\u08d4\u08d5\f\3\2\2\u08d5\u08d6\7v\2\2\u08d6\u08d8\5")
        buf.write("\\/\2\u08d7\u08d9\5|?\2\u08d8\u08d7\3\2\2\2\u08d8\u08d9")
        buf.write("\3\2\2\2\u08d9\u08db\3\2\2\2\u08da\u08dc\7\177\2\2\u08db")
        buf.write("\u08da\3\2\2\2\u08db\u08dc\3\2\2\2\u08dc\u08de\3\2\2\2")
        buf.write("\u08dd\u08d4\3\2\2\2\u08de\u08e1\3\2\2\2\u08df\u08dd\3")
        buf.write("\2\2\2\u08df\u08e0\3\2\2\2\u08e0\u00af\3\2\2\2\u08e1\u08df")
        buf.write("\3\2\2\2\u08e2\u0917\7,\2\2\u08e3\u0917\7\27\2\2\u08e4")
        buf.write("\u08e5\7,\2\2\u08e5\u08e6\7R\2\2\u08e6\u0917\7S\2\2\u08e7")
        buf.write("\u08e8\7\27\2\2\u08e8\u08e9\7R\2\2\u08e9\u0917\7S\2\2")
        buf.write("\u08ea\u0917\7V\2\2\u08eb\u0917\7W\2\2\u08ec\u0917\7X")
        buf.write("\2\2\u08ed\u0917\7Y\2\2\u08ee\u0917\7Z\2\2\u08ef\u0917")
        buf.write("\7[\2\2\u08f0\u0917\7\\\2\2\u08f1\u0917\7]\2\2\u08f2\u0917")
        buf.write("\7^\2\2\u08f3\u0917\7_\2\2\u08f4\u0917\7`\2\2\u08f5\u0917")
        buf.write("\7a\2\2\u08f6\u0917\7b\2\2\u08f7\u0917\7c\2\2\u08f8\u0917")
        buf.write("\7d\2\2\u08f9\u0917\7e\2\2\u08fa\u0917\7f\2\2\u08fb\u0917")
        buf.write("\7g\2\2\u08fc\u0917\7h\2\2\u08fd\u0917\7i\2\2\u08fe\u0917")
        buf.write("\7j\2\2\u08ff\u0917\7k\2\2\u0900\u0901\7b\2\2\u0901\u0903")
        buf.write("\7b\2\2\u0902\u0904\7`\2\2\u0903\u0902\3\2\2\2\u0903\u0904")
        buf.write("\3\2\2\2\u0904\u0917\3\2\2\2\u0905\u0917\7l\2\2\u0906")
        buf.write("\u0917\7m\2\2\u0907\u0917\7n\2\2\u0908\u0917\7o\2\2\u0909")
        buf.write("\u0917\7p\2\2\u090a\u0917\7q\2\2\u090b\u0917\7r\2\2\u090c")
        buf.write("\u0917\7s\2\2\u090d\u0917\7t\2\2\u090e\u0917\7v\2\2\u090f")
        buf.write("\u0917\7w\2\2\u0910\u0917\7x\2\2\u0911\u0912\7P\2\2\u0912")
        buf.write("\u0917\7Q\2\2\u0913\u0914\7R\2\2\u0914\u0917\7S\2\2\u0915")
        buf.write("\u0917\7u\2\2\u0916\u08e2\3\2\2\2\u0916\u08e3\3\2\2\2")
        buf.write("\u0916\u08e4\3\2\2\2\u0916\u08e7\3\2\2\2\u0916\u08ea\3")
        buf.write("\2\2\2\u0916\u08eb\3\2\2\2\u0916\u08ec\3\2\2\2\u0916\u08ed")
        buf.write("\3\2\2\2\u0916\u08ee\3\2\2\2\u0916\u08ef\3\2\2\2\u0916")
        buf.write("\u08f0\3\2\2\2\u0916\u08f1\3\2\2\2\u0916\u08f2\3\2\2\2")
        buf.write("\u0916\u08f3\3\2\2\2\u0916\u08f4\3\2\2\2\u0916\u08f5\3")
        buf.write("\2\2\2\u0916\u08f6\3\2\2\2\u0916\u08f7\3\2\2\2\u0916\u08f8")
        buf.write("\3\2\2\2\u0916\u08f9\3\2\2\2\u0916\u08fa\3\2\2\2\u0916")
        buf.write("\u08fb\3\2\2\2\u0916\u08fc\3\2\2\2\u0916\u08fd\3\2\2\2")
        buf.write("\u0916\u08fe\3\2\2\2\u0916\u08ff\3\2\2\2\u0916\u0900\3")
        buf.write("\2\2\2\u0916\u0905\3\2\2\2\u0916\u0906\3\2\2\2\u0916\u0907")
        buf.write("\3\2\2\2\u0916\u0908\3\2\2\2\u0916\u0909\3\2\2\2\u0916")
        buf.write("\u090a\3\2\2\2\u0916\u090b\3\2\2\2\u0916\u090c\3\2\2\2")
        buf.write("\u0916\u090d\3\2\2\2\u0916\u090e\3\2\2\2\u0916\u090f\3")
        buf.write("\2\2\2\u0916\u0910\3\2\2\2\u0916\u0911\3\2\2\2\u0916\u0913")
        buf.write("\3\2\2\2\u0916\u0915\3\2\2\2\u0917\u00b1\3\2\2\2\u0197")
        buf.write("\u00b3\u00b9\u00bb\u00c2\u00c5\u00cb\u00ce\u00d4\u00d7")
        buf.write("\u00dd\u00e1\u00e4\u00ea\u00ed\u00f3\u00f6\u00f8\u00fe")
        buf.write("\u0101\u0107\u010a\u0112\u0117\u011b\u011f\u0125\u012b")
        buf.write("\u012f\u0133\u0137\u013a\u0140\u0145\u014d\u014f\u0152")
        buf.write("\u0157\u0159\u0171\u0174\u0178\u017e\u0185\u018b\u018d")
        buf.write("\u0190\u0196\u019b\u019e\u01a2\u01a8\u01aa\u01ad\u01b3")
        buf.write("\u01be\u01c9\u01d4\u01e3\u01e7\u01e9\u01f1\u01f3\u01f6")
        buf.write("\u01fb\u01fe\u0202\u0206\u0209\u020d\u0211\u0216\u0219")
        buf.write("\u021c\u0222\u0225\u022c\u0234\u0237\u023e\u0241\u024c")
        buf.write("\u0254\u025a\u0265\u026b\u0272\u0276\u027b\u027f\u0283")
        buf.write("\u0289\u028b\u028e\u0292\u0295\u029c\u02a3\u02a7\u02ab")
        buf.write("\u02b0\u02b8\u02bd\u02c7\u02d2\u02dd\u02e7\u02ec\u02f7")
        buf.write("\u0302\u030d\u0318\u0323\u032e\u0339\u034c\u034e\u0351")
        buf.write("\u0353\u0359\u035b\u036a\u0374\u037a\u037d\u0385\u038c")
        buf.write("\u0396\u03aa\u03ae\u03b1\u03ba\u03bc\u03bf\u03c1\u03ca")
        buf.write("\u03cf\u03d1\u03d4\u03db\u03e0\u03e4\u03ea\u03ed\u03f9")
        buf.write("\u0400\u0403\u0408\u040d\u040f\u041d\u0420\u0425\u0428")
        buf.write("\u0438\u0441\u0443\u0446\u044b\u044d\u0450\u0452\u0455")
        buf.write("\u0458\u045b\u045f\u0463\u0472\u0476\u0479\u047e\u0481")
        buf.write("\u0486\u048b\u0490\u0494\u0498\u049e\u04a5\u04ab\u04b2")
        buf.write("\u04b7\u04b9\u04c4\u04cb\u04ce\u04d5\u04da\u04de\u04ea")
        buf.write("\u04ed\u04f2\u04f8\u04fd\u0505\u0509\u050c\u0512\u0517")
        buf.write("\u051a\u051d\u052b\u052f\u0534\u0537\u053c\u053f\u0542")
        buf.write("\u0544\u0548\u054e\u0553\u0556\u0559\u055c\u0560\u0564")
        buf.write("\u0567\u056a\u056f\u0572\u0577\u0579\u057e\u0581\u0585")
        buf.write("\u058c\u0591\u0594\u0597\u059c\u05a1\u05a4\u05a9\u05ac")
        buf.write("\u05b3\u05c9\u05cc\u05d2\u05d9\u05dd\u05e7\u05f4\u05f7")
        buf.write("\u05fa\u05fe\u0603\u0605\u060b\u060d\u0611\u0617\u061d")
        buf.write("\u0621\u0627\u0636\u063b\u0641\u0645\u064e\u0650\u0656")
        buf.write("\u065a\u065e\u0664\u066a\u066e\u0670\u0674\u067d\u0681")
        buf.write("\u0686\u068e\u0690\u0693\u0696\u069a\u069f\u06a4\u06a6")
        buf.write("\u06aa\u06b0\u06b3\u06b8\u06ba\u06c0\u06c4\u06ca\u06d1")
        buf.write("\u06d5\u06d7\u06d9\u06e0\u06e9\u06ed\u06ef\u06f3\u06f7")
        buf.write("\u06fa\u0700\u070a\u070e\u0713\u071a\u071c\u071f\u0721")
        buf.write("\u0728\u072a\u072d\u0732\u0734\u073b\u0742\u0744\u0747")
        buf.write("\u074a\u0752\u0754\u0757\u075a\u075e\u0762\u0765\u0768")
        buf.write("\u076d\u0771\u0777\u077e\u0784\u078b\u0790\u0792\u0796")
        buf.write("\u079a\u07b0\u07b5\u07ba\u07c4\u07c9\u07cc\u07d3\u07d5")
        buf.write("\u07d8\u07dd\u07df\u07e2\u07e4\u07e7\u07ea\u07ee\u07f7")
        buf.write("\u0801\u0807\u080b\u080f\u0813\u0817\u0819\u081e\u0823")
        buf.write("\u0826\u082c\u082f\u0833\u0837\u083d\u083f\u0842\u0845")
        buf.write("\u0849\u0853\u0858\u085b\u085e\u0863\u0865\u0869\u086c")
        buf.write("\u086f\u0874\u0876\u087e\u0881\u0884\u0888\u088b\u0890")
        buf.write("\u0896\u089a\u089f\u08a3\u08aa\u08b1\u08b6\u08bb\u08bd")
        buf.write("\u08c0\u08c7\u08cf\u08d2\u08d8\u08db\u08df\u0903\u0916")
        return buf.getvalue()


class CPP14Parser(Parser):
    grammarFileName = "CPP14.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = ["<INVALID>", "<INVALID>", "<INVALID>", "'alignas'",
                    "'alignof'", "'asm'", "'auto'", "'bool'", "'break'",
                    "'case'", "'catch'", "'char'", "'char16_t'", "'char32_t'",
                    "'class'", "'const'", "'constexpr'", "'const_cast'",
                    "'continue'", "'decltype'", "'default'", "'delete'",
                    "'do'", "'double'", "'dynamic_cast'", "'else'", "'enum'",
                    "'explicit'", "'export'", "'extern'", "'false'", "'final'",
                    "'float'", "'for'", "'friend'", "'goto'", "'if'", "'inline'",
                    "'int'", "'long'", "'mutable'", "'namespace'", "'new'",
                    "'noexcept'", "'nullptr'", "'operator'", "'override'",
                    "'private'", "'protected'", "'public'", "'register'",
                    "'reinterpret_cast'", "'return'", "'short'", "'signed'",
                    "'sizeof'", "'static'", "'static_assert'", "'static_cast'",
                    "'struct'", "'switch'", "'template'", "'this'", "'thread_local'",
                    "'throw'", "'true'", "'try'", "'typedef'", "'typeid'",
                    "'typename'", "'union'", "'unsigned'", "'using'", "'virtual'",
                    "'void'", "'volatile'", "'wchar_t'", "'while'", "'('",
                    "')'", "'['", "']'", "'{'", "'}'", "'+'", "'-'", "'*'",
                    "'/'", "'%'", "'^'", "'&'", "'|'", "'~'", "'!'", "'='",
                    "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", "'%='",
                    "'^='", "'&='", "'|='", "'<<'", "'<<='", "'=='", "'!='",
                    "'<='", "'>='", "'&&'", "'||'", "'++'", "'--'", "'?:'",
                    "','", "'->*'", "'->'", "'?'", "':'", "'::'", "';'",
                    "'.'", "'.*'", "'...'"]

    symbolicNames = ["<INVALID>", "MultiLineMacro", "Directive", "Alignas",
                     "Alignof", "Asm", "Auto", "Bool", "Break", "Case",
                     "Catch", "Char", "Char16", "Char32", "Class", "Const",
                     "Constexpr", "Const_cast", "Continue", "Decltype",
                     "Default", "Delete", "Do", "Double", "Dynamic_cast",
                     "Else", "Enum", "Explicit", "Export", "Extern", "FalseToken",
                     "Final", "Float", "For", "Friend", "Goto", "If", "Inline",
                     "Int", "Long", "Mutable", "Namespace", "New", "Noexcept",
                     "Nullptr", "Operator", "Override", "Private", "Protected",
                     "Public", "Register", "Reinterpret_cast", "Return",
                     "Short", "Signed", "Sizeof", "Static", "Static_assert",
                     "Static_cast", "Struct", "Switch", "Template", "This",
                     "Thread_local", "Throw", "TrueToken", "Try", "Typedef",
                     "Typeid", "Typename", "Union", "Unsigned", "Using",
                     "Virtual", "Void", "Volatile", "Wchar", "While", "LeftParen",
                     "RightParen", "LeftBracket", "RightBracket", "LeftBrace",
                     "RightBrace", "Plus", "Minus", "Star", "Div", "Mod",
                     "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less",
                     "Greater", "PlusAssign", "MinusAssign", "StarAssign",
                     "DivAssign", "ModAssign", "XorAssign", "AndAssign",
                     "OrAssign", "LeftShift", "LeftShiftAssign", "Equal",
                     "NotEqual", "LessEqual", "GreaterEqual", "AndAnd",
                     "OrOr", "PlusPlus", "MinusMinus", "UnaryCondition",
                     "Comma", "ArrowStar", "Arrow", "Question", "Colon",
                     "Doublecolon", "Semi", "Dot", "DotStar", "Ellipsis",
                     "Identifier", "Integerliteral", "Decimalliteral",
                     "Octalliteral", "Hexadecimalliteral", "Binaryliteral",
                     "Integersuffix", "Characterliteral", "Floatingliteral",
                     "Stringliteral", "Userdefinedintegerliteral", "Userdefinedfloatingliteral",
                     "Userdefinedstringliteral", "Userdefinedcharacterliteral",
                     "Whitespace", "Newline", "BlockComment", "LineComment"]

    RULE_translationunit = 0
    RULE_idexpression = 1
    RULE_unqualifiedid = 2
    RULE_nestednamespecifier = 3
    RULE_capturelist = 4
    RULE_capture = 5
    RULE_lambdadeclarator = 6
    RULE_postfixexpression = 7
    RULE_pseudodestructorname = 8
    RULE_unaryexpression = 9
    RULE_unaryincdecexpression = 10
    RULE_newexpression = 11
    RULE_newdeclarator = 12
    RULE_noptrnewdeclarator = 13
    RULE_deleteexpression = 14
    RULE_castexpression = 15
    RULE_pmexpression = 16
    RULE_multiplicativeexpression = 17
    RULE_additiveexpression = 18
    RULE_shiftexpression = 19
    RULE_relationalexpression = 20
    RULE_equalityexpression = 21
    RULE_andexpression = 22
    RULE_exclusiveorexpression = 23
    RULE_inclusiveorexpression = 24
    RULE_logicalandexpression = 25
    RULE_logicalorexpression = 26
    RULE_ternaryconditionalexpression = 27
    RULE_unaryconditionalexpression = 28
    RULE_assignmentexpression = 29
    RULE_assignmentoperator = 30
    RULE_expression = 31
    RULE_constantexpression = 32
    RULE_statement = 33
    RULE_casestatement = 34
    RULE_defaultstatement = 35
    RULE_elsestatement = 36
    RULE_condition = 37
    RULE_forinitstatement = 38
    RULE_gotostatement = 39
    RULE_declarationseq = 40
    RULE_declaration = 41
    RULE_declspecifierseq = 42
    RULE_typespecifier = 43
    RULE_trailingtypespecifier = 44
    RULE_typespecifierseq = 45
    RULE_trailingtypespecifierseq = 46
    RULE_simpletypespecifier = 47
    RULE_enumeratorlist = 48
    RULE_attributespecifierseq = 49
    RULE_attributespecifier = 50
    RULE_attributelist = 51
    RULE_attribute = 52
    RULE_balancedtokenseq = 53
    RULE_balancedtoken = 54
    RULE_initdeclaratorlist = 55
    RULE_declarator = 56
    RULE_ptrdeclarator = 57
    RULE_noptrdeclarator = 58
    RULE_parametersandqualifiers = 59
    RULE_ptroperator = 60
    RULE_abstractdeclarator = 61
    RULE_ptrabstractdeclarator = 62
    RULE_noptrabstractdeclarator = 63
    RULE_abstractpackdeclarator = 64
    RULE_noptrabstractpackdeclarator = 65
    RULE_parameterdeclarationclause = 66
    RULE_parameterdeclarationlist = 67
    RULE_parameterdeclaration = 68
    RULE_initializer = 69
    RULE_initializerlist = 70
    RULE_memberdeclaration = 71
    RULE_memberdeclaratorlist = 72
    RULE_memberdeclarator = 73
    RULE_virtspecifierseq = 74
    RULE_purespecifier = 75
    RULE_basespecifierlist = 76
    RULE_basespecifier = 77
    RULE_classordecltype = 78
    RULE_meminitializerlist = 79
    RULE_templateparameterlist = 80
    RULE_templateparameter = 81
    RULE_templateargumentlist = 82
    RULE_templateargument = 83
    RULE_tryblock = 84
    RULE_handler = 85
    RULE_typeidlist = 86
    RULE_theoperator = 87

    ruleNames = ["translationunit", "idexpression", "unqualifiedid", "nestednamespecifier",
                 "capturelist", "capture", "lambdadeclarator", "postfixexpression",
                 "pseudodestructorname", "unaryexpression", "unaryincdecexpression",
                 "newexpression", "newdeclarator", "noptrnewdeclarator",
                 "deleteexpression", "castexpression", "pmexpression",
                 "multiplicativeexpression", "additiveexpression", "shiftexpression",
                 "relationalexpression", "equalityexpression", "andexpression",
                 "exclusiveorexpression", "inclusiveorexpression", "logicalandexpression",
                 "logicalorexpression", "ternaryconditionalexpression",
                 "unaryconditionalexpression", "assignmentexpression",
                 "assignmentoperator", "expression", "constantexpression",
                 "statement", "casestatement", "defaultstatement", "elsestatement",
                 "condition", "forinitstatement", "gotostatement", "declarationseq",
                 "declaration", "declspecifierseq", "typespecifier", "trailingtypespecifier",
                 "typespecifierseq", "trailingtypespecifierseq", "simpletypespecifier",
                 "enumeratorlist", "attributespecifierseq", "attributespecifier",
                 "attributelist", "attribute", "balancedtokenseq", "balancedtoken",
                 "initdeclaratorlist", "declarator", "ptrdeclarator",
                 "noptrdeclarator", "parametersandqualifiers", "ptroperator",
                 "abstractdeclarator", "ptrabstractdeclarator", "noptrabstractdeclarator",
                 "abstractpackdeclarator", "noptrabstractpackdeclarator",
                 "parameterdeclarationclause", "parameterdeclarationlist",
                 "parameterdeclaration", "initializer", "initializerlist",
                 "memberdeclaration", "memberdeclaratorlist", "memberdeclarator",
                 "virtspecifierseq", "purespecifier", "basespecifierlist",
                 "basespecifier", "classordecltype", "meminitializerlist",
                 "templateparameterlist", "templateparameter", "templateargumentlist",
                 "templateargument", "tryblock", "handler", "typeidlist",
                 "theoperator"]

    EOF = Token.EOF
    MultiLineMacro = 1
    Directive = 2
    Alignas = 3
    Alignof = 4
    Asm = 5
    Auto = 6
    Bool = 7
    Break = 8
    Case = 9
    Catch = 10
    Char = 11
    Char16 = 12
    Char32 = 13
    Class = 14
    Const = 15
    Constexpr = 16
    Const_cast = 17
    Continue = 18
    Decltype = 19
    Default = 20
    Delete = 21
    Do = 22
    Double = 23
    Dynamic_cast = 24
    Else = 25
    Enum = 26
    Explicit = 27
    Export = 28
    Extern = 29
    FalseToken = 30
    Final = 31
    Float = 32
    For = 33
    Friend = 34
    Goto = 35
    If = 36
    Inline = 37
    Int = 38
    Long = 39
    Mutable = 40
    Namespace = 41
    New = 42
    Noexcept = 43
    Nullptr = 44
    Operator = 45
    Override = 46
    Private = 47
    Protected = 48
    Public = 49
    Register = 50
    Reinterpret_cast = 51
    Return = 52
    Short = 53
    Signed = 54
    Sizeof = 55
    Static = 56
    Static_assert = 57
    Static_cast = 58
    Struct = 59
    Switch = 60
    Template = 61
    This = 62
    Thread_local = 63
    Throw = 64
    TrueToken = 65
    Try = 66
    Typedef = 67
    Typeid = 68
    Typename = 69
    Union = 70
    Unsigned = 71
    Using = 72
    Virtual = 73
    Void = 74
    Volatile = 75
    Wchar = 76
    While = 77
    LeftParen = 78
    RightParen = 79
    LeftBracket = 80
    RightBracket = 81
    LeftBrace = 82
    RightBrace = 83
    Plus = 84
    Minus = 85
    Star = 86
    Div = 87
    Mod = 88
    Caret = 89
    And = 90
    Or = 91
    Tilde = 92
    Not = 93
    Assign = 94
    Less = 95
    Greater = 96
    PlusAssign = 97
    MinusAssign = 98
    StarAssign = 99
    DivAssign = 100
    ModAssign = 101
    XorAssign = 102
    AndAssign = 103
    OrAssign = 104
    LeftShift = 105
    LeftShiftAssign = 106
    Equal = 107
    NotEqual = 108
    LessEqual = 109
    GreaterEqual = 110
    AndAnd = 111
    OrOr = 112
    PlusPlus = 113
    MinusMinus = 114
    UnaryCondition = 115
    Comma = 116
    ArrowStar = 117
    Arrow = 118
    Question = 119
    Colon = 120
    Doublecolon = 121
    Semi = 122
    Dot = 123
    DotStar = 124
    Ellipsis = 125
    Identifier = 126
    Integerliteral = 127
    Decimalliteral = 128
    Octalliteral = 129
    Hexadecimalliteral = 130
    Binaryliteral = 131
    Integersuffix = 132
    Characterliteral = 133
    Floatingliteral = 134
    Stringliteral = 135
    Userdefinedintegerliteral = 136
    Userdefinedfloatingliteral = 137
    Userdefinedstringliteral = 138
    Userdefinedcharacterliteral = 139
    Whitespace = 140
    Newline = 141
    BlockComment = 142
    LineComment = 143

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class TranslationunitContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CPP14Parser.EOF, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_translationunit

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTranslationunit"):
                listener.enterTranslationunit(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTranslationunit"):
                listener.exitTranslationunit(self)

    def translationunit(self):

        localctx = CPP14Parser.TranslationunitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationunit)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (
                1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (
                1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (
                1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or (
                    (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Semi - 67)) | (
                1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                self.state = 176
                self.declarationseq(0)

            self.state = 179
            self.match(CPP14Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_idexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdexpression"):
                listener.enterIdexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdexpression"):
                listener.exitIdexpression(self)

    def idexpression(self):

        localctx = CPP14Parser.IdexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_idexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 2, self._ctx)
            if la_ == 1:
                self.state = 181
                self.nestednamespecifier(0)
                self.state = 183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Template:
                    self.state = 182
                    self.match(CPP14Parser.Template)

            self.state = 187
            self.unqualifiedid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnqualifiedidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def theoperator(self):
            return self.getTypedRuleContext(CPP14Parser.TheoperatorContext, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def ptroperator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PtroperatorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, i)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unqualifiedid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnqualifiedid"):
                listener.enterUnqualifiedid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnqualifiedid"):
                listener.exitUnqualifiedid(self)

    def unqualifiedid(self):

        localctx = CPP14Parser.UnqualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_unqualifiedid)
        self._la = 0  # Token type
        try:
            self.state = 246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 16, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 189
                self.match(CPP14Parser.Identifier)
                self.state = 195
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 4, self._ctx)
                if la_ == 1:
                    self.state = 190
                    self.match(CPP14Parser.Less)
                    self.state = 192
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                        1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                        CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                        1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                        1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                        1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                        1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                        1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                        1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (
                        1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                        1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                        1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                        1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                        (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                        1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                        self.state = 191
                        self.templateargumentlist(0)

                    self.state = 194
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 197
                self.match(CPP14Parser.Operator)
                self.state = 213
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Delete, CPP14Parser.New, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                             CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.Div, CPP14Parser.Mod,
                             CPP14Parser.Caret, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                             CPP14Parser.Assign, CPP14Parser.Less, CPP14Parser.Greater, CPP14Parser.PlusAssign,
                             CPP14Parser.MinusAssign, CPP14Parser.StarAssign, CPP14Parser.DivAssign,
                             CPP14Parser.ModAssign, CPP14Parser.XorAssign, CPP14Parser.AndAssign, CPP14Parser.OrAssign,
                             CPP14Parser.LeftShift, CPP14Parser.LeftShiftAssign, CPP14Parser.Equal,
                             CPP14Parser.NotEqual, CPP14Parser.LessEqual, CPP14Parser.GreaterEqual, CPP14Parser.AndAnd,
                             CPP14Parser.OrOr, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.UnaryCondition,
                             CPP14Parser.Comma, CPP14Parser.ArrowStar, CPP14Parser.Arrow]:
                    self.state = 198
                    self.theoperator()
                    self.state = 204
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 6, self._ctx)
                    if la_ == 1:
                        self.state = 199
                        self.match(CPP14Parser.Less)
                        self.state = 201
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                            1 << CPP14Parser.Enum) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (
                            1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (
                            1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (
                            1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                            1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                            1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                            1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                            1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 200
                            self.templateargumentlist(0)

                        self.state = 203
                        self.match(CPP14Parser.Greater)

                    pass
                elif token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16,
                               CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Decltype,
                               CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Float, CPP14Parser.Int,
                               CPP14Parser.Long, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Struct,
                               CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Void,
                               CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.Identifier]:
                    self.state = 206
                    self.typespecifierseq()
                    self.state = 210
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 7, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 207
                            self.ptroperator()
                        self.state = 212
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 7, self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 215
                self.match(CPP14Parser.Operator)
                self.state = 219
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Stringliteral]:
                    self.state = 216
                    self.match(CPP14Parser.Stringliteral)
                    self.state = 217
                    self.match(CPP14Parser.Identifier)
                    pass
                elif token in [CPP14Parser.Userdefinedstringliteral]:
                    self.state = 218
                    self.match(CPP14Parser.Userdefinedstringliteral)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 226
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 11, self._ctx)
                if la_ == 1:
                    self.state = 221
                    self.match(CPP14Parser.Less)
                    self.state = 223
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                        1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                        CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                        1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                        1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                        1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                        1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                        1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                        1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (
                        1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                        1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                        1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                        1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                        (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                        1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                        self.state = 222
                        self.templateargumentlist(0)

                    self.state = 225
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 228
                self.match(CPP14Parser.Tilde)
                self.state = 244
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Identifier]:
                    self.state = 229
                    self.match(CPP14Parser.Identifier)
                    self.state = 235
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
                    if la_ == 1:
                        self.state = 230
                        self.match(CPP14Parser.Less)
                        self.state = 232
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                            1 << CPP14Parser.Enum) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (
                            1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (
                            1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (
                            1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                            1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                            1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                            1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                            1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 231
                            self.templateargumentlist(0)

                        self.state = 234
                        self.match(CPP14Parser.Greater)

                    pass
                elif token in [CPP14Parser.Decltype]:
                    self.state = 237
                    self.match(CPP14Parser.Decltype)
                    self.state = 238
                    self.match(CPP14Parser.LeftParen)
                    self.state = 241
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 14, self._ctx)
                    if la_ == 1:
                        self.state = 239
                        self.expression(0)
                        pass

                    elif la_ == 2:
                        self.state = 240
                        self.match(CPP14Parser.Auto)
                        pass

                    self.state = 243
                    self.match(CPP14Parser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestednamespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_nestednamespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNestednamespecifier"):
                listener.enterNestednamespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNestednamespecifier"):
                listener.exitNestednamespecifier(self)

    def nestednamespecifier(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NestednamespecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 6
        self.enterRecursionRule(localctx, 6, self.RULE_nestednamespecifier, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Identifier]:
                self.state = 249
                self.match(CPP14Parser.Identifier)
                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Less:
                    self.state = 250
                    self.match(CPP14Parser.Less)
                    self.state = 252
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                        1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                        CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                        1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                        1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                        1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                        1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                        1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                        1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (
                        1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                        1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                        1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                        1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                        (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                        1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                        self.state = 251
                        self.templateargumentlist(0)

                    self.state = 254
                    self.match(CPP14Parser.Greater)

                pass
            elif token in [CPP14Parser.Decltype]:
                self.state = 257
                self.match(CPP14Parser.Decltype)
                self.state = 258
                self.match(CPP14Parser.LeftParen)
                self.state = 261
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 19, self._ctx)
                if la_ == 1:
                    self.state = 259
                    self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 260
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 263
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 266
            self.match(CPP14Parser.Doublecolon)
            self._ctx.stop = self._input.LT(-1)
            self.state = 285
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 24, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NestednamespecifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                    self.state = 268
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 281
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 23, self._ctx)
                    if la_ == 1:
                        self.state = 269
                        self.match(CPP14Parser.Identifier)
                        self.state = 270
                        self.match(CPP14Parser.Doublecolon)
                        pass

                    elif la_ == 2:
                        self.state = 272
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 271
                            self.match(CPP14Parser.Template)

                        self.state = 274
                        self.match(CPP14Parser.Identifier)
                        self.state = 275
                        self.match(CPP14Parser.Less)
                        self.state = 277
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                            1 << CPP14Parser.Enum) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (
                            1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (
                            1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (
                            1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                            1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                            1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                            1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                            1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 276
                            self.templateargumentlist(0)

                        self.state = 279
                        self.match(CPP14Parser.Greater)
                        self.state = 280
                        self.match(CPP14Parser.Doublecolon)
                        pass

                self.state = 287
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 24, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class CapturelistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capture(self):
            return self.getTypedRuleContext(CPP14Parser.CaptureContext, 0)

        def capturelist(self):
            return self.getTypedRuleContext(CPP14Parser.CapturelistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_capturelist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCapturelist"):
                listener.enterCapturelist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCapturelist"):
                listener.exitCapturelist(self)

    def capturelist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.CapturelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 8
        self.enterRecursionRule(localctx, 8, self.RULE_capturelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.capture()
            self.state = 291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 25, self._ctx)
            if la_ == 1:
                self.state = 290
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 301
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 27, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.CapturelistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_capturelist)
                    self.state = 293
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 294
                    self.match(CPP14Parser.Comma)
                    self.state = 295
                    self.capture()
                    self.state = 297
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 26, self._ctx)
                    if la_ == 1:
                        self.state = 296
                        self.match(CPP14Parser.Ellipsis)

                self.state = 303
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 27, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class CaptureContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def initializer(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerContext, 0)

        def This(self):
            return self.getToken(CPP14Parser.This, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_capture

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCapture"):
                listener.enterCapture(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCapture"):
                listener.exitCapture(self)

    def capture(self):

        localctx = CPP14Parser.CaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_capture)
        self._la = 0  # Token type
        try:
            self.state = 312
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.And, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.And:
                    self.state = 304
                    self.match(CPP14Parser.And)

                self.state = 307
                self.match(CPP14Parser.Identifier)
                self.state = 309
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 29, self._ctx)
                if la_ == 1:
                    self.state = 308
                    self.initializer()

                pass
            elif token in [CPP14Parser.This]:
                self.enterOuterAlt(localctx, 2)
                self.state = 311
                self.match(CPP14Parser.This)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdadeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationclauseContext, 0)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidlistContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdadeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambdadeclarator"):
                listener.enterLambdadeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambdadeclarator"):
                listener.exitLambdadeclarator(self)

    def lambdadeclarator(self):

        localctx = CPP14Parser.LambdadeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_lambdadeclarator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(CPP14Parser.LeftParen)
            self.state = 315
            self.parameterdeclarationclause()
            self.state = 316
            self.match(CPP14Parser.RightParen)
            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Mutable:
                self.state = 317
                self.match(CPP14Parser.Mutable)

            self.state = 333
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Throw]:
                self.state = 320
                self.match(CPP14Parser.Throw)
                self.state = 321
                self.match(CPP14Parser.LeftParen)
                self.state = 323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (
                    1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (
                    1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Float) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Short) | (
                    1 << CPP14Parser.Signed) | (1 << CPP14Parser.Struct))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and (
                    (1 << (_la - 69)) & ((1 << (CPP14Parser.Typename - 69)) | (1 << (CPP14Parser.Union - 69)) | (
                    1 << (CPP14Parser.Unsigned - 69)) | (1 << (CPP14Parser.Void - 69)) | (
                    1 << (CPP14Parser.Volatile - 69)) | (1 << (CPP14Parser.Wchar - 69)) | (
                    1 << (CPP14Parser.Identifier - 69)))) != 0):
                    self.state = 322
                    self.typeidlist(0)

                self.state = 325
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.Noexcept]:
                self.state = 326
                self.match(CPP14Parser.Noexcept)
                self.state = 331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.LeftParen:
                    self.state = 327
                    self.match(CPP14Parser.LeftParen)
                    self.state = 328
                    self.constantexpression()
                    self.state = 329
                    self.match(CPP14Parser.RightParen)

                pass
            elif token in [CPP14Parser.Alignas, CPP14Parser.LeftBracket, CPP14Parser.LeftBrace, CPP14Parser.Arrow]:
                pass
            else:
                pass
            self.state = 336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 335
                self.attributespecifierseq(0)

            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Arrow:
                self.state = 338
                self.match(CPP14Parser.Arrow)
                self.state = 339
                self.trailingtypespecifierseq()
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 340
                    self.abstractdeclarator()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integerliteral(self):
            return self.getToken(CPP14Parser.Integerliteral, 0)

        def Characterliteral(self):
            return self.getToken(CPP14Parser.Characterliteral, 0)

        def Floatingliteral(self):
            return self.getToken(CPP14Parser.Floatingliteral, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def FalseToken(self):
            return self.getToken(CPP14Parser.FalseToken, 0)

        def TrueToken(self):
            return self.getToken(CPP14Parser.TrueToken, 0)

        def Nullptr(self):
            return self.getToken(CPP14Parser.Nullptr, 0)

        def Userdefinedintegerliteral(self):
            return self.getToken(CPP14Parser.Userdefinedintegerliteral, 0)

        def Userdefinedfloatingliteral(self):
            return self.getToken(CPP14Parser.Userdefinedfloatingliteral, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def Userdefinedcharacterliteral(self):
            return self.getToken(CPP14Parser.Userdefinedcharacterliteral, 0)

        def This(self):
            return self.getToken(CPP14Parser.This, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def capturelist(self):
            return self.getTypedRuleContext(CPP14Parser.CapturelistContext, 0)

        def lambdadeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.LambdadeclaratorContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def Dynamic_cast(self):
            return self.getToken(CPP14Parser.Dynamic_cast, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Static_cast(self):
            return self.getToken(CPP14Parser.Static_cast, 0)

        def Reinterpret_cast(self):
            return self.getToken(CPP14Parser.Reinterpret_cast, 0)

        def Const_cast(self):
            return self.getToken(CPP14Parser.Const_cast, 0)

        def Typeid(self):
            return self.getToken(CPP14Parser.Typeid, 0)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext, 0)

        def pseudodestructorname(self):
            return self.getTypedRuleContext(CPP14Parser.PseudodestructornameContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_postfixexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPostfixexpression"):
                listener.enterPostfixexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPostfixexpression"):
                listener.exitPostfixexpression(self)

    def postfixexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PostfixexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 14
        self.enterRecursionRule(localctx, 14, self.RULE_postfixexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 59, self._ctx)
            if la_ == 1:
                self.state = 346
                self.match(CPP14Parser.Integerliteral)
                pass

            elif la_ == 2:
                self.state = 347
                self.match(CPP14Parser.Characterliteral)
                pass

            elif la_ == 3:
                self.state = 348
                self.match(CPP14Parser.Floatingliteral)
                pass

            elif la_ == 4:
                self.state = 349
                self.match(CPP14Parser.Stringliteral)
                pass

            elif la_ == 5:
                self.state = 350
                self.match(CPP14Parser.FalseToken)
                pass

            elif la_ == 6:
                self.state = 351
                self.match(CPP14Parser.TrueToken)
                pass

            elif la_ == 7:
                self.state = 352
                self.match(CPP14Parser.Nullptr)
                pass

            elif la_ == 8:
                self.state = 353
                self.match(CPP14Parser.Userdefinedintegerliteral)
                pass

            elif la_ == 9:
                self.state = 354
                self.match(CPP14Parser.Userdefinedfloatingliteral)
                pass

            elif la_ == 10:
                self.state = 355
                self.match(CPP14Parser.Userdefinedstringliteral)
                pass

            elif la_ == 11:
                self.state = 356
                self.match(CPP14Parser.Userdefinedcharacterliteral)
                pass

            elif la_ == 12:
                self.state = 357
                self.match(CPP14Parser.This)
                pass

            elif la_ == 13:
                self.state = 358
                self.match(CPP14Parser.LeftParen)
                self.state = 359
                self.expression(0)
                self.state = 360
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 14:
                self.state = 362
                self.idexpression()
                pass

            elif la_ == 15:
                self.state = 363
                self.match(CPP14Parser.LeftBracket)
                self.state = 370
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 39, self._ctx)
                if la_ == 1:
                    self.state = 364
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.And or _la == CPP14Parser.Assign):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 367
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Comma:
                        self.state = 365
                        self.match(CPP14Parser.Comma)
                        self.state = 366
                        self.capturelist(0)



                elif la_ == 2:
                    self.state = 369
                    self.capturelist(0)

                self.state = 372
                self.match(CPP14Parser.RightBracket)
                self.state = 374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.LeftParen:
                    self.state = 373
                    self.lambdadeclarator()

                self.state = 376
                self.match(CPP14Parser.LeftBrace)
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                    1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (
                    1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (
                    1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (
                    1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (
                    1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (
                    1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (1 << CPP14Parser.Short) | (
                    1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static) | (
                    1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Thread_local))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Try - 64)) | (
                    1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                    1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                    1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                    1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                    1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Semi - 64)) | (
                    1 << (CPP14Parser.Ellipsis - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                    (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                    1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 377
                    self.statement()
                    self.state = 382
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 383
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 16:
                self.state = 384
                self.simpletypespecifier()
                self.state = 398
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.LeftParen]:
                    self.state = 385
                    self.match(CPP14Parser.LeftParen)
                    self.state = 387
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                            (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                        1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                        1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                        1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                        1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                        1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                        1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                        1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (
                        1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                        1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                        1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                        1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                        (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                        1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                        self.state = 386
                        self.initializerlist(0)

                    self.state = 389
                    self.match(CPP14Parser.RightParen)
                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 390
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 395
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                            (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                        1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                        1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                        1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                        1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                        1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                        1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                        1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (
                        1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                        1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                        1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                        1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                        (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                        1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                        self.state = 391
                        self.initializerlist(0)
                        self.state = 393
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Comma:
                            self.state = 392
                            self.match(CPP14Parser.Comma)

                    self.state = 397
                    self.match(CPP14Parser.RightBrace)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 17:
                self.state = 400
                self.match(CPP14Parser.Typename)
                self.state = 401
                self.nestednamespecifier(0)
                self.state = 412
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 48, self._ctx)
                if la_ == 1:
                    self.state = 402
                    self.match(CPP14Parser.Identifier)
                    pass

                elif la_ == 2:
                    self.state = 404
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Template:
                        self.state = 403
                        self.match(CPP14Parser.Template)

                    self.state = 406
                    self.match(CPP14Parser.Identifier)
                    self.state = 407
                    self.match(CPP14Parser.Less)
                    self.state = 409
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                        1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                        CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                        1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                        1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                        1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                        1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                        1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                        1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (
                        1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                        1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                        1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                        1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                        (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                        1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                        self.state = 408
                        self.templateargumentlist(0)

                    self.state = 411
                    self.match(CPP14Parser.Greater)
                    pass

                self.state = 427
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.LeftParen]:
                    self.state = 414
                    self.match(CPP14Parser.LeftParen)
                    self.state = 416
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                            (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                        1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                        1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                        1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                        1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                        1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                        1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                        1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (
                        1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                        1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                        1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                        1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                        (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                        1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                        self.state = 415
                        self.initializerlist(0)

                    self.state = 418
                    self.match(CPP14Parser.RightParen)
                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 419
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 424
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                            (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                        1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                        1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                        1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                        1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                        1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                        1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                        1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (
                        1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                        1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                        1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                        1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                        (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                        1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                        self.state = 420
                        self.initializerlist(0)
                        self.state = 422
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Comma:
                            self.state = 421
                            self.match(CPP14Parser.Comma)

                    self.state = 426
                    self.match(CPP14Parser.RightBrace)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 18:
                self.state = 429
                self.match(CPP14Parser.Dynamic_cast)
                self.state = 430
                self.match(CPP14Parser.Less)
                self.state = 431
                self.typespecifierseq()
                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 432
                    self.abstractdeclarator()

                self.state = 435
                self.match(CPP14Parser.Greater)
                self.state = 436
                self.match(CPP14Parser.LeftParen)
                self.state = 437
                self.expression(0)
                self.state = 438
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 19:
                self.state = 440
                self.match(CPP14Parser.Static_cast)
                self.state = 441
                self.match(CPP14Parser.Less)
                self.state = 442
                self.typespecifierseq()
                self.state = 444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 443
                    self.abstractdeclarator()

                self.state = 446
                self.match(CPP14Parser.Greater)
                self.state = 447
                self.match(CPP14Parser.LeftParen)
                self.state = 448
                self.expression(0)
                self.state = 449
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 20:
                self.state = 451
                self.match(CPP14Parser.Reinterpret_cast)
                self.state = 452
                self.match(CPP14Parser.Less)
                self.state = 453
                self.typespecifierseq()
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 454
                    self.abstractdeclarator()

                self.state = 457
                self.match(CPP14Parser.Greater)
                self.state = 458
                self.match(CPP14Parser.LeftParen)
                self.state = 459
                self.expression(0)
                self.state = 460
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 21:
                self.state = 462
                self.match(CPP14Parser.Const_cast)
                self.state = 463
                self.match(CPP14Parser.Less)
                self.state = 464
                self.typespecifierseq()
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 465
                    self.abstractdeclarator()

                self.state = 468
                self.match(CPP14Parser.Greater)
                self.state = 469
                self.match(CPP14Parser.LeftParen)
                self.state = 470
                self.expression(0)
                self.state = 471
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 22:
                self.state = 473
                self.match(CPP14Parser.Typeid)
                self.state = 485
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 58, self._ctx)
                if la_ == 1:
                    self.state = 474
                    self.match(CPP14Parser.LeftParen)
                    self.state = 475
                    self.expression(0)
                    self.state = 476
                    self.match(CPP14Parser.RightParen)
                    pass

                elif la_ == 2:
                    self.state = 478
                    self.match(CPP14Parser.LeftParen)
                    self.state = 479
                    self.typespecifierseq()
                    self.state = 481
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Ellipsis - 78)) | (1 << (CPP14Parser.Identifier - 78)))) != 0):
                        self.state = 480
                        self.abstractdeclarator()

                    self.state = 483
                    self.match(CPP14Parser.RightParen)
                    pass

                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 523
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 68, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                    self.state = 489
                    if not self.precpred(self._ctx, 6):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                    self.state = 519
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.LeftParen, CPP14Parser.LeftBracket]:
                        self.state = 508
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.LeftBracket]:
                            self.state = 490
                            self.match(CPP14Parser.LeftBracket)
                            self.state = 500
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char,
                                         CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast,
                                         CPP14Parser.Decltype, CPP14Parser.Delete, CPP14Parser.Double,
                                         CPP14Parser.Dynamic_cast, CPP14Parser.FalseToken, CPP14Parser.Float,
                                         CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept,
                                         CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.Reinterpret_cast,
                                         CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof,
                                         CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw,
                                         CPP14Parser.TrueToken, CPP14Parser.Typeid, CPP14Parser.Typename,
                                         CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Wchar,
                                         CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus,
                                         CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                                         CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus,
                                         CPP14Parser.MinusMinus, CPP14Parser.Doublecolon, CPP14Parser.Identifier,
                                         CPP14Parser.Integerliteral, CPP14Parser.Characterliteral,
                                         CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral,
                                         CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral,
                                         CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                                self.state = 491
                                self.expression(0)
                                pass
                            elif token in [CPP14Parser.LeftBrace]:
                                self.state = 492
                                self.match(CPP14Parser.LeftBrace)
                                self.state = 497
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                                    1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (
                                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                                    1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                                    1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                                    CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                                    1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                                    1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                                    1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                                    1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (
                                    1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                                    1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                                    1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                                    1 << (CPP14Parser.Identifier - 64)) | (
                                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                                        (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                        (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                        1 << (CPP14Parser.Floatingliteral - 133)) | (
                                                    1 << (CPP14Parser.Stringliteral - 133)) | (
                                                1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                            1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                                    self.state = 493
                                    self.initializerlist(0)
                                    self.state = 495
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if _la == CPP14Parser.Comma:
                                        self.state = 494
                                        self.match(CPP14Parser.Comma)

                                self.state = 499
                                self.match(CPP14Parser.RightBrace)
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 502
                            self.match(CPP14Parser.RightBracket)
                            pass
                        elif token in [CPP14Parser.LeftParen]:
                            self.state = 503
                            self.match(CPP14Parser.LeftParen)
                            self.state = 505
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                                1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                                1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                                1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                                1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                                1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                                1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                    (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                                CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                                1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                                1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                                1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                                1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                                1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (
                                1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                                1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                                1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                                1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                                1 << (CPP14Parser.Identifier - 64)) | (
                                1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                                (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                                1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                                self.state = 504
                                self.initializerlist(0)

                            self.state = 507
                            self.match(CPP14Parser.RightParen)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [CPP14Parser.Arrow, CPP14Parser.Dot]:
                        self.state = 510
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Arrow or _la == CPP14Parser.Dot):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 516
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 66, self._ctx)
                        if la_ == 1:
                            self.state = 512
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Template:
                                self.state = 511
                                self.match(CPP14Parser.Template)

                            self.state = 514
                            self.idexpression()
                            pass

                        elif la_ == 2:
                            self.state = 515
                            self.pseudodestructorname()
                            pass

                        pass
                    elif token in [CPP14Parser.PlusPlus, CPP14Parser.MinusMinus]:
                        self.state = 518
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.PlusPlus or _la == CPP14Parser.MinusMinus):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 525
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 68, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PseudodestructornameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def templateargumentlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, i)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pseudodestructorname

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPseudodestructorname"):
                listener.enterPseudodestructorname(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPseudodestructorname"):
                listener.exitPseudodestructorname(self)

    def pseudodestructorname(self):

        localctx = CPP14Parser.PseudodestructornameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_pseudodestructorname)
        self._la = 0  # Token type
        try:
            self.state = 575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 79, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 527
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 69, self._ctx)
                if la_ == 1:
                    self.state = 526
                    self.nestednamespecifier(0)

                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 529
                    self.match(CPP14Parser.Identifier)
                    self.state = 535
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Less:
                        self.state = 530
                        self.match(CPP14Parser.Less)
                        self.state = 532
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                            1 << CPP14Parser.Enum) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (
                            1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (
                            1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (
                            1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                            1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                            1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                            1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                            1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 531
                            self.templateargumentlist(0)

                        self.state = 534
                        self.match(CPP14Parser.Greater)

                    self.state = 537
                    self.match(CPP14Parser.Doublecolon)

                self.state = 540
                self.match(CPP14Parser.Tilde)
                self.state = 541
                self.match(CPP14Parser.Identifier)
                self.state = 547
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 74, self._ctx)
                if la_ == 1:
                    self.state = 542
                    self.match(CPP14Parser.Less)
                    self.state = 544
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                        1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                        CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                        1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                        1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                        1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                        1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                        1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                        1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (
                        1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                        1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                        1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                        1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                        (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                        1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                        self.state = 543
                        self.templateargumentlist(0)

                    self.state = 546
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 549
                self.nestednamespecifier(0)
                self.state = 550
                self.match(CPP14Parser.Template)
                self.state = 551
                self.match(CPP14Parser.Identifier)
                self.state = 552
                self.match(CPP14Parser.Less)
                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                    (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                    1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 553
                    self.templateargumentlist(0)

                self.state = 556
                self.match(CPP14Parser.Greater)
                self.state = 557
                self.match(CPP14Parser.Doublecolon)
                self.state = 558
                self.match(CPP14Parser.Tilde)
                self.state = 559
                self.match(CPP14Parser.Identifier)
                self.state = 565
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 77, self._ctx)
                if la_ == 1:
                    self.state = 560
                    self.match(CPP14Parser.Less)
                    self.state = 562
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                        1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                        CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                        1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                        1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                        1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                        1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                        1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                        1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (
                        1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                        1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                        1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                        1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                        (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                        1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                        self.state = 561
                        self.templateargumentlist(0)

                    self.state = 564
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 567
                self.match(CPP14Parser.Tilde)
                self.state = 568
                self.match(CPP14Parser.Decltype)
                self.state = 569
                self.match(CPP14Parser.LeftParen)
                self.state = 572
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 78, self._ctx)
                if la_ == 1:
                    self.state = 570
                    self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 571
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 574
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext, 0)

        def unaryincdecexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryincdecexpressionContext, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def Sizeof(self):
            return self.getToken(CPP14Parser.Sizeof, 0)

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Alignof(self):
            return self.getToken(CPP14Parser.Alignof, 0)

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def newexpression(self):
            return self.getTypedRuleContext(CPP14Parser.NewexpressionContext, 0)

        def deleteexpression(self):
            return self.getTypedRuleContext(CPP14Parser.DeleteexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryexpression"):
                listener.enterUnaryexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryexpression"):
                listener.exitUnaryexpression(self)

    def unaryexpression(self):

        localctx = CPP14Parser.UnaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_unaryexpression)
        self._la = 0  # Token type
        try:
            self.state = 611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 83, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 577
                self.postfixexpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 578
                self.unaryincdecexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 579
                _la = self._input.LA(1)
                if not (((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & (
                                        (1 << (CPP14Parser.Plus - 84)) | (1 << (CPP14Parser.Minus - 84)) | (
                                    1 << (CPP14Parser.Star - 84)) | (1 << (CPP14Parser.And - 84)) | (
                            1 << (CPP14Parser.Or - 84)) | (1 << (CPP14Parser.Tilde - 84)) | (
                    1 << (CPP14Parser.Not - 84)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 580
                self.castexpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 581
                self.match(CPP14Parser.Sizeof)
                self.state = 594
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 81, self._ctx)
                if la_ == 1:
                    self.state = 582
                    self.unaryexpression()
                    pass

                elif la_ == 2:
                    self.state = 583
                    self.match(CPP14Parser.LeftParen)
                    self.state = 584
                    self.typespecifierseq()
                    self.state = 586
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Ellipsis - 78)) | (1 << (CPP14Parser.Identifier - 78)))) != 0):
                        self.state = 585
                        self.abstractdeclarator()

                    self.state = 588
                    self.match(CPP14Parser.RightParen)
                    pass

                elif la_ == 3:
                    self.state = 590
                    self.match(CPP14Parser.Ellipsis)
                    self.state = 591
                    self.match(CPP14Parser.LeftParen)
                    self.state = 592
                    self.match(CPP14Parser.Identifier)
                    self.state = 593
                    self.match(CPP14Parser.RightParen)
                    pass

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 596
                self.match(CPP14Parser.Alignof)
                self.state = 597
                self.match(CPP14Parser.LeftParen)
                self.state = 598
                self.typespecifierseq()
                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 599
                    self.abstractdeclarator()

                self.state = 602
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 604
                self.match(CPP14Parser.Noexcept)
                self.state = 605
                self.match(CPP14Parser.LeftParen)
                self.state = 606
                self.expression(0)
                self.state = 607
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 609
                self.newexpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 610
                self.deleteexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryincdecexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryincdecexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryincdecexpression"):
                listener.enterUnaryincdecexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryincdecexpression"):
                listener.exitUnaryincdecexpression(self)

    def unaryincdecexpression(self):

        localctx = CPP14Parser.UnaryincdecexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_unaryincdecexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.PlusPlus or _la == CPP14Parser.MinusMinus):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 614
            self.castexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def initializerlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InitializerlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, i)

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewexpression"):
                listener.enterNewexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewexpression"):
                listener.exitNewexpression(self)

    def newexpression(self):

        localctx = CPP14Parser.NewexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_newexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Doublecolon:
                self.state = 616
                self.match(CPP14Parser.Doublecolon)

            self.state = 619
            self.match(CPP14Parser.New)
            self.state = 624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 85, self._ctx)
            if la_ == 1:
                self.state = 620
                self.match(CPP14Parser.LeftParen)
                self.state = 621
                self.initializerlist(0)
                self.state = 622
                self.match(CPP14Parser.RightParen)

            self.state = 637
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32,
                         CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Decltype, CPP14Parser.Double,
                         CPP14Parser.Enum, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Short,
                         CPP14Parser.Signed, CPP14Parser.Struct, CPP14Parser.Typename, CPP14Parser.Union,
                         CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar,
                         CPP14Parser.Identifier]:
                self.state = 626
                self.typespecifierseq()
                self.state = 628
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 86, self._ctx)
                if la_ == 1:
                    self.state = 627
                    self.newdeclarator()

                pass
            elif token in [CPP14Parser.LeftParen]:
                self.state = 630
                self.match(CPP14Parser.LeftParen)
                self.state = 631
                self.typespecifierseq()
                self.state = 633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 632
                    self.abstractdeclarator()

                self.state = 635
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 92, self._ctx)
            if la_ == 1:
                self.state = 639
                self.match(CPP14Parser.LeftParen)
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                    1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                    1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                    (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                    1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 640
                    self.initializerlist(0)

                self.state = 643
                self.match(CPP14Parser.RightParen)

            elif la_ == 2:
                self.state = 644
                self.match(CPP14Parser.LeftBrace)
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                    1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                    1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                    (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                    1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 645
                    self.initializerlist(0)
                    self.state = 647
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Comma:
                        self.state = 646
                        self.match(CPP14Parser.Comma)

                self.state = 651
                self.match(CPP14Parser.RightBrace)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext, 0)

        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrnewdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewdeclarator"):
                listener.enterNewdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewdeclarator"):
                listener.exitNewdeclarator(self)

    def newdeclarator(self):

        localctx = CPP14Parser.NewdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_newdeclarator)
        try:
            self.state = 659
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                         CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 654
                self.ptroperator()
                self.state = 656
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 93, self._ctx)
                if la_ == 1:
                    self.state = 655
                    self.newdeclarator()

                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 658
                self.noptrnewdeclarator(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrnewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrnewdeclaratorContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrnewdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrnewdeclarator"):
                listener.enterNoptrnewdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrnewdeclarator"):
                listener.exitNoptrnewdeclarator(self)

    def noptrnewdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrnewdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 26
        self.enterRecursionRule(localctx, 26, self.RULE_noptrnewdeclarator, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.match(CPP14Parser.LeftBracket)
            self.state = 663
            self.expression(0)
            self.state = 664
            self.match(CPP14Parser.RightBracket)
            self.state = 666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 95, self._ctx)
            if la_ == 1:
                self.state = 665
                self.attributespecifierseq(0)

            self._ctx.stop = self._input.LT(-1)
            self.state = 677
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 97, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoptrnewdeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrnewdeclarator)
                    self.state = 668
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 669
                    self.match(CPP14Parser.LeftBracket)
                    self.state = 670
                    self.constantexpression()
                    self.state = 671
                    self.match(CPP14Parser.RightBracket)
                    self.state = 673
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 96, self._ctx)
                    if la_ == 1:
                        self.state = 672
                        self.attributespecifierseq(0)

                self.state = 679
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 97, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class DeleteexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_deleteexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeleteexpression"):
                listener.enterDeleteexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeleteexpression"):
                listener.exitDeleteexpression(self)

    def deleteexpression(self):

        localctx = CPP14Parser.DeleteexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_deleteexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Doublecolon:
                self.state = 680
                self.match(CPP14Parser.Doublecolon)

            self.state = 683
            self.match(CPP14Parser.Delete)
            self.state = 686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 99, self._ctx)
            if la_ == 1:
                self.state = 684
                self.match(CPP14Parser.LeftBracket)
                self.state = 685
                self.match(CPP14Parser.RightBracket)

            self.state = 688
            self.castexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_castexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCastexpression"):
                listener.enterCastexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCastexpression"):
                listener.exitCastexpression(self)

    def castexpression(self):

        localctx = CPP14Parser.CastexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_castexpression)
        self._la = 0  # Token type
        try:
            self.state = 699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 101, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 690
                self.unaryexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 691
                self.match(CPP14Parser.LeftParen)
                self.state = 692
                self.typespecifierseq()
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 693
                    self.abstractdeclarator()

                self.state = 696
                self.match(CPP14Parser.RightParen)
                self.state = 697
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PmexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def pmexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PmexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pmexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPmexpression"):
                listener.enterPmexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPmexpression"):
                listener.exitPmexpression(self)

    def pmexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PmexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 32
        self.enterRecursionRule(localctx, 32, self.RULE_pmexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.castexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 709
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 102, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.PmexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                    self.state = 704
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 705
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.ArrowStar or _la == CPP14Parser.DotStar):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 706
                    self.castexpression()
                self.state = 711
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 102, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class MultiplicativeexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pmexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PmexpressionContext, 0)

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14Parser.MultiplicativeexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_multiplicativeexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMultiplicativeexpression"):
                listener.enterMultiplicativeexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMultiplicativeexpression"):
                listener.exitMultiplicativeexpression(self)

    def multiplicativeexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.MultiplicativeexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_multiplicativeexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.pmexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 720
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 103, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                    self.state = 715
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 716
                    _la = self._input.LA(1)
                    if not (((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & (
                            (1 << (CPP14Parser.Star - 86)) | (1 << (CPP14Parser.Div - 86)) | (
                        1 << (CPP14Parser.Mod - 86)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 717
                    self.pmexpression(0)
                self.state = 722
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 103, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AdditiveexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14Parser.MultiplicativeexpressionContext, 0)

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AdditiveexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_additiveexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAdditiveexpression"):
                listener.enterAdditiveexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAdditiveexpression"):
                listener.exitAdditiveexpression(self)

    def additiveexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AdditiveexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_additiveexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.multiplicativeexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 731
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 104, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AdditiveexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                    self.state = 726
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 727
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Plus or _la == CPP14Parser.Minus):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 728
                    self.multiplicativeexpression(0)
                self.state = 733
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 104, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ShiftexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AdditiveexpressionContext, 0)

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext, 0)

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_shiftexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShiftexpression"):
                listener.enterShiftexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShiftexpression"):
                listener.exitShiftexpression(self)

    def shiftexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ShiftexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 38
        self.enterRecursionRule(localctx, 38, self.RULE_shiftexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.additiveexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 746
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 106, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ShiftexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftexpression)
                    self.state = 737
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 741
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.LeftShift]:
                        self.state = 738
                        self.match(CPP14Parser.LeftShift)
                        pass
                    elif token in [CPP14Parser.Greater]:
                        self.state = 739
                        self.match(CPP14Parser.Greater)
                        self.state = 740
                        self.match(CPP14Parser.Greater)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 743
                    self.additiveexpression(0)
                self.state = 748
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 106, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class RelationalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext, 0)

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_relationalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelationalexpression"):
                listener.enterRelationalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelationalexpression"):
                listener.exitRelationalexpression(self)

    def relationalexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.RelationalexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 40
        self.enterRecursionRule(localctx, 40, self.RULE_relationalexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.shiftexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 757
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 107, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                    self.state = 752
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 753
                    _la = self._input.LA(1)
                    if not (((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & (
                                (1 << (CPP14Parser.Less - 95)) | (1 << (CPP14Parser.Greater - 95)) | (
                            1 << (CPP14Parser.LessEqual - 95)) | (1 << (CPP14Parser.GreaterEqual - 95)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 754
                    self.shiftexpression(0)
                self.state = 759
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 107, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EqualityexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext, 0)

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_equalityexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEqualityexpression"):
                listener.enterEqualityexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEqualityexpression"):
                listener.exitEqualityexpression(self)

    def equalityexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EqualityexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 42
        self.enterRecursionRule(localctx, 42, self.RULE_equalityexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.relationalexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 768
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 108, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                    self.state = 763
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 764
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Equal or _la == CPP14Parser.NotEqual):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 765
                    self.relationalexpression(0)
                self.state = 770
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 108, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AndexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, 0)

        def andexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AndexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_andexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAndexpression"):
                listener.enterAndexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAndexpression"):
                listener.exitAndexpression(self)

    def andexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AndexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 44
        self.enterRecursionRule(localctx, 44, self.RULE_andexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.equalityexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 779
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 109, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AndexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_andexpression)
                    self.state = 774
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 775
                    self.match(CPP14Parser.And)
                    self.state = 776
                    self.equalityexpression(0)
                self.state = 781
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 109, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExclusiveorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AndexpressionContext, 0)

        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ExclusiveorexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exclusiveorexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExclusiveorexpression"):
                listener.enterExclusiveorexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExclusiveorexpression"):
                listener.exitExclusiveorexpression(self)

    def exclusiveorexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ExclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 46
        self.enterRecursionRule(localctx, 46, self.RULE_exclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.andexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 790
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 110, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ExclusiveorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusiveorexpression)
                    self.state = 785
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 786
                    self.match(CPP14Parser.Caret)
                    self.state = 787
                    self.andexpression(0)
                self.state = 792
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 110, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class InclusiveorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ExclusiveorexpressionContext, 0)

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.InclusiveorexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_inclusiveorexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInclusiveorexpression"):
                listener.enterInclusiveorexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInclusiveorexpression"):
                listener.exitInclusiveorexpression(self)

    def inclusiveorexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 48
        self.enterRecursionRule(localctx, 48, self.RULE_inclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.exclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 801
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 111, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InclusiveorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_inclusiveorexpression)
                    self.state = 796
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 797
                    self.match(CPP14Parser.Or)
                    self.state = 798
                    self.exclusiveorexpression(0)
                self.state = 803
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 111, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalandexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.InclusiveorexpressionContext, 0)

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalandexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalandexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalandexpression"):
                listener.enterLogicalandexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalandexpression"):
                listener.exitLogicalandexpression(self)

    def logicalandexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.LogicalandexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 50
        self.enterRecursionRule(localctx, 50, self.RULE_logicalandexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.inclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 812
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 112, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.LogicalandexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalandexpression)
                    self.state = 807
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 808
                    self.match(CPP14Parser.AndAnd)
                    self.state = 809
                    self.inclusiveorexpression(0)
                self.state = 814
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 112, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalandexpressionContext, 0)

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalorexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalorexpression"):
                listener.enterLogicalorexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalorexpression"):
                listener.exitLogicalorexpression(self)

    def logicalorexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.LogicalorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_logicalorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.logicalandexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 823
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 113, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.LogicalorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalorexpression)
                    self.state = 818
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 819
                    self.match(CPP14Parser.OrOr)
                    self.state = 820
                    self.logicalandexpression(0)
                self.state = 825
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 113, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TernaryconditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ternaryconditionalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTernaryconditionalexpression"):
                listener.enterTernaryconditionalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTernaryconditionalexpression"):
                listener.exitTernaryconditionalexpression(self)

    def ternaryconditionalexpression(self):

        localctx = CPP14Parser.TernaryconditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_ternaryconditionalexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.logicalorexpression(0)
            self.state = 827
            self.match(CPP14Parser.Question)
            self.state = 828
            self.expression(0)
            self.state = 829
            self.match(CPP14Parser.Colon)
            self.state = 830
            self.assignmentexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryconditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryconditionalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryconditionalexpression"):
                listener.enterUnaryconditionalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryconditionalexpression"):
                listener.exitUnaryconditionalexpression(self)

    def unaryconditionalexpression(self):

        localctx = CPP14Parser.UnaryconditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_unaryconditionalexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.logicalorexpression(0)
            self.state = 833
            self.match(CPP14Parser.UnaryCondition)
            self.state = 834
            self.assignmentexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def assignmentoperator(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentoperatorContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def ternaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.TernaryconditionalexpressionContext, 0)

        def unaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryconditionalexpressionContext, 0)

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentexpression"):
                listener.enterAssignmentexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentexpression"):
                listener.exitAssignmentexpression(self)

    def assignmentexpression(self):

        localctx = CPP14Parser.AssignmentexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_assignmentexpression)
        self._la = 0  # Token type
        try:
            self.state = 857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 119, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 836
                self.logicalorexpression(0)
                self.state = 849
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 117, self._ctx)
                if la_ == 1:
                    self.state = 837
                    self.assignmentoperator()
                    self.state = 847
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char,
                                 CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.Double, CPP14Parser.Dynamic_cast,
                                 CPP14Parser.FalseToken, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long,
                                 CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed,
                                 CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw,
                                 CPP14Parser.TrueToken, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.Unsigned,
                                 CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                                 CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                                 CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                                 CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Integerliteral,
                                 CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral,
                                 CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral,
                                 CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                        self.state = 838
                        self.assignmentexpression()
                        pass
                    elif token in [CPP14Parser.LeftBrace]:
                        self.state = 839
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 844
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                            CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                            1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                            1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                            1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                            1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                            1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (
                            1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                            1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                            1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                            1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                            1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 840
                            self.initializerlist(0)
                            self.state = 842
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Comma:
                                self.state = 841
                                self.match(CPP14Parser.Comma)

                        self.state = 846
                        self.match(CPP14Parser.RightBrace)
                        pass
                    else:
                        raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 851
                self.ternaryconditionalexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 852
                self.unaryconditionalexpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 853
                self.match(CPP14Parser.Throw)
                self.state = 855
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 118, self._ctx)
                if la_ == 1:
                    self.state = 854
                    self.assignmentexpression()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentoperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentoperator"):
                listener.enterAssignmentoperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentoperator"):
                listener.exitAssignmentoperator(self)

    def assignmentoperator(self):

        localctx = CPP14Parser.AssignmentoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_assignmentoperator)
        try:
            self.state = 872
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 859
                self.match(CPP14Parser.Assign)
                pass
            elif token in [CPP14Parser.StarAssign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 860
                self.match(CPP14Parser.StarAssign)
                pass
            elif token in [CPP14Parser.DivAssign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 861
                self.match(CPP14Parser.DivAssign)
                pass
            elif token in [CPP14Parser.ModAssign]:
                self.enterOuterAlt(localctx, 4)
                self.state = 862
                self.match(CPP14Parser.ModAssign)
                pass
            elif token in [CPP14Parser.PlusAssign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 863
                self.match(CPP14Parser.PlusAssign)
                pass
            elif token in [CPP14Parser.MinusAssign]:
                self.enterOuterAlt(localctx, 6)
                self.state = 864
                self.match(CPP14Parser.MinusAssign)
                pass
            elif token in [CPP14Parser.Greater]:
                self.enterOuterAlt(localctx, 7)
                self.state = 865
                self.match(CPP14Parser.Greater)
                self.state = 866
                self.match(CPP14Parser.Greater)
                self.state = 867
                self.match(CPP14Parser.Assign)
                pass
            elif token in [CPP14Parser.LeftShiftAssign]:
                self.enterOuterAlt(localctx, 8)
                self.state = 868
                self.match(CPP14Parser.LeftShiftAssign)
                pass
            elif token in [CPP14Parser.AndAssign]:
                self.enterOuterAlt(localctx, 9)
                self.state = 869
                self.match(CPP14Parser.AndAssign)
                pass
            elif token in [CPP14Parser.XorAssign]:
                self.enterOuterAlt(localctx, 10)
                self.state = 870
                self.match(CPP14Parser.XorAssign)
                pass
            elif token in [CPP14Parser.OrAssign]:
                self.enterOuterAlt(localctx, 11)
                self.state = 871
                self.match(CPP14Parser.OrAssign)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

    def expression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 62
        self.enterRecursionRule(localctx, 62, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.assignmentexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 882
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 121, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 877
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 878
                    self.match(CPP14Parser.Comma)
                    self.state = 879
                    self.assignmentexpression()
                self.state = 884
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 121, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ConstantexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def ternaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.TernaryconditionalexpressionContext, 0)

        def unaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryconditionalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_constantexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstantexpression"):
                listener.enterConstantexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstantexpression"):
                listener.exitConstantexpression(self)

    def constantexpression(self):

        localctx = CPP14Parser.ConstantexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_constantexpression)
        try:
            self.state = 888
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 122, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 885
                self.logicalorexpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 886
                self.ternaryconditionalexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 887
                self.unaryconditionalexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def casestatement(self):
            return self.getTypedRuleContext(CPP14Parser.CasestatementContext, 0)

        def defaultstatement(self):
            return self.getTypedRuleContext(CPP14Parser.DefaultstatementContext, 0)

        def If(self):
            return self.getToken(CPP14Parser.If, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext, 0)

        def Do(self):
            return self.getToken(CPP14Parser.Do, 0)

        def While(self):
            return self.getToken(CPP14Parser.While, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def For(self):
            return self.getToken(CPP14Parser.For, 0)

        def Return(self):
            return self.getToken(CPP14Parser.Return, 0)

        def gotostatement(self):
            return self.getTypedRuleContext(CPP14Parser.GotostatementContext, 0)

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def tryblock(self):
            return self.getTypedRuleContext(CPP14Parser.TryblockContext, 0)

        def attributespecifierseq(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierseqContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, i)

        def Switch(self):
            return self.getToken(CPP14Parser.Switch, 0)

        def Break(self):
            return self.getToken(CPP14Parser.Break, 0)

        def Continue(self):
            return self.getToken(CPP14Parser.Continue, 0)

        def elsestatement(self):
            return self.getTypedRuleContext(CPP14Parser.ElsestatementContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def forinitstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ForinitstatementContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext, 0)

        def Asm(self):
            return self.getToken(CPP14Parser.Asm, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

    def statement(self):

        localctx = CPP14Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_statement)
        self._la = 0  # Token type
        try:
            self.state = 1062
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 152, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 891
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 123, self._ctx)
                if la_ == 1:
                    self.state = 890
                    self.attributespecifierseq(0)

                self.state = 990
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 139, self._ctx)
                if la_ == 1:
                    self.state = 893
                    self.match(CPP14Parser.Identifier)
                    self.state = 894
                    self.match(CPP14Parser.Colon)
                    self.state = 895
                    self.statement()
                    pass

                elif la_ == 2:
                    self.state = 896
                    self.casestatement()
                    pass

                elif la_ == 3:
                    self.state = 897
                    self.defaultstatement()
                    pass

                elif la_ == 4:
                    self.state = 899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                            (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                        1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                        1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                        1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                        1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                        1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (
                        1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (
                        1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                        1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                        1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                        1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                        (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                        1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                        self.state = 898
                        self.expression(0)

                    self.state = 901
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 5:
                    self.state = 902
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 906
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                        1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (
                        1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (
                        1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (
                        1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (
                        1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (
                        1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                        1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                        1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (1 << CPP14Parser.Short) | (
                        1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static) | (
                        1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (
                        1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and (
                        (1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                        1 << (CPP14Parser.Try - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (
                        1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                        1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                        1 << (CPP14Parser.Using - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (
                        1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (
                        1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.While - 64)) | (
                        1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                        1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                        1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                        1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (
                        1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                        1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                        1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                        1 << (CPP14Parser.Semi - 64)) | (1 << (CPP14Parser.Ellipsis - 64)) | (
                        1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                            (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                            (1 << (CPP14Parser.Characterliteral - 133)) | (
                                            1 << (CPP14Parser.Floatingliteral - 133)) | (
                                        1 << (CPP14Parser.Stringliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                        self.state = 903
                        self.statement()
                        self.state = 908
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 909
                    self.match(CPP14Parser.RightBrace)
                    pass

                elif la_ == 6:
                    self.state = 910
                    self.match(CPP14Parser.If)
                    self.state = 911
                    self.match(CPP14Parser.LeftParen)
                    self.state = 912
                    self.condition()
                    self.state = 913
                    self.match(CPP14Parser.RightParen)
                    self.state = 914
                    self.statement()
                    self.state = 916
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 126, self._ctx)
                    if la_ == 1:
                        self.state = 915
                        self.elsestatement()

                    pass

                elif la_ == 7:
                    self.state = 918
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Switch or _la == CPP14Parser.While):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 919
                    self.match(CPP14Parser.LeftParen)
                    self.state = 920
                    self.condition()
                    self.state = 921
                    self.match(CPP14Parser.RightParen)
                    self.state = 922
                    self.statement()
                    pass

                elif la_ == 8:
                    self.state = 924
                    self.match(CPP14Parser.Do)
                    self.state = 925
                    self.statement()
                    self.state = 926
                    self.match(CPP14Parser.While)
                    self.state = 927
                    self.match(CPP14Parser.LeftParen)
                    self.state = 928
                    self.expression(0)
                    self.state = 929
                    self.match(CPP14Parser.RightParen)
                    self.state = 930
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 9:
                    self.state = 932
                    self.match(CPP14Parser.For)

                    self.state = 933
                    self.match(CPP14Parser.LeftParen)
                    self.state = 959
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 133, self._ctx)
                    if la_ == 1:
                        self.state = 934
                        self.forinitstatement()
                        self.state = 936
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                            1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (
                            1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (
                            1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (
                            1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                            1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                            1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (
                            1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (
                            1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (
                            1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and (
                            (1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                            1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (
                            1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                            1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                            1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                            1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                            1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                            1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (
                            1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                            1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                            1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                            1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                            1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 935
                            self.condition()

                        self.state = 938
                        self.match(CPP14Parser.Semi)
                        self.state = 940
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                            CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                            1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                            1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                            1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                            1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                            1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                            1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (
                            1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                            1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                            1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                            1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                            (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                            1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 939
                            self.expression(0)

                        pass

                    elif la_ == 2:
                        self.state = 943
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                            self.state = 942
                            self.attributespecifierseq(0)

                        self.state = 945
                        self.declspecifierseq()
                        self.state = 946
                        self.declarator()
                        self.state = 947
                        self.match(CPP14Parser.Colon)
                        self.state = 957
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char,
                                     CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast,
                                     CPP14Parser.Decltype, CPP14Parser.Delete, CPP14Parser.Double,
                                     CPP14Parser.Dynamic_cast, CPP14Parser.FalseToken, CPP14Parser.Float,
                                     CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept,
                                     CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.Reinterpret_cast,
                                     CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof, CPP14Parser.Static_cast,
                                     CPP14Parser.This, CPP14Parser.Throw, CPP14Parser.TrueToken, CPP14Parser.Typeid,
                                     CPP14Parser.Typename, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Wchar,
                                     CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus,
                                     CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                                     CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                                     CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Integerliteral,
                                     CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral,
                                     CPP14Parser.Stringliteral, CPP14Parser.Userdefinedintegerliteral,
                                     CPP14Parser.Userdefinedfloatingliteral, CPP14Parser.Userdefinedstringliteral,
                                     CPP14Parser.Userdefinedcharacterliteral]:
                            self.state = 948
                            self.expression(0)
                            pass
                        elif token in [CPP14Parser.LeftBrace]:
                            self.state = 949
                            self.match(CPP14Parser.LeftBrace)
                            self.state = 954
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                                1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                                1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                                1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                                1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                                1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                                1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                    (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                                CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                                1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                                1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                                1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                                1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                                1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (
                                1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                                1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                                1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                                1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                                1 << (CPP14Parser.Identifier - 64)) | (
                                1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                                (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                                1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                                self.state = 950
                                self.initializerlist(0)
                                self.state = 952
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == CPP14Parser.Comma:
                                    self.state = 951
                                    self.match(CPP14Parser.Comma)

                            self.state = 956
                            self.match(CPP14Parser.RightBrace)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    self.state = 961
                    self.match(CPP14Parser.RightParen)
                    self.state = 962
                    self.statement()
                    pass

                elif la_ == 10:
                    self.state = 964
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Break or _la == CPP14Parser.Continue):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 965
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 11:
                    self.state = 966
                    self.match(CPP14Parser.Return)
                    self.state = 978
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char,
                                 CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.Double, CPP14Parser.Dynamic_cast,
                                 CPP14Parser.FalseToken, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long,
                                 CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed,
                                 CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw,
                                 CPP14Parser.TrueToken, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.Unsigned,
                                 CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                                 CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                                 CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                                 CPP14Parser.Doublecolon, CPP14Parser.Semi, CPP14Parser.Identifier,
                                 CPP14Parser.Integerliteral, CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral,
                                 CPP14Parser.Stringliteral, CPP14Parser.Userdefinedintegerliteral,
                                 CPP14Parser.Userdefinedfloatingliteral, CPP14Parser.Userdefinedstringliteral,
                                 CPP14Parser.Userdefinedcharacterliteral]:
                        self.state = 968
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                            CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                            1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                            1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                            1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                            1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                            1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                            1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (
                            1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                            1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                            1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                            1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                            (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                            1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 967
                            self.expression(0)

                        pass
                    elif token in [CPP14Parser.LeftBrace]:
                        self.state = 970
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 975
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                            CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                            1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                            1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                            1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                            1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                            1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (
                            1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                            1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                            1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                            1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                            1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 971
                            self.initializerlist(0)
                            self.state = 973
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Comma:
                                self.state = 972
                                self.match(CPP14Parser.Comma)

                        self.state = 977
                        self.match(CPP14Parser.RightBrace)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 980
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 12:
                    self.state = 981
                    self.gotostatement()
                    pass

                elif la_ == 13:
                    self.state = 982
                    self.match(CPP14Parser.Using)
                    self.state = 983
                    self.match(CPP14Parser.Namespace)
                    self.state = 985
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 138, self._ctx)
                    if la_ == 1:
                        self.state = 984
                        self.nestednamespecifier(0)

                    self.state = 987
                    self.match(CPP14Parser.Identifier)
                    self.state = 988
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 14:
                    self.state = 989
                    self.tryblock()
                    pass

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 992
                self.attributespecifierseq(0)
                self.state = 994
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 140, self._ctx)
                if la_ == 1:
                    self.state = 993
                    self.declspecifierseq()

                self.state = 996
                self.initdeclaratorlist(0)
                self.state = 997
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1000
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 141, self._ctx)
                if la_ == 1:
                    self.state = 999
                    self.declspecifierseq()

                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Operator or ((((_la - 78)) & ~0x3f) == 0 and (
                    (1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.Tilde - 78)) | (
                    1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1002
                    self.initdeclaratorlist(0)

                self.state = 1005
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1006
                self.match(CPP14Parser.Asm)
                self.state = 1007
                self.match(CPP14Parser.LeftParen)
                self.state = 1008
                self.match(CPP14Parser.Stringliteral)
                self.state = 1009
                self.match(CPP14Parser.RightParen)
                self.state = 1010
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1011
                self.match(CPP14Parser.Namespace)
                self.state = 1012
                self.match(CPP14Parser.Identifier)
                self.state = 1013
                self.match(CPP14Parser.Assign)
                self.state = 1015
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 143, self._ctx)
                if la_ == 1:
                    self.state = 1014
                    self.nestednamespecifier(0)

                self.state = 1017
                self.match(CPP14Parser.Identifier)
                self.state = 1018
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1019
                self.match(CPP14Parser.Using)
                self.state = 1037
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 148, self._ctx)
                if la_ == 1:
                    self.state = 1025
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Doublecolon]:
                        self.state = 1020
                        self.match(CPP14Parser.Doublecolon)
                        pass
                    elif token in [CPP14Parser.Decltype, CPP14Parser.Typename, CPP14Parser.Identifier]:
                        self.state = 1022
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Typename:
                            self.state = 1021
                            self.match(CPP14Parser.Typename)

                        self.state = 1024
                        self.nestednamespecifier(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1027
                    self.unqualifiedid()
                    pass

                elif la_ == 2:
                    self.state = 1028
                    self.match(CPP14Parser.Identifier)
                    self.state = 1030
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1029
                        self.attributespecifierseq(0)

                    self.state = 1032
                    self.match(CPP14Parser.Assign)
                    self.state = 1033
                    self.typespecifierseq()
                    self.state = 1035
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Ellipsis - 78)) | (1 << (CPP14Parser.Identifier - 78)))) != 0):
                        self.state = 1034
                        self.abstractdeclarator()

                    pass

                self.state = 1039
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1041
                self.match(CPP14Parser.Static_assert)
                self.state = 1042
                self.match(CPP14Parser.LeftParen)
                self.state = 1043
                self.constantexpression()
                self.state = 1044
                self.match(CPP14Parser.Comma)
                self.state = 1045
                self.match(CPP14Parser.Stringliteral)
                self.state = 1046
                self.match(CPP14Parser.RightParen)
                self.state = 1047
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1049
                self.match(CPP14Parser.Enum)
                self.state = 1051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Class or _la == CPP14Parser.Struct:
                    self.state = 1050
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Class or _la == CPP14Parser.Struct):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 1054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1053
                    self.attributespecifierseq(0)

                self.state = 1056
                self.match(CPP14Parser.Identifier)
                self.state = 1059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1057
                    self.match(CPP14Parser.Colon)
                    self.state = 1058
                    self.typespecifierseq()

                self.state = 1061
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CasestatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Case(self):
            return self.getToken(CPP14Parser.Case, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_casestatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCasestatement"):
                listener.enterCasestatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCasestatement"):
                listener.exitCasestatement(self)

    def casestatement(self):

        localctx = CPP14Parser.CasestatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_casestatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.match(CPP14Parser.Case)
            self.state = 1065
            self.constantexpression()
            self.state = 1066
            self.match(CPP14Parser.Colon)
            self.state = 1067
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_defaultstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDefaultstatement"):
                listener.enterDefaultstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDefaultstatement"):
                listener.exitDefaultstatement(self)

    def defaultstatement(self):

        localctx = CPP14Parser.DefaultstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_defaultstatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.match(CPP14Parser.Default)
            self.state = 1070
            self.match(CPP14Parser.Colon)
            self.state = 1071
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElsestatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(CPP14Parser.Else, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_elsestatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElsestatement"):
                listener.enterElsestatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElsestatement"):
                listener.exitElsestatement(self)

    def elsestatement(self):

        localctx = CPP14Parser.ElsestatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_elsestatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.match(CPP14Parser.Else)
            self.state = 1074
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_condition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCondition"):
                listener.enterCondition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCondition"):
                listener.exitCondition(self)

    def condition(self):

        localctx = CPP14Parser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_condition)
        self._la = 0  # Token type
        try:
            self.state = 1104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 160, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1076
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1077
                    self.attributespecifierseq(0)

                self.state = 1080
                self.declspecifierseq()
                self.state = 1081
                self.declarator()
                self.state = 1102
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Assign]:
                    self.state = 1082
                    self.match(CPP14Parser.Assign)
                    self.state = 1092
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char,
                                 CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.Double, CPP14Parser.Dynamic_cast,
                                 CPP14Parser.FalseToken, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long,
                                 CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed,
                                 CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw,
                                 CPP14Parser.TrueToken, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.Unsigned,
                                 CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                                 CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                                 CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                                 CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Integerliteral,
                                 CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral,
                                 CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral,
                                 CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                        self.state = 1083
                        self.assignmentexpression()
                        pass
                    elif token in [CPP14Parser.LeftBrace]:
                        self.state = 1084
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 1089
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                            CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                            1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                            1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                            1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                            1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                            1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (
                            1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                            1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                            1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                            1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                            1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 1085
                            self.initializerlist(0)
                            self.state = 1087
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Comma:
                                self.state = 1086
                                self.match(CPP14Parser.Comma)

                        self.state = 1091
                        self.match(CPP14Parser.RightBrace)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 1094
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 1099
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                            (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                        1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                        1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                        1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                        1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                        1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                        1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                        1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (
                        1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                        1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                        1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                        1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                        (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                        1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                        self.state = 1095
                        self.initializerlist(0)
                        self.state = 1097
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Comma:
                            self.state = 1096
                            self.match(CPP14Parser.Comma)

                    self.state = 1101
                    self.match(CPP14Parser.RightBrace)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForinitstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_forinitstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForinitstatement"):
                listener.enterForinitstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForinitstatement"):
                listener.exitForinitstatement(self)

    def forinitstatement(self):

        localctx = CPP14Parser.ForinitstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_forinitstatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 165, self._ctx)
            if la_ == 1:
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                    1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                    1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                        (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                        (1 << (CPP14Parser.Characterliteral - 133)) | (
                                        1 << (CPP14Parser.Floatingliteral - 133)) | (
                                    1 << (CPP14Parser.Stringliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 1106
                    self.expression(0)

                pass

            elif la_ == 2:
                self.state = 1110
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 162, self._ctx)
                if la_ == 1:
                    self.state = 1109
                    self.declspecifierseq()

                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Operator or ((((_la - 78)) & ~0x3f) == 0 and (
                    (1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.Tilde - 78)) | (
                    1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1112
                    self.initdeclaratorlist(0)

                pass

            elif la_ == 3:
                self.state = 1115
                self.attributespecifierseq(0)
                self.state = 1117
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 164, self._ctx)
                if la_ == 1:
                    self.state = 1116
                    self.declspecifierseq()

                self.state = 1119
                self.initdeclaratorlist(0)
                pass

            self.state = 1123
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GotostatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Goto(self):
            return self.getToken(CPP14Parser.Goto, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_gotostatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGotostatement"):
                listener.enterGotostatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGotostatement"):
                listener.exitGotostatement(self)

    def gotostatement(self):

        localctx = CPP14Parser.GotostatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_gotostatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(CPP14Parser.Goto)
            self.state = 1126
            self.match(CPP14Parser.Identifier)
            self.state = 1127
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declarationseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclarationseq"):
                listener.enterDeclarationseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclarationseq"):
                listener.exitDeclarationseq(self)

    def declarationseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.DeclarationseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_declarationseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.declaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1136
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 166, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.DeclarationseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_declarationseq)
                    self.state = 1132
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1133
                    self.declaration()
                self.state = 1138
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 166, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext, 0)

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def handler(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.HandlerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.HandlerContext, i)

        def Asm(self):
            return self.getToken(CPP14Parser.Asm, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclaration"):
                listener.enterDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclaration"):
                listener.exitDeclaration(self)

    def declaration(self):

        localctx = CPP14Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_declaration)
        self._la = 0  # Token type
        try:
            self.state = 1307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 199, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1140
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 167, self._ctx)
                if la_ == 1:
                    self.state = 1139
                    self.declspecifierseq()

                self.state = 1143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Operator or ((((_la - 78)) & ~0x3f) == 0 and (
                    (1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.Tilde - 78)) | (
                    1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1142
                    self.initdeclaratorlist(0)

                self.state = 1145
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1146
                self.attributespecifierseq(0)
                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (
                    1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (
                    1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (
                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (
                    1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                    1 << CPP14Parser.Static) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Thread_local))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                    1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                    1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (
                    1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (
                    1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (
                    1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                    1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1148
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 169, self._ctx)
                    if la_ == 1:
                        self.state = 1147
                        self.declspecifierseq()

                    self.state = 1150
                    self.initdeclaratorlist(0)

                self.state = 1153
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1155
                    self.attributespecifierseq(0)

                self.state = 1207
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Using]:
                    self.state = 1158
                    self.match(CPP14Parser.Using)
                    self.state = 1159
                    self.match(CPP14Parser.Namespace)
                    self.state = 1161
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 172, self._ctx)
                    if la_ == 1:
                        self.state = 1160
                        self.nestednamespecifier(0)

                    self.state = 1163
                    self.match(CPP14Parser.Identifier)
                    self.state = 1164
                    self.match(CPP14Parser.Semi)
                    pass
                elif token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16,
                               CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Constexpr,
                               CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Explicit,
                               CPP14Parser.Extern, CPP14Parser.Float, CPP14Parser.Friend, CPP14Parser.Inline,
                               CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Mutable, CPP14Parser.Operator,
                               CPP14Parser.Register, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Static,
                               CPP14Parser.Struct, CPP14Parser.Thread_local, CPP14Parser.Typedef, CPP14Parser.Typename,
                               CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Virtual, CPP14Parser.Void,
                               CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.Star,
                               CPP14Parser.And, CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Ellipsis,
                               CPP14Parser.Identifier]:
                    self.state = 1166
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 173, self._ctx)
                    if la_ == 1:
                        self.state = 1165
                        self.declspecifierseq()

                    self.state = 1168
                    self.declarator()
                    self.state = 1170
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Final or _la == CPP14Parser.Override:
                        self.state = 1169
                        self.virtspecifierseq(0)

                    self.state = 1205
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.LeftBrace, CPP14Parser.Colon]:
                        self.state = 1174
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Colon:
                            self.state = 1172
                            self.match(CPP14Parser.Colon)
                            self.state = 1173
                            self.meminitializerlist()

                        self.state = 1176
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 1180
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                            1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (
                            1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (
                            1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (
                            1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (
                            1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                            1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (
                            1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                            1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                            1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                            1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (
                            1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (
                            1 << CPP14Parser.This) | (1 << CPP14Parser.Thread_local))) != 0) or (
                                (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                            CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                            1 << (CPP14Parser.Try - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (
                            1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                            1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                            1 << (CPP14Parser.Using - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (
                            1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (
                            1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.While - 64)) | (
                            1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                            1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                            1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                            1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (
                            1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                            1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                            1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                            1 << (CPP14Parser.Semi - 64)) | (1 << (CPP14Parser.Ellipsis - 64)) | (
                            1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 1177
                            self.statement()
                            self.state = 1182
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1183
                        self.match(CPP14Parser.RightBrace)
                        pass
                    elif token in [CPP14Parser.Try]:
                        self.state = 1184
                        self.match(CPP14Parser.Try)
                        self.state = 1187
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Colon:
                            self.state = 1185
                            self.match(CPP14Parser.Colon)
                            self.state = 1186
                            self.meminitializerlist()

                        self.state = 1189
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 1193
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                            1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (
                            1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (
                            1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (
                            1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (
                            1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                            1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (
                            1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                            1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                            1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                            1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (
                            1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (
                            1 << CPP14Parser.This) | (1 << CPP14Parser.Thread_local))) != 0) or (
                                (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                            CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                            1 << (CPP14Parser.Try - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (
                            1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                            1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                            1 << (CPP14Parser.Using - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (
                            1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (
                            1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.While - 64)) | (
                            1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                            1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                            1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                            1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (
                            1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                            1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                            1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                            1 << (CPP14Parser.Semi - 64)) | (1 << (CPP14Parser.Ellipsis - 64)) | (
                            1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 1190
                            self.statement()
                            self.state = 1195
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1196
                        self.match(CPP14Parser.RightBrace)
                        self.state = 1198
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1197
                                self.handler()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1200
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 179, self._ctx)

                        pass
                    elif token in [CPP14Parser.Assign]:
                        self.state = 1202
                        self.match(CPP14Parser.Assign)
                        self.state = 1203
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Default or _la == CPP14Parser.Delete):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1204
                        self.match(CPP14Parser.Semi)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1209
                self.match(CPP14Parser.Asm)
                self.state = 1210
                self.match(CPP14Parser.LeftParen)
                self.state = 1211
                self.match(CPP14Parser.Stringliteral)
                self.state = 1212
                self.match(CPP14Parser.RightParen)
                self.state = 1213
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1214
                self.match(CPP14Parser.Namespace)
                self.state = 1215
                self.match(CPP14Parser.Identifier)
                self.state = 1216
                self.match(CPP14Parser.Assign)
                self.state = 1218
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 182, self._ctx)
                if la_ == 1:
                    self.state = 1217
                    self.nestednamespecifier(0)

                self.state = 1220
                self.match(CPP14Parser.Identifier)
                self.state = 1221
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1222
                self.match(CPP14Parser.Using)
                self.state = 1244
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 187, self._ctx)
                if la_ == 1:
                    self.state = 1228
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Doublecolon]:
                        self.state = 1223
                        self.match(CPP14Parser.Doublecolon)
                        pass
                    elif token in [CPP14Parser.Decltype, CPP14Parser.Typename, CPP14Parser.Identifier]:
                        self.state = 1225
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Typename:
                            self.state = 1224
                            self.match(CPP14Parser.Typename)

                        self.state = 1227
                        self.nestednamespecifier(0)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1230
                    self.unqualifiedid()
                    self.state = 1231
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 2:
                    self.state = 1233
                    self.match(CPP14Parser.Identifier)
                    self.state = 1235
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1234
                        self.attributespecifierseq(0)

                    self.state = 1237
                    self.match(CPP14Parser.Assign)
                    self.state = 1238
                    self.typespecifierseq()
                    self.state = 1240
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Ellipsis - 78)) | (1 << (CPP14Parser.Identifier - 78)))) != 0):
                        self.state = 1239
                        self.abstractdeclarator()

                    self.state = 1242
                    self.match(CPP14Parser.Semi)
                    pass

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1246
                self.match(CPP14Parser.Static_assert)
                self.state = 1247
                self.match(CPP14Parser.LeftParen)
                self.state = 1248
                self.constantexpression()
                self.state = 1249
                self.match(CPP14Parser.Comma)
                self.state = 1250
                self.match(CPP14Parser.Stringliteral)
                self.state = 1251
                self.match(CPP14Parser.RightParen)
                self.state = 1252
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1254
                self.match(CPP14Parser.Enum)
                self.state = 1256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Class or _la == CPP14Parser.Struct:
                    self.state = 1255
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Class or _la == CPP14Parser.Struct):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 1259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1258
                    self.attributespecifierseq(0)

                self.state = 1261
                self.match(CPP14Parser.Identifier)
                self.state = 1264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1262
                    self.match(CPP14Parser.Colon)
                    self.state = 1263
                    self.typespecifierseq()

                self.state = 1266
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1267
                self.match(CPP14Parser.Template)
                self.state = 1268
                self.match(CPP14Parser.Less)
                self.state = 1270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                    1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                    1 << CPP14Parser.Static) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (
                    1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                    (1 << (CPP14Parser.Typedef - 67)) | (
                                                    1 << (CPP14Parser.Typename - 67)) | (
                                                1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (
                                        1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                                1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                        1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1269
                    self.templateparameterlist(0)

                self.state = 1272
                self.match(CPP14Parser.Greater)
                self.state = 1273
                self.declaration()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Extern:
                    self.state = 1274
                    self.match(CPP14Parser.Extern)

                self.state = 1277
                self.match(CPP14Parser.Template)
                self.state = 1278
                self.declaration()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1279
                self.match(CPP14Parser.Extern)
                self.state = 1280
                self.match(CPP14Parser.Stringliteral)
                self.state = 1287
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.LeftBrace]:
                    self.state = 1281
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 1283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                        1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                        1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                        1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                        1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (
                        1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                        1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                        1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                        1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                        1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                        1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                        1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                        1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                        1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 1282
                        self.declarationseq(0)

                    self.state = 1285
                    self.match(CPP14Parser.RightBrace)
                    pass
                elif token in [CPP14Parser.Alignas, CPP14Parser.Asm, CPP14Parser.Auto, CPP14Parser.Bool,
                               CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class,
                               CPP14Parser.Const, CPP14Parser.Constexpr, CPP14Parser.Decltype, CPP14Parser.Double,
                               CPP14Parser.Enum, CPP14Parser.Explicit, CPP14Parser.Extern, CPP14Parser.Float,
                               CPP14Parser.Friend, CPP14Parser.Inline, CPP14Parser.Int, CPP14Parser.Long,
                               CPP14Parser.Mutable, CPP14Parser.Namespace, CPP14Parser.Operator, CPP14Parser.Register,
                               CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Static, CPP14Parser.Static_assert,
                               CPP14Parser.Struct, CPP14Parser.Template, CPP14Parser.Thread_local, CPP14Parser.Typedef,
                               CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Using,
                               CPP14Parser.Virtual, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar,
                               CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Star, CPP14Parser.And,
                               CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Semi, CPP14Parser.Ellipsis,
                               CPP14Parser.Identifier]:
                    self.state = 1286
                    self.declaration()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Inline:
                    self.state = 1289
                    self.match(CPP14Parser.Inline)

                self.state = 1292
                self.match(CPP14Parser.Namespace)
                self.state = 1304
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Identifier]:
                    self.state = 1293
                    self.match(CPP14Parser.Identifier)
                    self.state = 1294
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 1296
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                        1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                        1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                        1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                        1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (
                        1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                        1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                        1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                        1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                        1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                        1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                        1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                        1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                        1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 1295
                        self.declarationseq(0)

                    self.state = 1298
                    self.match(CPP14Parser.RightBrace)
                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 1299
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 1301
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                        1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                        1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                        1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                        1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (
                        1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                        1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                        1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                        1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                        1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                        1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                        1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                        1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                        1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 1300
                        self.declarationseq(0)

                    self.state = 1303
                    self.match(CPP14Parser.RightBrace)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1306
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclspecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Register(self):
            return self.getToken(CPP14Parser.Register, 0)

        def Static(self):
            return self.getToken(CPP14Parser.Static, 0)

        def Thread_local(self):
            return self.getToken(CPP14Parser.Thread_local, 0)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def Explicit(self):
            return self.getToken(CPP14Parser.Explicit, 0)

        def Friend(self):
            return self.getToken(CPP14Parser.Friend, 0)

        def Typedef(self):
            return self.getToken(CPP14Parser.Typedef, 0)

        def Constexpr(self):
            return self.getToken(CPP14Parser.Constexpr, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclspecifierseq"):
                listener.enterDeclspecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclspecifierseq"):
                listener.exitDeclspecifierseq(self)

    def declspecifierseq(self):

        localctx = CPP14Parser.DeclspecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_declspecifierseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Register]:
                self.state = 1309
                self.match(CPP14Parser.Register)
                pass
            elif token in [CPP14Parser.Static]:
                self.state = 1310
                self.match(CPP14Parser.Static)
                pass
            elif token in [CPP14Parser.Thread_local]:
                self.state = 1311
                self.match(CPP14Parser.Thread_local)
                pass
            elif token in [CPP14Parser.Extern]:
                self.state = 1312
                self.match(CPP14Parser.Extern)
                pass
            elif token in [CPP14Parser.Mutable]:
                self.state = 1313
                self.match(CPP14Parser.Mutable)
                pass
            elif token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32,
                           CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Decltype, CPP14Parser.Double,
                           CPP14Parser.Enum, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Short,
                           CPP14Parser.Signed, CPP14Parser.Struct, CPP14Parser.Typename, CPP14Parser.Union,
                           CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar,
                           CPP14Parser.Identifier]:
                self.state = 1314
                self.typespecifier()
                pass
            elif token in [CPP14Parser.Inline]:
                self.state = 1315
                self.match(CPP14Parser.Inline)
                pass
            elif token in [CPP14Parser.Virtual]:
                self.state = 1316
                self.match(CPP14Parser.Virtual)
                pass
            elif token in [CPP14Parser.Explicit]:
                self.state = 1317
                self.match(CPP14Parser.Explicit)
                pass
            elif token in [CPP14Parser.Friend]:
                self.state = 1318
                self.match(CPP14Parser.Friend)
                pass
            elif token in [CPP14Parser.Typedef]:
                self.state = 1319
                self.match(CPP14Parser.Typedef)
                pass
            elif token in [CPP14Parser.Constexpr]:
                self.state = 1320
                self.match(CPP14Parser.Constexpr)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 201, self._ctx)
            if la_ == 1:
                self.state = 1323
                self.attributespecifierseq(0)

            elif la_ == 2:
                self.state = 1324
                self.declspecifierseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def Union(self):
            return self.getToken(CPP14Parser.Union, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierlistContext, 0)

        def memberdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclarationContext, 0)

        def Private(self):
            return self.getToken(CPP14Parser.Private, 0)

        def Protected(self):
            return self.getToken(CPP14Parser.Protected, 0)

        def Public(self):
            return self.getToken(CPP14Parser.Public, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypespecifier"):
                listener.enterTypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypespecifier"):
                listener.exitTypespecifier(self)

    def typespecifier(self):

        localctx = CPP14Parser.TypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_typespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 217, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1327
                self.trailingtypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1328
                _la = self._input.LA(1)
                if not (((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & (
                        (1 << (CPP14Parser.Class - 14)) | (1 << (CPP14Parser.Struct - 14)) | (
                    1 << (CPP14Parser.Union - 14)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1329
                    self.attributespecifierseq(0)

                self.state = 1346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Identifier:
                    self.state = 1333
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 203, self._ctx)
                    if la_ == 1:
                        self.state = 1332
                        self.nestednamespecifier(0)

                    self.state = 1335
                    self.match(CPP14Parser.Identifier)
                    self.state = 1341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Less:
                        self.state = 1336
                        self.match(CPP14Parser.Less)
                        self.state = 1338
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                            1 << CPP14Parser.Enum) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (
                            1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (
                            1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (
                            1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                            1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                            1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                            1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                            1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 1337
                            self.templateargumentlist(0)

                        self.state = 1340
                        self.match(CPP14Parser.Greater)

                    self.state = 1344
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Final:
                        self.state = 1343
                        self.match(CPP14Parser.Final)

                self.state = 1350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1348
                    self.match(CPP14Parser.Colon)
                    self.state = 1349
                    self.basespecifierlist(0)

                self.state = 1352
                self.match(CPP14Parser.LeftBrace)
                self.state = 1356
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignas, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char,
                             CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const,
                             CPP14Parser.Constexpr, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum,
                             CPP14Parser.Explicit, CPP14Parser.Extern, CPP14Parser.Float, CPP14Parser.Friend,
                             CPP14Parser.Inline, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Mutable,
                             CPP14Parser.Operator, CPP14Parser.Register, CPP14Parser.Short, CPP14Parser.Signed,
                             CPP14Parser.Static, CPP14Parser.Static_assert, CPP14Parser.Struct, CPP14Parser.Template,
                             CPP14Parser.Thread_local, CPP14Parser.Typedef, CPP14Parser.Typename, CPP14Parser.Union,
                             CPP14Parser.Unsigned, CPP14Parser.Using, CPP14Parser.Virtual, CPP14Parser.Void,
                             CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                             CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Tilde, CPP14Parser.AndAnd,
                             CPP14Parser.Colon, CPP14Parser.Semi, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                    self.state = 1353
                    self.memberdeclaration()
                    pass
                elif token in [CPP14Parser.Private, CPP14Parser.Protected, CPP14Parser.Public]:
                    self.state = 1354
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (
                        1 << CPP14Parser.Public))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1355
                    self.match(CPP14Parser.Colon)
                    pass
                elif token in [CPP14Parser.RightBrace]:
                    pass
                else:
                    pass
                self.state = 1358
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1359
                self.match(CPP14Parser.Enum)
                self.state = 1361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Class or _la == CPP14Parser.Struct:
                    self.state = 1360
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Class or _la == CPP14Parser.Struct):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 1364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1363
                    self.attributespecifierseq(0)

                self.state = 1370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Identifier:
                    self.state = 1367
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 212, self._ctx)
                    if la_ == 1:
                        self.state = 1366
                        self.nestednamespecifier(0)

                    self.state = 1369
                    self.match(CPP14Parser.Identifier)

                self.state = 1374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1372
                    self.match(CPP14Parser.Colon)
                    self.state = 1373
                    self.typespecifierseq()

                self.state = 1376
                self.match(CPP14Parser.LeftBrace)
                self.state = 1378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 1377
                    self.enumeratorlist(0)

                self.state = 1381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Comma:
                    self.state = 1380
                    self.match(CPP14Parser.Comma)

                self.state = 1383
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingtypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def Union(self):
            return self.getToken(CPP14Parser.Union, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Const(self):
            return self.getToken(CPP14Parser.Const, 0)

        def Volatile(self):
            return self.getToken(CPP14Parser.Volatile, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrailingtypespecifier"):
                listener.enterTrailingtypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrailingtypespecifier"):
                listener.exitTrailingtypespecifier(self)

    def trailingtypespecifier(self):

        localctx = CPP14Parser.TrailingtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_trailingtypespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1429
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32,
                         CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long,
                         CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Unsigned, CPP14Parser.Void,
                         CPP14Parser.Wchar, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1386
                self.simpletypespecifier()
                pass
            elif token in [CPP14Parser.Class, CPP14Parser.Struct, CPP14Parser.Union]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1387
                _la = self._input.LA(1)
                if not (((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & (
                        (1 << (CPP14Parser.Class - 14)) | (1 << (CPP14Parser.Struct - 14)) | (
                    1 << (CPP14Parser.Union - 14)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1407
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 223, self._ctx)
                if la_ == 1:
                    self.state = 1389
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1388
                        self.attributespecifierseq(0)

                    self.state = 1392
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 219, self._ctx)
                    if la_ == 1:
                        self.state = 1391
                        self.nestednamespecifier(0)

                    self.state = 1394
                    self.match(CPP14Parser.Identifier)
                    pass

                elif la_ == 2:
                    self.state = 1399
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 221, self._ctx)
                    if la_ == 1:
                        self.state = 1395
                        self.nestednamespecifier(0)
                        self.state = 1397
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 1396
                            self.match(CPP14Parser.Template)

                    self.state = 1401
                    self.match(CPP14Parser.Identifier)
                    self.state = 1402
                    self.match(CPP14Parser.Less)
                    self.state = 1404
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                        1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                        CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                        1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                        1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                        1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                        1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                        1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                        1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (
                        1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                        1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                        1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                        1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                        (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                        1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                        self.state = 1403
                        self.templateargumentlist(0)

                    self.state = 1406
                    self.match(CPP14Parser.Greater)
                    pass

                pass
            elif token in [CPP14Parser.Enum]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1409
                self.match(CPP14Parser.Enum)
                self.state = 1411
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 224, self._ctx)
                if la_ == 1:
                    self.state = 1410
                    self.nestednamespecifier(0)

                self.state = 1413
                self.match(CPP14Parser.Identifier)
                pass
            elif token in [CPP14Parser.Typename]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1414
                self.match(CPP14Parser.Typename)
                self.state = 1415
                self.nestednamespecifier(0)
                self.state = 1426
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 227, self._ctx)
                if la_ == 1:
                    self.state = 1416
                    self.match(CPP14Parser.Identifier)
                    pass

                elif la_ == 2:
                    self.state = 1418
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Template:
                        self.state = 1417
                        self.match(CPP14Parser.Template)

                    self.state = 1420
                    self.match(CPP14Parser.Identifier)
                    self.state = 1421
                    self.match(CPP14Parser.Less)
                    self.state = 1423
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                        1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                        CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                        1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                        1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                        1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                        1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                        1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                        1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (
                        1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                        1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                        1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                        1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                        (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                        1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                        self.state = 1422
                        self.templateargumentlist(0)

                    self.state = 1425
                    self.match(CPP14Parser.Greater)
                    pass

                pass
            elif token in [CPP14Parser.Const, CPP14Parser.Volatile]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1428
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Const or _la == CPP14Parser.Volatile):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypespecifierseq"):
                listener.enterTypespecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypespecifierseq"):
                listener.exitTypespecifierseq(self)

    def typespecifierseq(self):

        localctx = CPP14Parser.TypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_typespecifierseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1431
            self.typespecifier()
            self.state = 1434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 229, self._ctx)
            if la_ == 1:
                self.state = 1432
                self.attributespecifierseq(0)

            elif la_ == 2:
                self.state = 1433
                self.typespecifierseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingtypespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrailingtypespecifierseq"):
                listener.enterTrailingtypespecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrailingtypespecifierseq"):
                listener.exitTrailingtypespecifierseq(self)

    def trailingtypespecifierseq(self):

        localctx = CPP14Parser.TrailingtypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_trailingtypespecifierseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1436
            self.trailingtypespecifier()
            self.state = 1439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 230, self._ctx)
            if la_ == 1:
                self.state = 1437
                self.attributespecifierseq(0)

            elif la_ == 2:
                self.state = 1438
                self.trailingtypespecifierseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpletypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Char(self):
            return self.getToken(CPP14Parser.Char, 0)

        def Char16(self):
            return self.getToken(CPP14Parser.Char16, 0)

        def Char32(self):
            return self.getToken(CPP14Parser.Char32, 0)

        def Wchar(self):
            return self.getToken(CPP14Parser.Wchar, 0)

        def Bool(self):
            return self.getToken(CPP14Parser.Bool, 0)

        def Short(self):
            return self.getToken(CPP14Parser.Short, 0)

        def Int(self):
            return self.getToken(CPP14Parser.Int, 0)

        def Long(self):
            return self.getToken(CPP14Parser.Long, 0)

        def Signed(self):
            return self.getToken(CPP14Parser.Signed, 0)

        def Unsigned(self):
            return self.getToken(CPP14Parser.Unsigned, 0)

        def Float(self):
            return self.getToken(CPP14Parser.Float, 0)

        def Double(self):
            return self.getToken(CPP14Parser.Double, 0)

        def Void(self):
            return self.getToken(CPP14Parser.Void, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_simpletypespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpletypespecifier"):
                listener.enterSimpletypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpletypespecifier"):
                listener.exitSimpletypespecifier(self)

    def simpletypespecifier(self):

        localctx = CPP14Parser.SimpletypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_simpletypespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 236, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1442
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 231, self._ctx)
                if la_ == 1:
                    self.state = 1441
                    self.nestednamespecifier(0)

                self.state = 1444
                self.match(CPP14Parser.Identifier)
                self.state = 1450
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 233, self._ctx)
                if la_ == 1:
                    self.state = 1445
                    self.match(CPP14Parser.Less)
                    self.state = 1447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                        1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                        CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                        1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                        1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                        1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                        1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                        1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                        1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (
                        1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                        1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                        1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                        1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                        (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                        1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                        self.state = 1446
                        self.templateargumentlist(0)

                    self.state = 1449
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1452
                self.nestednamespecifier(0)
                self.state = 1453
                self.match(CPP14Parser.Template)
                self.state = 1454
                self.match(CPP14Parser.Identifier)
                self.state = 1455
                self.match(CPP14Parser.Less)
                self.state = 1457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                    (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                    1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 1456
                    self.templateargumentlist(0)

                self.state = 1459
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1461
                self.match(CPP14Parser.Char)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1462
                self.match(CPP14Parser.Char16)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1463
                self.match(CPP14Parser.Char32)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1464
                self.match(CPP14Parser.Wchar)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1465
                self.match(CPP14Parser.Bool)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1466
                self.match(CPP14Parser.Short)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1467
                self.match(CPP14Parser.Int)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1468
                self.match(CPP14Parser.Long)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1469
                self.match(CPP14Parser.Signed)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1470
                self.match(CPP14Parser.Unsigned)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1471
                self.match(CPP14Parser.Float)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1472
                self.match(CPP14Parser.Double)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1473
                self.match(CPP14Parser.Void)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1474
                self.match(CPP14Parser.Auto)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1475
                self.match(CPP14Parser.Decltype)
                self.state = 1476
                self.match(CPP14Parser.LeftParen)
                self.state = 1479
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 235, self._ctx)
                if la_ == 1:
                    self.state = 1477
                    self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 1478
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 1481
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumeratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumeratorlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumeratorlist"):
                listener.enterEnumeratorlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumeratorlist"):
                listener.exitEnumeratorlist(self)

    def enumeratorlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EnumeratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 96
        self.enterRecursionRule(localctx, 96, self.RULE_enumeratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1485
            self.match(CPP14Parser.Identifier)
            self.state = 1488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 237, self._ctx)
            if la_ == 1:
                self.state = 1486
                self.match(CPP14Parser.Assign)
                self.state = 1487
                self.constantexpression()

            self._ctx.stop = self._input.LT(-1)
            self.state = 1499
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 239, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.EnumeratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_enumeratorlist)
                    self.state = 1490
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1491
                    self.match(CPP14Parser.Comma)
                    self.state = 1492
                    self.match(CPP14Parser.Identifier)
                    self.state = 1495
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 238, self._ctx)
                    if la_ == 1:
                        self.state = 1493
                        self.match(CPP14Parser.Assign)
                        self.state = 1494
                        self.constantexpression()

                self.state = 1501
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 239, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AttributespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributespecifierseq"):
                listener.enterAttributespecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributespecifierseq"):
                listener.exitAttributespecifierseq(self)

    def attributespecifierseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AttributespecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_attributespecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1503
            self.attributespecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1509
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 240, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AttributespecifierseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_attributespecifierseq)
                    self.state = 1505
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1506
                    self.attributespecifier()
                self.state = 1511
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 240, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AttributespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributelist(self):
            return self.getTypedRuleContext(CPP14Parser.AttributelistContext, 0)

        def Alignas(self):
            return self.getToken(CPP14Parser.Alignas, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributespecifier"):
                listener.enterAttributespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributespecifier"):
                listener.exitAttributespecifier(self)

    def attributespecifier(self):

        localctx = CPP14Parser.AttributespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_attributespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1532
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1512
                self.match(CPP14Parser.LeftBracket)
                self.state = 1513
                self.match(CPP14Parser.LeftBracket)
                self.state = 1514
                self.attributelist(0)
                self.state = 1515
                self.match(CPP14Parser.RightBracket)
                self.state = 1516
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.Alignas]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1518
                self.match(CPP14Parser.Alignas)
                self.state = 1519
                self.match(CPP14Parser.LeftParen)
                self.state = 1525
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 242, self._ctx)
                if la_ == 1:
                    self.state = 1520
                    self.typespecifierseq()
                    self.state = 1522
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 241, self._ctx)
                    if la_ == 1:
                        self.state = 1521
                        self.abstractdeclarator()

                    pass

                elif la_ == 2:
                    self.state = 1524
                    self.constantexpression()
                    pass

                self.state = 1528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1527
                    self.match(CPP14Parser.Ellipsis)

                self.state = 1530
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributelistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeContext, 0)

        def attributelist(self):
            return self.getTypedRuleContext(CPP14Parser.AttributelistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributelist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributelist"):
                listener.enterAttributelist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributelist"):
                listener.exitAttributelist(self)

    def attributelist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AttributelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_attributelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1539
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 246, self._ctx)
            if la_ == 1:
                self.state = 1535
                self.attribute()
                self.state = 1537
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 245, self._ctx)
                if la_ == 1:
                    self.state = 1536
                    self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1551
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 249, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AttributelistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                    self.state = 1541
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1542
                    self.match(CPP14Parser.Comma)
                    self.state = 1547
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 248, self._ctx)
                    if la_ == 1:
                        self.state = 1543
                        self.attribute()
                        self.state = 1545
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 247, self._ctx)
                        if la_ == 1:
                            self.state = 1544
                            self.match(CPP14Parser.Ellipsis)

                self.state = 1553
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 249, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AttributeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attribute

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttribute"):
                listener.enterAttribute(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttribute"):
                listener.exitAttribute(self)

    def attribute(self):

        localctx = CPP14Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1554
            self.match(CPP14Parser.Identifier)
            self.state = 1557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 250, self._ctx)
            if la_ == 1:
                self.state = 1555
                self.match(CPP14Parser.Doublecolon)
                self.state = 1556
                self.match(CPP14Parser.Identifier)

            self.state = 1563
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 251, self._ctx)
            if la_ == 1:
                self.state = 1559
                self.match(CPP14Parser.LeftParen)
                self.state = 1560
                self.balancedtokenseq(0)
                self.state = 1561
                self.match(CPP14Parser.RightParen)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BalancedtokenseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtoken(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenContext, 0)

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtokenseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBalancedtokenseq"):
                listener.enterBalancedtokenseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBalancedtokenseq"):
                listener.exitBalancedtokenseq(self)

    def balancedtokenseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.BalancedtokenseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 106
        self.enterRecursionRule(localctx, 106, self.RULE_balancedtokenseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 252, self._ctx)
            if la_ == 1:
                self.state = 1566
                self.balancedtoken()

            self._ctx.stop = self._input.LT(-1)
            self.state = 1573
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 253, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.BalancedtokenseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_balancedtokenseq)
                    self.state = 1569
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1570
                    self.balancedtoken()
                self.state = 1575
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 253, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BalancedtokenContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtoken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBalancedtoken"):
                listener.enterBalancedtoken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBalancedtoken"):
                listener.exitBalancedtoken(self)

    def balancedtoken(self):

        localctx = CPP14Parser.BalancedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_balancedtoken)
        try:
            self.state = 1588
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1576
                self.match(CPP14Parser.LeftParen)
                self.state = 1577
                self.balancedtokenseq(0)
                self.state = 1578
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1580
                self.match(CPP14Parser.LeftBracket)
                self.state = 1581
                self.balancedtokenseq(0)
                self.state = 1582
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1584
                self.match(CPP14Parser.LeftBrace)
                self.state = 1585
                self.balancedtokenseq(0)
                self.state = 1586
                self.match(CPP14Parser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitdeclaratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def initializer(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerContext, 0)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initdeclaratorlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitdeclaratorlist"):
                listener.enterInitdeclaratorlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitdeclaratorlist"):
                listener.exitInitdeclaratorlist(self)

    def initdeclaratorlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InitdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 110
        self.enterRecursionRule(localctx, 110, self.RULE_initdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1591
            self.declarator()
            self.state = 1593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 255, self._ctx)
            if la_ == 1:
                self.state = 1592
                self.initializer()

            self._ctx.stop = self._input.LT(-1)
            self.state = 1603
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 257, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InitdeclaratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initdeclaratorlist)
                    self.state = 1595
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1596
                    self.match(CPP14Parser.Comma)
                    self.state = 1597
                    self.declarator()
                    self.state = 1599
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 256, self._ctx)
                    if la_ == 1:
                        self.state = 1598
                        self.initializer()

                self.state = 1605
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 257, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext, 0)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclarator"):
                listener.enterDeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclarator"):
                listener.exitDeclarator(self)

    def declarator(self):

        localctx = CPP14Parser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_declarator)
        try:
            self.state = 1614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 259, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1606
                self.ptrdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1607
                self.noptrdeclarator(0)
                self.state = 1608
                self.parametersandqualifiers()
                self.state = 1609
                self.match(CPP14Parser.Arrow)
                self.state = 1610
                self.trailingtypespecifierseq()
                self.state = 1612
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 258, self._ctx)
                if la_ == 1:
                    self.state = 1611
                    self.abstractdeclarator()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtrdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext, 0)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPtrdeclarator"):
                listener.enterPtrdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPtrdeclarator"):
                listener.exitPtrdeclarator(self)

    def ptrdeclarator(self):

        localctx = CPP14Parser.PtrdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_ptrdeclarator)
        try:
            self.state = 1620
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 260, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1616
                self.noptrdeclarator(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1617
                self.ptroperator()
                self.state = 1618
                self.ptrdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext, 0)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrdeclarator"):
                listener.enterNoptrdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrdeclarator"):
                listener.exitNoptrdeclarator(self)

    def noptrdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 116
        self.enterRecursionRule(localctx, 116, self.RULE_noptrdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1634
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Operator, CPP14Parser.Tilde, CPP14Parser.Ellipsis,
                         CPP14Parser.Identifier]:
                self.state = 1624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1623
                    self.match(CPP14Parser.Ellipsis)

                self.state = 1626
                self.idexpression()
                self.state = 1628
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 262, self._ctx)
                if la_ == 1:
                    self.state = 1627
                    self.attributespecifierseq(0)

                pass
            elif token in [CPP14Parser.LeftParen]:
                self.state = 1630
                self.match(CPP14Parser.LeftParen)
                self.state = 1631
                self.ptrdeclarator()
                self.state = 1632
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1650
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 267, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoptrdeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                    self.state = 1636
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1646
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.LeftParen]:
                        self.state = 1637
                        self.parametersandqualifiers()
                        pass
                    elif token in [CPP14Parser.LeftBracket]:
                        self.state = 1638
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1640
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                            1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                            1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                            1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 1639
                            self.constantexpression()

                        self.state = 1642
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1644
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 265, self._ctx)
                        if la_ == 1:
                            self.state = 1643
                            self.attributespecifierseq(0)

                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 1652
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 267, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParametersandqualifiersContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationclauseContext, 0)

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def Const(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Const)
            else:
                return self.getToken(CPP14Parser.Const, i)

        def Volatile(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Volatile)
            else:
                return self.getToken(CPP14Parser.Volatile, i)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidlistContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parametersandqualifiers

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParametersandqualifiers"):
                listener.enterParametersandqualifiers(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParametersandqualifiers"):
                listener.exitParametersandqualifiers(self)

    def parametersandqualifiers(self):

        localctx = CPP14Parser.ParametersandqualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_parametersandqualifiers)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1653
            self.match(CPP14Parser.LeftParen)
            self.state = 1654
            self.parameterdeclarationclause()
            self.state = 1655
            self.match(CPP14Parser.RightParen)
            self.state = 1659
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 268, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1656
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Const or _la == CPP14Parser.Volatile):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                self.state = 1661
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 268, self._ctx)

            self.state = 1663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 269, self._ctx)
            if la_ == 1:
                self.state = 1662
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 1678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 272, self._ctx)
            if la_ == 1:
                self.state = 1665
                self.match(CPP14Parser.Throw)
                self.state = 1666
                self.match(CPP14Parser.LeftParen)
                self.state = 1668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (
                    1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (
                    1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Float) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Short) | (
                    1 << CPP14Parser.Signed) | (1 << CPP14Parser.Struct))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and (
                    (1 << (_la - 69)) & ((1 << (CPP14Parser.Typename - 69)) | (1 << (CPP14Parser.Union - 69)) | (
                    1 << (CPP14Parser.Unsigned - 69)) | (1 << (CPP14Parser.Void - 69)) | (
                    1 << (CPP14Parser.Volatile - 69)) | (1 << (CPP14Parser.Wchar - 69)) | (
                    1 << (CPP14Parser.Identifier - 69)))) != 0):
                    self.state = 1667
                    self.typeidlist(0)

                self.state = 1670
                self.match(CPP14Parser.RightParen)

            elif la_ == 2:
                self.state = 1671
                self.match(CPP14Parser.Noexcept)
                self.state = 1676
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 271, self._ctx)
                if la_ == 1:
                    self.state = 1672
                    self.match(CPP14Parser.LeftParen)
                    self.state = 1673
                    self.constantexpression()
                    self.state = 1674
                    self.match(CPP14Parser.RightParen)

            self.state = 1681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 273, self._ctx)
            if la_ == 1:
                self.state = 1680
                self.attributespecifierseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtroperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def Const(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Const)
            else:
                return self.getToken(CPP14Parser.Const, i)

        def Volatile(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Volatile)
            else:
                return self.getToken(CPP14Parser.Volatile, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptroperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPtroperator"):
                listener.enterPtroperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPtroperator"):
                listener.exitPtroperator(self)

    def ptroperator(self):

        localctx = CPP14Parser.PtroperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_ptroperator)
        self._la = 0  # Token type
        try:
            self.state = 1700
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Identifier:
                    self.state = 1683
                    self.nestednamespecifier(0)

                self.state = 1686
                self.match(CPP14Parser.Star)
                self.state = 1688
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 275, self._ctx)
                if la_ == 1:
                    self.state = 1687
                    self.attributespecifierseq(0)

                self.state = 1693
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 276, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1690
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Const or _la == CPP14Parser.Volatile):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                    self.state = 1695
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 276, self._ctx)

                pass
            elif token in [CPP14Parser.And, CPP14Parser.AndAnd]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1696
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1698
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 277, self._ctx)
                if la_ == 1:
                    self.state = 1697
                    self.attributespecifierseq(0)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext, 0)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractpackdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbstractdeclarator"):
                listener.enterAbstractdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbstractdeclarator"):
                listener.exitAbstractdeclarator(self)

    def abstractdeclarator(self):

        localctx = CPP14Parser.AbstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_abstractdeclarator)
        try:
            self.state = 1713
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 281, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1702
                self.ptrabstractdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1704
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 279, self._ctx)
                if la_ == 1:
                    self.state = 1703
                    self.noptrabstractdeclarator(0)

                self.state = 1706
                self.parametersandqualifiers()
                self.state = 1707
                self.match(CPP14Parser.Arrow)
                self.state = 1708
                self.trailingtypespecifierseq()
                self.state = 1710
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 280, self._ctx)
                if la_ == 1:
                    self.state = 1709
                    self.abstractdeclarator()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1712
                self.abstractpackdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrabstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPtrabstractdeclarator"):
                listener.enterPtrabstractdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPtrabstractdeclarator"):
                listener.exitPtrabstractdeclarator(self)

    def ptrabstractdeclarator(self):

        localctx = CPP14Parser.PtrabstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_ptrabstractdeclarator)
        try:
            self.state = 1720
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1715
                self.noptrabstractdeclarator(0)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                           CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1716
                self.ptroperator()
                self.state = 1718
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 282, self._ctx)
                if la_ == 1:
                    self.state = 1717
                    self.ptrabstractdeclarator()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrabstractdeclarator"):
                listener.enterNoptrabstractdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrabstractdeclarator"):
                listener.exitNoptrabstractdeclarator(self)

    def noptrabstractdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_noptrabstractdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 286, self._ctx)
            if la_ == 1:
                self.state = 1723
                self.parametersandqualifiers()
                pass

            elif la_ == 2:
                self.state = 1724
                self.match(CPP14Parser.LeftBracket)
                self.state = 1726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                    (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                    1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 1725
                    self.constantexpression()

                self.state = 1728
                self.match(CPP14Parser.RightBracket)
                self.state = 1730
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 285, self._ctx)
                if la_ == 1:
                    self.state = 1729
                    self.attributespecifierseq(0)

                pass

            elif la_ == 3:
                self.state = 1732
                self.match(CPP14Parser.LeftParen)
                self.state = 1733
                self.ptrabstractdeclarator()
                self.state = 1734
                self.match(CPP14Parser.RightParen)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 1751
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 290, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1749
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 289, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1738
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1739
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1740
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1741
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1743
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                            1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                            1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                            1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 1742
                            self.constantexpression()

                        self.state = 1745
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1747
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 288, self._ctx)
                        if la_ == 1:
                            self.state = 1746
                            self.attributespecifierseq(0)

                        pass

                self.state = 1753
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 290, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AbstractpackdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractpackdeclaratorContext, 0)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractpackdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractpackdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbstractpackdeclarator"):
                listener.enterAbstractpackdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbstractpackdeclarator"):
                listener.exitAbstractpackdeclarator(self)

    def abstractpackdeclarator(self):

        localctx = CPP14Parser.AbstractpackdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_abstractpackdeclarator)
        try:
            self.state = 1758
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Ellipsis]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1754
                self.noptrabstractpackdeclarator(0)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                           CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1755
                self.ptroperator()
                self.state = 1756
                self.abstractpackdeclarator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrabstractpackdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractpackdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractpackdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrabstractpackdeclarator"):
                listener.enterNoptrabstractpackdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrabstractpackdeclarator"):
                listener.exitNoptrabstractpackdeclarator(self)

    def noptrabstractpackdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 130
        self.enterRecursionRule(localctx, 130, self.RULE_noptrabstractpackdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1761
            self.match(CPP14Parser.Ellipsis)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1777
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 295, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                    self.state = 1763
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1773
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.LeftParen]:
                        self.state = 1764
                        self.parametersandqualifiers()
                        pass
                    elif token in [CPP14Parser.LeftBracket]:
                        self.state = 1765
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1767
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                            1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                            1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                            1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 1766
                            self.constantexpression()

                        self.state = 1769
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1771
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 293, self._ctx)
                        if la_ == 1:
                            self.state = 1770
                            self.attributespecifierseq(0)

                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 1779
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 295, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParameterdeclarationclauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclarationclause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterdeclarationclause"):
                listener.enterParameterdeclarationclause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterdeclarationclause"):
                listener.exitParameterdeclarationclause(self)

    def parameterdeclarationclause(self):

        localctx = CPP14Parser.ParameterdeclarationclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_parameterdeclarationclause)
        self._la = 0  # Token type
        try:
            self.state = 1790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 298, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                    1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                    1 << CPP14Parser.Static) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Thread_local))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                    1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                    1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (
                    1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (
                    1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1780
                    self.parameterdeclarationlist(0)

                self.state = 1784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1783
                    self.match(CPP14Parser.Ellipsis)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1786
                self.parameterdeclarationlist(0)
                self.state = 1787
                self.match(CPP14Parser.Comma)
                self.state = 1788
                self.match(CPP14Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterdeclarationlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, 0)

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclarationlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterdeclarationlist"):
                listener.enterParameterdeclarationlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterdeclarationlist"):
                listener.exitParameterdeclarationlist(self)

    def parameterdeclarationlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ParameterdeclarationlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 134
        self.enterRecursionRule(localctx, 134, self.RULE_parameterdeclarationlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1793
            self.parameterdeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1800
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 299, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ParameterdeclarationlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_parameterdeclarationlist)
                    self.state = 1795
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1796
                    self.match(CPP14Parser.Comma)
                    self.state = 1797
                    self.parameterdeclaration()
                self.state = 1802
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 299, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParameterdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterdeclaration"):
                listener.enterParameterdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterdeclaration"):
                listener.exitParameterdeclaration(self)

    def parameterdeclaration(self):

        localctx = CPP14Parser.ParameterdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_parameterdeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 1803
                self.attributespecifierseq(0)

            self.state = 1806
            self.declspecifierseq()
            self.state = 1809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 301, self._ctx)
            if la_ == 1:
                self.state = 1807
                self.declarator()
                pass

            elif la_ == 2:
                self.state = 1808
                self.abstractdeclarator()
                pass

            self.state = 1823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 305, self._ctx)
            if la_ == 1:
                self.state = 1811
                self.match(CPP14Parser.Assign)
                self.state = 1821
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char,
                             CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype,
                             CPP14Parser.Delete, CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.FalseToken,
                             CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New,
                             CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                             CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof,
                             CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw, CPP14Parser.TrueToken,
                             CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.Unsigned, CPP14Parser.Void,
                             CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus,
                             CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde,
                             CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                             CPP14Parser.Identifier, CPP14Parser.Integerliteral, CPP14Parser.Characterliteral,
                             CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral,
                             CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral,
                             CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                    self.state = 1812
                    self.assignmentexpression()
                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 1813
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 1818
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                            (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                        1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                        1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                        1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                        1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                        1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                        1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                        1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (
                        1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                        1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                        1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                        1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                        (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                        1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                        self.state = 1814
                        self.initializerlist(0)
                        self.state = 1816
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Comma:
                            self.state = 1815
                            self.match(CPP14Parser.Comma)

                    self.state = 1820
                    self.match(CPP14Parser.RightBrace)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitializer"):
                listener.enterInitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitializer"):
                listener.exitInitializer(self)

    def initializer(self):

        localctx = CPP14Parser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_initializer)
        self._la = 0  # Token type
        try:
            self.state = 1849
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1825
                self.match(CPP14Parser.Assign)
                self.state = 1835
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char,
                             CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype,
                             CPP14Parser.Delete, CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.FalseToken,
                             CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New,
                             CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                             CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof,
                             CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw, CPP14Parser.TrueToken,
                             CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.Unsigned, CPP14Parser.Void,
                             CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus,
                             CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde,
                             CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                             CPP14Parser.Identifier, CPP14Parser.Integerliteral, CPP14Parser.Characterliteral,
                             CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral,
                             CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral,
                             CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                    self.state = 1826
                    self.assignmentexpression()
                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 1827
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 1832
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                            (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                        1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                        1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                        1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                        1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                        1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                        1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                        1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (
                        1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                        1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                        1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                        1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                        (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                        1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                        self.state = 1828
                        self.initializerlist(0)
                        self.state = 1830
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Comma:
                            self.state = 1829
                            self.match(CPP14Parser.Comma)

                    self.state = 1834
                    self.match(CPP14Parser.RightBrace)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1837
                self.match(CPP14Parser.LeftBrace)
                self.state = 1842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                    1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                    1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                    (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                    1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 1838
                    self.initializerlist(0)
                    self.state = 1840
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Comma:
                        self.state = 1839
                        self.match(CPP14Parser.Comma)

                self.state = 1844
                self.match(CPP14Parser.RightBrace)
                pass
            elif token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1845
                self.match(CPP14Parser.LeftParen)
                self.state = 1846
                self.initializerlist(0)
                self.state = 1847
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def initializerlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InitializerlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitializerlist"):
                listener.enterInitializerlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitializerlist"):
                listener.exitInitializerlist(self)

    def initializerlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InitializerlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 140
        self.enterRecursionRule(localctx, 140, self.RULE_initializerlist, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1861
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16,
                         CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype, CPP14Parser.Delete,
                         CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.FalseToken, CPP14Parser.Float,
                         CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Nullptr,
                         CPP14Parser.Operator, CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed,
                         CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw,
                         CPP14Parser.TrueToken, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.Unsigned,
                         CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                         CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                         CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                         CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Integerliteral,
                         CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral,
                         CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral,
                         CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.state = 1852
                self.assignmentexpression()
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.state = 1853
                self.match(CPP14Parser.LeftBrace)
                self.state = 1858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                    1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                    1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                    (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                    1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 1854
                    self.initializerlist(0)
                    self.state = 1856
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Comma:
                        self.state = 1855
                        self.match(CPP14Parser.Comma)

                self.state = 1860
                self.match(CPP14Parser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 315, self._ctx)
            if la_ == 1:
                self.state = 1863
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1884
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 320, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InitializerlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initializerlist)
                    self.state = 1866
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1867
                    self.match(CPP14Parser.Comma)
                    self.state = 1877
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char,
                                 CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.Double, CPP14Parser.Dynamic_cast,
                                 CPP14Parser.FalseToken, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long,
                                 CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed,
                                 CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw,
                                 CPP14Parser.TrueToken, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.Unsigned,
                                 CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                                 CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                                 CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                                 CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Integerliteral,
                                 CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral,
                                 CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral,
                                 CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                        self.state = 1868
                        self.assignmentexpression()
                        pass
                    elif token in [CPP14Parser.LeftBrace]:
                        self.state = 1869
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 1874
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                            CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                            1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                            1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                            1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                            1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                            1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (
                            1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                            1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                            1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                            1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                            1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 1870
                            self.initializerlist(0)
                            self.state = 1872
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Comma:
                                self.state = 1871
                                self.match(CPP14Parser.Comma)

                        self.state = 1876
                        self.match(CPP14Parser.RightBrace)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1880
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 319, self._ctx)
                    if la_ == 1:
                        self.state = 1879
                        self.match(CPP14Parser.Ellipsis)

                self.state = 1886
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 320, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class MemberdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorlistContext, 0)

        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext, 0)

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def handler(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.HandlerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.HandlerContext, i)

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberdeclaration"):
                listener.enterMemberdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberdeclaration"):
                listener.exitMemberdeclaration(self)

    def memberdeclaration(self):

        localctx = CPP14Parser.MemberdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_memberdeclaration)
        self._la = 0  # Token type
        try:
            self.state = 1976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 336, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1888
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 321, self._ctx)
                if la_ == 1:
                    self.state = 1887
                    self.attributespecifierseq(0)

                self.state = 1891
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 322, self._ctx)
                if la_ == 1:
                    self.state = 1890
                    self.declspecifierseq()

                self.state = 1936
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 331, self._ctx)
                if la_ == 1:
                    self.state = 1894
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Operator))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                                    (1 << (CPP14Parser.LeftParen - 78)) | (
                                                    1 << (CPP14Parser.LeftBracket - 78)) | (
                                                1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                                        1 << (CPP14Parser.Tilde - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                                1 << (CPP14Parser.Colon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                        1 << (CPP14Parser.Identifier - 78)))) != 0):
                        self.state = 1893
                        self.memberdeclaratorlist(0)

                    self.state = 1896
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 2:
                    self.state = 1897
                    self.declarator()
                    self.state = 1899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Final or _la == CPP14Parser.Override:
                        self.state = 1898
                        self.virtspecifierseq(0)

                    self.state = 1934
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.LeftBrace, CPP14Parser.Colon]:
                        self.state = 1903
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Colon:
                            self.state = 1901
                            self.match(CPP14Parser.Colon)
                            self.state = 1902
                            self.meminitializerlist()

                        self.state = 1905
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 1909
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                            1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (
                            1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (
                            1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (
                            1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (
                            1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                            1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (
                            1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                            1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                            1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                            1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (
                            1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (
                            1 << CPP14Parser.This) | (1 << CPP14Parser.Thread_local))) != 0) or (
                                (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                            CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                            1 << (CPP14Parser.Try - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (
                            1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                            1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                            1 << (CPP14Parser.Using - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (
                            1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (
                            1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.While - 64)) | (
                            1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                            1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                            1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                            1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (
                            1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                            1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                            1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                            1 << (CPP14Parser.Semi - 64)) | (1 << (CPP14Parser.Ellipsis - 64)) | (
                            1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 1906
                            self.statement()
                            self.state = 1911
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1912
                        self.match(CPP14Parser.RightBrace)
                        pass
                    elif token in [CPP14Parser.Try]:
                        self.state = 1913
                        self.match(CPP14Parser.Try)
                        self.state = 1916
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Colon:
                            self.state = 1914
                            self.match(CPP14Parser.Colon)
                            self.state = 1915
                            self.meminitializerlist()

                        self.state = 1918
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 1922
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                            1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (
                            1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (
                            1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (
                            1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (
                            1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                            1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (
                            1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                            1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                            1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                            1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (
                            1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (
                            1 << CPP14Parser.This) | (1 << CPP14Parser.Thread_local))) != 0) or (
                                (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                            CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                            1 << (CPP14Parser.Try - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (
                            1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                            1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                            1 << (CPP14Parser.Using - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (
                            1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (
                            1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.While - 64)) | (
                            1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                            1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                            1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                            1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (
                            1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                            1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                            1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                            1 << (CPP14Parser.Semi - 64)) | (1 << (CPP14Parser.Ellipsis - 64)) | (
                            1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 1919
                            self.statement()
                            self.state = 1924
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1925
                        self.match(CPP14Parser.RightBrace)
                        self.state = 1927
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1926
                            self.handler()
                            self.state = 1929
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la == CPP14Parser.Catch):
                                break

                        pass
                    elif token in [CPP14Parser.Assign]:
                        self.state = 1931
                        self.match(CPP14Parser.Assign)
                        self.state = 1932
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Default or _la == CPP14Parser.Delete):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1933
                        self.match(CPP14Parser.Semi)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1938
                self.match(CPP14Parser.Using)
                self.state = 1944
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Decltype, CPP14Parser.Typename, CPP14Parser.Identifier]:
                    self.state = 1940
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Typename:
                        self.state = 1939
                        self.match(CPP14Parser.Typename)

                    self.state = 1942
                    self.nestednamespecifier(0)
                    pass
                elif token in [CPP14Parser.Doublecolon]:
                    self.state = 1943
                    self.match(CPP14Parser.Doublecolon)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1946
                self.unqualifiedid()
                self.state = 1947
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1949
                self.match(CPP14Parser.Static_assert)
                self.state = 1950
                self.match(CPP14Parser.LeftParen)
                self.state = 1951
                self.constantexpression()
                self.state = 1952
                self.match(CPP14Parser.Comma)
                self.state = 1953
                self.match(CPP14Parser.Stringliteral)
                self.state = 1954
                self.match(CPP14Parser.RightParen)
                self.state = 1955
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1957
                self.match(CPP14Parser.Template)
                self.state = 1958
                self.match(CPP14Parser.Less)
                self.state = 1959
                self.templateparameterlist(0)
                self.state = 1960
                self.match(CPP14Parser.Greater)
                self.state = 1961
                self.declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1963
                self.match(CPP14Parser.Using)
                self.state = 1964
                self.match(CPP14Parser.Identifier)
                self.state = 1966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1965
                    self.attributespecifierseq(0)

                self.state = 1968
                self.match(CPP14Parser.Assign)
                self.state = 1969
                self.typespecifierseq()
                self.state = 1971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1970
                    self.abstractdeclarator()

                self.state = 1973
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1975
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberdeclaratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorContext, 0)

        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaratorlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberdeclaratorlist"):
                listener.enterMemberdeclaratorlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberdeclaratorlist"):
                listener.exitMemberdeclaratorlist(self)

    def memberdeclaratorlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.MemberdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 144
        self.enterRecursionRule(localctx, 144, self.RULE_memberdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1979
            self.memberdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1986
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 337, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.MemberdeclaratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_memberdeclaratorlist)
                    self.state = 1981
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1982
                    self.match(CPP14Parser.Comma)
                    self.state = 1983
                    self.memberdeclarator()
                self.state = 1988
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 337, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class MemberdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext, 0)

        def purespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.PurespecifierContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberdeclarator"):
                listener.enterMemberdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberdeclarator"):
                listener.exitMemberdeclarator(self)

    def memberdeclarator(self):

        localctx = CPP14Parser.MemberdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_memberdeclarator)
        self._la = 0  # Token type
        try:
            self.state = 2028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 349, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1989
                self.declarator()
                self.state = 2018
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 346, self._ctx)
                if la_ == 1:
                    self.state = 1991
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 338, self._ctx)
                    if la_ == 1:
                        self.state = 1990
                        self.virtspecifierseq(0)

                    self.state = 1994
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 339, self._ctx)
                    if la_ == 1:
                        self.state = 1993
                        self.purespecifier()

                    pass

                elif la_ == 2:
                    self.state = 2016
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 345, self._ctx)
                    if la_ == 1:
                        self.state = 1996
                        self.match(CPP14Parser.Assign)
                        self.state = 2006
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char,
                                     CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast,
                                     CPP14Parser.Decltype, CPP14Parser.Delete, CPP14Parser.Double,
                                     CPP14Parser.Dynamic_cast, CPP14Parser.FalseToken, CPP14Parser.Float,
                                     CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept,
                                     CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.Reinterpret_cast,
                                     CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof, CPP14Parser.Static_cast,
                                     CPP14Parser.This, CPP14Parser.Throw, CPP14Parser.TrueToken, CPP14Parser.Typeid,
                                     CPP14Parser.Typename, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Wchar,
                                     CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus,
                                     CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                                     CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                                     CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Integerliteral,
                                     CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral,
                                     CPP14Parser.Stringliteral, CPP14Parser.Userdefinedintegerliteral,
                                     CPP14Parser.Userdefinedfloatingliteral, CPP14Parser.Userdefinedstringliteral,
                                     CPP14Parser.Userdefinedcharacterliteral]:
                            self.state = 1997
                            self.assignmentexpression()
                            pass
                        elif token in [CPP14Parser.LeftBrace]:
                            self.state = 1998
                            self.match(CPP14Parser.LeftBrace)
                            self.state = 2003
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                                1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                                1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                                1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                                1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                                1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                                1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                    (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                                CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                                1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                                1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                                1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                                1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                                1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (
                                1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                                1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                                1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                                1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                                1 << (CPP14Parser.Identifier - 64)) | (
                                1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                                (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                                1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                                self.state = 1999
                                self.initializerlist(0)
                                self.state = 2001
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == CPP14Parser.Comma:
                                    self.state = 2000
                                    self.match(CPP14Parser.Comma)

                            self.state = 2005
                            self.match(CPP14Parser.RightBrace)
                            pass
                        else:
                            raise NoViableAltException(self)


                    elif la_ == 2:
                        self.state = 2008
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 2013
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                            CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                            1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                            1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                            1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                            1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                            1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (
                            1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                            1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                            1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                            1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                            1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 2009
                            self.initializerlist(0)
                            self.state = 2011
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Comma:
                                self.state = 2010
                                self.match(CPP14Parser.Comma)

                        self.state = 2015
                        self.match(CPP14Parser.RightBrace)

                    pass

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 2020
                    self.match(CPP14Parser.Identifier)

                self.state = 2024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2023
                    self.attributespecifierseq(0)

                self.state = 2026
                self.match(CPP14Parser.Colon)
                self.state = 2027
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VirtspecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Override(self):
            return self.getToken(CPP14Parser.Override, 0)

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_virtspecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVirtspecifierseq"):
                listener.enterVirtspecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVirtspecifierseq"):
                listener.exitVirtspecifierseq(self)

    def virtspecifierseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.VirtspecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 148
        self.enterRecursionRule(localctx, 148, self.RULE_virtspecifierseq, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2031
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.Final or _la == CPP14Parser.Override):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2037
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 350, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.VirtspecifierseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_virtspecifierseq)
                    self.state = 2033
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2034
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Final or _la == CPP14Parser.Override):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                self.state = 2039
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 350, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PurespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None  # Token

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Octalliteral(self):
            return self.getToken(CPP14Parser.Octalliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_purespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPurespecifier"):
                listener.enterPurespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPurespecifier"):
                listener.exitPurespecifier(self)

    def purespecifier(self):

        localctx = CPP14Parser.PurespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_purespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2040
            self.match(CPP14Parser.Assign)
            self.state = 2041
            localctx.val = self.match(CPP14Parser.Octalliteral)
            if (None if localctx.val is None else localctx.val.text).compareTo('0') != 0:
                raise InputMismatchException(self)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BasespecifierlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierContext, 0)

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifierlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBasespecifierlist"):
                listener.enterBasespecifierlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBasespecifierlist"):
                listener.exitBasespecifierlist(self)

    def basespecifierlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.BasespecifierlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 152
        self.enterRecursionRule(localctx, 152, self.RULE_basespecifierlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2045
            self.basespecifier()
            self.state = 2047
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 351, self._ctx)
            if la_ == 1:
                self.state = 2046
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2057
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 353, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.BasespecifierlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_basespecifierlist)
                    self.state = 2049
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2050
                    self.match(CPP14Parser.Comma)
                    self.state = 2051
                    self.basespecifier()
                    self.state = 2053
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 352, self._ctx)
                    if la_ == 1:
                        self.state = 2052
                        self.match(CPP14Parser.Ellipsis)

                self.state = 2059
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 353, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BasespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def Private(self):
            return self.getToken(CPP14Parser.Private, 0)

        def Protected(self):
            return self.getToken(CPP14Parser.Protected, 0)

        def Public(self):
            return self.getToken(CPP14Parser.Public, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBasespecifier"):
                listener.enterBasespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBasespecifier"):
                listener.exitBasespecifier(self)

    def basespecifier(self):

        localctx = CPP14Parser.BasespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_basespecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 2060
                self.attributespecifierseq(0)

            self.state = 2071
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Virtual]:
                self.state = 2063
                self.match(CPP14Parser.Virtual)
                self.state = 2065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public))) != 0):
                    self.state = 2064
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (
                        1 << CPP14Parser.Public))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                pass
            elif token in [CPP14Parser.Private, CPP14Parser.Protected, CPP14Parser.Public]:
                self.state = 2067
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Virtual:
                    self.state = 2068
                    self.match(CPP14Parser.Virtual)

                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Identifier]:
                pass
            else:
                pass
            self.state = 2073
            self.classordecltype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassordecltypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classordecltype

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassordecltype"):
                listener.enterClassordecltype(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassordecltype"):
                listener.exitClassordecltype(self)

    def classordecltype(self):

        localctx = CPP14Parser.ClassordecltypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_classordecltype)
        self._la = 0  # Token type
        try:
            self.state = 2093
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 362, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2076
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 358, self._ctx)
                if la_ == 1:
                    self.state = 2075
                    self.nestednamespecifier(0)

                self.state = 2078
                self.match(CPP14Parser.Identifier)
                self.state = 2084
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 360, self._ctx)
                if la_ == 1:
                    self.state = 2079
                    self.match(CPP14Parser.Less)
                    self.state = 2081
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                        1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                        CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                        1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                        1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                        1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                        1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                        1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                        1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (
                        1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                        1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                        1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                        1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                        (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                        1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                        self.state = 2080
                        self.templateargumentlist(0)

                    self.state = 2083
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2086
                self.match(CPP14Parser.Decltype)
                self.state = 2087
                self.match(CPP14Parser.LeftParen)
                self.state = 2090
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 361, self._ctx)
                if la_ == 1:
                    self.state = 2088
                    self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 2089
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 2092
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeminitializerlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializerlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeminitializerlist"):
                listener.enterMeminitializerlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeminitializerlist"):
                listener.exitMeminitializerlist(self)

    def meminitializerlist(self):

        localctx = CPP14Parser.MeminitializerlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_meminitializerlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2097
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 363, self._ctx)
            if la_ == 1:
                self.state = 2095
                self.classordecltype()
                pass

            elif la_ == 2:
                self.state = 2096
                self.match(CPP14Parser.Identifier)
                pass

            self.state = 2112
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.state = 2099
                self.match(CPP14Parser.LeftParen)
                self.state = 2101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                    1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                    1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                    (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                    1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 2100
                    self.initializerlist(0)

                self.state = 2103
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.state = 2104
                self.match(CPP14Parser.LeftBrace)
                self.state = 2109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                    1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                    1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                    (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                    1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 2105
                    self.initializerlist(0)
                    self.state = 2107
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Comma:
                        self.state = 2106
                        self.match(CPP14Parser.Comma)

                self.state = 2111
                self.match(CPP14Parser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Ellipsis:
                self.state = 2114
                self.match(CPP14Parser.Ellipsis)

            self.state = 2119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Comma:
                self.state = 2117
                self.match(CPP14Parser.Comma)
                self.state = 2118
                self.meminitializerlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateparameterlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateparameter(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterContext, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameterlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateparameterlist"):
                listener.enterTemplateparameterlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateparameterlist"):
                listener.exitTemplateparameterlist(self)

    def templateparameterlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TemplateparameterlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 160
        self.enterRecursionRule(localctx, 160, self.RULE_templateparameterlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2122
            self.templateparameter()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2129
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 370, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TemplateparameterlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateparameterlist)
                    self.state = 2124
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2125
                    self.match(CPP14Parser.Comma)
                    self.state = 2126
                    self.templateparameter()
                self.state = 2131
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 370, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TemplateparameterContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateparameter"):
                listener.enterTemplateparameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateparameter"):
                listener.exitTemplateparameter(self)

    def templateparameter(self):

        localctx = CPP14Parser.TemplateparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_templateparameter)
        self._la = 0  # Token type
        try:
            self.state = 2185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 385, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2132
                self.match(CPP14Parser.Class)
                self.state = 2147
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 375, self._ctx)
                if la_ == 1:
                    self.state = 2134
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 371, self._ctx)
                    if la_ == 1:
                        self.state = 2133
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2137
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 372, self._ctx)
                    if la_ == 1:
                        self.state = 2136
                        self.match(CPP14Parser.Identifier)

                    pass

                elif la_ == 2:
                    self.state = 2140
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2139
                        self.match(CPP14Parser.Identifier)

                    self.state = 2142
                    self.match(CPP14Parser.Assign)
                    self.state = 2143
                    self.typespecifierseq()
                    self.state = 2145
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 374, self._ctx)
                    if la_ == 1:
                        self.state = 2144
                        self.abstractdeclarator()

                    pass

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2149
                self.match(CPP14Parser.Typename)
                self.state = 2164
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 380, self._ctx)
                if la_ == 1:
                    self.state = 2151
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 376, self._ctx)
                    if la_ == 1:
                        self.state = 2150
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2154
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 377, self._ctx)
                    if la_ == 1:
                        self.state = 2153
                        self.match(CPP14Parser.Identifier)

                    pass

                elif la_ == 2:
                    self.state = 2157
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2156
                        self.match(CPP14Parser.Identifier)

                    self.state = 2159
                    self.match(CPP14Parser.Assign)
                    self.state = 2160
                    self.typespecifierseq()
                    self.state = 2162
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 379, self._ctx)
                    if la_ == 1:
                        self.state = 2161
                        self.abstractdeclarator()

                    pass

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2166
                self.match(CPP14Parser.Template)
                self.state = 2167
                self.match(CPP14Parser.Less)
                self.state = 2168
                self.templateparameterlist(0)
                self.state = 2169
                self.match(CPP14Parser.Greater)
                self.state = 2170
                self.match(CPP14Parser.Class)
                self.state = 2182
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 384, self._ctx)
                if la_ == 1:
                    self.state = 2172
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 381, self._ctx)
                    if la_ == 1:
                        self.state = 2171
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2175
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 382, self._ctx)
                    if la_ == 1:
                        self.state = 2174
                        self.match(CPP14Parser.Identifier)

                    pass

                elif la_ == 2:
                    self.state = 2178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2177
                        self.match(CPP14Parser.Identifier)

                    self.state = 2180
                    self.match(CPP14Parser.Assign)
                    self.state = 2181
                    self.idexpression()
                    pass

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2184
                self.parameterdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateargumentlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateargument(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargumentlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateargumentlist"):
                listener.enterTemplateargumentlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateargumentlist"):
                listener.exitTemplateargumentlist(self)

    def templateargumentlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TemplateargumentlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 164
        self.enterRecursionRule(localctx, 164, self.RULE_templateargumentlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2188
            self.templateargument()
            self.state = 2190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 386, self._ctx)
            if la_ == 1:
                self.state = 2189
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2200
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 388, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TemplateargumentlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateargumentlist)
                    self.state = 2192
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2193
                    self.match(CPP14Parser.Comma)
                    self.state = 2194
                    self.templateargument()
                    self.state = 2196
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 387, self._ctx)
                    if la_ == 1:
                        self.state = 2195
                        self.match(CPP14Parser.Ellipsis)

                self.state = 2202
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 388, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TemplateargumentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateargument"):
                listener.enterTemplateargument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateargument"):
                listener.exitTemplateargument(self)

    def templateargument(self):

        localctx = CPP14Parser.TemplateargumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_templateargument)
        try:
            self.state = 2209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 390, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2203
                self.typespecifierseq()
                self.state = 2205
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 389, self._ctx)
                if la_ == 1:
                    self.state = 2204
                    self.abstractdeclarator()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2207
                self.constantexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2208
                self.idexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryblockContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def handler(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.HandlerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.HandlerContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_tryblock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTryblock"):
                listener.enterTryblock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTryblock"):
                listener.exitTryblock(self)

    def tryblock(self):

        localctx = CPP14Parser.TryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_tryblock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2211
            self.match(CPP14Parser.Try)
            self.state = 2212
            self.match(CPP14Parser.LeftBrace)
            self.state = 2216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (
                1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (
                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (
                1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (
                1 << CPP14Parser.Friend) | (1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (
                1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (
                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (
                1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Static_cast) | (
                1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (
                1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Try - 64)) | (
                1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                1 << (CPP14Parser.Semi - 64)) | (1 << (CPP14Parser.Ellipsis - 64)) | (
                1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                    (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                    (1 << (CPP14Parser.Characterliteral - 133)) | (
                                    1 << (CPP14Parser.Floatingliteral - 133)) | (
                                1 << (CPP14Parser.Stringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                self.state = 2213
                self.statement()
                self.state = 2218
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2219
            self.match(CPP14Parser.RightBrace)
            self.state = 2221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2220
                self.handler()
                self.state = 2223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Catch):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(CPP14Parser.Catch, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_handler

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHandler"):
                listener.enterHandler(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHandler"):
                listener.exitHandler(self)

    def handler(self):

        localctx = CPP14Parser.HandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_handler)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2225
            self.match(CPP14Parser.Catch)
            self.state = 2226
            self.match(CPP14Parser.LeftParen)
            self.state = 2238
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignas, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16,
                         CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Decltype,
                         CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long,
                         CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Struct, CPP14Parser.Typename,
                         CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Volatile,
                         CPP14Parser.Wchar, CPP14Parser.LeftBracket, CPP14Parser.Identifier]:
                self.state = 2228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2227
                    self.attributespecifierseq(0)

                self.state = 2230
                self.typespecifierseq()
                self.state = 2235
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 395, self._ctx)
                if la_ == 1:
                    self.state = 2231
                    self.declarator()
                    pass

                elif la_ == 2:
                    self.state = 2233
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Ellipsis - 78)) | (1 << (CPP14Parser.Identifier - 78)))) != 0):
                        self.state = 2232
                        self.abstractdeclarator()

                    pass

                pass
            elif token in [CPP14Parser.Ellipsis]:
                self.state = 2237
                self.match(CPP14Parser.Ellipsis)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2240
            self.match(CPP14Parser.RightParen)
            self.state = 2241
            self.match(CPP14Parser.LeftBrace)
            self.state = 2245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (
                1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (
                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (
                1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (
                1 << CPP14Parser.Friend) | (1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (
                1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (
                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (
                1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Static_cast) | (
                1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (
                1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Try - 64)) | (
                1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                1 << (CPP14Parser.Semi - 64)) | (1 << (CPP14Parser.Ellipsis - 64)) | (
                1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                    (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                    (1 << (CPP14Parser.Characterliteral - 133)) | (
                                    1 << (CPP14Parser.Floatingliteral - 133)) | (
                                1 << (CPP14Parser.Stringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                self.state = 2242
                self.statement()
                self.state = 2247
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2248
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeidlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typeidlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeidlist"):
                listener.enterTypeidlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeidlist"):
                listener.exitTypeidlist(self)

    def typeidlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TypeidlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 172
        self.enterRecursionRule(localctx, 172, self.RULE_typeidlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2251
            self.typespecifierseq()
            self.state = 2253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 398, self._ctx)
            if la_ == 1:
                self.state = 2252
                self.abstractdeclarator()

            self.state = 2256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 399, self._ctx)
            if la_ == 1:
                self.state = 2255
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2269
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 402, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TypeidlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeidlist)
                    self.state = 2258
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2259
                    self.match(CPP14Parser.Comma)
                    self.state = 2260
                    self.typespecifierseq()
                    self.state = 2262
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 400, self._ctx)
                    if la_ == 1:
                        self.state = 2261
                        self.abstractdeclarator()

                    self.state = 2265
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 401, self._ctx)
                    if la_ == 1:
                        self.state = 2264
                        self.match(CPP14Parser.Ellipsis)

                self.state = 2271
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 402, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TheoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_theoperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTheoperator"):
                listener.enterTheoperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTheoperator"):
                listener.exitTheoperator(self)

    def theoperator(self):

        localctx = CPP14Parser.TheoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_theoperator)
        try:
            self.state = 2324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 404, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2272
                self.match(CPP14Parser.New)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2273
                self.match(CPP14Parser.Delete)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2274
                self.match(CPP14Parser.New)
                self.state = 2275
                self.match(CPP14Parser.LeftBracket)
                self.state = 2276
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2277
                self.match(CPP14Parser.Delete)
                self.state = 2278
                self.match(CPP14Parser.LeftBracket)
                self.state = 2279
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2280
                self.match(CPP14Parser.Plus)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2281
                self.match(CPP14Parser.Minus)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2282
                self.match(CPP14Parser.Star)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2283
                self.match(CPP14Parser.Div)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2284
                self.match(CPP14Parser.Mod)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2285
                self.match(CPP14Parser.Caret)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2286
                self.match(CPP14Parser.And)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2287
                self.match(CPP14Parser.Or)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2288
                self.match(CPP14Parser.Tilde)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2289
                self.match(CPP14Parser.Not)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2290
                self.match(CPP14Parser.Assign)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2291
                self.match(CPP14Parser.Less)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2292
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2293
                self.match(CPP14Parser.PlusAssign)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2294
                self.match(CPP14Parser.MinusAssign)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2295
                self.match(CPP14Parser.StarAssign)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2296
                self.match(CPP14Parser.DivAssign)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2297
                self.match(CPP14Parser.ModAssign)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2298
                self.match(CPP14Parser.XorAssign)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2299
                self.match(CPP14Parser.AndAssign)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2300
                self.match(CPP14Parser.OrAssign)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2301
                self.match(CPP14Parser.LeftShift)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2302
                self.match(CPP14Parser.Greater)
                self.state = 2303
                self.match(CPP14Parser.Greater)
                self.state = 2305
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 403, self._ctx)
                if la_ == 1:
                    self.state = 2304
                    self.match(CPP14Parser.Assign)

                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2307
                self.match(CPP14Parser.LeftShiftAssign)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2308
                self.match(CPP14Parser.Equal)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2309
                self.match(CPP14Parser.NotEqual)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2310
                self.match(CPP14Parser.LessEqual)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2311
                self.match(CPP14Parser.GreaterEqual)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2312
                self.match(CPP14Parser.AndAnd)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 2313
                self.match(CPP14Parser.OrOr)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 2314
                self.match(CPP14Parser.PlusPlus)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 2315
                self.match(CPP14Parser.MinusMinus)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 2316
                self.match(CPP14Parser.Comma)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2317
                self.match(CPP14Parser.ArrowStar)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2318
                self.match(CPP14Parser.Arrow)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2319
                self.match(CPP14Parser.LeftParen)
                self.state = 2320
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2321
                self.match(CPP14Parser.LeftBracket)
                self.state = 2322
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 2323
                self.match(CPP14Parser.UnaryCondition)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[3] = self.nestednamespecifier_sempred
        self._predicates[4] = self.capturelist_sempred
        self._predicates[7] = self.postfixexpression_sempred
        self._predicates[13] = self.noptrnewdeclarator_sempred
        self._predicates[16] = self.pmexpression_sempred
        self._predicates[17] = self.multiplicativeexpression_sempred
        self._predicates[18] = self.additiveexpression_sempred
        self._predicates[19] = self.shiftexpression_sempred
        self._predicates[20] = self.relationalexpression_sempred
        self._predicates[21] = self.equalityexpression_sempred
        self._predicates[22] = self.andexpression_sempred
        self._predicates[23] = self.exclusiveorexpression_sempred
        self._predicates[24] = self.inclusiveorexpression_sempred
        self._predicates[25] = self.logicalandexpression_sempred
        self._predicates[26] = self.logicalorexpression_sempred
        self._predicates[31] = self.expression_sempred
        self._predicates[40] = self.declarationseq_sempred
        self._predicates[48] = self.enumeratorlist_sempred
        self._predicates[49] = self.attributespecifierseq_sempred
        self._predicates[51] = self.attributelist_sempred
        self._predicates[53] = self.balancedtokenseq_sempred
        self._predicates[55] = self.initdeclaratorlist_sempred
        self._predicates[58] = self.noptrdeclarator_sempred
        self._predicates[63] = self.noptrabstractdeclarator_sempred
        self._predicates[65] = self.noptrabstractpackdeclarator_sempred
        self._predicates[67] = self.parameterdeclarationlist_sempred
        self._predicates[70] = self.initializerlist_sempred
        self._predicates[72] = self.memberdeclaratorlist_sempred
        self._predicates[74] = self.virtspecifierseq_sempred
        self._predicates[76] = self.basespecifierlist_sempred
        self._predicates[80] = self.templateparameterlist_sempred
        self._predicates[82] = self.templateargumentlist_sempred
        self._predicates[86] = self.typeidlist_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def nestednamespecifier_sempred(self, localctx: NestednamespecifierContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 1)

    def capturelist_sempred(self, localctx: CapturelistContext, predIndex: int):
        if predIndex == 1:
            return self.precpred(self._ctx, 1)

    def postfixexpression_sempred(self, localctx: PostfixexpressionContext, predIndex: int):
        if predIndex == 2:
            return self.precpred(self._ctx, 6)

    def noptrnewdeclarator_sempred(self, localctx: NoptrnewdeclaratorContext, predIndex: int):
        if predIndex == 3:
            return self.precpred(self._ctx, 1)

    def pmexpression_sempred(self, localctx: PmexpressionContext, predIndex: int):
        if predIndex == 4:
            return self.precpred(self._ctx, 1)

    def multiplicativeexpression_sempred(self, localctx: MultiplicativeexpressionContext, predIndex: int):
        if predIndex == 5:
            return self.precpred(self._ctx, 1)

    def additiveexpression_sempred(self, localctx: AdditiveexpressionContext, predIndex: int):
        if predIndex == 6:
            return self.precpred(self._ctx, 1)

    def shiftexpression_sempred(self, localctx: ShiftexpressionContext, predIndex: int):
        if predIndex == 7:
            return self.precpred(self._ctx, 1)

    def relationalexpression_sempred(self, localctx: RelationalexpressionContext, predIndex: int):
        if predIndex == 8:
            return self.precpred(self._ctx, 1)

    def equalityexpression_sempred(self, localctx: EqualityexpressionContext, predIndex: int):
        if predIndex == 9:
            return self.precpred(self._ctx, 1)

    def andexpression_sempred(self, localctx: AndexpressionContext, predIndex: int):
        if predIndex == 10:
            return self.precpred(self._ctx, 1)

    def exclusiveorexpression_sempred(self, localctx: ExclusiveorexpressionContext, predIndex: int):
        if predIndex == 11:
            return self.precpred(self._ctx, 1)

    def inclusiveorexpression_sempred(self, localctx: InclusiveorexpressionContext, predIndex: int):
        if predIndex == 12:
            return self.precpred(self._ctx, 1)

    def logicalandexpression_sempred(self, localctx: LogicalandexpressionContext, predIndex: int):
        if predIndex == 13:
            return self.precpred(self._ctx, 1)

    def logicalorexpression_sempred(self, localctx: LogicalorexpressionContext, predIndex: int):
        if predIndex == 14:
            return self.precpred(self._ctx, 1)

    def expression_sempred(self, localctx: ExpressionContext, predIndex: int):
        if predIndex == 15:
            return self.precpred(self._ctx, 1)

    def declarationseq_sempred(self, localctx: DeclarationseqContext, predIndex: int):
        if predIndex == 16:
            return self.precpred(self._ctx, 1)

    def enumeratorlist_sempred(self, localctx: EnumeratorlistContext, predIndex: int):
        if predIndex == 17:
            return self.precpred(self._ctx, 1)

    def attributespecifierseq_sempred(self, localctx: AttributespecifierseqContext, predIndex: int):
        if predIndex == 18:
            return self.precpred(self._ctx, 1)

    def attributelist_sempred(self, localctx: AttributelistContext, predIndex: int):
        if predIndex == 19:
            return self.precpred(self._ctx, 1)

    def balancedtokenseq_sempred(self, localctx: BalancedtokenseqContext, predIndex: int):
        if predIndex == 20:
            return self.precpred(self._ctx, 1)

    def initdeclaratorlist_sempred(self, localctx: InitdeclaratorlistContext, predIndex: int):
        if predIndex == 21:
            return self.precpred(self._ctx, 1)

    def noptrdeclarator_sempred(self, localctx: NoptrdeclaratorContext, predIndex: int):
        if predIndex == 22:
            return self.precpred(self._ctx, 2)

    def noptrabstractdeclarator_sempred(self, localctx: NoptrabstractdeclaratorContext, predIndex: int):
        if predIndex == 23:
            return self.precpred(self._ctx, 5)

        if predIndex == 24:
            return self.precpred(self._ctx, 3)

    def noptrabstractpackdeclarator_sempred(self, localctx: NoptrabstractpackdeclaratorContext, predIndex: int):
        if predIndex == 25:
            return self.precpred(self._ctx, 2)

    def parameterdeclarationlist_sempred(self, localctx: ParameterdeclarationlistContext, predIndex: int):
        if predIndex == 26:
            return self.precpred(self._ctx, 1)

    def initializerlist_sempred(self, localctx: InitializerlistContext, predIndex: int):
        if predIndex == 27:
            return self.precpred(self._ctx, 1)

    def memberdeclaratorlist_sempred(self, localctx: MemberdeclaratorlistContext, predIndex: int):
        if predIndex == 28:
            return self.precpred(self._ctx, 1)

    def virtspecifierseq_sempred(self, localctx: VirtspecifierseqContext, predIndex: int):
        if predIndex == 29:
            return self.precpred(self._ctx, 1)

    def basespecifierlist_sempred(self, localctx: BasespecifierlistContext, predIndex: int):
        if predIndex == 30:
            return self.precpred(self._ctx, 1)

    def templateparameterlist_sempred(self, localctx: TemplateparameterlistContext, predIndex: int):
        if predIndex == 31:
            return self.precpred(self._ctx, 1)

    def templateargumentlist_sempred(self, localctx: TemplateargumentlistContext, predIndex: int):
        if predIndex == 32:
            return self.precpred(self._ctx, 1)

    def typeidlist_sempred(self, localctx: TypeidlistContext, predIndex: int):
        if predIndex == 33:
            return self.precpred(self._ctx, 1)
