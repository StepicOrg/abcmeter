# Generated from /home/meanmail/MyProjects/antlr/cpp/grammars/CPP14.g4 by ANTLR 4.7
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *
from antlr4.error.Errors import InputMismatchException
from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0091")
        buf.write("\u0967\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\3\2\5\2\u016e\n\2\3\2\3\2\3\3")
        buf.write("\3\3\3\3\3\3\3\3\5\3\u0177\n\3\3\4\3\4\5\4\u017b\n\4\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0186\n\5\3\6\3")
        buf.write("\6\5\6\u018a\n\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\5\7\u0199\n\7\3\7\3\7\3\7\3\7\3\7\5\7\u01a0")
        buf.write("\n\7\3\7\3\7\3\7\7\7\u01a5\n\7\f\7\16\7\u01a8\13\7\3\b")
        buf.write("\3\b\3\b\5\b\u01ad\n\b\3\b\3\b\3\b\3\b\5\b\u01b3\n\b\7")
        buf.write("\b\u01b5\n\b\f\b\16\b\u01b8\13\b\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\5\t\u01c3\n\t\3\n\3\n\3\n\3\n\5\n\u01c9")
        buf.write("\n\n\3\n\5\n\u01cc\n\n\3\n\5\n\u01cf\n\n\3\n\5\n\u01d2")
        buf.write("\n\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\5\13\u01de\n\13\3\13\3\13\5\13\u01e2\n\13\3\13\3\13\3")
        buf.write("\13\3\13\5\13\u01e8\n\13\3\13\3\13\3\13\3\13\3\13\5\13")
        buf.write("\u01ef\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u0223")
        buf.write("\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\5\13\u0232\n\13\3\13\3\13\3\13\3\13\5")
        buf.write("\13\u0238\n\13\3\13\3\13\3\13\3\13\5\13\u023e\n\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\7\13")
        buf.write("\u024b\n\13\f\13\16\13\u024e\13\13\3\f\3\f\3\r\5\r\u0253")
        buf.write("\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\5\r\u0262\n\r\3\r\3\r\3\r\3\r\5\r\u0268\n\r\3\16\3")
        buf.write("\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u0287\n\16\3\17\3")
        buf.write("\17\3\17\3\17\5\17\u028d\n\17\3\20\3\20\3\21\5\21\u0292")
        buf.write("\n\21\3\21\3\21\5\21\u0296\n\21\3\21\3\21\5\21\u029a\n")
        buf.write("\21\3\21\5\21\u029d\n\21\3\21\5\21\u02a0\n\21\3\21\3\21")
        buf.write("\5\21\u02a4\n\21\3\21\3\21\3\21\3\21\5\21\u02aa\n\21\5")
        buf.write("\21\u02ac\n\21\3\22\3\22\3\22\3\22\3\23\3\23\5\23\u02b4")
        buf.write("\n\23\3\23\5\23\u02b7\n\23\3\24\3\24\3\24\3\24\3\24\5")
        buf.write("\24\u02be\n\24\3\24\3\24\3\24\3\24\3\24\5\24\u02c5\n\24")
        buf.write("\7\24\u02c7\n\24\f\24\16\24\u02ca\13\24\3\25\3\25\5\25")
        buf.write("\u02ce\n\25\3\25\3\25\5\25\u02d2\n\25\3\26\5\26\u02d5")
        buf.write("\n\26\3\26\3\26\3\26\5\26\u02da\n\26\3\26\3\26\3\26\3")
        buf.write("\26\5\26\u02e0\n\26\3\27\3\27\3\27\3\27\3\27\3\27\5\27")
        buf.write("\u02e8\n\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\7\30\u02f3\n\30\f\30\16\30\u02f6\13\30\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\7\31")
        buf.write("\u0304\n\31\f\31\16\31\u0307\13\31\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\7\32\u0312\n\32\f\32\16\32\u0315")
        buf.write("\13\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3")
        buf.write("\33\7\33\u0321\n\33\f\33\16\33\u0324\13\33\3\34\3\34\3")
        buf.write("\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\7\34\u0335\n\34\f\34\16\34\u0338\13\34\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\7\35\u0343\n")
        buf.write("\35\f\35\16\35\u0346\13\35\3\36\3\36\3\36\3\36\3\36\3")
        buf.write("\36\7\36\u034e\n\36\f\36\16\36\u0351\13\36\3\37\3\37\3")
        buf.write("\37\3\37\3\37\3\37\7\37\u0359\n\37\f\37\16\37\u035c\13")
        buf.write("\37\3 \3 \3 \3 \3 \3 \7 \u0364\n \f \16 \u0367\13 \3!")
        buf.write("\3!\3!\3!\3!\3!\7!\u036f\n!\f!\16!\u0372\13!\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\7\"\u037a\n\"\f\"\16\"\u037d\13\"\3#\3")
        buf.write("#\3#\5#\u0382\n#\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3&\3")
        buf.write("&\3&\3&\3&\3&\5&\u0395\n&\3\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\3\'\3\'\3\'\3\'\5\'\u03a2\n\'\3(\3(\3(\3(\3(\3(\7(\u03aa")
        buf.write("\n(\f(\16(\u03ad\13(\3)\3)\3*\5*\u03b2\n*\3*\3*\3*\3*")
        buf.write("\5*\u03b8\n*\3*\3*\5*\u03bc\n*\3*\3*\5*\u03c0\n*\3*\3")
        buf.write("*\5*\u03c4\n*\3*\3*\5*\u03c8\n*\3*\3*\5*\u03cc\n*\3*\3")
        buf.write("*\5*\u03d0\n*\3*\3*\3*\5*\u03d5\n*\3*\5*\u03d8\n*\3+\3")
        buf.write("+\3+\3+\3+\3,\3,\3,\3,\3-\5-\u03e4\n-\3-\3-\3.\3.\5.\u03ea")
        buf.write("\n.\3.\3.\3/\3/\3/\3/\3/\7/\u03f3\n/\f/\16/\u03f6\13/")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u040b\n")
        buf.write("\60\3\61\3\61\3\61\3\62\3\62\5\62\u0412\n\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\3\62\5\62\u041a\n\62\3\62\3\62\3\62\3")
        buf.write("\62\5\62\u0420\n\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\5\63\u0434\n\63\3\63\3\63\5\63\u0438\n\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0445")
        buf.write("\n\63\3\64\3\64\5\64\u0449\n\64\3\65\5\65\u044c\n\65\3")
        buf.write("\65\3\65\3\65\3\66\3\66\5\66\u0453\n\66\3\67\3\67\3\67")
        buf.write("\3\67\3\67\3\67\5\67\u045b\n\67\3\67\3\67\3\67\3\67\3")
        buf.write("\67\3\67\5\67\u0463\n\67\38\38\38\38\39\39\39\39\39\7")
        buf.write("9\u046e\n9\f9\169\u0471\139\3:\3:\3:\3:\3:\3:\3:\3:\3")
        buf.write(":\3:\3:\5:\u047e\n:\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\5;\u048e\n;\3;\3;\5;\u0492\n;\3;\3;\5;\u0496\n")
        buf.write(";\3<\3<\3<\5<\u049b\n<\3<\3<\3<\3<\3=\5=\u04a2\n=\3=\5")
        buf.write("=\u04a5\n=\3=\3=\3=\5=\u04aa\n=\3=\3=\3=\5=\u04af\n=\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3?\3?\3@\3@\3@\3@\3@\3@\3@\3@\3")
        buf.write("@\3@\3@\3@\5@\u04c7\n@\3A\3A\5A\u04cb\nA\3A\3A\3A\5A\u04d0")
        buf.write("\nA\3B\3B\3B\3B\3B\5B\u04d7\nB\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\5B\u04e1\nB\3C\3C\3C\5C\u04e6\nC\3C\5C\u04e9\nC\3C\3")
        buf.write("C\3C\3C\3C\3C\3C\3C\5C\u04f3\nC\3C\3C\3C\3C\5C\u04f9\n")
        buf.write("C\3C\3C\3C\5C\u04fe\nC\3D\3D\5D\u0502\nD\3D\3D\3D\5D\u0507")
        buf.write("\nD\3E\3E\5E\u050b\nE\3E\3E\3E\5E\u0510\nE\3F\5F\u0513")
        buf.write("\nF\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3")
        buf.write("F\3F\3F\3F\5F\u0529\nF\3G\3G\3G\5G\u052e\nG\3H\3H\3H\3")
        buf.write("H\3H\3H\3H\3H\3H\5H\u0539\nH\3I\3I\5I\u053d\nI\3I\5I\u0540")
        buf.write("\nI\3I\5I\u0543\nI\3I\3I\5I\u0547\nI\3I\3I\3I\5I\u054c")
        buf.write("\nI\5I\u054e\nI\3J\3J\3J\3J\3J\5J\u0555\nJ\3K\3K\3K\3")
        buf.write("L\3L\3L\3L\3L\3L\7L\u0560\nL\fL\16L\u0563\13L\3M\3M\3")
        buf.write("M\3M\3M\5M\u056a\nM\3N\3N\3O\3O\5O\u0570\nO\3P\3P\3Q\3")
        buf.write("Q\5Q\u0576\nQ\3Q\3Q\3Q\3Q\3Q\5Q\u057d\nQ\3R\5R\u0580\n")
        buf.write("R\3R\3R\3R\3R\3R\3R\3R\5R\u0589\nR\3R\3R\3R\3R\3R\3R\5")
        buf.write("R\u0591\nR\3S\5S\u0594\nS\3T\3T\3U\5U\u0599\nU\3U\3U\3")
        buf.write("V\3V\5V\u059f\nV\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u05aa\n")
        buf.write("V\3W\5W\u05ad\nW\3W\3W\3W\5W\u05b2\nW\3W\3W\3W\3X\3X\3")
        buf.write("X\3X\3X\3X\3Y\3Y\3Y\3Y\5Y\u05c1\nY\3Y\3Y\3Y\3Y\5Y\u05c7")
        buf.write("\nY\3Z\3Z\3Z\3Z\3Z\7Z\u05ce\nZ\fZ\16Z\u05d1\13Z\3[\3[")
        buf.write("\3[\3[\3[\3[\3[\5[\u05da\n[\3\\\3\\\3\\\3\\\5\\\u05e0")
        buf.write("\n\\\3\\\3\\\3\\\3\\\3\\\3\\\5\\\u05e8\n\\\3\\\3\\\5\\")
        buf.write("\u05ec\n\\\3]\3]\5]\u05f0\n]\3]\3]\3]\5]\u05f5\n]\3]\3")
        buf.write("]\3]\5]\u05fa\n]\3]\3]\3]\3]\3]\7]\u0601\n]\f]\16]\u0604")
        buf.write("\13]\3^\3^\5^\u0608\n^\3_\3_\5_\u060c\n_\3`\3`\3`\3`\3")
        buf.write("a\3a\3b\3b\3b\3b\3c\3c\5c\u061a\nc\3c\3c\7c\u061e\nc\f")
        buf.write("c\16c\u0621\13c\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\5")
        buf.write("d\u062f\nd\3e\3e\3e\3e\3e\3e\7e\u0637\ne\fe\16e\u063a")
        buf.write("\13e\3f\3f\5f\u063e\nf\3g\3g\3g\3g\3g\5g\u0645\ng\3h\3")
        buf.write("h\3h\3h\5h\u064b\nh\3i\3i\3i\5i\u0650\ni\3i\3i\3i\3i\5")
        buf.write("i\u0656\ni\3i\3i\3i\3i\3i\5i\u065d\ni\3i\3i\5i\u0661\n")
        buf.write("i\7i\u0663\ni\fi\16i\u0666\13i\3j\3j\3j\3j\5j\u066c\n")
        buf.write("j\3j\5j\u066f\nj\3j\5j\u0672\nj\3j\5j\u0675\nj\3k\3k\3")
        buf.write("k\5k\u067a\nk\3l\3l\5l\u067e\nl\3l\5l\u0681\nl\3l\3l\5")
        buf.write("l\u0685\nl\3l\3l\5l\u0689\nl\3l\3l\3l\5l\u068e\nl\3l\5")
        buf.write("l\u0691\nl\5l\u0693\nl\3m\3m\5m\u0697\nm\3n\3n\3o\3o\3")
        buf.write("p\5p\u069e\np\3p\3p\3q\3q\5q\u06a4\nq\3r\3r\5r\u06a8\n")
        buf.write("r\3r\3r\3r\3r\5r\u06ae\nr\3s\3s\3s\5s\u06b3\ns\5s\u06b5")
        buf.write("\ns\3t\3t\3t\3t\5t\u06bb\nt\3t\3t\5t\u06bf\nt\3t\3t\3")
        buf.write("t\3t\5t\u06c5\nt\3t\3t\3t\3t\3t\5t\u06cc\nt\3t\3t\5t\u06d0")
        buf.write("\nt\7t\u06d2\nt\ft\16t\u06d5\13t\3u\3u\3u\3u\5u\u06db")
        buf.write("\nu\3v\3v\3v\3v\3v\3v\3v\3v\5v\u06e5\nv\3v\3v\5v\u06e9")
        buf.write("\nv\7v\u06eb\nv\fv\16v\u06ee\13v\3w\5w\u06f1\nw\3w\5w")
        buf.write("\u06f4\nw\3w\3w\3w\3w\5w\u06fa\nw\3x\3x\3x\3x\3x\3x\7")
        buf.write("x\u0702\nx\fx\16x\u0705\13x\3y\5y\u0708\ny\3y\3y\3y\3")
        buf.write("y\5y\u070e\ny\3y\3y\3y\3y\3y\3y\5y\u0716\ny\3y\3y\5y\u071a")
        buf.write("\ny\3y\5y\u071d\ny\3y\3y\5y\u0721\ny\3y\3y\3y\5y\u0726")
        buf.write("\ny\3z\5z\u0729\nz\3z\5z\u072c\nz\3z\3z\5z\u0730\nz\3")
        buf.write("z\3z\3{\5{\u0735\n{\3{\3{\3{\3{\3{\3{\3{\3{\5{\u073f\n")
        buf.write("{\3|\3|\3|\3|\3|\5|\u0746\n|\3}\3}\3}\5}\u074b\n}\3~\3")
        buf.write("~\5~\u074f\n~\3\177\3\177\3\177\5\177\u0754\n\177\3\177")
        buf.write("\3\177\3\177\3\177\5\177\u075a\n\177\7\177\u075c\n\177")
        buf.write("\f\177\16\177\u075f\13\177\3\u0080\3\u0080\3\u0080\5\u0080")
        buf.write("\u0764\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080")
        buf.write("\u076a\n\u0080\3\u0081\3\u0081\5\u0081\u076e\n\u0081\3")
        buf.write("\u0082\3\u0082\3\u0082\5\u0082\u0773\n\u0082\3\u0082\3")
        buf.write("\u0082\3\u0083\3\u0083\5\u0083\u0779\n\u0083\3\u0083\3")
        buf.write("\u0083\5\u0083\u077d\n\u0083\3\u0083\5\u0083\u0780\n\u0083")
        buf.write("\3\u0083\3\u0083\5\u0083\u0784\n\u0083\3\u0083\5\u0083")
        buf.write("\u0787\n\u0083\5\u0083\u0789\n\u0083\3\u0084\5\u0084\u078c")
        buf.write("\n\u0084\3\u0084\3\u0084\3\u0085\3\u0085\3\u0086\3\u0086")
        buf.write("\3\u0087\3\u0087\5\u0087\u0796\n\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\5\u0087\u079b\n\u0087\5\u0087\u079d\n\u0087\3")
        buf.write("\u0088\5\u0088\u07a0\n\u0088\3\u0088\5\u0088\u07a3\n\u0088")
        buf.write("\3\u0088\5\u0088\u07a6\n\u0088\3\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u07af\n\u0088")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\7\u0089")
        buf.write("\u07b7\n\u0089\f\u0089\16\u0089\u07ba\13\u0089\3\u008a")
        buf.write("\3\u008a\5\u008a\u07be\n\u008a\3\u008a\5\u008a\u07c1\n")
        buf.write("\u008a\3\u008a\3\u008a\5\u008a\u07c5\n\u008a\3\u008a\5")
        buf.write("\u008a\u07c8\n\u008a\3\u008a\5\u008a\u07cb\n\u008a\3\u008a")
        buf.write("\3\u008a\5\u008a\u07cf\n\u008a\3\u008b\3\u008b\3\u008b")
        buf.write("\3\u008b\3\u008b\7\u008b\u07d6\n\u008b\f\u008b\16\u008b")
        buf.write("\u07d9\13\u008b\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d")
        buf.write("\3\u008d\3\u008e\3\u008e\3\u008e\3\u008f\3\u008f\3\u008f")
        buf.write("\5\u008f\u07e7\n\u008f\3\u008f\3\u008f\3\u008f\3\u008f")
        buf.write("\5\u008f\u07ed\n\u008f\7\u008f\u07ef\n\u008f\f\u008f\16")
        buf.write("\u008f\u07f2\13\u008f\3\u0090\5\u0090\u07f5\n\u0090\3")
        buf.write("\u0090\3\u0090\5\u0090\u07f9\n\u0090\3\u0090\3\u0090\5")
        buf.write("\u0090\u07fd\n\u0090\3\u0090\3\u0090\5\u0090\u0801\n\u0090")
        buf.write("\3\u0090\3\u0090\5\u0090\u0805\n\u0090\3\u0090\3\u0090")
        buf.write("\5\u0090\u0809\n\u0090\3\u0091\5\u0091\u080c\n\u0091\3")
        buf.write("\u0091\3\u0091\5\u0091\u0810\n\u0091\3\u0092\3\u0092\3")
        buf.write("\u0093\3\u0093\3\u0094\3\u0094\3\u0094\3\u0095\3\u0095")
        buf.write("\5\u0095\u081b\n\u0095\3\u0096\3\u0096\5\u0096\u081f\n")
        buf.write("\u0096\3\u0097\3\u0097\3\u0097\3\u0098\3\u0098\5\u0098")
        buf.write("\u0826\n\u0098\3\u0098\3\u0098\5\u0098\u082a\n\u0098\3")
        buf.write("\u0098\3\u0098\3\u0098\5\u0098\u082f\n\u0098\3\u0099\3")
        buf.write("\u0099\3\u0099\5\u0099\u0834\n\u0099\3\u0099\3\u0099\3")
        buf.write("\u0099\3\u0099\3\u0099\5\u0099\u083b\n\u0099\3\u009a\3")
        buf.write("\u009a\5\u009a\u083f\n\u009a\3\u009b\3\u009b\3\u009b\3")
        buf.write("\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0849\n")
        buf.write("\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\7\u009e")
        buf.write("\u0857\n\u009e\f\u009e\16\u009e\u085a\13\u009e\3\u009f")
        buf.write("\3\u009f\5\u009f\u085e\n\u009f\3\u009f\5\u009f\u0861\n")
        buf.write("\u009f\3\u009f\3\u009f\5\u009f\u0865\n\u009f\3\u009f\3")
        buf.write("\u009f\3\u009f\3\u009f\5\u009f\u086b\n\u009f\3\u009f\5")
        buf.write("\u009f\u086e\n\u009f\3\u009f\3\u009f\5\u009f\u0872\n\u009f")
        buf.write("\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f")
        buf.write("\3\u009f\5\u009f\u087c\n\u009f\3\u009f\5\u009f\u087f\n")
        buf.write("\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f")
        buf.write("\5\u009f\u0887\n\u009f\3\u009f\3\u009f\3\u009f\3\u009f")
        buf.write("\5\u009f\u088d\n\u009f\3\u00a0\3\u00a0\3\u00a0\5\u00a0")
        buf.write("\u0892\n\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\3\u00a1\5\u00a1\u089a\n\u00a1\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\3\u00a1\3\u00a1\5\u00a1\u08a1\n\u00a1\3\u00a1\3\u00a1")
        buf.write("\5\u00a1\u08a5\n\u00a1\3\u00a2\3\u00a2\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\5\u00a3\u08ac\n\u00a3\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\5\u00a3\u08b2\n\u00a3\7\u00a3\u08b4\n\u00a3\f")
        buf.write("\u00a3\16\u00a3\u08b7\13\u00a3\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\5\u00a4\u08bc\n\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u08c5\n\u00a5\3\u00a5")
        buf.write("\3\u00a5\5\u00a5\u08c9\n\u00a5\3\u00a6\5\u00a6\u08cc\n")
        buf.write("\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7\3\u00a7")
        buf.write("\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a9")
        buf.write("\3\u00a9\5\u00a9\u08dc\n\u00a9\3\u00a9\3\u00a9\3\u00a9")
        buf.write("\3\u00aa\3\u00aa\5\u00aa\u08e3\n\u00aa\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ac\5\u00ac\u08ec")
        buf.write("\n\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u08f2")
        buf.write("\n\u00ac\3\u00ac\3\u00ac\5\u00ac\u08f6\n\u00ac\3\u00ac")
        buf.write("\5\u00ac\u08f9\n\u00ac\3\u00ad\3\u00ad\5\u00ad\u08fd\n")
        buf.write("\u00ad\3\u00ae\3\u00ae\5\u00ae\u0901\n\u00ae\3\u00af\3")
        buf.write("\u00af\3\u00af\5\u00af\u0906\n\u00af\3\u00af\3\u00af\3")
        buf.write("\u00b0\3\u00b0\3\u00b0\5\u00b0\u090d\n\u00b0\3\u00b0\3")
        buf.write("\u00b0\3\u00b0\3\u00b0\5\u00b0\u0913\n\u00b0\7\u00b0\u0915")
        buf.write("\n\u00b0\f\u00b0\16\u00b0\u0918\13\u00b0\3\u00b1\3\u00b1")
        buf.write("\3\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0920\n\u00b1")
        buf.write("\3\u00b2\3\u00b2\3\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3")
        buf.write("\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4")
        buf.write("\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4")
        buf.write("\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4")
        buf.write("\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4")
        buf.write("\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4")
        buf.write("\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4")
        buf.write("\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4")
        buf.write("\u0959\n\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5")
        buf.write("\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0963\n\u00b5\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\2$\f\16\24&.\60\62\64\668:<>@BN\\p\u0096")
        buf.write("\u00b2\u00b8\u00c4\u00c8\u00d0\u00e6\u00ea\u00ee\u00fc")
        buf.write("\u0110\u0114\u011c\u013a\u0144\u015e\u00b7\2\4\6\b\n\f")
        buf.write("\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@")
        buf.write("BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce")
        buf.write("\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0")
        buf.write("\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2")
        buf.write("\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104")
        buf.write("\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116")
        buf.write("\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128")
        buf.write("\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a")
        buf.write("\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c")
        buf.write("\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e")
        buf.write("\u0160\u0162\u0164\u0166\u0168\u016a\2\t\4\2WY]`\4\2\22")
        buf.write("\22NN\4\2]]rr\5\2\21\21>>II\4\2\"\"\61\61\3\2\62\64\3")
        buf.write("\2\u008a\u008d\2\u0aa1\2\u016d\3\2\2\2\4\u0176\3\2\2\2")
        buf.write("\6\u017a\3\2\2\2\b\u0185\3\2\2\2\n\u0187\3\2\2\2\f\u0198")
        buf.write("\3\2\2\2\16\u01a9\3\2\2\2\20\u01c2\3\2\2\2\22\u01c4\3")
        buf.write("\2\2\2\24\u0222\3\2\2\2\26\u024f\3\2\2\2\30\u0267\3\2")
        buf.write("\2\2\32\u0286\3\2\2\2\34\u028c\3\2\2\2\36\u028e\3\2\2")
        buf.write("\2 \u02ab\3\2\2\2\"\u02ad\3\2\2\2$\u02b6\3\2\2\2&\u02b8")
        buf.write("\3\2\2\2(\u02d1\3\2\2\2*\u02df\3\2\2\2,\u02e7\3\2\2\2")
        buf.write(".\u02e9\3\2\2\2\60\u02f7\3\2\2\2\62\u0308\3\2\2\2\64\u0316")
        buf.write("\3\2\2\2\66\u0325\3\2\2\28\u0339\3\2\2\2:\u0347\3\2\2")
        buf.write("\2<\u0352\3\2\2\2>\u035d\3\2\2\2@\u0368\3\2\2\2B\u0373")
        buf.write("\3\2\2\2D\u0381\3\2\2\2F\u0383\3\2\2\2H\u0389\3\2\2\2")
        buf.write("J\u0394\3\2\2\2L\u03a1\3\2\2\2N\u03a3\3\2\2\2P\u03ae\3")
        buf.write("\2\2\2R\u03d7\3\2\2\2T\u03d9\3\2\2\2V\u03de\3\2\2\2X\u03e3")
        buf.write("\3\2\2\2Z\u03e7\3\2\2\2\\\u03ed\3\2\2\2^\u040a\3\2\2\2")
        buf.write("`\u040c\3\2\2\2b\u041f\3\2\2\2d\u0444\3\2\2\2f\u0448\3")
        buf.write("\2\2\2h\u044b\3\2\2\2j\u0452\3\2\2\2l\u0462\3\2\2\2n\u0464")
        buf.write("\3\2\2\2p\u0468\3\2\2\2r\u047d\3\2\2\2t\u0495\3\2\2\2")
        buf.write("v\u0497\3\2\2\2x\u04ae\3\2\2\2z\u04b0\3\2\2\2|\u04b8\3")
        buf.write("\2\2\2~\u04c6\3\2\2\2\u0080\u04cf\3\2\2\2\u0082\u04e0")
        buf.write("\3\2\2\2\u0084\u04fd\3\2\2\2\u0086\u0506\3\2\2\2\u0088")
        buf.write("\u050f\3\2\2\2\u008a\u0528\3\2\2\2\u008c\u052d\3\2\2\2")
        buf.write("\u008e\u0538\3\2\2\2\u0090\u054d\3\2\2\2\u0092\u0554\3")
        buf.write("\2\2\2\u0094\u0556\3\2\2\2\u0096\u0559\3\2\2\2\u0098\u0569")
        buf.write("\3\2\2\2\u009a\u056b\3\2\2\2\u009c\u056f\3\2\2\2\u009e")
        buf.write("\u0571\3\2\2\2\u00a0\u057c\3\2\2\2\u00a2\u0590\3\2\2\2")
        buf.write("\u00a4\u0593\3\2\2\2\u00a6\u0595\3\2\2\2\u00a8\u0598\3")
        buf.write("\2\2\2\u00aa\u05a9\3\2\2\2\u00ac\u05ac\3\2\2\2\u00ae\u05b6")
        buf.write("\3\2\2\2\u00b0\u05c6\3\2\2\2\u00b2\u05c8\3\2\2\2\u00b4")
        buf.write("\u05d9\3\2\2\2\u00b6\u05eb\3\2\2\2\u00b8\u05f4\3\2\2\2")
        buf.write("\u00ba\u0605\3\2\2\2\u00bc\u060b\3\2\2\2\u00be\u060d\3")
        buf.write("\2\2\2\u00c0\u0611\3\2\2\2\u00c2\u0613\3\2\2\2\u00c4\u0617")
        buf.write("\3\2\2\2\u00c6\u062e\3\2\2\2\u00c8\u0630\3\2\2\2\u00ca")
        buf.write("\u063b\3\2\2\2\u00cc\u0644\3\2\2\2\u00ce\u064a\3\2\2\2")
        buf.write("\u00d0\u0655\3\2\2\2\u00d2\u0667\3\2\2\2\u00d4\u0676\3")
        buf.write("\2\2\2\u00d6\u0692\3\2\2\2\u00d8\u0694\3\2\2\2\u00da\u0698")
        buf.write("\3\2\2\2\u00dc\u069a\3\2\2\2\u00de\u069d\3\2\2\2\u00e0")
        buf.write("\u06a1\3\2\2\2\u00e2\u06ad\3\2\2\2\u00e4\u06b4\3\2\2\2")
        buf.write("\u00e6\u06c4\3\2\2\2\u00e8\u06da\3\2\2\2\u00ea\u06dc\3")
        buf.write("\2\2\2\u00ec\u06f9\3\2\2\2\u00ee\u06fb\3\2\2\2\u00f0\u0725")
        buf.write("\3\2\2\2\u00f2\u0728\3\2\2\2\u00f4\u073e\3\2\2\2\u00f6")
        buf.write("\u0745\3\2\2\2\u00f8\u074a\3\2\2\2\u00fa\u074e\3\2\2\2")
        buf.write("\u00fc\u0750\3\2\2\2\u00fe\u0769\3\2\2\2\u0100\u076d\3")
        buf.write("\2\2\2\u0102\u076f\3\2\2\2\u0104\u0788\3\2\2\2\u0106\u078b")
        buf.write("\3\2\2\2\u0108\u078f\3\2\2\2\u010a\u0791\3\2\2\2\u010c")
        buf.write("\u079c\3\2\2\2\u010e\u07ae\3\2\2\2\u0110\u07b0\3\2\2\2")
        buf.write("\u0112\u07ce\3\2\2\2\u0114\u07d0\3\2\2\2\u0116\u07da\3")
        buf.write("\2\2\2\u0118\u07dc\3\2\2\2\u011a\u07e0\3\2\2\2\u011c\u07e3")
        buf.write("\3\2\2\2\u011e\u0808\3\2\2\2\u0120\u080f\3\2\2\2\u0122")
        buf.write("\u0811\3\2\2\2\u0124\u0813\3\2\2\2\u0126\u0815\3\2\2\2")
        buf.write("\u0128\u0818\3\2\2\2\u012a\u081c\3\2\2\2\u012c\u0820\3")
        buf.write("\2\2\2\u012e\u082e\3\2\2\2\u0130\u083a\3\2\2\2\u0132\u083e")
        buf.write("\3\2\2\2\u0134\u0840\3\2\2\2\u0136\u0848\3\2\2\2\u0138")
        buf.write("\u084a\3\2\2\2\u013a\u0850\3\2\2\2\u013c\u088c\3\2\2\2")
        buf.write("\u013e\u088e\3\2\2\2\u0140\u08a4\3\2\2\2\u0142\u08a6\3")
        buf.write("\2\2\2\u0144\u08a8\3\2\2\2\u0146\u08bb\3\2\2\2\u0148\u08c8")
        buf.write("\3\2\2\2\u014a\u08cb\3\2\2\2\u014c\u08d0\3\2\2\2\u014e")
        buf.write("\u08d5\3\2\2\2\u0150\u08d9\3\2\2\2\u0152\u08e0\3\2\2\2")
        buf.write("\u0154\u08e4\3\2\2\2\u0156\u08f8\3\2\2\2\u0158\u08fa\3")
        buf.write("\2\2\2\u015a\u0900\3\2\2\2\u015c\u0902\3\2\2\2\u015e\u0909")
        buf.write("\3\2\2\2\u0160\u091f\3\2\2\2\u0162\u0921\3\2\2\2\u0164")
        buf.write("\u0924\3\2\2\2\u0166\u0958\3\2\2\2\u0168\u0962\3\2\2\2")
        buf.write("\u016a\u0964\3\2\2\2\u016c\u016e\5p9\2\u016d\u016c\3\2")
        buf.write("\2\2\u016d\u016e\3\2\2\2\u016e\u016f\3\2\2\2\u016f\u0170")
        buf.write("\7\2\2\3\u0170\3\3\2\2\2\u0171\u0177\7\3\2\2\u0172\u0177")
        buf.write("\5\16\b\2\u0173\u0174\7\3\2\2\u0174\u0175\7v\2\2\u0175")
        buf.write("\u0177\5\16\b\2\u0176\u0171\3\2\2\2\u0176\u0172\3\2\2")
        buf.write("\2\u0176\u0173\3\2\2\2\u0177\5\3\2\2\2\u0178\u017b\5\b")
        buf.write("\5\2\u0179\u017b\5\n\6\2\u017a\u0178\3\2\2\2\u017a\u0179")
        buf.write("\3\2\2\2\u017b\7\3\2\2\2\u017c\u0186\7\u0080\2\2\u017d")
        buf.write("\u0186\5\u0134\u009b\2\u017e\u0186\5\u0126\u0094\2\u017f")
        buf.write("\u0186\5\u0136\u009c\2\u0180\u0181\7_\2\2\u0181\u0186")
        buf.write("\5\u0100\u0081\2\u0182\u0183\7_\2\2\u0183\u0186\5\u008e")
        buf.write("H\2\u0184\u0186\5\u0140\u00a1\2\u0185\u017c\3\2\2\2\u0185")
        buf.write("\u017d\3\2\2\2\u0185\u017e\3\2\2\2\u0185\u017f\3\2\2\2")
        buf.write("\u0185\u0180\3\2\2\2\u0185\u0182\3\2\2\2\u0185\u0184\3")
        buf.write("\2\2\2\u0186\t\3\2\2\2\u0187\u0189\5\f\7\2\u0188\u018a")
        buf.write("\7@\2\2\u0189\u0188\3\2\2\2\u0189\u018a\3\2\2\2\u018a")
        buf.write("\u018b\3\2\2\2\u018b\u018c\5\b\5\2\u018c\13\3\2\2\2\u018d")
        buf.write("\u018e\b\7\1\2\u018e\u0199\7{\2\2\u018f\u0190\5\u008c")
        buf.write("G\2\u0190\u0191\7{\2\2\u0191\u0199\3\2\2\2\u0192\u0193")
        buf.write("\5\u009cO\2\u0193\u0194\7{\2\2\u0194\u0199\3\2\2\2\u0195")
        buf.write("\u0196\5\u008eH\2\u0196\u0197\7{\2\2\u0197\u0199\3\2\2")
        buf.write("\2\u0198\u018d\3\2\2\2\u0198\u018f\3\2\2\2\u0198\u0192")
        buf.write("\3\2\2\2\u0198\u0195\3\2\2\2\u0199\u01a6\3\2\2\2\u019a")
        buf.write("\u019b\f\4\2\2\u019b\u019c\7\u0080\2\2\u019c\u01a5\7{")
        buf.write("\2\2\u019d\u019f\f\3\2\2\u019e\u01a0\7@\2\2\u019f\u019e")
        buf.write("\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1")
        buf.write("\u01a2\5\u013e\u00a0\2\u01a2\u01a3\7{\2\2\u01a3\u01a5")
        buf.write("\3\2\2\2\u01a4\u019a\3\2\2\2\u01a4\u019d\3\2\2\2\u01a5")
        buf.write("\u01a8\3\2\2\2\u01a6\u01a4\3\2\2\2\u01a6\u01a7\3\2\2\2")
        buf.write("\u01a7\r\3\2\2\2\u01a8\u01a6\3\2\2\2\u01a9\u01aa\b\b\1")
        buf.write("\2\u01aa\u01ac\5\20\t\2\u01ab\u01ad\7\177\2\2\u01ac\u01ab")
        buf.write("\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01b6\3\2\2\2\u01ae")
        buf.write("\u01af\f\3\2\2\u01af\u01b0\7v\2\2\u01b0\u01b2\5\20\t\2")
        buf.write("\u01b1\u01b3\7\177\2\2\u01b2\u01b1\3\2\2\2\u01b2\u01b3")
        buf.write("\3\2\2\2\u01b3\u01b5\3\2\2\2\u01b4\u01ae\3\2\2\2\u01b5")
        buf.write("\u01b8\3\2\2\2\u01b6\u01b4\3\2\2\2\u01b6\u01b7\3\2\2\2")
        buf.write("\u01b7\17\3\2\2\2\u01b8\u01b6\3\2\2\2\u01b9\u01c3\7\u0080")
        buf.write("\2\2\u01ba\u01bb\7]\2\2\u01bb\u01c3\7\u0080\2\2\u01bc")
        buf.write("\u01c3\7A\2\2\u01bd\u01be\7\u0080\2\2\u01be\u01c3\5\u00f6")
        buf.write("|\2\u01bf\u01c0\7]\2\2\u01c0\u01c1\7\u0080\2\2\u01c1\u01c3")
        buf.write("\5\u00f6|\2\u01c2\u01b9\3\2\2\2\u01c2\u01ba\3\2\2\2\u01c2")
        buf.write("\u01bc\3\2\2\2\u01c2\u01bd\3\2\2\2\u01c2\u01bf\3\2\2\2")
        buf.write("\u01c3\21\3\2\2\2\u01c4\u01c5\7Q\2\2\u01c5\u01c6\5\u00ec")
        buf.write("w\2\u01c6\u01c8\7R\2\2\u01c7\u01c9\7+\2\2\u01c8\u01c7")
        buf.write("\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01cb\3\2\2\2\u01ca")
        buf.write("\u01cc\5\u015a\u00ae\2\u01cb\u01ca\3\2\2\2\u01cb\u01cc")
        buf.write("\3\2\2\2\u01cc\u01ce\3\2\2\2\u01cd\u01cf\5\u00b2Z\2\u01ce")
        buf.write("\u01cd\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf\u01d1\3\2\2\2")
        buf.write("\u01d0\u01d2\5\u00d4k\2\u01d1\u01d0\3\2\2\2\u01d1\u01d2")
        buf.write("\3\2\2\2\u01d2\23\3\2\2\2\u01d3\u01d4\b\13\1\2\u01d4\u0223")
        buf.write("\5\u0168\u00b5\2\u01d5\u0223\7A\2\2\u01d6\u01d7\7Q\2\2")
        buf.write("\u01d7\u01d8\5N(\2\u01d8\u01d9\7R\2\2\u01d9\u0223\3\2")
        buf.write("\2\2\u01da\u0223\5\6\4\2\u01db\u01dd\7S\2\2\u01dc\u01de")
        buf.write("\5\4\3\2\u01dd\u01dc\3\2\2\2\u01dd\u01de\3\2\2\2\u01de")
        buf.write("\u01df\3\2\2\2\u01df\u01e1\7T\2\2\u01e0\u01e2\5\22\n\2")
        buf.write("\u01e1\u01e0\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e3\3")
        buf.write("\2\2\2\u01e3\u0223\5Z.\2\u01e4\u01e5\5\u008aF\2\u01e5")
        buf.write("\u01e7\7Q\2\2\u01e6\u01e8\5\26\f\2\u01e7\u01e6\3\2\2\2")
        buf.write("\u01e7\u01e8\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9\u01ea\7")
        buf.write("R\2\2\u01ea\u0223\3\2\2\2\u01eb\u01ec\5\u0148\u00a5\2")
        buf.write("\u01ec\u01ee\7Q\2\2\u01ed\u01ef\5\26\f\2\u01ee\u01ed\3")
        buf.write("\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f1")
        buf.write("\7R\2\2\u01f1\u0223\3\2\2\2\u01f2\u01f3\5\u008aF\2\u01f3")
        buf.write("\u01f4\5\u00fe\u0080\2\u01f4\u0223\3\2\2\2\u01f5\u01f6")
        buf.write("\5\u0148\u00a5\2\u01f6\u01f7\5\u00fe\u0080\2\u01f7\u0223")
        buf.write("\3\2\2\2\u01f8\u01f9\7\33\2\2\u01f9\u01fa\7b\2\2\u01fa")
        buf.write("\u01fb\5\u00e0q\2\u01fb\u01fc\7c\2\2\u01fc\u01fd\7Q\2")
        buf.write("\2\u01fd\u01fe\5N(\2\u01fe\u01ff\7R\2\2\u01ff\u0223\3")
        buf.write("\2\2\2\u0200\u0201\7=\2\2\u0201\u0202\7b\2\2\u0202\u0203")
        buf.write("\5\u00e0q\2\u0203\u0204\7c\2\2\u0204\u0205\7Q\2\2\u0205")
        buf.write("\u0206\5N(\2\u0206\u0207\7R\2\2\u0207\u0223\3\2\2\2\u0208")
        buf.write("\u0209\7\66\2\2\u0209\u020a\7b\2\2\u020a\u020b\5\u00e0")
        buf.write("q\2\u020b\u020c\7c\2\2\u020c\u020d\7Q\2\2\u020d\u020e")
        buf.write("\5N(\2\u020e\u020f\7R\2\2\u020f\u0223\3\2\2\2\u0210\u0211")
        buf.write("\7\24\2\2\u0211\u0212\7b\2\2\u0212\u0213\5\u00e0q\2\u0213")
        buf.write("\u0214\7c\2\2\u0214\u0215\7Q\2\2\u0215\u0216\5N(\2\u0216")
        buf.write("\u0217\7R\2\2\u0217\u0223\3\2\2\2\u0218\u0219\7G\2\2\u0219")
        buf.write("\u021a\7Q\2\2\u021a\u021b\5N(\2\u021b\u021c\7R\2\2\u021c")
        buf.write("\u0223\3\2\2\2\u021d\u021e\7G\2\2\u021e\u021f\7Q\2\2\u021f")
        buf.write("\u0220\5\u00e0q\2\u0220\u0221\7R\2\2\u0221\u0223\3\2\2")
        buf.write("\2\u0222\u01d3\3\2\2\2\u0222\u01d5\3\2\2\2\u0222\u01d6")
        buf.write("\3\2\2\2\u0222\u01da\3\2\2\2\u0222\u01db\3\2\2\2\u0222")
        buf.write("\u01e4\3\2\2\2\u0222\u01eb\3\2\2\2\u0222\u01f2\3\2\2\2")
        buf.write("\u0222\u01f5\3\2\2\2\u0222\u01f8\3\2\2\2\u0222\u0200\3")
        buf.write("\2\2\2\u0222\u0208\3\2\2\2\u0222\u0210\3\2\2\2\u0222\u0218")
        buf.write("\3\2\2\2\u0222\u021d\3\2\2\2\u0223\u024c\3\2\2\2\u0224")
        buf.write("\u0225\f\25\2\2\u0225\u0226\7S\2\2\u0226\u0227\5N(\2\u0227")
        buf.write("\u0228\7T\2\2\u0228\u024b\3\2\2\2\u0229\u022a\f\24\2\2")
        buf.write("\u022a\u022b\7S\2\2\u022b\u022c\5\u00fe\u0080\2\u022c")
        buf.write("\u022d\7T\2\2\u022d\u024b\3\2\2\2\u022e\u022f\f\23\2\2")
        buf.write("\u022f\u0231\7Q\2\2\u0230\u0232\5\26\f\2\u0231\u0230\3")
        buf.write("\2\2\2\u0231\u0232\3\2\2\2\u0232\u0233\3\2\2\2\u0233\u024b")
        buf.write("\7R\2\2\u0234\u0235\f\16\2\2\u0235\u0237\7}\2\2\u0236")
        buf.write("\u0238\7@\2\2\u0237\u0236\3\2\2\2\u0237\u0238\3\2\2\2")
        buf.write("\u0238\u0239\3\2\2\2\u0239\u024b\5\6\4\2\u023a\u023b\f")
        buf.write("\r\2\2\u023b\u023d\7x\2\2\u023c\u023e\7@\2\2\u023d\u023c")
        buf.write("\3\2\2\2\u023d\u023e\3\2\2\2\u023e\u023f\3\2\2\2\u023f")
        buf.write("\u024b\5\6\4\2\u0240\u0241\f\f\2\2\u0241\u0242\7}\2\2")
        buf.write("\u0242\u024b\5\30\r\2\u0243\u0244\f\13\2\2\u0244\u0245")
        buf.write("\7x\2\2\u0245\u024b\5\30\r\2\u0246\u0247\f\n\2\2\u0247")
        buf.write("\u024b\7t\2\2\u0248\u0249\f\t\2\2\u0249\u024b\7u\2\2\u024a")
        buf.write("\u0224\3\2\2\2\u024a\u0229\3\2\2\2\u024a\u022e\3\2\2\2")
        buf.write("\u024a\u0234\3\2\2\2\u024a\u023a\3\2\2\2\u024a\u0240\3")
        buf.write("\2\2\2\u024a\u0243\3\2\2\2\u024a\u0246\3\2\2\2\u024a\u0248")
        buf.write("\3\2\2\2\u024b\u024e\3\2\2\2\u024c\u024a\3\2\2\2\u024c")
        buf.write("\u024d\3\2\2\2\u024d\25\3\2\2\2\u024e\u024c\3\2\2\2\u024f")
        buf.write("\u0250\5\u00fc\177\2\u0250\27\3\2\2\2\u0251\u0253\5\f")
        buf.write("\7\2\u0252\u0251\3\2\2\2\u0252\u0253\3\2\2\2\u0253\u0254")
        buf.write("\3\2\2\2\u0254\u0255\5\u008cG\2\u0255\u0256\7{\2\2\u0256")
        buf.write("\u0257\7_\2\2\u0257\u0258\5\u008cG\2\u0258\u0268\3\2\2")
        buf.write("\2\u0259\u025a\5\f\7\2\u025a\u025b\7@\2\2\u025b\u025c")
        buf.write("\5\u013e\u00a0\2\u025c\u025d\7{\2\2\u025d\u025e\7_\2\2")
        buf.write("\u025e\u025f\5\u008cG\2\u025f\u0268\3\2\2\2\u0260\u0262")
        buf.write("\5\f\7\2\u0261\u0260\3\2\2\2\u0261\u0262\3\2\2\2\u0262")
        buf.write("\u0263\3\2\2\2\u0263\u0264\7_\2\2\u0264\u0268\5\u008c")
        buf.write("G\2\u0265\u0266\7_\2\2\u0266\u0268\5\u008eH\2\u0267\u0252")
        buf.write("\3\2\2\2\u0267\u0259\3\2\2\2\u0267\u0261\3\2\2\2\u0267")
        buf.write("\u0265\3\2\2\2\u0268\31\3\2\2\2\u0269\u0287\5\24\13\2")
        buf.write("\u026a\u0287\5\34\17\2\u026b\u026c\5\36\20\2\u026c\u026d")
        buf.write("\5,\27\2\u026d\u0287\3\2\2\2\u026e\u026f\7:\2\2\u026f")
        buf.write("\u0287\5\32\16\2\u0270\u0271\7:\2\2\u0271\u0272\7Q\2\2")
        buf.write("\u0272\u0273\5\u00e0q\2\u0273\u0274\7R\2\2\u0274\u0287")
        buf.write("\3\2\2\2\u0275\u0276\7:\2\2\u0276\u0277\7\177\2\2\u0277")
        buf.write("\u0278\7Q\2\2\u0278\u0279\7\u0080\2\2\u0279\u0287\7R\2")
        buf.write("\2\u027a\u027b\7\7\2\2\u027b\u027c\7Q\2\2\u027c\u027d")
        buf.write("\5\u00e0q\2\u027d\u027e\7R\2\2\u027e\u0287\3\2\2\2\u027f")
        buf.write("\u0280\7.\2\2\u0280\u0281\7Q\2\2\u0281\u0282\5N(\2\u0282")
        buf.write("\u0283\7R\2\2\u0283\u0287\3\2\2\2\u0284\u0287\5 \21\2")
        buf.write("\u0285\u0287\5*\26\2\u0286\u0269\3\2\2\2\u0286\u026a\3")
        buf.write("\2\2\2\u0286\u026b\3\2\2\2\u0286\u026e\3\2\2\2\u0286\u0270")
        buf.write("\3\2\2\2\u0286\u0275\3\2\2\2\u0286\u027a\3\2\2\2\u0286")
        buf.write("\u027f\3\2\2\2\u0286\u0284\3\2\2\2\u0286\u0285\3\2\2\2")
        buf.write("\u0287\33\3\2\2\2\u0288\u0289\7t\2\2\u0289\u028d\5,\27")
        buf.write("\2\u028a\u028b\7u\2\2\u028b\u028d\5,\27\2\u028c\u0288")
        buf.write("\3\2\2\2\u028c\u028a\3\2\2\2\u028d\35\3\2\2\2\u028e\u028f")
        buf.write("\t\2\2\2\u028f\37\3\2\2\2\u0290\u0292\7{\2\2\u0291\u0290")
        buf.write("\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0293\3\2\2\2\u0293")
        buf.write("\u0295\7-\2\2\u0294\u0296\5\"\22\2\u0295\u0294\3\2\2\2")
        buf.write("\u0295\u0296\3\2\2\2\u0296\u0297\3\2\2\2\u0297\u0299\5")
        buf.write("\u0086D\2\u0298\u029a\5$\23\2\u0299\u0298\3\2\2\2\u0299")
        buf.write("\u029a\3\2\2\2\u029a\u029c\3\2\2\2\u029b\u029d\5(\25\2")
        buf.write("\u029c\u029b\3\2\2\2\u029c\u029d\3\2\2\2\u029d\u02ac\3")
        buf.write("\2\2\2\u029e\u02a0\7{\2\2\u029f\u029e\3\2\2\2\u029f\u02a0")
        buf.write("\3\2\2\2\u02a0\u02a1\3\2\2\2\u02a1\u02a3\7-\2\2\u02a2")
        buf.write("\u02a4\5\"\22\2\u02a3\u02a2\3\2\2\2\u02a3\u02a4\3\2\2")
        buf.write("\2\u02a4\u02a5\3\2\2\2\u02a5\u02a6\7Q\2\2\u02a6\u02a7")
        buf.write("\5\u00e0q\2\u02a7\u02a9\7R\2\2\u02a8\u02aa\5(\25\2\u02a9")
        buf.write("\u02a8\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa\u02ac\3\2\2\2")
        buf.write("\u02ab\u0291\3\2\2\2\u02ab\u029f\3\2\2\2\u02ac!\3\2\2")
        buf.write("\2\u02ad\u02ae\7Q\2\2\u02ae\u02af\5\26\f\2\u02af\u02b0")
        buf.write("\7R\2\2\u02b0#\3\2\2\2\u02b1\u02b3\5\u00d6l\2\u02b2\u02b4")
        buf.write("\5$\23\2\u02b3\u02b2\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4")
        buf.write("\u02b7\3\2\2\2\u02b5\u02b7\5&\24\2\u02b6\u02b1\3\2\2\2")
        buf.write("\u02b6\u02b5\3\2\2\2\u02b7%\3\2\2\2\u02b8\u02b9\b\24\1")
        buf.write("\2\u02b9\u02ba\7S\2\2\u02ba\u02bb\5N(\2\u02bb\u02bd\7")
        buf.write("T\2\2\u02bc\u02be\5\u00b2Z\2\u02bd\u02bc\3\2\2\2\u02bd")
        buf.write("\u02be\3\2\2\2\u02be\u02c8\3\2\2\2\u02bf\u02c0\f\3\2\2")
        buf.write("\u02c0\u02c1\7S\2\2\u02c1\u02c2\5P)\2\u02c2\u02c4\7T\2")
        buf.write("\2\u02c3\u02c5\5\u00b2Z\2\u02c4\u02c3\3\2\2\2\u02c4\u02c5")
        buf.write("\3\2\2\2\u02c5\u02c7\3\2\2\2\u02c6\u02bf\3\2\2\2\u02c7")
        buf.write("\u02ca\3\2\2\2\u02c8\u02c6\3\2\2\2\u02c8\u02c9\3\2\2\2")
        buf.write("\u02c9\'\3\2\2\2\u02ca\u02c8\3\2\2\2\u02cb\u02cd\7Q\2")
        buf.write("\2\u02cc\u02ce\5\26\f\2\u02cd\u02cc\3\2\2\2\u02cd\u02ce")
        buf.write("\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02d2\7R\2\2\u02d0")
        buf.write("\u02d2\5\u00fe\u0080\2\u02d1\u02cb\3\2\2\2\u02d1\u02d0")
        buf.write("\3\2\2\2\u02d2)\3\2\2\2\u02d3\u02d5\7{\2\2\u02d4\u02d3")
        buf.write("\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6")
        buf.write("\u02d7\7\30\2\2\u02d7\u02e0\5,\27\2\u02d8\u02da\7{\2\2")
        buf.write("\u02d9\u02d8\3\2\2\2\u02d9\u02da\3\2\2\2\u02da\u02db\3")
        buf.write("\2\2\2\u02db\u02dc\7\30\2\2\u02dc\u02dd\7S\2\2\u02dd\u02de")
        buf.write("\7T\2\2\u02de\u02e0\5,\27\2\u02df\u02d4\3\2\2\2\u02df")
        buf.write("\u02d9\3\2\2\2\u02e0+\3\2\2\2\u02e1\u02e8\5\32\16\2\u02e2")
        buf.write("\u02e3\7Q\2\2\u02e3\u02e4\5\u00e0q\2\u02e4\u02e5\7R\2")
        buf.write("\2\u02e5\u02e6\5,\27\2\u02e6\u02e8\3\2\2\2\u02e7\u02e1")
        buf.write("\3\2\2\2\u02e7\u02e2\3\2\2\2\u02e8-\3\2\2\2\u02e9\u02ea")
        buf.write("\b\30\1\2\u02ea\u02eb\5,\27\2\u02eb\u02f4\3\2\2\2\u02ec")
        buf.write("\u02ed\f\4\2\2\u02ed\u02ee\7~\2\2\u02ee\u02f3\5,\27\2")
        buf.write("\u02ef\u02f0\f\3\2\2\u02f0\u02f1\7w\2\2\u02f1\u02f3\5")
        buf.write(",\27\2\u02f2\u02ec\3\2\2\2\u02f2\u02ef\3\2\2\2\u02f3\u02f6")
        buf.write("\3\2\2\2\u02f4\u02f2\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5")
        buf.write("/\3\2\2\2\u02f6\u02f4\3\2\2\2\u02f7\u02f8\b\31\1\2\u02f8")
        buf.write("\u02f9\5.\30\2\u02f9\u0305\3\2\2\2\u02fa\u02fb\f\5\2\2")
        buf.write("\u02fb\u02fc\7Y\2\2\u02fc\u0304\5.\30\2\u02fd\u02fe\f")
        buf.write("\4\2\2\u02fe\u02ff\7Z\2\2\u02ff\u0304\5.\30\2\u0300\u0301")
        buf.write("\f\3\2\2\u0301\u0302\7[\2\2\u0302\u0304\5.\30\2\u0303")
        buf.write("\u02fa\3\2\2\2\u0303\u02fd\3\2\2\2\u0303\u0300\3\2\2\2")
        buf.write("\u0304\u0307\3\2\2\2\u0305\u0303\3\2\2\2\u0305\u0306\3")
        buf.write("\2\2\2\u0306\61\3\2\2\2\u0307\u0305\3\2\2\2\u0308\u0309")
        buf.write("\b\32\1\2\u0309\u030a\5\60\31\2\u030a\u0313\3\2\2\2\u030b")
        buf.write("\u030c\f\4\2\2\u030c\u030d\7W\2\2\u030d\u0312\5\60\31")
        buf.write("\2\u030e\u030f\f\3\2\2\u030f\u0310\7X\2\2\u0310\u0312")
        buf.write("\5\60\31\2\u0311\u030b\3\2\2\2\u0311\u030e\3\2\2\2\u0312")
        buf.write("\u0315\3\2\2\2\u0313\u0311\3\2\2\2\u0313\u0314\3\2\2\2")
        buf.write("\u0314\63\3\2\2\2\u0315\u0313\3\2\2\2\u0316\u0317\b\33")
        buf.write("\1\2\u0317\u0318\5\62\32\2\u0318\u0322\3\2\2\2\u0319\u031a")
        buf.write("\f\4\2\2\u031a\u031b\7l\2\2\u031b\u0321\5\62\32\2\u031c")
        buf.write("\u031d\f\3\2\2\u031d\u031e\5\u0162\u00b2\2\u031e\u031f")
        buf.write("\5\62\32\2\u031f\u0321\3\2\2\2\u0320\u0319\3\2\2\2\u0320")
        buf.write("\u031c\3\2\2\2\u0321\u0324\3\2\2\2\u0322\u0320\3\2\2\2")
        buf.write("\u0322\u0323\3\2\2\2\u0323\65\3\2\2\2\u0324\u0322\3\2")
        buf.write("\2\2\u0325\u0326\b\34\1\2\u0326\u0327\5\64\33\2\u0327")
        buf.write("\u0336\3\2\2\2\u0328\u0329\f\6\2\2\u0329\u032a\7b\2\2")
        buf.write("\u032a\u0335\5\64\33\2\u032b\u032c\f\5\2\2\u032c\u032d")
        buf.write("\7c\2\2\u032d\u0335\5\64\33\2\u032e\u032f\f\4\2\2\u032f")
        buf.write("\u0330\7p\2\2\u0330\u0335\5\64\33\2\u0331\u0332\f\3\2")
        buf.write("\2\u0332\u0333\7q\2\2\u0333\u0335\5\64\33\2\u0334\u0328")
        buf.write("\3\2\2\2\u0334\u032b\3\2\2\2\u0334\u032e\3\2\2\2\u0334")
        buf.write("\u0331\3\2\2\2\u0335\u0338\3\2\2\2\u0336\u0334\3\2\2\2")
        buf.write("\u0336\u0337\3\2\2\2\u0337\67\3\2\2\2\u0338\u0336\3\2")
        buf.write("\2\2\u0339\u033a\b\35\1\2\u033a\u033b\5\66\34\2\u033b")
        buf.write("\u0344\3\2\2\2\u033c\u033d\f\4\2\2\u033d\u033e\7n\2\2")
        buf.write("\u033e\u0343\5\66\34\2\u033f\u0340\f\3\2\2\u0340\u0341")
        buf.write("\7o\2\2\u0341\u0343\5\66\34\2\u0342\u033c\3\2\2\2\u0342")
        buf.write("\u033f\3\2\2\2\u0343\u0346\3\2\2\2\u0344\u0342\3\2\2\2")
        buf.write("\u0344\u0345\3\2\2\2\u03459\3\2\2\2\u0346\u0344\3\2\2")
        buf.write("\2\u0347\u0348\b\36\1\2\u0348\u0349\58\35\2\u0349\u034f")
        buf.write("\3\2\2\2\u034a\u034b\f\3\2\2\u034b\u034c\7]\2\2\u034c")
        buf.write("\u034e\58\35\2\u034d\u034a\3\2\2\2\u034e\u0351\3\2\2\2")
        buf.write("\u034f\u034d\3\2\2\2\u034f\u0350\3\2\2\2\u0350;\3\2\2")
        buf.write("\2\u0351\u034f\3\2\2\2\u0352\u0353\b\37\1\2\u0353\u0354")
        buf.write("\5:\36\2\u0354\u035a\3\2\2\2\u0355\u0356\f\3\2\2\u0356")
        buf.write("\u0357\7\\\2\2\u0357\u0359\5:\36\2\u0358\u0355\3\2\2\2")
        buf.write("\u0359\u035c\3\2\2\2\u035a\u0358\3\2\2\2\u035a\u035b\3")
        buf.write("\2\2\2\u035b=\3\2\2\2\u035c\u035a\3\2\2\2\u035d\u035e")
        buf.write("\b \1\2\u035e\u035f\5<\37\2\u035f\u0365\3\2\2\2\u0360")
        buf.write("\u0361\f\3\2\2\u0361\u0362\7^\2\2\u0362\u0364\5<\37\2")
        buf.write("\u0363\u0360\3\2\2\2\u0364\u0367\3\2\2\2\u0365\u0363\3")
        buf.write("\2\2\2\u0365\u0366\3\2\2\2\u0366?\3\2\2\2\u0367\u0365")
        buf.write("\3\2\2\2\u0368\u0369\b!\1\2\u0369\u036a\5> \2\u036a\u0370")
        buf.write("\3\2\2\2\u036b\u036c\f\3\2\2\u036c\u036d\7r\2\2\u036d")
        buf.write("\u036f\5> \2\u036e\u036b\3\2\2\2\u036f\u0372\3\2\2\2\u0370")
        buf.write("\u036e\3\2\2\2\u0370\u0371\3\2\2\2\u0371A\3\2\2\2\u0372")
        buf.write("\u0370\3\2\2\2\u0373\u0374\b\"\1\2\u0374\u0375\5@!\2\u0375")
        buf.write("\u037b\3\2\2\2\u0376\u0377\f\3\2\2\u0377\u0378\7s\2\2")
        buf.write("\u0378\u037a\5@!\2\u0379\u0376\3\2\2\2\u037a\u037d\3\2")
        buf.write("\2\2\u037b\u0379\3\2\2\2\u037b\u037c\3\2\2\2\u037cC\3")
        buf.write("\2\2\2\u037d\u037b\3\2\2\2\u037e\u0382\5B\"\2\u037f\u0382")
        buf.write("\5F$\2\u0380\u0382\5H%\2\u0381\u037e\3\2\2\2\u0381\u037f")
        buf.write("\3\2\2\2\u0381\u0380\3\2\2\2\u0382E\3\2\2\2\u0383\u0384")
        buf.write("\5B\"\2\u0384\u0385\7y\2\2\u0385\u0386\5N(\2\u0386\u0387")
        buf.write("\7z\2\2\u0387\u0388\5J&\2\u0388G\3\2\2\2\u0389\u038a\5")
        buf.write("B\"\2\u038a\u038b\7y\2\2\u038b\u038c\7z\2\2\u038c\u038d")
        buf.write("\5J&\2\u038dI\3\2\2\2\u038e\u0395\5D#\2\u038f\u0390\5")
        buf.write("B\"\2\u0390\u0391\5L\'\2\u0391\u0392\5\u00fa~\2\u0392")
        buf.write("\u0395\3\2\2\2\u0393\u0395\5\u0158\u00ad\2\u0394\u038e")
        buf.write("\3\2\2\2\u0394\u038f\3\2\2\2\u0394\u0393\3\2\2\2\u0395")
        buf.write("K\3\2\2\2\u0396\u03a2\7a\2\2\u0397\u03a2\7f\2\2\u0398")
        buf.write("\u03a2\7g\2\2\u0399\u03a2\7h\2\2\u039a\u03a2\7d\2\2\u039b")
        buf.write("\u03a2\7e\2\2\u039c\u03a2\5\u0164\u00b3\2\u039d\u03a2")
        buf.write("\7m\2\2\u039e\u03a2\7j\2\2\u039f\u03a2\7i\2\2\u03a0\u03a2")
        buf.write("\7k\2\2\u03a1\u0396\3\2\2\2\u03a1\u0397\3\2\2\2\u03a1")
        buf.write("\u0398\3\2\2\2\u03a1\u0399\3\2\2\2\u03a1\u039a\3\2\2\2")
        buf.write("\u03a1\u039b\3\2\2\2\u03a1\u039c\3\2\2\2\u03a1\u039d\3")
        buf.write("\2\2\2\u03a1\u039e\3\2\2\2\u03a1\u039f\3\2\2\2\u03a1\u03a0")
        buf.write("\3\2\2\2\u03a2M\3\2\2\2\u03a3\u03a4\b(\1\2\u03a4\u03a5")
        buf.write("\5J&\2\u03a5\u03ab\3\2\2\2\u03a6\u03a7\f\3\2\2\u03a7\u03a8")
        buf.write("\7v\2\2\u03a8\u03aa\5J&\2\u03a9\u03a6\3\2\2\2\u03aa\u03ad")
        buf.write("\3\2\2\2\u03ab\u03a9\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac")
        buf.write("O\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ae\u03af\5D#\2\u03af")
        buf.write("Q\3\2\2\2\u03b0\u03b2\5\u00b2Z\2\u03b1\u03b0\3\2\2\2\u03b1")
        buf.write("\u03b2\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b4\7\u0080")
        buf.write("\2\2\u03b4\u03b5\7z\2\2\u03b5\u03d8\5R*\2\u03b6\u03b8")
        buf.write("\5\u00b2Z\2\u03b7\u03b6\3\2\2\2\u03b7\u03b8\3\2\2\2\u03b8")
        buf.write("\u03b9\3\2\2\2\u03b9\u03d8\5T+\2\u03ba\u03bc\5\u00b2Z")
        buf.write("\2\u03bb\u03ba\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03bd")
        buf.write("\3\2\2\2\u03bd\u03d8\5V,\2\u03be\u03c0\5\u00b2Z\2\u03bf")
        buf.write("\u03be\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0\u03c1\3\2\2\2")
        buf.write("\u03c1\u03d8\5X-\2\u03c2\u03c4\5\u00b2Z\2\u03c3\u03c2")
        buf.write("\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5")
        buf.write("\u03d8\5Z.\2\u03c6\u03c8\5\u00b2Z\2\u03c7\u03c6\3\2\2")
        buf.write("\2\u03c7\u03c8\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03d8")
        buf.write("\5^\60\2\u03ca\u03cc\5\u00b2Z\2\u03cb\u03ca\3\2\2\2\u03cb")
        buf.write("\u03cc\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u03d8\5d\63\2")
        buf.write("\u03ce\u03d0\5\u00b2Z\2\u03cf\u03ce\3\2\2\2\u03cf\u03d0")
        buf.write("\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d8\5l\67\2\u03d2")
        buf.write("\u03d8\5t;\2\u03d3\u03d5\5\u00b2Z\2\u03d4\u03d3\3\2\2")
        buf.write("\2\u03d4\u03d5\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6\u03d8")
        buf.write("\5\u014e\u00a8\2\u03d7\u03b1\3\2\2\2\u03d7\u03b7\3\2\2")
        buf.write("\2\u03d7\u03bb\3\2\2\2\u03d7\u03bf\3\2\2\2\u03d7\u03c3")
        buf.write("\3\2\2\2\u03d7\u03c7\3\2\2\2\u03d7\u03cb\3\2\2\2\u03d7")
        buf.write("\u03cf\3\2\2\2\u03d7\u03d2\3\2\2\2\u03d7\u03d4\3\2\2\2")
        buf.write("\u03d8S\3\2\2\2\u03d9\u03da\7\f\2\2\u03da\u03db\5P)\2")
        buf.write("\u03db\u03dc\7z\2\2\u03dc\u03dd\5R*\2\u03ddU\3\2\2\2\u03de")
        buf.write("\u03df\7\27\2\2\u03df\u03e0\7z\2\2\u03e0\u03e1\5R*\2\u03e1")
        buf.write("W\3\2\2\2\u03e2\u03e4\5N(\2\u03e3\u03e2\3\2\2\2\u03e3")
        buf.write("\u03e4\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e6\7|\2\2")
        buf.write("\u03e6Y\3\2\2\2\u03e7\u03e9\7U\2\2\u03e8\u03ea\5\\/\2")
        buf.write("\u03e9\u03e8\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03eb\3")
        buf.write("\2\2\2\u03eb\u03ec\7V\2\2\u03ec[\3\2\2\2\u03ed\u03ee\b")
        buf.write("/\1\2\u03ee\u03ef\5R*\2\u03ef\u03f4\3\2\2\2\u03f0\u03f1")
        buf.write("\f\3\2\2\u03f1\u03f3\5R*\2\u03f2\u03f0\3\2\2\2\u03f3\u03f6")
        buf.write("\3\2\2\2\u03f4\u03f2\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5")
        buf.write("]\3\2\2\2\u03f6\u03f4\3\2\2\2\u03f7\u03f8\7\'\2\2\u03f8")
        buf.write("\u03f9\7Q\2\2\u03f9\u03fa\5b\62\2\u03fa\u03fb\7R\2\2\u03fb")
        buf.write("\u03fc\5R*\2\u03fc\u040b\3\2\2\2\u03fd\u03fe\7\'\2\2\u03fe")
        buf.write("\u03ff\7Q\2\2\u03ff\u0400\5b\62\2\u0400\u0401\7R\2\2\u0401")
        buf.write("\u0402\5R*\2\u0402\u0403\5`\61\2\u0403\u040b\3\2\2\2\u0404")
        buf.write("\u0405\7?\2\2\u0405\u0406\7Q\2\2\u0406\u0407\5b\62\2\u0407")
        buf.write("\u0408\7R\2\2\u0408\u0409\5R*\2\u0409\u040b\3\2\2\2\u040a")
        buf.write("\u03f7\3\2\2\2\u040a\u03fd\3\2\2\2\u040a\u0404\3\2\2\2")
        buf.write("\u040b_\3\2\2\2\u040c\u040d\7\34\2\2\u040d\u040e\5R*\2")
        buf.write("\u040ea\3\2\2\2\u040f\u0420\5N(\2\u0410\u0412\5\u00b2")
        buf.write("Z\2\u0411\u0410\3\2\2\2\u0411\u0412\3\2\2\2\u0412\u0413")
        buf.write("\3\2\2\2\u0413\u0414\5\u0080A\2\u0414\u0415\5\u00ccg\2")
        buf.write("\u0415\u0416\7a\2\2\u0416\u0417\5\u00fa~\2\u0417\u0420")
        buf.write("\3\2\2\2\u0418\u041a\5\u00b2Z\2\u0419\u0418\3\2\2\2\u0419")
        buf.write("\u041a\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041c\5\u0080")
        buf.write("A\2\u041c\u041d\5\u00ccg\2\u041d\u041e\5\u00fe\u0080\2")
        buf.write("\u041e\u0420\3\2\2\2\u041f\u040f\3\2\2\2\u041f\u0411\3")
        buf.write("\2\2\2\u041f\u0419\3\2\2\2\u0420c\3\2\2\2\u0421\u0422")
        buf.write("\7P\2\2\u0422\u0423\7Q\2\2\u0423\u0424\5b\62\2\u0424\u0425")
        buf.write("\7R\2\2\u0425\u0426\5R*\2\u0426\u0445\3\2\2\2\u0427\u0428")
        buf.write("\7\31\2\2\u0428\u0429\5R*\2\u0429\u042a\7P\2\2\u042a\u042b")
        buf.write("\7Q\2\2\u042b\u042c\5N(\2\u042c\u042d\7R\2\2\u042d\u042e")
        buf.write("\7|\2\2\u042e\u0445\3\2\2\2\u042f\u0430\7$\2\2\u0430\u0431")
        buf.write("\7Q\2\2\u0431\u0433\5f\64\2\u0432\u0434\5b\62\2\u0433")
        buf.write("\u0432\3\2\2\2\u0433\u0434\3\2\2\2\u0434\u0435\3\2\2\2")
        buf.write("\u0435\u0437\7|\2\2\u0436\u0438\5N(\2\u0437\u0436\3\2")
        buf.write("\2\2\u0437\u0438\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u043a")
        buf.write("\7R\2\2\u043a\u043b\5R*\2\u043b\u0445\3\2\2\2\u043c\u043d")
        buf.write("\7$\2\2\u043d\u043e\7Q\2\2\u043e\u043f\5h\65\2\u043f\u0440")
        buf.write("\7z\2\2\u0440\u0441\5j\66\2\u0441\u0442\7R\2\2\u0442\u0443")
        buf.write("\5R*\2\u0443\u0445\3\2\2\2\u0444\u0421\3\2\2\2\u0444\u0427")
        buf.write("\3\2\2\2\u0444\u042f\3\2\2\2\u0444\u043c\3\2\2\2\u0445")
        buf.write("e\3\2\2\2\u0446\u0449\5X-\2\u0447\u0449\5x=\2\u0448\u0446")
        buf.write("\3\2\2\2\u0448\u0447\3\2\2\2\u0449g\3\2\2\2\u044a\u044c")
        buf.write("\5\u00b2Z\2\u044b\u044a\3\2\2\2\u044b\u044c\3\2\2\2\u044c")
        buf.write("\u044d\3\2\2\2\u044d\u044e\5\u0080A\2\u044e\u044f\5\u00cc")
        buf.write("g\2\u044fi\3\2\2\2\u0450\u0453\5N(\2\u0451\u0453\5\u00fe")
        buf.write("\u0080\2\u0452\u0450\3\2\2\2\u0452\u0451\3\2\2\2\u0453")
        buf.write("k\3\2\2\2\u0454\u0455\7\13\2\2\u0455\u0463\7|\2\2\u0456")
        buf.write("\u0457\7\25\2\2\u0457\u0463\7|\2\2\u0458\u045a\7\67\2")
        buf.write("\2\u0459\u045b\5N(\2\u045a\u0459\3\2\2\2\u045a\u045b\3")
        buf.write("\2\2\2\u045b\u045c\3\2\2\2\u045c\u0463\7|\2\2\u045d\u045e")
        buf.write("\7\67\2\2\u045e\u045f\5\u00fe\u0080\2\u045f\u0460\7|\2")
        buf.write("\2\u0460\u0463\3\2\2\2\u0461\u0463\5n8\2\u0462\u0454\3")
        buf.write("\2\2\2\u0462\u0456\3\2\2\2\u0462\u0458\3\2\2\2\u0462\u045d")
        buf.write("\3\2\2\2\u0462\u0461\3\2\2\2\u0463m\3\2\2\2\u0464\u0465")
        buf.write("\7&\2\2\u0465\u0466\7\u0080\2\2\u0466\u0467\7|\2\2\u0467")
        buf.write("o\3\2\2\2\u0468\u0469\b9\1\2\u0469\u046a\5r:\2\u046a\u046f")
        buf.write("\3\2\2\2\u046b\u046c\f\3\2\2\u046c\u046e\5r:\2\u046d\u046b")
        buf.write("\3\2\2\2\u046e\u0471\3\2\2\2\u046f\u046d\3\2\2\2\u046f")
        buf.write("\u0470\3\2\2\2\u0470q\3\2\2\2\u0471\u046f\3\2\2\2\u0472")
        buf.write("\u047e\5t;\2\u0473\u047e\5\u00f2z\2\u0474\u047e\5\u0138")
        buf.write("\u009d\2\u0475\u047e\5\u014a\u00a6\2\u0476\u047e\5\u014c")
        buf.write("\u00a7\2\u0477\u047e\5\u00b0Y\2\u0478\u047e\5\u00a0Q\2")
        buf.write("\u0479\u047e\5|?\2\u047a\u047b\5\u00b2Z\2\u047b\u047c")
        buf.write("\7|\2\2\u047c\u047e\3\2\2\2\u047d\u0472\3\2\2\2\u047d")
        buf.write("\u0473\3\2\2\2\u047d\u0474\3\2\2\2\u047d\u0475\3\2\2\2")
        buf.write("\u047d\u0476\3\2\2\2\u047d\u0477\3\2\2\2\u047d\u0478\3")
        buf.write("\2\2\2\u047d\u0479\3\2\2\2\u047d\u047a\3\2\2\2\u047es")
        buf.write("\3\2\2\2\u047f\u0496\5x=\2\u0480\u0496\5\u00aeX\2\u0481")
        buf.write("\u0482\7,\2\2\u0482\u0483\7\u0080\2\2\u0483\u0484\7a\2")
        buf.write("\2\u0484\u0485\5\u00a8U\2\u0485\u0486\7|\2\2\u0486\u0496")
        buf.write("\3\2\2\2\u0487\u0496\5\u00aaV\2\u0488\u0496\5\u00acW\2")
        buf.write("\u0489\u0496\5z>\2\u048a\u0496\5v<\2\u048b\u048d\5\u0092")
        buf.write("J\2\u048c\u048e\5\u00b2Z\2\u048d\u048c\3\2\2\2\u048d\u048e")
        buf.write("\3\2\2\2\u048e\u048f\3\2\2\2\u048f\u0491\7\u0080\2\2\u0490")
        buf.write("\u0492\5\u0094K\2\u0491\u0490\3\2\2\2\u0491\u0492\3\2")
        buf.write("\2\2\u0492\u0493\3\2\2\2\u0493\u0494\7|\2\2\u0494\u0496")
        buf.write("\3\2\2\2\u0495\u047f\3\2\2\2\u0495\u0480\3\2\2\2\u0495")
        buf.write("\u0481\3\2\2\2\u0495\u0487\3\2\2\2\u0495\u0488\3\2\2\2")
        buf.write("\u0495\u0489\3\2\2\2\u0495\u048a\3\2\2\2\u0495\u048b\3")
        buf.write("\2\2\2\u0496u\3\2\2\2\u0497\u0498\7K\2\2\u0498\u049a\7")
        buf.write("\u0080\2\2\u0499\u049b\5\u00b2Z\2\u049a\u0499\3\2\2\2")
        buf.write("\u049a\u049b\3\2\2\2\u049b\u049c\3\2\2\2\u049c\u049d\7")
        buf.write("a\2\2\u049d\u049e\5\u00e0q\2\u049e\u049f\7|\2\2\u049f")
        buf.write("w\3\2\2\2\u04a0\u04a2\5\u0080A\2\u04a1\u04a0\3\2\2\2\u04a1")
        buf.write("\u04a2\3\2\2\2\u04a2\u04a4\3\2\2\2\u04a3\u04a5\5\u00c8")
        buf.write("e\2\u04a4\u04a3\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u04a6")
        buf.write("\3\2\2\2\u04a6\u04af\7|\2\2\u04a7\u04a9\5\u00b2Z\2\u04a8")
        buf.write("\u04aa\5\u0080A\2\u04a9\u04a8\3\2\2\2\u04a9\u04aa\3\2")
        buf.write("\2\2\u04aa\u04ab\3\2\2\2\u04ab\u04ac\5\u00c8e\2\u04ac")
        buf.write("\u04ad\7|\2\2\u04ad\u04af\3\2\2\2\u04ae\u04a1\3\2\2\2")
        buf.write("\u04ae\u04a7\3\2\2\2\u04afy\3\2\2\2\u04b0\u04b1\7<\2\2")
        buf.write("\u04b1\u04b2\7Q\2\2\u04b2\u04b3\5P)\2\u04b3\u04b4\7v\2")
        buf.write("\2\u04b4\u04b5\7\u0089\2\2\u04b5\u04b6\7R\2\2\u04b6\u04b7")
        buf.write("\7|\2\2\u04b7{\3\2\2\2\u04b8\u04b9\7|\2\2\u04b9}\3\2\2")
        buf.write("\2\u04ba\u04c7\7\65\2\2\u04bb\u04c7\7;\2\2\u04bc\u04c7")
        buf.write("\7B\2\2\u04bd\u04c7\7 \2\2\u04be\u04c7\7+\2\2\u04bf\u04c7")
        buf.write("\5\u0082B\2\u04c0\u04c7\7(\2\2\u04c1\u04c7\7L\2\2\u04c2")
        buf.write("\u04c7\7\36\2\2\u04c3\u04c7\7%\2\2\u04c4\u04c7\7F\2\2")
        buf.write("\u04c5\u04c7\7\23\2\2\u04c6\u04ba\3\2\2\2\u04c6\u04bb")
        buf.write("\3\2\2\2\u04c6\u04bc\3\2\2\2\u04c6\u04bd\3\2\2\2\u04c6")
        buf.write("\u04be\3\2\2\2\u04c6\u04bf\3\2\2\2\u04c6\u04c0\3\2\2\2")
        buf.write("\u04c6\u04c1\3\2\2\2\u04c6\u04c2\3\2\2\2\u04c6\u04c3\3")
        buf.write("\2\2\2\u04c6\u04c4\3\2\2\2\u04c6\u04c5\3\2\2\2\u04c7\177")
        buf.write("\3\2\2\2\u04c8\u04ca\5~@\2\u04c9\u04cb\5\u00b2Z\2\u04ca")
        buf.write("\u04c9\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb\u04d0\3\2\2\2")
        buf.write("\u04cc\u04cd\5~@\2\u04cd\u04ce\5\u0080A\2\u04ce\u04d0")
        buf.write("\3\2\2\2\u04cf\u04c8\3\2\2\2\u04cf\u04cc\3\2\2\2\u04d0")
        buf.write("\u0081\3\2\2\2\u04d1\u04e1\5\u0084C\2\u04d2\u04e1\5\u0102")
        buf.write("\u0082\2\u04d3\u04d4\5\u0090I\2\u04d4\u04d6\7U\2\2\u04d5")
        buf.write("\u04d7\5\u0096L\2\u04d6\u04d5\3\2\2\2\u04d6\u04d7\3\2")
        buf.write("\2\2\u04d7\u04d8\3\2\2\2\u04d8\u04d9\7V\2\2\u04d9\u04e1")
        buf.write("\3\2\2\2\u04da\u04db\5\u0090I\2\u04db\u04dc\7U\2\2\u04dc")
        buf.write("\u04dd\5\u0096L\2\u04dd\u04de\7v\2\2\u04de\u04df\7V\2")
        buf.write("\2\u04df\u04e1\3\2\2\2\u04e0\u04d1\3\2\2\2\u04e0\u04d2")
        buf.write("\3\2\2\2\u04e0\u04d3\3\2\2\2\u04e0\u04da\3\2\2\2\u04e1")
        buf.write("\u0083\3\2\2\2\u04e2\u04fe\5\u008aF\2\u04e3\u04e5\5\u010a")
        buf.write("\u0086\2\u04e4\u04e6\5\u00b2Z\2\u04e5\u04e4\3\2\2\2\u04e5")
        buf.write("\u04e6\3\2\2\2\u04e6\u04e8\3\2\2\2\u04e7\u04e9\5\f\7\2")
        buf.write("\u04e8\u04e7\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9\u04ea\3")
        buf.write("\2\2\2\u04ea\u04eb\7\u0080\2\2\u04eb\u04fe\3\2\2\2\u04ec")
        buf.write("\u04ed\5\u010a\u0086\2\u04ed\u04ee\5\u013e\u00a0\2\u04ee")
        buf.write("\u04fe\3\2\2\2\u04ef\u04f0\5\u010a\u0086\2\u04f0\u04f2")
        buf.write("\5\f\7\2\u04f1\u04f3\7@\2\2\u04f2\u04f1\3\2\2\2\u04f2")
        buf.write("\u04f3\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u04f5\5\u013e")
        buf.write("\u00a0\2\u04f5\u04fe\3\2\2\2\u04f6\u04f8\7\35\2\2\u04f7")
        buf.write("\u04f9\5\f\7\2\u04f8\u04f7\3\2\2\2\u04f8\u04f9\3\2\2\2")
        buf.write("\u04f9\u04fa\3\2\2\2\u04fa\u04fe\7\u0080\2\2\u04fb\u04fe")
        buf.write("\5\u0148\u00a5\2\u04fc\u04fe\5\u00dan\2\u04fd\u04e2\3")
        buf.write("\2\2\2\u04fd\u04e3\3\2\2\2\u04fd\u04ec\3\2\2\2\u04fd\u04ef")
        buf.write("\3\2\2\2\u04fd\u04f6\3\2\2\2\u04fd\u04fb\3\2\2\2\u04fd")
        buf.write("\u04fc\3\2\2\2\u04fe\u0085\3\2\2\2\u04ff\u0501\5\u0082")
        buf.write("B\2\u0500\u0502\5\u00b2Z\2\u0501\u0500\3\2\2\2\u0501\u0502")
        buf.write("\3\2\2\2\u0502\u0507\3\2\2\2\u0503\u0504\5\u0082B\2\u0504")
        buf.write("\u0505\5\u0086D\2\u0505\u0507\3\2\2\2\u0506\u04ff\3\2")
        buf.write("\2\2\u0506\u0503\3\2\2\2\u0507\u0087\3\2\2\2\u0508\u050a")
        buf.write("\5\u0084C\2\u0509\u050b\5\u00b2Z\2\u050a\u0509\3\2\2\2")
        buf.write("\u050a\u050b\3\2\2\2\u050b\u0510\3\2\2\2\u050c\u050d\5")
        buf.write("\u0084C\2\u050d\u050e\5\u0088E\2\u050e\u0510\3\2\2\2\u050f")
        buf.write("\u0508\3\2\2\2\u050f\u050c\3\2\2\2\u0510\u0089\3\2\2\2")
        buf.write("\u0511\u0513\5\f\7\2\u0512\u0511\3\2\2\2\u0512\u0513\3")
        buf.write("\2\2\2\u0513\u0514\3\2\2\2\u0514\u0529\5\u008cG\2\u0515")
        buf.write("\u0516\5\f\7\2\u0516\u0517\7@\2\2\u0517\u0518\5\u013e")
        buf.write("\u00a0\2\u0518\u0529\3\2\2\2\u0519\u0529\7\16\2\2\u051a")
        buf.write("\u0529\7\17\2\2\u051b\u0529\7\20\2\2\u051c\u0529\7O\2")
        buf.write("\2\u051d\u0529\7\n\2\2\u051e\u0529\78\2\2\u051f\u0529")
        buf.write("\7)\2\2\u0520\u0529\7*\2\2\u0521\u0529\79\2\2\u0522\u0529")
        buf.write("\7J\2\2\u0523\u0529\7#\2\2\u0524\u0529\7\32\2\2\u0525")
        buf.write("\u0529\7M\2\2\u0526\u0529\7\t\2\2\u0527\u0529\5\u008e")
        buf.write("H\2\u0528\u0512\3\2\2\2\u0528\u0515\3\2\2\2\u0528\u0519")
        buf.write("\3\2\2\2\u0528\u051a\3\2\2\2\u0528\u051b\3\2\2\2\u0528")
        buf.write("\u051c\3\2\2\2\u0528\u051d\3\2\2\2\u0528\u051e\3\2\2\2")
        buf.write("\u0528\u051f\3\2\2\2\u0528\u0520\3\2\2\2\u0528\u0521\3")
        buf.write("\2\2\2\u0528\u0522\3\2\2\2\u0528\u0523\3\2\2\2\u0528\u0524")
        buf.write("\3\2\2\2\u0528\u0525\3\2\2\2\u0528\u0526\3\2\2\2\u0528")
        buf.write("\u0527\3\2\2\2\u0529\u008b\3\2\2\2\u052a\u052e\5\u0100")
        buf.write("\u0081\2\u052b\u052e\7\u0080\2\2\u052c\u052e\5\u013e\u00a0")
        buf.write("\2\u052d\u052a\3\2\2\2\u052d\u052b\3\2\2\2\u052d\u052c")
        buf.write("\3\2\2\2\u052e\u008d\3\2\2\2\u052f\u0530\7\26\2\2\u0530")
        buf.write("\u0531\7Q\2\2\u0531\u0532\5N(\2\u0532\u0533\7R\2\2\u0533")
        buf.write("\u0539\3\2\2\2\u0534\u0535\7\26\2\2\u0535\u0536\7Q\2\2")
        buf.write("\u0536\u0537\7\t\2\2\u0537\u0539\7R\2\2\u0538\u052f\3")
        buf.write("\2\2\2\u0538\u0534\3\2\2\2\u0539\u008f\3\2\2\2\u053a\u053c")
        buf.write("\5\u0092J\2\u053b\u053d\5\u00b2Z\2\u053c\u053b\3\2\2\2")
        buf.write("\u053c\u053d\3\2\2\2\u053d\u053f\3\2\2\2\u053e\u0540\7")
        buf.write("\u0080\2\2\u053f\u053e\3\2\2\2\u053f\u0540\3\2\2\2\u0540")
        buf.write("\u0542\3\2\2\2\u0541\u0543\5\u0094K\2\u0542\u0541\3\2")
        buf.write("\2\2\u0542\u0543\3\2\2\2\u0543\u054e\3\2\2\2\u0544\u0546")
        buf.write("\5\u0092J\2\u0545\u0547\5\u00b2Z\2\u0546\u0545\3\2\2\2")
        buf.write("\u0546\u0547\3\2\2\2\u0547\u0548\3\2\2\2\u0548\u0549\5")
        buf.write("\f\7\2\u0549\u054b\7\u0080\2\2\u054a\u054c\5\u0094K\2")
        buf.write("\u054b\u054a\3\2\2\2\u054b\u054c\3\2\2\2\u054c\u054e\3")
        buf.write("\2\2\2\u054d\u053a\3\2\2\2\u054d\u0544\3\2\2\2\u054e\u0091")
        buf.write("\3\2\2\2\u054f\u0555\7\35\2\2\u0550\u0551\7\35\2\2\u0551")
        buf.write("\u0555\7\21\2\2\u0552\u0553\7\35\2\2\u0553\u0555\7>\2")
        buf.write("\2\u0554\u054f\3\2\2\2\u0554\u0550\3\2\2\2\u0554\u0552")
        buf.write("\3\2\2\2\u0555\u0093\3\2\2\2\u0556\u0557\7z\2\2\u0557")
        buf.write("\u0558\5\u0086D\2\u0558\u0095\3\2\2\2\u0559\u055a\bL\1")
        buf.write("\2\u055a\u055b\5\u0098M\2\u055b\u0561\3\2\2\2\u055c\u055d")
        buf.write("\f\3\2\2\u055d\u055e\7v\2\2\u055e\u0560\5\u0098M\2\u055f")
        buf.write("\u055c\3\2\2\2\u0560\u0563\3\2\2\2\u0561\u055f\3\2\2\2")
        buf.write("\u0561\u0562\3\2\2\2\u0562\u0097\3\2\2\2\u0563\u0561\3")
        buf.write("\2\2\2\u0564\u056a\5\u009aN\2\u0565\u0566\5\u009aN\2\u0566")
        buf.write("\u0567\7a\2\2\u0567\u0568\5P)\2\u0568\u056a\3\2\2\2\u0569")
        buf.write("\u0564\3\2\2\2\u0569\u0565\3\2\2\2\u056a\u0099\3\2\2\2")
        buf.write("\u056b\u056c\7\u0080\2\2\u056c\u009b\3\2\2\2\u056d\u0570")
        buf.write("\5\u009eP\2\u056e\u0570\5\u00a6T\2\u056f\u056d\3\2\2\2")
        buf.write("\u056f\u056e\3\2\2\2\u0570\u009d\3\2\2\2\u0571\u0572\7")
        buf.write("\u0080\2\2\u0572\u009f\3\2\2\2\u0573\u057d\5\u00a2R\2")
        buf.write("\u0574\u0576\7(\2\2\u0575\u0574\3\2\2\2\u0575\u0576\3")
        buf.write("\2\2\2\u0576\u0577\3\2\2\2\u0577\u0578\7,\2\2\u0578\u0579")
        buf.write("\7U\2\2\u0579\u057a\5\u00a4S\2\u057a\u057b\7V\2\2\u057b")
        buf.write("\u057d\3\2\2\2\u057c\u0573\3\2\2\2\u057c\u0575\3\2\2\2")
        buf.write("\u057d\u00a1\3\2\2\2\u057e\u0580\7(\2\2\u057f\u057e\3")
        buf.write("\2\2\2\u057f\u0580\3\2\2\2\u0580\u0581\3\2\2\2\u0581\u0582")
        buf.write("\7,\2\2\u0582\u0583\7\u0080\2\2\u0583\u0584\7U\2\2\u0584")
        buf.write("\u0585\5\u00a4S\2\u0585\u0586\7V\2\2\u0586\u0591\3\2\2")
        buf.write("\2\u0587\u0589\7(\2\2\u0588\u0587\3\2\2\2\u0588\u0589")
        buf.write("\3\2\2\2\u0589\u058a\3\2\2\2\u058a\u058b\7,\2\2\u058b")
        buf.write("\u058c\5\u009eP\2\u058c\u058d\7U\2\2\u058d\u058e\5\u00a4")
        buf.write("S\2\u058e\u058f\7V\2\2\u058f\u0591\3\2\2\2\u0590\u057f")
        buf.write("\3\2\2\2\u0590\u0588\3\2\2\2\u0591\u00a3\3\2\2\2\u0592")
        buf.write("\u0594\5p9\2\u0593\u0592\3\2\2\2\u0593\u0594\3\2\2\2\u0594")
        buf.write("\u00a5\3\2\2\2\u0595\u0596\7\u0080\2\2\u0596\u00a7\3\2")
        buf.write("\2\2\u0597\u0599\5\f\7\2\u0598\u0597\3\2\2\2\u0598\u0599")
        buf.write("\3\2\2\2\u0599\u059a\3\2\2\2\u059a\u059b\5\u009cO\2\u059b")
        buf.write("\u00a9\3\2\2\2\u059c\u059e\7K\2\2\u059d\u059f\7H\2\2\u059e")
        buf.write("\u059d\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u05a0\3\2\2\2")
        buf.write("\u05a0\u05a1\5\f\7\2\u05a1\u05a2\5\b\5\2\u05a2\u05a3\7")
        buf.write("|\2\2\u05a3\u05aa\3\2\2\2\u05a4\u05a5\7K\2\2\u05a5\u05a6")
        buf.write("\7{\2\2\u05a6\u05a7\5\b\5\2\u05a7\u05a8\7|\2\2\u05a8\u05aa")
        buf.write("\3\2\2\2\u05a9\u059c\3\2\2\2\u05a9\u05a4\3\2\2\2\u05aa")
        buf.write("\u00ab\3\2\2\2\u05ab\u05ad\5\u00b2Z\2\u05ac\u05ab\3\2")
        buf.write("\2\2\u05ac\u05ad\3\2\2\2\u05ad\u05ae\3\2\2\2\u05ae\u05af")
        buf.write("\7K\2\2\u05af\u05b1\7,\2\2\u05b0\u05b2\5\f\7\2\u05b1\u05b0")
        buf.write("\3\2\2\2\u05b1\u05b2\3\2\2\2\u05b2\u05b3\3\2\2\2\u05b3")
        buf.write("\u05b4\5\u009cO\2\u05b4\u05b5\7|\2\2\u05b5\u00ad\3\2\2")
        buf.write("\2\u05b6\u05b7\7\b\2\2\u05b7\u05b8\7Q\2\2\u05b8\u05b9")
        buf.write("\7\u0089\2\2\u05b9\u05ba\7R\2\2\u05ba\u05bb\7|\2\2\u05bb")
        buf.write("\u00af\3\2\2\2\u05bc\u05bd\7 \2\2\u05bd\u05be\7\u0089")
        buf.write("\2\2\u05be\u05c0\7U\2\2\u05bf\u05c1\5p9\2\u05c0\u05bf")
        buf.write("\3\2\2\2\u05c0\u05c1\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2")
        buf.write("\u05c7\7V\2\2\u05c3\u05c4\7 \2\2\u05c4\u05c5\7\u0089\2")
        buf.write("\2\u05c5\u05c7\5r:\2\u05c6\u05bc\3\2\2\2\u05c6\u05c3\3")
        buf.write("\2\2\2\u05c7\u00b1\3\2\2\2\u05c8\u05c9\bZ\1\2\u05c9\u05ca")
        buf.write("\5\u00b4[\2\u05ca\u05cf\3\2\2\2\u05cb\u05cc\f\3\2\2\u05cc")
        buf.write("\u05ce\5\u00b4[\2\u05cd\u05cb\3\2\2\2\u05ce\u05d1\3\2")
        buf.write("\2\2\u05cf\u05cd\3\2\2\2\u05cf\u05d0\3\2\2\2\u05d0\u00b3")
        buf.write("\3\2\2\2\u05d1\u05cf\3\2\2\2\u05d2\u05d3\7S\2\2\u05d3")
        buf.write("\u05d4\7S\2\2\u05d4\u05d5\5\u00b8]\2\u05d5\u05d6\7T\2")
        buf.write("\2\u05d6\u05d7\7T\2\2\u05d7\u05da\3\2\2\2\u05d8\u05da")
        buf.write("\5\u00b6\\\2\u05d9\u05d2\3\2\2\2\u05d9\u05d8\3\2\2\2\u05da")
        buf.write("\u00b5\3\2\2\2\u05db\u05dc\7\6\2\2\u05dc\u05dd\7Q\2\2")
        buf.write("\u05dd\u05df\5\u00e0q\2\u05de\u05e0\7\177\2\2\u05df\u05de")
        buf.write("\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u05e1\3\2\2\2\u05e1")
        buf.write("\u05e2\7R\2\2\u05e2\u05ec\3\2\2\2\u05e3\u05e4\7\6\2\2")
        buf.write("\u05e4\u05e5\7Q\2\2\u05e5\u05e7\5P)\2\u05e6\u05e8\7\177")
        buf.write("\2\2\u05e7\u05e6\3\2\2\2\u05e7\u05e8\3\2\2\2\u05e8\u05e9")
        buf.write("\3\2\2\2\u05e9\u05ea\7R\2\2\u05ea\u05ec\3\2\2\2\u05eb")
        buf.write("\u05db\3\2\2\2\u05eb\u05e3\3\2\2\2\u05ec\u00b7\3\2\2\2")
        buf.write("\u05ed\u05ef\b]\1\2\u05ee\u05f0\5\u00ba^\2\u05ef\u05ee")
        buf.write("\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0\u05f5\3\2\2\2\u05f1")
        buf.write("\u05f2\5\u00ba^\2\u05f2\u05f3\7\177\2\2\u05f3\u05f5\3")
        buf.write("\2\2\2\u05f4\u05ed\3\2\2\2\u05f4\u05f1\3\2\2\2\u05f5\u0602")
        buf.write("\3\2\2\2\u05f6\u05f7\f\5\2\2\u05f7\u05f9\7v\2\2\u05f8")
        buf.write("\u05fa\5\u00ba^\2\u05f9\u05f8\3\2\2\2\u05f9\u05fa\3\2")
        buf.write("\2\2\u05fa\u0601\3\2\2\2\u05fb\u05fc\f\3\2\2\u05fc\u05fd")
        buf.write("\7v\2\2\u05fd\u05fe\5\u00ba^\2\u05fe\u05ff\7\177\2\2\u05ff")
        buf.write("\u0601\3\2\2\2\u0600\u05f6\3\2\2\2\u0600\u05fb\3\2\2\2")
        buf.write("\u0601\u0604\3\2\2\2\u0602\u0600\3\2\2\2\u0602\u0603\3")
        buf.write("\2\2\2\u0603\u00b9\3\2\2\2\u0604\u0602\3\2\2\2\u0605\u0607")
        buf.write("\5\u00bc_\2\u0606\u0608\5\u00c2b\2\u0607\u0606\3\2\2\2")
        buf.write("\u0607\u0608\3\2\2\2\u0608\u00bb\3\2\2\2\u0609\u060c\7")
        buf.write("\u0080\2\2\u060a\u060c\5\u00be`\2\u060b\u0609\3\2\2\2")
        buf.write("\u060b\u060a\3\2\2\2\u060c\u00bd\3\2\2\2\u060d\u060e\5")
        buf.write("\u00c0a\2\u060e\u060f\7{\2\2\u060f\u0610\7\u0080\2\2\u0610")
        buf.write("\u00bf\3\2\2\2\u0611\u0612\7\u0080\2\2\u0612\u00c1\3\2")
        buf.write("\2\2\u0613\u0614\7Q\2\2\u0614\u0615\5\u00c4c\2\u0615\u0616")
        buf.write("\7R\2\2\u0616\u00c3\3\2\2\2\u0617\u0619\bc\1\2\u0618\u061a")
        buf.write("\5\u00c6d\2\u0619\u0618\3\2\2\2\u0619\u061a\3\2\2\2\u061a")
        buf.write("\u061f\3\2\2\2\u061b\u061c\f\3\2\2\u061c\u061e\5\u00c6")
        buf.write("d\2\u061d\u061b\3\2\2\2\u061e\u0621\3\2\2\2\u061f\u061d")
        buf.write("\3\2\2\2\u061f\u0620\3\2\2\2\u0620\u00c5\3\2\2\2\u0621")
        buf.write("\u061f\3\2\2\2\u0622\u0623\7Q\2\2\u0623\u0624\5\u00c4")
        buf.write("c\2\u0624\u0625\7R\2\2\u0625\u062f\3\2\2\2\u0626\u0627")
        buf.write("\7S\2\2\u0627\u0628\5\u00c4c\2\u0628\u0629\7T\2\2\u0629")
        buf.write("\u062f\3\2\2\2\u062a\u062b\7U\2\2\u062b\u062c\5\u00c4")
        buf.write("c\2\u062c\u062d\7V\2\2\u062d\u062f\3\2\2\2\u062e\u0622")
        buf.write("\3\2\2\2\u062e\u0626\3\2\2\2\u062e\u062a\3\2\2\2\u062f")
        buf.write("\u00c7\3\2\2\2\u0630\u0631\be\1\2\u0631\u0632\5\u00ca")
        buf.write("f\2\u0632\u0638\3\2\2\2\u0633\u0634\f\3\2\2\u0634\u0635")
        buf.write("\7v\2\2\u0635\u0637\5\u00caf\2\u0636\u0633\3\2\2\2\u0637")
        buf.write("\u063a\3\2\2\2\u0638\u0636\3\2\2\2\u0638\u0639\3\2\2\2")
        buf.write("\u0639\u00c9\3\2\2\2\u063a\u0638\3\2\2\2\u063b\u063d\5")
        buf.write("\u00ccg\2\u063c\u063e\5\u00f6|\2\u063d\u063c\3\2\2\2\u063d")
        buf.write("\u063e\3\2\2\2\u063e\u00cb\3\2\2\2\u063f\u0645\5\u00ce")
        buf.write("h\2\u0640\u0641\5\u00d0i\2\u0641\u0642\5\u00d2j\2\u0642")
        buf.write("\u0643\5\u00d4k\2\u0643\u0645\3\2\2\2\u0644\u063f\3\2")
        buf.write("\2\2\u0644\u0640\3\2\2\2\u0645\u00cd\3\2\2\2\u0646\u064b")
        buf.write("\5\u00d0i\2\u0647\u0648\5\u00d6l\2\u0648\u0649\5\u00ce")
        buf.write("h\2\u0649\u064b\3\2\2\2\u064a\u0646\3\2\2\2\u064a\u0647")
        buf.write("\3\2\2\2\u064b\u00cf\3\2\2\2\u064c\u064d\bi\1\2\u064d")
        buf.write("\u064f\5\u00dep\2\u064e\u0650\5\u00b2Z\2\u064f\u064e\3")
        buf.write("\2\2\2\u064f\u0650\3\2\2\2\u0650\u0656\3\2\2\2\u0651\u0652")
        buf.write("\7Q\2\2\u0652\u0653\5\u00ceh\2\u0653\u0654\7R\2\2\u0654")
        buf.write("\u0656\3\2\2\2\u0655\u064c\3\2\2\2\u0655\u0651\3\2\2\2")
        buf.write("\u0656\u0664\3\2\2\2\u0657\u0658\f\5\2\2\u0658\u0663\5")
        buf.write("\u00d2j\2\u0659\u065a\f\4\2\2\u065a\u065c\7S\2\2\u065b")
        buf.write("\u065d\5P)\2\u065c\u065b\3\2\2\2\u065c\u065d\3\2\2\2\u065d")
        buf.write("\u065e\3\2\2\2\u065e\u0660\7T\2\2\u065f\u0661\5\u00b2")
        buf.write("Z\2\u0660\u065f\3\2\2\2\u0660\u0661\3\2\2\2\u0661\u0663")
        buf.write("\3\2\2\2\u0662\u0657\3\2\2\2\u0662\u0659\3\2\2\2\u0663")
        buf.write("\u0666\3\2\2\2\u0664\u0662\3\2\2\2\u0664\u0665\3\2\2\2")
        buf.write("\u0665\u00d1\3\2\2\2\u0666\u0664\3\2\2\2\u0667\u0668\7")
        buf.write("Q\2\2\u0668\u0669\5\u00ecw\2\u0669\u066b\7R\2\2\u066a")
        buf.write("\u066c\5\u00d8m\2\u066b\u066a\3\2\2\2\u066b\u066c\3\2")
        buf.write("\2\2\u066c\u066e\3\2\2\2\u066d\u066f\5\u00dco\2\u066e")
        buf.write("\u066d\3\2\2\2\u066e\u066f\3\2\2\2\u066f\u0671\3\2\2\2")
        buf.write("\u0670\u0672\5\u015a\u00ae\2\u0671\u0670\3\2\2\2\u0671")
        buf.write("\u0672\3\2\2\2\u0672\u0674\3\2\2\2\u0673\u0675\5\u00b2")
        buf.write("Z\2\u0674\u0673\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u00d3")
        buf.write("\3\2\2\2\u0676\u0677\7x\2\2\u0677\u0679\5\u0088E\2\u0678")
        buf.write("\u067a\5\u00e2r\2\u0679\u0678\3\2\2\2\u0679\u067a\3\2")
        buf.write("\2\2\u067a\u00d5\3\2\2\2\u067b\u067d\7Y\2\2\u067c\u067e")
        buf.write("\5\u00b2Z\2\u067d\u067c\3\2\2\2\u067d\u067e\3\2\2\2\u067e")
        buf.write("\u0680\3\2\2\2\u067f\u0681\5\u00d8m\2\u0680\u067f\3\2")
        buf.write("\2\2\u0680\u0681\3\2\2\2\u0681\u0693\3\2\2\2\u0682\u0684")
        buf.write("\7]\2\2\u0683\u0685\5\u00b2Z\2\u0684\u0683\3\2\2\2\u0684")
        buf.write("\u0685\3\2\2\2\u0685\u0693\3\2\2\2\u0686\u0688\7r\2\2")
        buf.write("\u0687\u0689\5\u00b2Z\2\u0688\u0687\3\2\2\2\u0688\u0689")
        buf.write("\3\2\2\2\u0689\u0693\3\2\2\2\u068a\u068b\5\f\7\2\u068b")
        buf.write("\u068d\7Y\2\2\u068c\u068e\5\u00b2Z\2\u068d\u068c\3\2\2")
        buf.write("\2\u068d\u068e\3\2\2\2\u068e\u0690\3\2\2\2\u068f\u0691")
        buf.write("\5\u00d8m\2\u0690\u068f\3\2\2\2\u0690\u0691\3\2\2\2\u0691")
        buf.write("\u0693\3\2\2\2\u0692\u067b\3\2\2\2\u0692\u0682\3\2\2\2")
        buf.write("\u0692\u0686\3\2\2\2\u0692\u068a\3\2\2\2\u0693\u00d7\3")
        buf.write("\2\2\2\u0694\u0696\5\u00dan\2\u0695\u0697\5\u00d8m\2\u0696")
        buf.write("\u0695\3\2\2\2\u0696\u0697\3\2\2\2\u0697\u00d9\3\2\2\2")
        buf.write("\u0698\u0699\t\3\2\2\u0699\u00db\3\2\2\2\u069a\u069b\t")
        buf.write("\4\2\2\u069b\u00dd\3\2\2\2\u069c\u069e\7\177\2\2\u069d")
        buf.write("\u069c\3\2\2\2\u069d\u069e\3\2\2\2\u069e\u069f\3\2\2\2")
        buf.write("\u069f\u06a0\5\6\4\2\u06a0\u00df\3\2\2\2\u06a1\u06a3\5")
        buf.write("\u0086D\2\u06a2\u06a4\5\u00e2r\2\u06a3\u06a2\3\2\2\2\u06a3")
        buf.write("\u06a4\3\2\2\2\u06a4\u00e1\3\2\2\2\u06a5\u06ae\5\u00e4")
        buf.write("s\2\u06a6\u06a8\5\u00e6t\2\u06a7\u06a6\3\2\2\2\u06a7\u06a8")
        buf.write("\3\2\2\2\u06a8\u06a9\3\2\2\2\u06a9\u06aa\5\u00d2j\2\u06aa")
        buf.write("\u06ab\5\u00d4k\2\u06ab\u06ae\3\2\2\2\u06ac\u06ae\5\u00e8")
        buf.write("u\2\u06ad\u06a5\3\2\2\2\u06ad\u06a7\3\2\2\2\u06ad\u06ac")
        buf.write("\3\2\2\2\u06ae\u00e3\3\2\2\2\u06af\u06b5\5\u00e6t\2\u06b0")
        buf.write("\u06b2\5\u00d6l\2\u06b1\u06b3\5\u00e4s\2\u06b2\u06b1\3")
        buf.write("\2\2\2\u06b2\u06b3\3\2\2\2\u06b3\u06b5\3\2\2\2\u06b4\u06af")
        buf.write("\3\2\2\2\u06b4\u06b0\3\2\2\2\u06b5\u00e5\3\2\2\2\u06b6")
        buf.write("\u06b7\bt\1\2\u06b7\u06c5\5\u00d2j\2\u06b8\u06ba\7S\2")
        buf.write("\2\u06b9\u06bb\5P)\2\u06ba\u06b9\3\2\2\2\u06ba\u06bb\3")
        buf.write("\2\2\2\u06bb\u06bc\3\2\2\2\u06bc\u06be\7T\2\2\u06bd\u06bf")
        buf.write("\5\u00b2Z\2\u06be\u06bd\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf")
        buf.write("\u06c5\3\2\2\2\u06c0\u06c1\7Q\2\2\u06c1\u06c2\5\u00e4")
        buf.write("s\2\u06c2\u06c3\7R\2\2\u06c3\u06c5\3\2\2\2\u06c4\u06b6")
        buf.write("\3\2\2\2\u06c4\u06b8\3\2\2\2\u06c4\u06c0\3\2\2\2\u06c5")
        buf.write("\u06d3\3\2\2\2\u06c6\u06c7\f\7\2\2\u06c7\u06d2\5\u00d2")
        buf.write("j\2\u06c8\u06c9\f\5\2\2\u06c9\u06cb\7S\2\2\u06ca\u06cc")
        buf.write("\5P)\2\u06cb\u06ca\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc\u06cd")
        buf.write("\3\2\2\2\u06cd\u06cf\7T\2\2\u06ce\u06d0\5\u00b2Z\2\u06cf")
        buf.write("\u06ce\3\2\2\2\u06cf\u06d0\3\2\2\2\u06d0\u06d2\3\2\2\2")
        buf.write("\u06d1\u06c6\3\2\2\2\u06d1\u06c8\3\2\2\2\u06d2\u06d5\3")
        buf.write("\2\2\2\u06d3\u06d1\3\2\2\2\u06d3\u06d4\3\2\2\2\u06d4\u00e7")
        buf.write("\3\2\2\2\u06d5\u06d3\3\2\2\2\u06d6\u06db\5\u00eav\2\u06d7")
        buf.write("\u06d8\5\u00d6l\2\u06d8\u06d9\5\u00e8u\2\u06d9\u06db\3")
        buf.write("\2\2\2\u06da\u06d6\3\2\2\2\u06da\u06d7\3\2\2\2\u06db\u00e9")
        buf.write("\3\2\2\2\u06dc\u06dd\bv\1\2\u06dd\u06de\7\177\2\2\u06de")
        buf.write("\u06ec\3\2\2\2\u06df\u06e0\f\5\2\2\u06e0\u06eb\5\u00d2")
        buf.write("j\2\u06e1\u06e2\f\4\2\2\u06e2\u06e4\7S\2\2\u06e3\u06e5")
        buf.write("\5P)\2\u06e4\u06e3\3\2\2\2\u06e4\u06e5\3\2\2\2\u06e5\u06e6")
        buf.write("\3\2\2\2\u06e6\u06e8\7T\2\2\u06e7\u06e9\5\u00b2Z\2\u06e8")
        buf.write("\u06e7\3\2\2\2\u06e8\u06e9\3\2\2\2\u06e9\u06eb\3\2\2\2")
        buf.write("\u06ea\u06df\3\2\2\2\u06ea\u06e1\3\2\2\2\u06eb\u06ee\3")
        buf.write("\2\2\2\u06ec\u06ea\3\2\2\2\u06ec\u06ed\3\2\2\2\u06ed\u00eb")
        buf.write("\3\2\2\2\u06ee\u06ec\3\2\2\2\u06ef\u06f1\5\u00eex\2\u06f0")
        buf.write("\u06ef\3\2\2\2\u06f0\u06f1\3\2\2\2\u06f1\u06f3\3\2\2\2")
        buf.write("\u06f2\u06f4\7\177\2\2\u06f3\u06f2\3\2\2\2\u06f3\u06f4")
        buf.write("\3\2\2\2\u06f4\u06fa\3\2\2\2\u06f5\u06f6\5\u00eex\2\u06f6")
        buf.write("\u06f7\7v\2\2\u06f7\u06f8\7\177\2\2\u06f8\u06fa\3\2\2")
        buf.write("\2\u06f9\u06f0\3\2\2\2\u06f9\u06f5\3\2\2\2\u06fa\u00ed")
        buf.write("\3\2\2\2\u06fb\u06fc\bx\1\2\u06fc\u06fd\5\u00f0y\2\u06fd")
        buf.write("\u0703\3\2\2\2\u06fe\u06ff\f\3\2\2\u06ff\u0700\7v\2\2")
        buf.write("\u0700\u0702\5\u00f0y\2\u0701\u06fe\3\2\2\2\u0702\u0705")
        buf.write("\3\2\2\2\u0703\u0701\3\2\2\2\u0703\u0704\3\2\2\2\u0704")
        buf.write("\u00ef\3\2\2\2\u0705\u0703\3\2\2\2\u0706\u0708\5\u00b2")
        buf.write("Z\2\u0707\u0706\3\2\2\2\u0707\u0708\3\2\2\2\u0708\u0709")
        buf.write("\3\2\2\2\u0709\u070a\5\u0080A\2\u070a\u070b\5\u00ccg\2")
        buf.write("\u070b\u0726\3\2\2\2\u070c\u070e\5\u00b2Z\2\u070d\u070c")
        buf.write("\3\2\2\2\u070d\u070e\3\2\2\2\u070e\u070f\3\2\2\2\u070f")
        buf.write("\u0710\5\u0080A\2\u0710\u0711\5\u00ccg\2\u0711\u0712\7")
        buf.write("a\2\2\u0712\u0713\5\u00fa~\2\u0713\u0726\3\2\2\2\u0714")
        buf.write("\u0716\5\u00b2Z\2\u0715\u0714\3\2\2\2\u0715\u0716\3\2")
        buf.write("\2\2\u0716\u0717\3\2\2\2\u0717\u0719\5\u0080A\2\u0718")
        buf.write("\u071a\5\u00e2r\2\u0719\u0718\3\2\2\2\u0719\u071a\3\2")
        buf.write("\2\2\u071a\u0726\3\2\2\2\u071b\u071d\5\u00b2Z\2\u071c")
        buf.write("\u071b\3\2\2\2\u071c\u071d\3\2\2\2\u071d\u071e\3\2\2\2")
        buf.write("\u071e\u0720\5\u0080A\2\u071f\u0721\5\u00e2r\2\u0720\u071f")
        buf.write("\3\2\2\2\u0720\u0721\3\2\2\2\u0721\u0722\3\2\2\2\u0722")
        buf.write("\u0723\7a\2\2\u0723\u0724\5\u00fa~\2\u0724\u0726\3\2\2")
        buf.write("\2\u0725\u0707\3\2\2\2\u0725\u070d\3\2\2\2\u0725\u0715")
        buf.write("\3\2\2\2\u0725\u071c\3\2\2\2\u0726\u00f1\3\2\2\2\u0727")
        buf.write("\u0729\5\u00b2Z\2\u0728\u0727\3\2\2\2\u0728\u0729\3\2")
        buf.write("\2\2\u0729\u072b\3\2\2\2\u072a\u072c\5\u0080A\2\u072b")
        buf.write("\u072a\3\2\2\2\u072b\u072c\3\2\2\2\u072c\u072d\3\2\2\2")
        buf.write("\u072d\u072f\5\u00ccg\2\u072e\u0730\5\u0114\u008b\2\u072f")
        buf.write("\u072e\3\2\2\2\u072f\u0730\3\2\2\2\u0730\u0731\3\2\2\2")
        buf.write("\u0731\u0732\5\u00f4{\2\u0732\u00f3\3\2\2\2\u0733\u0735")
        buf.write("\5\u012c\u0097\2\u0734\u0733\3\2\2\2\u0734\u0735\3\2\2")
        buf.write("\2\u0735\u0736\3\2\2\2\u0736\u073f\5Z.\2\u0737\u073f\5")
        buf.write("\u0150\u00a9\2\u0738\u0739\7a\2\2\u0739\u073a\7\27\2\2")
        buf.write("\u073a\u073f\7|\2\2\u073b\u073c\7a\2\2\u073c\u073d\7\30")
        buf.write("\2\2\u073d\u073f\7|\2\2\u073e\u0734\3\2\2\2\u073e\u0737")
        buf.write("\3\2\2\2\u073e\u0738\3\2\2\2\u073e\u073b\3\2\2\2\u073f")
        buf.write("\u00f5\3\2\2\2\u0740\u0746\5\u00f8}\2\u0741\u0742\7Q\2")
        buf.write("\2\u0742\u0743\5\26\f\2\u0743\u0744\7R\2\2\u0744\u0746")
        buf.write("\3\2\2\2\u0745\u0740\3\2\2\2\u0745\u0741\3\2\2\2\u0746")
        buf.write("\u00f7\3\2\2\2\u0747\u0748\7a\2\2\u0748\u074b\5\u00fa")
        buf.write("~\2\u0749\u074b\5\u00fe\u0080\2\u074a\u0747\3\2\2\2\u074a")
        buf.write("\u0749\3\2\2\2\u074b\u00f9\3\2\2\2\u074c\u074f\5J&\2\u074d")
        buf.write("\u074f\5\u00fe\u0080\2\u074e\u074c\3\2\2\2\u074e\u074d")
        buf.write("\3\2\2\2\u074f\u00fb\3\2\2\2\u0750\u0751\b\177\1\2\u0751")
        buf.write("\u0753\5\u00fa~\2\u0752\u0754\7\177\2\2\u0753\u0752\3")
        buf.write("\2\2\2\u0753\u0754\3\2\2\2\u0754\u075d\3\2\2\2\u0755\u0756")
        buf.write("\f\3\2\2\u0756\u0757\7v\2\2\u0757\u0759\5\u00fa~\2\u0758")
        buf.write("\u075a\7\177\2\2\u0759\u0758\3\2\2\2\u0759\u075a\3\2\2")
        buf.write("\2\u075a\u075c\3\2\2\2\u075b\u0755\3\2\2\2\u075c\u075f")
        buf.write("\3\2\2\2\u075d\u075b\3\2\2\2\u075d\u075e\3\2\2\2\u075e")
        buf.write("\u00fd\3\2\2\2\u075f\u075d\3\2\2\2\u0760\u0761\7U\2\2")
        buf.write("\u0761\u0763\5\u00fc\177\2\u0762\u0764\7v\2\2\u0763\u0762")
        buf.write("\3\2\2\2\u0763\u0764\3\2\2\2\u0764\u0765\3\2\2\2\u0765")
        buf.write("\u0766\7V\2\2\u0766\u076a\3\2\2\2\u0767\u0768\7U\2\2\u0768")
        buf.write("\u076a\7V\2\2\u0769\u0760\3\2\2\2\u0769\u0767\3\2\2\2")
        buf.write("\u076a\u00ff\3\2\2\2\u076b\u076e\7\u0080\2\2\u076c\u076e")
        buf.write("\5\u013e\u00a0\2\u076d\u076b\3\2\2\2\u076d\u076c\3\2\2")
        buf.write("\2\u076e\u0101\3\2\2\2\u076f\u0770\5\u0104\u0083\2\u0770")
        buf.write("\u0772\7U\2\2\u0771\u0773\5\u010c\u0087\2\u0772\u0771")
        buf.write("\3\2\2\2\u0772\u0773\3\2\2\2\u0773\u0774\3\2\2\2\u0774")
        buf.write("\u0775\7V\2\2\u0775\u0103\3\2\2\2\u0776\u0778\5\u010a")
        buf.write("\u0086\2\u0777\u0779\5\u00b2Z\2\u0778\u0777\3\2\2\2\u0778")
        buf.write("\u0779\3\2\2\2\u0779\u077a\3\2\2\2\u077a\u077c\5\u0106")
        buf.write("\u0084\2\u077b\u077d\5\u0108\u0085\2\u077c\u077b\3\2\2")
        buf.write("\2\u077c\u077d\3\2\2\2\u077d\u077f\3\2\2\2\u077e\u0780")
        buf.write("\5\u011a\u008e\2\u077f\u077e\3\2\2\2\u077f\u0780\3\2\2")
        buf.write("\2\u0780\u0789\3\2\2\2\u0781\u0783\5\u010a\u0086\2\u0782")
        buf.write("\u0784\5\u00b2Z\2\u0783\u0782\3\2\2\2\u0783\u0784\3\2")
        buf.write("\2\2\u0784\u0786\3\2\2\2\u0785\u0787\5\u011a\u008e\2\u0786")
        buf.write("\u0785\3\2\2\2\u0786\u0787\3\2\2\2\u0787\u0789\3\2\2\2")
        buf.write("\u0788\u0776\3\2\2\2\u0788\u0781\3\2\2\2\u0789\u0105\3")
        buf.write("\2\2\2\u078a\u078c\5\f\7\2\u078b\u078a\3\2\2\2\u078b\u078c")
        buf.write("\3\2\2\2\u078c\u078d\3\2\2\2\u078d\u078e\5\u0100\u0081")
        buf.write("\2\u078e\u0107\3\2\2\2\u078f\u0790\7\"\2\2\u0790\u0109")
        buf.write("\3\2\2\2\u0791\u0792\t\5\2\2\u0792\u010b\3\2\2\2\u0793")
        buf.write("\u0795\5\u010e\u0088\2\u0794\u0796\5\u010c\u0087\2\u0795")
        buf.write("\u0794\3\2\2\2\u0795\u0796\3\2\2\2\u0796\u079d\3\2\2\2")
        buf.write("\u0797\u0798\5\u0124\u0093\2\u0798\u079a\7z\2\2\u0799")
        buf.write("\u079b\5\u010c\u0087\2\u079a\u0799\3\2\2\2\u079a\u079b")
        buf.write("\3\2\2\2\u079b\u079d\3\2\2\2\u079c\u0793\3\2\2\2\u079c")
        buf.write("\u0797\3\2\2\2\u079d\u010d\3\2\2\2\u079e\u07a0\5\u00b2")
        buf.write("Z\2\u079f\u079e\3\2\2\2\u079f\u07a0\3\2\2\2\u07a0\u07a2")
        buf.write("\3\2\2\2\u07a1\u07a3\5\u0080A\2\u07a2\u07a1\3\2\2\2\u07a2")
        buf.write("\u07a3\3\2\2\2\u07a3\u07a5\3\2\2\2\u07a4\u07a6\5\u0110")
        buf.write("\u0089\2\u07a5\u07a4\3\2\2\2\u07a5\u07a6\3\2\2\2\u07a6")
        buf.write("\u07a7\3\2\2\2\u07a7\u07af\7|\2\2\u07a8\u07af\5\u00f2")
        buf.write("z\2\u07a9\u07af\5\u00aaV\2\u07aa\u07af\5z>\2\u07ab\u07af")
        buf.write("\5\u0138\u009d\2\u07ac\u07af\5v<\2\u07ad\u07af\5|?\2\u07ae")
        buf.write("\u079f\3\2\2\2\u07ae\u07a8\3\2\2\2\u07ae\u07a9\3\2\2\2")
        buf.write("\u07ae\u07aa\3\2\2\2\u07ae\u07ab\3\2\2\2\u07ae\u07ac\3")
        buf.write("\2\2\2\u07ae\u07ad\3\2\2\2\u07af\u010f\3\2\2\2\u07b0\u07b1")
        buf.write("\b\u0089\1\2\u07b1\u07b2\5\u0112\u008a\2\u07b2\u07b8\3")
        buf.write("\2\2\2\u07b3\u07b4\f\3\2\2\u07b4\u07b5\7v\2\2\u07b5\u07b7")
        buf.write("\5\u0112\u008a\2\u07b6\u07b3\3\2\2\2\u07b7\u07ba\3\2\2")
        buf.write("\2\u07b8\u07b6\3\2\2\2\u07b8\u07b9\3\2\2\2\u07b9\u0111")
        buf.write("\3\2\2\2\u07ba\u07b8\3\2\2\2\u07bb\u07bd\5\u00ccg\2\u07bc")
        buf.write("\u07be\5\u0114\u008b\2\u07bd\u07bc\3\2\2\2\u07bd\u07be")
        buf.write("\3\2\2\2\u07be\u07c0\3\2\2\2\u07bf\u07c1\5\u0118\u008d")
        buf.write("\2\u07c0\u07bf\3\2\2\2\u07c0\u07c1\3\2\2\2\u07c1\u07cf")
        buf.write("\3\2\2\2\u07c2\u07c4\5\u00ccg\2\u07c3\u07c5\5\u00f8}\2")
        buf.write("\u07c4\u07c3\3\2\2\2\u07c4\u07c5\3\2\2\2\u07c5\u07cf\3")
        buf.write("\2\2\2\u07c6\u07c8\7\u0080\2\2\u07c7\u07c6\3\2\2\2\u07c7")
        buf.write("\u07c8\3\2\2\2\u07c8\u07ca\3\2\2\2\u07c9\u07cb\5\u00b2")
        buf.write("Z\2\u07ca\u07c9\3\2\2\2\u07ca\u07cb\3\2\2\2\u07cb\u07cc")
        buf.write("\3\2\2\2\u07cc\u07cd\7z\2\2\u07cd\u07cf\5P)\2\u07ce\u07bb")
        buf.write("\3\2\2\2\u07ce\u07c2\3\2\2\2\u07ce\u07c7\3\2\2\2\u07cf")
        buf.write("\u0113\3\2\2\2\u07d0\u07d1\b\u008b\1\2\u07d1\u07d2\5\u0116")
        buf.write("\u008c\2\u07d2\u07d7\3\2\2\2\u07d3\u07d4\f\3\2\2\u07d4")
        buf.write("\u07d6\5\u0116\u008c\2\u07d5\u07d3\3\2\2\2\u07d6\u07d9")
        buf.write("\3\2\2\2\u07d7\u07d5\3\2\2\2\u07d7\u07d8\3\2\2\2\u07d8")
        buf.write("\u0115\3\2\2\2\u07d9\u07d7\3\2\2\2\u07da\u07db\t\6\2\2")
        buf.write("\u07db\u0117\3\2\2\2\u07dc\u07dd\7a\2\2\u07dd\u07de\7")
        buf.write("\u0083\2\2\u07de\u07df\b\u008d\1\2\u07df\u0119\3\2\2\2")
        buf.write("\u07e0\u07e1\7z\2\2\u07e1\u07e2\5\u011c\u008f\2\u07e2")
        buf.write("\u011b\3\2\2\2\u07e3\u07e4\b\u008f\1\2\u07e4\u07e6\5\u011e")
        buf.write("\u0090\2\u07e5\u07e7\7\177\2\2\u07e6\u07e5\3\2\2\2\u07e6")
        buf.write("\u07e7\3\2\2\2\u07e7\u07f0\3\2\2\2\u07e8\u07e9\f\3\2\2")
        buf.write("\u07e9\u07ea\7v\2\2\u07ea\u07ec\5\u011e\u0090\2\u07eb")
        buf.write("\u07ed\7\177\2\2\u07ec\u07eb\3\2\2\2\u07ec\u07ed\3\2\2")
        buf.write("\2\u07ed\u07ef\3\2\2\2\u07ee\u07e8\3\2\2\2\u07ef\u07f2")
        buf.write("\3\2\2\2\u07f0\u07ee\3\2\2\2\u07f0\u07f1\3\2\2\2\u07f1")
        buf.write("\u011d\3\2\2\2\u07f2\u07f0\3\2\2\2\u07f3\u07f5\5\u00b2")
        buf.write("Z\2\u07f4\u07f3\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5\u07f6")
        buf.write("\3\2\2\2\u07f6\u0809\5\u0122\u0092\2\u07f7\u07f9\5\u00b2")
        buf.write("Z\2\u07f8\u07f7\3\2\2\2\u07f8\u07f9\3\2\2\2\u07f9\u07fa")
        buf.write("\3\2\2\2\u07fa\u07fc\7L\2\2\u07fb\u07fd\5\u0124\u0093")
        buf.write("\2\u07fc\u07fb\3\2\2\2\u07fc\u07fd\3\2\2\2\u07fd\u07fe")
        buf.write("\3\2\2\2\u07fe\u0809\5\u0122\u0092\2\u07ff\u0801\5\u00b2")
        buf.write("Z\2\u0800\u07ff\3\2\2\2\u0800\u0801\3\2\2\2\u0801\u0802")
        buf.write("\3\2\2\2\u0802\u0804\5\u0124\u0093\2\u0803\u0805\7L\2")
        buf.write("\2\u0804\u0803\3\2\2\2\u0804\u0805\3\2\2\2\u0805\u0806")
        buf.write("\3\2\2\2\u0806\u0807\5\u0122\u0092\2\u0807\u0809\3\2\2")
        buf.write("\2\u0808\u07f4\3\2\2\2\u0808\u07f8\3\2\2\2\u0808\u0800")
        buf.write("\3\2\2\2\u0809\u011f\3\2\2\2\u080a\u080c\5\f\7\2\u080b")
        buf.write("\u080a\3\2\2\2\u080b\u080c\3\2\2\2\u080c\u080d\3\2\2\2")
        buf.write("\u080d\u0810\5\u0100\u0081\2\u080e\u0810\5\u008eH\2\u080f")
        buf.write("\u080b\3\2\2\2\u080f\u080e\3\2\2\2\u0810\u0121\3\2\2\2")
        buf.write("\u0811\u0812\5\u0120\u0091\2\u0812\u0123\3\2\2\2\u0813")
        buf.write("\u0814\t\7\2\2\u0814\u0125\3\2\2\2\u0815\u0816\7\60\2")
        buf.write("\2\u0816\u0817\5\u0128\u0095\2\u0817\u0127\3\2\2\2\u0818")
        buf.write("\u081a\5\u0086D\2\u0819\u081b\5\u012a\u0096\2\u081a\u0819")
        buf.write("\3\2\2\2\u081a\u081b\3\2\2\2\u081b\u0129\3\2\2\2\u081c")
        buf.write("\u081e\5\u00d6l\2\u081d\u081f\5\u012a\u0096\2\u081e\u081d")
        buf.write("\3\2\2\2\u081e\u081f\3\2\2\2\u081f\u012b\3\2\2\2\u0820")
        buf.write("\u0821\7z\2\2\u0821\u0822\5\u012e\u0098\2\u0822\u012d")
        buf.write("\3\2\2\2\u0823\u0825\5\u0130\u0099\2\u0824\u0826\7\177")
        buf.write("\2\2\u0825\u0824\3\2\2\2\u0825\u0826\3\2\2\2\u0826\u082f")
        buf.write("\3\2\2\2\u0827\u0829\5\u0130\u0099\2\u0828\u082a\7\177")
        buf.write("\2\2\u0829\u0828\3\2\2\2\u0829\u082a\3\2\2\2\u082a\u082b")
        buf.write("\3\2\2\2\u082b\u082c\7v\2\2\u082c\u082d\5\u012e\u0098")
        buf.write("\2\u082d\u082f\3\2\2\2\u082e\u0823\3\2\2\2\u082e\u0827")
        buf.write("\3\2\2\2\u082f\u012f\3\2\2\2\u0830\u0831\5\u0132\u009a")
        buf.write("\2\u0831\u0833\7Q\2\2\u0832\u0834\5\26\f\2\u0833\u0832")
        buf.write("\3\2\2\2\u0833\u0834\3\2\2\2\u0834\u0835\3\2\2\2\u0835")
        buf.write("\u0836\7R\2\2\u0836\u083b\3\2\2\2\u0837\u0838\5\u0132")
        buf.write("\u009a\2\u0838\u0839\5\u00fe\u0080\2\u0839\u083b\3\2\2")
        buf.write("\2\u083a\u0830\3\2\2\2\u083a\u0837\3\2\2\2\u083b\u0131")
        buf.write("\3\2\2\2\u083c\u083f\5\u0120\u0091\2\u083d\u083f\7\u0080")
        buf.write("\2\2\u083e\u083c\3\2\2\2\u083e\u083d\3\2\2\2\u083f\u0133")
        buf.write("\3\2\2\2\u0840\u0841\7\60\2\2\u0841\u0842\5\u0166\u00b4")
        buf.write("\2\u0842\u0135\3\2\2\2\u0843\u0844\7\60\2\2\u0844\u0845")
        buf.write("\7\u0089\2\2\u0845\u0849\7\u0080\2\2\u0846\u0847\7\60")
        buf.write("\2\2\u0847\u0849\7\u008c\2\2\u0848\u0843\3\2\2\2\u0848")
        buf.write("\u0846\3\2\2\2\u0849\u0137\3\2\2\2\u084a\u084b\7@\2\2")
        buf.write("\u084b\u084c\7b\2\2\u084c\u084d\5\u013a\u009e\2\u084d")
        buf.write("\u084e\7c\2\2\u084e\u084f\5r:\2\u084f\u0139\3\2\2\2\u0850")
        buf.write("\u0851\b\u009e\1\2\u0851\u0852\5\u013c\u009f\2\u0852\u0858")
        buf.write("\3\2\2\2\u0853\u0854\f\3\2\2\u0854\u0855\7v\2\2\u0855")
        buf.write("\u0857\5\u013c\u009f\2\u0856\u0853\3\2\2\2\u0857\u085a")
        buf.write("\3\2\2\2\u0858\u0856\3\2\2\2\u0858\u0859\3\2\2\2\u0859")
        buf.write("\u013b\3\2\2\2\u085a\u0858\3\2\2\2\u085b\u085d\7\21\2")
        buf.write("\2\u085c\u085e\7\177\2\2\u085d\u085c\3\2\2\2\u085d\u085e")
        buf.write("\3\2\2\2\u085e\u0860\3\2\2\2\u085f\u0861\7\u0080\2\2\u0860")
        buf.write("\u085f\3\2\2\2\u0860\u0861\3\2\2\2\u0861\u088d\3\2\2\2")
        buf.write("\u0862\u0864\7\21\2\2\u0863\u0865\7\u0080\2\2\u0864\u0863")
        buf.write("\3\2\2\2\u0864\u0865\3\2\2\2\u0865\u0866\3\2\2\2\u0866")
        buf.write("\u0867\7a\2\2\u0867\u088d\5\u00e0q\2\u0868\u086a\7H\2")
        buf.write("\2\u0869\u086b\7\177\2\2\u086a\u0869\3\2\2\2\u086a\u086b")
        buf.write("\3\2\2\2\u086b\u086d\3\2\2\2\u086c\u086e\7\u0080\2\2\u086d")
        buf.write("\u086c\3\2\2\2\u086d\u086e\3\2\2\2\u086e\u088d\3\2\2\2")
        buf.write("\u086f\u0871\7H\2\2\u0870\u0872\7\u0080\2\2\u0871\u0870")
        buf.write("\3\2\2\2\u0871\u0872\3\2\2\2\u0872\u0873\3\2\2\2\u0873")
        buf.write("\u0874\7a\2\2\u0874\u088d\5\u00e0q\2\u0875\u0876\7@\2")
        buf.write("\2\u0876\u0877\7b\2\2\u0877\u0878\5\u013a\u009e\2\u0878")
        buf.write("\u0879\7c\2\2\u0879\u087b\7\21\2\2\u087a\u087c\7\177\2")
        buf.write("\2\u087b\u087a\3\2\2\2\u087b\u087c\3\2\2\2\u087c\u087e")
        buf.write("\3\2\2\2\u087d\u087f\7\u0080\2\2\u087e\u087d\3\2\2\2\u087e")
        buf.write("\u087f\3\2\2\2\u087f\u088d\3\2\2\2\u0880\u0881\7@\2\2")
        buf.write("\u0881\u0882\7b\2\2\u0882\u0883\5\u013a\u009e\2\u0883")
        buf.write("\u0884\7c\2\2\u0884\u0886\7\21\2\2\u0885\u0887\7\u0080")
        buf.write("\2\2\u0886\u0885\3\2\2\2\u0886\u0887\3\2\2\2\u0887\u0888")
        buf.write("\3\2\2\2\u0888\u0889\7a\2\2\u0889\u088a\5\6\4\2\u088a")
        buf.write("\u088d\3\2\2\2\u088b\u088d\5\u00f0y\2\u088c\u085b\3\2")
        buf.write("\2\2\u088c\u0862\3\2\2\2\u088c\u0868\3\2\2\2\u088c\u086f")
        buf.write("\3\2\2\2\u088c\u0875\3\2\2\2\u088c\u0880\3\2\2\2\u088c")
        buf.write("\u088b\3\2\2\2\u088d\u013d\3\2\2\2\u088e\u088f\5\u0142")
        buf.write("\u00a2\2\u088f\u0891\7b\2\2\u0890\u0892\5\u0144\u00a3")
        buf.write("\2\u0891\u0890\3\2\2\2\u0891\u0892\3\2\2\2\u0892\u0893")
        buf.write("\3\2\2\2\u0893\u0894\7c\2\2\u0894\u013f\3\2\2\2\u0895")
        buf.write("\u08a5\5\u013e\u00a0\2\u0896\u0897\5\u0134\u009b\2\u0897")
        buf.write("\u0899\7b\2\2\u0898\u089a\5\u0144\u00a3\2\u0899\u0898")
        buf.write("\3\2\2\2\u0899\u089a\3\2\2\2\u089a\u089b\3\2\2\2\u089b")
        buf.write("\u089c\7c\2\2\u089c\u08a5\3\2\2\2\u089d\u089e\5\u0136")
        buf.write("\u009c\2\u089e\u08a0\7b\2\2\u089f\u08a1\5\u0144\u00a3")
        buf.write("\2\u08a0\u089f\3\2\2\2\u08a0\u08a1\3\2\2\2\u08a1\u08a2")
        buf.write("\3\2\2\2\u08a2\u08a3\7c\2\2\u08a3\u08a5\3\2\2\2\u08a4")
        buf.write("\u0895\3\2\2\2\u08a4\u0896\3\2\2\2\u08a4\u089d\3\2\2\2")
        buf.write("\u08a5\u0141\3\2\2\2\u08a6\u08a7\7\u0080\2\2\u08a7\u0143")
        buf.write("\3\2\2\2\u08a8\u08a9\b\u00a3\1\2\u08a9\u08ab\5\u0146\u00a4")
        buf.write("\2\u08aa\u08ac\7\177\2\2\u08ab\u08aa\3\2\2\2\u08ab\u08ac")
        buf.write("\3\2\2\2\u08ac\u08b5\3\2\2\2\u08ad\u08ae\f\3\2\2\u08ae")
        buf.write("\u08af\7v\2\2\u08af\u08b1\5\u0146\u00a4\2\u08b0\u08b2")
        buf.write("\7\177\2\2\u08b1\u08b0\3\2\2\2\u08b1\u08b2\3\2\2\2\u08b2")
        buf.write("\u08b4\3\2\2\2\u08b3\u08ad\3\2\2\2\u08b4\u08b7\3\2\2\2")
        buf.write("\u08b5\u08b3\3\2\2\2\u08b5\u08b6\3\2\2\2\u08b6\u0145\3")
        buf.write("\2\2\2\u08b7\u08b5\3\2\2\2\u08b8\u08bc\5\u00e0q\2\u08b9")
        buf.write("\u08bc\5P)\2\u08ba\u08bc\5\6\4\2\u08bb\u08b8\3\2\2\2\u08bb")
        buf.write("\u08b9\3\2\2\2\u08bb\u08ba\3\2\2\2\u08bc\u0147\3\2\2\2")
        buf.write("\u08bd\u08be\7H\2\2\u08be\u08bf\5\f\7\2\u08bf\u08c0\7")
        buf.write("\u0080\2\2\u08c0\u08c9\3\2\2\2\u08c1\u08c2\7H\2\2\u08c2")
        buf.write("\u08c4\5\f\7\2\u08c3\u08c5\7@\2\2\u08c4\u08c3\3\2\2\2")
        buf.write("\u08c4\u08c5\3\2\2\2\u08c5\u08c6\3\2\2\2\u08c6\u08c7\5")
        buf.write("\u013e\u00a0\2\u08c7\u08c9\3\2\2\2\u08c8\u08bd\3\2\2\2")
        buf.write("\u08c8\u08c1\3\2\2\2\u08c9\u0149\3\2\2\2\u08ca\u08cc\7")
        buf.write(" \2\2\u08cb\u08ca\3\2\2\2\u08cb\u08cc\3\2\2\2\u08cc\u08cd")
        buf.write("\3\2\2\2\u08cd\u08ce\7@\2\2\u08ce\u08cf\5r:\2\u08cf\u014b")
        buf.write("\3\2\2\2\u08d0\u08d1\7@\2\2\u08d1\u08d2\7b\2\2\u08d2\u08d3")
        buf.write("\7c\2\2\u08d3\u08d4\5r:\2\u08d4\u014d\3\2\2\2\u08d5\u08d6")
        buf.write("\7E\2\2\u08d6\u08d7\5Z.\2\u08d7\u08d8\5\u0152\u00aa\2")
        buf.write("\u08d8\u014f\3\2\2\2\u08d9\u08db\7E\2\2\u08da\u08dc\5")
        buf.write("\u012c\u0097\2\u08db\u08da\3\2\2\2\u08db\u08dc\3\2\2\2")
        buf.write("\u08dc\u08dd\3\2\2\2\u08dd\u08de\5Z.\2\u08de\u08df\5\u0152")
        buf.write("\u00aa\2\u08df\u0151\3\2\2\2\u08e0\u08e2\5\u0154\u00ab")
        buf.write("\2\u08e1\u08e3\5\u0152\u00aa\2\u08e2\u08e1\3\2\2\2\u08e2")
        buf.write("\u08e3\3\2\2\2\u08e3\u0153\3\2\2\2\u08e4\u08e5\7\r\2\2")
        buf.write("\u08e5\u08e6\7Q\2\2\u08e6\u08e7\5\u0156\u00ac\2\u08e7")
        buf.write("\u08e8\7R\2\2\u08e8\u08e9\5Z.\2\u08e9\u0155\3\2\2\2\u08ea")
        buf.write("\u08ec\5\u00b2Z\2\u08eb\u08ea\3\2\2\2\u08eb\u08ec\3\2")
        buf.write("\2\2\u08ec\u08ed\3\2\2\2\u08ed\u08ee\5\u0086D\2\u08ee")
        buf.write("\u08ef\5\u00ccg\2\u08ef\u08f9\3\2\2\2\u08f0\u08f2\5\u00b2")
        buf.write("Z\2\u08f1\u08f0\3\2\2\2\u08f1\u08f2\3\2\2\2\u08f2\u08f3")
        buf.write("\3\2\2\2\u08f3\u08f5\5\u0086D\2\u08f4\u08f6\5\u00e2r\2")
        buf.write("\u08f5\u08f4\3\2\2\2\u08f5\u08f6\3\2\2\2\u08f6\u08f9\3")
        buf.write("\2\2\2\u08f7\u08f9\7\177\2\2\u08f8\u08eb\3\2\2\2\u08f8")
        buf.write("\u08f1\3\2\2\2\u08f8\u08f7\3\2\2\2\u08f9\u0157\3\2\2\2")
        buf.write("\u08fa\u08fc\7C\2\2\u08fb\u08fd\5J&\2\u08fc\u08fb\3\2")
        buf.write("\2\2\u08fc\u08fd\3\2\2\2\u08fd\u0159\3\2\2\2\u08fe\u0901")
        buf.write("\5\u015c\u00af\2\u08ff\u0901\5\u0160\u00b1\2\u0900\u08fe")
        buf.write("\3\2\2\2\u0900\u08ff\3\2\2\2\u0901\u015b\3\2\2\2\u0902")
        buf.write("\u0903\7C\2\2\u0903\u0905\7Q\2\2\u0904\u0906\5\u015e\u00b0")
        buf.write("\2\u0905\u0904\3\2\2\2\u0905\u0906\3\2\2\2\u0906\u0907")
        buf.write("\3\2\2\2\u0907\u0908\7R\2\2\u0908\u015d\3\2\2\2\u0909")
        buf.write("\u090a\b\u00b0\1\2\u090a\u090c\5\u00e0q\2\u090b\u090d")
        buf.write("\7\177\2\2\u090c\u090b\3\2\2\2\u090c\u090d\3\2\2\2\u090d")
        buf.write("\u0916\3\2\2\2\u090e\u090f\f\3\2\2\u090f\u0910\7v\2\2")
        buf.write("\u0910\u0912\5\u00e0q\2\u0911\u0913\7\177\2\2\u0912\u0911")
        buf.write("\3\2\2\2\u0912\u0913\3\2\2\2\u0913\u0915\3\2\2\2\u0914")
        buf.write("\u090e\3\2\2\2\u0915\u0918\3\2\2\2\u0916\u0914\3\2\2\2")
        buf.write("\u0916\u0917\3\2\2\2\u0917\u015f\3\2\2\2\u0918\u0916\3")
        buf.write("\2\2\2\u0919\u091a\7.\2\2\u091a\u091b\7Q\2\2\u091b\u091c")
        buf.write("\5P)\2\u091c\u091d\7R\2\2\u091d\u0920\3\2\2\2\u091e\u0920")
        buf.write("\7.\2\2\u091f\u0919\3\2\2\2\u091f\u091e\3\2\2\2\u0920")
        buf.write("\u0161\3\2\2\2\u0921\u0922\7c\2\2\u0922\u0923\7c\2\2\u0923")
        buf.write("\u0163\3\2\2\2\u0924\u0925\7c\2\2\u0925\u0926\7c\2\2\u0926")
        buf.write("\u0927\7a\2\2\u0927\u0165\3\2\2\2\u0928\u0959\7-\2\2\u0929")
        buf.write("\u0959\7\30\2\2\u092a\u092b\7-\2\2\u092b\u092c\7S\2\2")
        buf.write("\u092c\u0959\7T\2\2\u092d\u092e\7\30\2\2\u092e\u092f\7")
        buf.write("S\2\2\u092f\u0959\7T\2\2\u0930\u0959\7W\2\2\u0931\u0959")
        buf.write("\7X\2\2\u0932\u0959\7Y\2\2\u0933\u0959\7Z\2\2\u0934\u0959")
        buf.write("\7[\2\2\u0935\u0959\7\\\2\2\u0936\u0959\7]\2\2\u0937\u0959")
        buf.write("\7^\2\2\u0938\u0959\7_\2\2\u0939\u0959\7`\2\2\u093a\u0959")
        buf.write("\7a\2\2\u093b\u0959\7b\2\2\u093c\u0959\7c\2\2\u093d\u0959")
        buf.write("\7d\2\2\u093e\u0959\7e\2\2\u093f\u0959\7f\2\2\u0940\u0959")
        buf.write("\7g\2\2\u0941\u0959\7h\2\2\u0942\u0959\7i\2\2\u0943\u0959")
        buf.write("\7j\2\2\u0944\u0959\7k\2\2\u0945\u0959\7l\2\2\u0946\u0959")
        buf.write("\5\u0162\u00b2\2\u0947\u0959\5\u0164\u00b3\2\u0948\u0959")
        buf.write("\7m\2\2\u0949\u0959\7n\2\2\u094a\u0959\7o\2\2\u094b\u0959")
        buf.write("\7p\2\2\u094c\u0959\7q\2\2\u094d\u0959\7r\2\2\u094e\u0959")
        buf.write("\7s\2\2\u094f\u0959\7t\2\2\u0950\u0959\7u\2\2\u0951\u0959")
        buf.write("\7v\2\2\u0952\u0959\7w\2\2\u0953\u0959\7x\2\2\u0954\u0955")
        buf.write("\7Q\2\2\u0955\u0959\7R\2\2\u0956\u0957\7S\2\2\u0957\u0959")
        buf.write("\7T\2\2\u0958\u0928\3\2\2\2\u0958\u0929\3\2\2\2\u0958")
        buf.write("\u092a\3\2\2\2\u0958\u092d\3\2\2\2\u0958\u0930\3\2\2\2")
        buf.write("\u0958\u0931\3\2\2\2\u0958\u0932\3\2\2\2\u0958\u0933\3")
        buf.write("\2\2\2\u0958\u0934\3\2\2\2\u0958\u0935\3\2\2\2\u0958\u0936")
        buf.write("\3\2\2\2\u0958\u0937\3\2\2\2\u0958\u0938\3\2\2\2\u0958")
        buf.write("\u0939\3\2\2\2\u0958\u093a\3\2\2\2\u0958\u093b\3\2\2\2")
        buf.write("\u0958\u093c\3\2\2\2\u0958\u093d\3\2\2\2\u0958\u093e\3")
        buf.write("\2\2\2\u0958\u093f\3\2\2\2\u0958\u0940\3\2\2\2\u0958\u0941")
        buf.write("\3\2\2\2\u0958\u0942\3\2\2\2\u0958\u0943\3\2\2\2\u0958")
        buf.write("\u0944\3\2\2\2\u0958\u0945\3\2\2\2\u0958\u0946\3\2\2\2")
        buf.write("\u0958\u0947\3\2\2\2\u0958\u0948\3\2\2\2\u0958\u0949\3")
        buf.write("\2\2\2\u0958\u094a\3\2\2\2\u0958\u094b\3\2\2\2\u0958\u094c")
        buf.write("\3\2\2\2\u0958\u094d\3\2\2\2\u0958\u094e\3\2\2\2\u0958")
        buf.write("\u094f\3\2\2\2\u0958\u0950\3\2\2\2\u0958\u0951\3\2\2\2")
        buf.write("\u0958\u0952\3\2\2\2\u0958\u0953\3\2\2\2\u0958\u0954\3")
        buf.write("\2\2\2\u0958\u0956\3\2\2\2\u0959\u0167\3\2\2\2\u095a\u0963")
        buf.write("\7\u0081\2\2\u095b\u0963\7\u0087\2\2\u095c\u0963\7\u0088")
        buf.write("\2\2\u095d\u0963\7\u0089\2\2\u095e\u0963\7!\2\2\u095f")
        buf.write("\u0963\7D\2\2\u0960\u0963\7/\2\2\u0961\u0963\5\u016a\u00b6")
        buf.write("\2\u0962\u095a\3\2\2\2\u0962\u095b\3\2\2\2\u0962\u095c")
        buf.write("\3\2\2\2\u0962\u095d\3\2\2\2\u0962\u095e\3\2\2\2\u0962")
        buf.write("\u095f\3\2\2\2\u0962\u0960\3\2\2\2\u0962\u0961\3\2\2\2")
        buf.write("\u0963\u0169\3\2\2\2\u0964\u0965\t\b\2\2\u0965\u016b\3")
        buf.write("\2\2\2\u0137\u016d\u0176\u017a\u0185\u0189\u0198\u019f")
        buf.write("\u01a4\u01a6\u01ac\u01b2\u01b6\u01c2\u01c8\u01cb\u01ce")
        buf.write("\u01d1\u01dd\u01e1\u01e7\u01ee\u0222\u0231\u0237\u023d")
        buf.write("\u024a\u024c\u0252\u0261\u0267\u0286\u028c\u0291\u0295")
        buf.write("\u0299\u029c\u029f\u02a3\u02a9\u02ab\u02b3\u02b6\u02bd")
        buf.write("\u02c4\u02c8\u02cd\u02d1\u02d4\u02d9\u02df\u02e7\u02f2")
        buf.write("\u02f4\u0303\u0305\u0311\u0313\u0320\u0322\u0334\u0336")
        buf.write("\u0342\u0344\u034f\u035a\u0365\u0370\u037b\u0381\u0394")
        buf.write("\u03a1\u03ab\u03b1\u03b7\u03bb\u03bf\u03c3\u03c7\u03cb")
        buf.write("\u03cf\u03d4\u03d7\u03e3\u03e9\u03f4\u040a\u0411\u0419")
        buf.write("\u041f\u0433\u0437\u0444\u0448\u044b\u0452\u045a\u0462")
        buf.write("\u046f\u047d\u048d\u0491\u0495\u049a\u04a1\u04a4\u04a9")
        buf.write("\u04ae\u04c6\u04ca\u04cf\u04d6\u04e0\u04e5\u04e8\u04f2")
        buf.write("\u04f8\u04fd\u0501\u0506\u050a\u050f\u0512\u0528\u052d")
        buf.write("\u0538\u053c\u053f\u0542\u0546\u054b\u054d\u0554\u0561")
        buf.write("\u0569\u056f\u0575\u057c\u057f\u0588\u0590\u0593\u0598")
        buf.write("\u059e\u05a9\u05ac\u05b1\u05c0\u05c6\u05cf\u05d9\u05df")
        buf.write("\u05e7\u05eb\u05ef\u05f4\u05f9\u0600\u0602\u0607\u060b")
        buf.write("\u0619\u061f\u062e\u0638\u063d\u0644\u064a\u064f\u0655")
        buf.write("\u065c\u0660\u0662\u0664\u066b\u066e\u0671\u0674\u0679")
        buf.write("\u067d\u0680\u0684\u0688\u068d\u0690\u0692\u0696\u069d")
        buf.write("\u06a3\u06a7\u06ad\u06b2\u06b4\u06ba\u06be\u06c4\u06cb")
        buf.write("\u06cf\u06d1\u06d3\u06da\u06e4\u06e8\u06ea\u06ec\u06f0")
        buf.write("\u06f3\u06f9\u0703\u0707\u070d\u0715\u0719\u071c\u0720")
        buf.write("\u0725\u0728\u072b\u072f\u0734\u073e\u0745\u074a\u074e")
        buf.write("\u0753\u0759\u075d\u0763\u0769\u076d\u0772\u0778\u077c")
        buf.write("\u077f\u0783\u0786\u0788\u078b\u0795\u079a\u079c\u079f")
        buf.write("\u07a2\u07a5\u07ae\u07b8\u07bd\u07c0\u07c4\u07c7\u07ca")
        buf.write("\u07ce\u07d7\u07e6\u07ec\u07f0\u07f4\u07f8\u07fc\u0800")
        buf.write("\u0804\u0808\u080b\u080f\u081a\u081e\u0825\u0829\u082e")
        buf.write("\u0833\u083a\u083e\u0848\u0858\u085d\u0860\u0864\u086a")
        buf.write("\u086d\u0871\u087b\u087e\u0886\u088c\u0891\u0899\u08a0")
        buf.write("\u08a4\u08ab\u08b1\u08b5\u08bb\u08c4\u08c8\u08cb\u08db")
        buf.write("\u08e2\u08eb\u08f1\u08f5\u08f8\u08fc\u0900\u0905\u090c")
        buf.write("\u0912\u0916\u091f\u0958\u0962")
        return buf.getvalue()


class CPP14Parser(Parser):
    grammarFileName = "CPP14.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = ["<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                    "'alignas'", "'alignof'", "'asm'", "'auto'", "'bool'",
                    "'break'", "'case'", "'catch'", "'char'", "'char16_t'",
                    "'char32_t'", "'class'", "'const'", "'constexpr'",
                    "'const_cast'", "'continue'", "'decltype'", "'default'",
                    "'delete'", "'do'", "'double'", "'dynamic_cast'", "'else'",
                    "'enum'", "'explicit'", "'export'", "'extern'", "'false'",
                    "'final'", "'float'", "'for'", "'friend'", "'goto'",
                    "'if'", "'inline'", "'int'", "'long'", "'mutable'",
                    "'namespace'", "'new'", "'noexcept'", "'nullptr'",
                    "'operator'", "'override'", "'private'", "'protected'",
                    "'public'", "'register'", "'reinterpret_cast'", "'return'",
                    "'short'", "'signed'", "'sizeof'", "'static'", "'static_assert'",
                    "'static_cast'", "'struct'", "'switch'", "'template'",
                    "'this'", "'thread_local'", "'throw'", "'true'", "'try'",
                    "'typedef'", "'typeid'", "'typename'", "'union'", "'unsigned'",
                    "'using'", "'virtual'", "'void'", "'volatile'", "'wchar_t'",
                    "'while'", "'('", "')'", "'['", "']'", "'{'", "'}'",
                    "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'",
                    "'~'", "'!'", "'='", "'<'", "'>'", "'+='", "'-='",
                    "'*='", "'/='", "'%='", "'^='", "'&='", "'|='", "'<<'",
                    "'<<='", "'=='", "'!='", "'<='", "'>='", "'&&'", "'||'",
                    "'++'", "'--'", "','", "'->*'", "'->'", "'?'", "':'",
                    "'::'", "';'", "'.'", "'.*'", "'...'"]

    symbolicNames = ["<INVALID>", "Capturedefault", "MultiLineMacro", "Directive",
                     "Alignas", "Alignof", "Asm", "Auto", "Bool", "Break",
                     "Case", "Catch", "Char", "Char16", "Char32", "Class",
                     "Const", "Constexpr", "Const_cast", "Continue", "Decltype",
                     "Default", "Delete", "Do", "Double", "Dynamic_cast",
                     "Else", "Enum", "Explicit", "Export", "Extern", "FalseToken",
                     "Final", "Float", "For", "Friend", "Goto", "If", "Inline",
                     "Int", "Long", "Mutable", "Namespace", "New", "Noexcept",
                     "Nullptr", "Operator", "Override", "Private", "Protected",
                     "Public", "Register", "Reinterpret_cast", "Return",
                     "Short", "Signed", "Sizeof", "Static", "Static_assert",
                     "Static_cast", "Struct", "Switch", "Template", "This",
                     "Thread_local", "Throw", "TrueToken", "Try", "Typedef",
                     "Typeid", "Typename", "Union", "Unsigned", "Using",
                     "Virtual", "Void", "Volatile", "Wchar", "While", "LeftParen",
                     "RightParen", "LeftBracket", "RightBracket", "LeftBrace",
                     "RightBrace", "Plus", "Minus", "Star", "Div", "Mod",
                     "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less",
                     "Greater", "PlusAssign", "MinusAssign", "StarAssign",
                     "DivAssign", "ModAssign", "XorAssign", "AndAssign",
                     "OrAssign", "LeftShift", "LeftShiftAssign", "Equal",
                     "NotEqual", "LessEqual", "GreaterEqual", "AndAnd",
                     "OrOr", "PlusPlus", "MinusMinus", "Comma", "ArrowStar",
                     "Arrow", "Question", "Colon", "Doublecolon", "Semi",
                     "Dot", "DotStar", "Ellipsis", "Identifier", "Integerliteral",
                     "Decimalliteral", "Octalliteral", "Hexadecimalliteral",
                     "Binaryliteral", "Integersuffix", "Characterliteral",
                     "Floatingliteral", "Stringliteral", "Userdefinedintegerliteral",
                     "Userdefinedfloatingliteral", "Userdefinedstringliteral",
                     "Userdefinedcharacterliteral", "Whitespace", "Newline",
                     "BlockComment", "LineComment"]

    RULE_translationunit = 0
    RULE_lambdacapture = 1
    RULE_idexpression = 2
    RULE_unqualifiedid = 3
    RULE_qualifiedid = 4
    RULE_nestednamespecifier = 5
    RULE_capturelist = 6
    RULE_capture = 7
    RULE_lambdadeclarator = 8
    RULE_postfixexpression = 9
    RULE_expressionlist = 10
    RULE_pseudodestructorname = 11
    RULE_unaryexpression = 12
    RULE_unaryincdecexpression = 13
    RULE_unaryoperator = 14
    RULE_newexpression = 15
    RULE_newplacement = 16
    RULE_newdeclarator = 17
    RULE_noptrnewdeclarator = 18
    RULE_newinitializer = 19
    RULE_deleteexpression = 20
    RULE_castexpression = 21
    RULE_pmexpression = 22
    RULE_multiplicativeexpression = 23
    RULE_additiveexpression = 24
    RULE_shiftexpression = 25
    RULE_relationalexpression = 26
    RULE_equalityexpression = 27
    RULE_andexpression = 28
    RULE_exclusiveorexpression = 29
    RULE_inclusiveorexpression = 30
    RULE_logicalandexpression = 31
    RULE_logicalorexpression = 32
    RULE_conditionalexpression = 33
    RULE_ternaryconditionalexpression = 34
    RULE_unaryconditionalexpression = 35
    RULE_assignmentexpression = 36
    RULE_assignmentoperator = 37
    RULE_expression = 38
    RULE_constantexpression = 39
    RULE_statement = 40
    RULE_casestatement = 41
    RULE_defaultstatement = 42
    RULE_expressionstatement = 43
    RULE_compoundstatement = 44
    RULE_statementseq = 45
    RULE_selectionstatement = 46
    RULE_elsestatement = 47
    RULE_condition = 48
    RULE_iterationstatement = 49
    RULE_forinitstatement = 50
    RULE_forrangedeclaration = 51
    RULE_forrangeinitializer = 52
    RULE_jumpstatement = 53
    RULE_gotostatement = 54
    RULE_declarationseq = 55
    RULE_declaration = 56
    RULE_blockdeclaration = 57
    RULE_aliasdeclaration = 58
    RULE_simpledeclaration = 59
    RULE_static_assertdeclaration = 60
    RULE_emptydeclaration = 61
    RULE_declspecifier = 62
    RULE_declspecifierseq = 63
    RULE_typespecifier = 64
    RULE_trailingtypespecifier = 65
    RULE_typespecifierseq = 66
    RULE_trailingtypespecifierseq = 67
    RULE_simpletypespecifier = 68
    RULE_thetypename = 69
    RULE_decltypespecifier = 70
    RULE_enumhead = 71
    RULE_enumkey = 72
    RULE_enumbase = 73
    RULE_enumeratorlist = 74
    RULE_enumeratordefinition = 75
    RULE_enumerator = 76
    RULE_namespacename = 77
    RULE_originalnamespacename = 78
    RULE_namespacedefinition = 79
    RULE_namednamespacedefinition = 80
    RULE_namespacebody = 81
    RULE_namespacealias = 82
    RULE_qualifiednamespacespecifier = 83
    RULE_usingdeclaration = 84
    RULE_usingdirective = 85
    RULE_asmdefinition = 86
    RULE_linkagespecification = 87
    RULE_attributespecifierseq = 88
    RULE_attributespecifier = 89
    RULE_alignmentspecifier = 90
    RULE_attributelist = 91
    RULE_attribute = 92
    RULE_attributetoken = 93
    RULE_attributescopedtoken = 94
    RULE_attributenamespace = 95
    RULE_attributeargumentclause = 96
    RULE_balancedtokenseq = 97
    RULE_balancedtoken = 98
    RULE_initdeclaratorlist = 99
    RULE_initdeclarator = 100
    RULE_declarator = 101
    RULE_ptrdeclarator = 102
    RULE_noptrdeclarator = 103
    RULE_parametersandqualifiers = 104
    RULE_trailingreturntype = 105
    RULE_ptroperator = 106
    RULE_cvqualifierseq = 107
    RULE_cvqualifier = 108
    RULE_refqualifier = 109
    RULE_declaratorid = 110
    RULE_thetypeid = 111
    RULE_abstractdeclarator = 112
    RULE_ptrabstractdeclarator = 113
    RULE_noptrabstractdeclarator = 114
    RULE_abstractpackdeclarator = 115
    RULE_noptrabstractpackdeclarator = 116
    RULE_parameterdeclarationclause = 117
    RULE_parameterdeclarationlist = 118
    RULE_parameterdeclaration = 119
    RULE_functiondefinition = 120
    RULE_functionbody = 121
    RULE_initializer = 122
    RULE_braceorequalinitializer = 123
    RULE_initializerclause = 124
    RULE_initializerlist = 125
    RULE_bracedinitlist = 126
    RULE_classname = 127
    RULE_classspecifier = 128
    RULE_classhead = 129
    RULE_classheadname = 130
    RULE_classvirtspecifier = 131
    RULE_classkey = 132
    RULE_memberspecification = 133
    RULE_memberdeclaration = 134
    RULE_memberdeclaratorlist = 135
    RULE_memberdeclarator = 136
    RULE_virtspecifierseq = 137
    RULE_virtspecifier = 138
    RULE_purespecifier = 139
    RULE_baseclause = 140
    RULE_basespecifierlist = 141
    RULE_basespecifier = 142
    RULE_classordecltype = 143
    RULE_basetypespecifier = 144
    RULE_accessspecifier = 145
    RULE_conversionfunctionid = 146
    RULE_conversiontypeid = 147
    RULE_conversiondeclarator = 148
    RULE_ctorinitializer = 149
    RULE_meminitializerlist = 150
    RULE_meminitializer = 151
    RULE_meminitializerid = 152
    RULE_operatorfunctionid = 153
    RULE_literaloperatorid = 154
    RULE_templatedeclaration = 155
    RULE_templateparameterlist = 156
    RULE_templateparameter = 157
    RULE_simpletemplateid = 158
    RULE_templateid = 159
    RULE_templatename = 160
    RULE_templateargumentlist = 161
    RULE_templateargument = 162
    RULE_typenamespecifier = 163
    RULE_explicitinstantiation = 164
    RULE_explicitspecialization = 165
    RULE_tryblock = 166
    RULE_functiontryblock = 167
    RULE_handlerseq = 168
    RULE_handler = 169
    RULE_exceptiondeclaration = 170
    RULE_throwexpression = 171
    RULE_exceptionspecification = 172
    RULE_dynamicexceptionspecification = 173
    RULE_typeidlist = 174
    RULE_noexceptspecification = 175
    RULE_rightShift = 176
    RULE_rightShiftAssign = 177
    RULE_theoperator = 178
    RULE_literal = 179
    RULE_userdefinedliteral = 180

    ruleNames = ["translationunit", "lambdacapture", "idexpression", "unqualifiedid",
                 "qualifiedid", "nestednamespecifier", "capturelist",
                 "capture", "lambdadeclarator", "postfixexpression", "expressionlist",
                 "pseudodestructorname", "unaryexpression", "unaryincdecexpression",
                 "unaryoperator", "newexpression", "newplacement", "newdeclarator",
                 "noptrnewdeclarator", "newinitializer", "deleteexpression",
                 "castexpression", "pmexpression", "multiplicativeexpression",
                 "additiveexpression", "shiftexpression", "relationalexpression",
                 "equalityexpression", "andexpression", "exclusiveorexpression",
                 "inclusiveorexpression", "logicalandexpression", "logicalorexpression",
                 "conditionalexpression", "ternaryconditionalexpression",
                 "unaryconditionalexpression", "assignmentexpression",
                 "assignmentoperator", "expression", "constantexpression",
                 "statement", "casestatement", "defaultstatement", "expressionstatement",
                 "compoundstatement", "statementseq", "selectionstatement",
                 "elsestatement", "condition", "iterationstatement", "forinitstatement",
                 "forrangedeclaration", "forrangeinitializer", "jumpstatement",
                 "gotostatement", "declarationseq", "declaration", "blockdeclaration",
                 "aliasdeclaration", "simpledeclaration", "static_assertdeclaration",
                 "emptydeclaration", "declspecifier", "declspecifierseq",
                 "typespecifier", "trailingtypespecifier", "typespecifierseq",
                 "trailingtypespecifierseq", "simpletypespecifier", "thetypename",
                 "decltypespecifier", "enumhead", "enumkey", "enumbase",
                 "enumeratorlist", "enumeratordefinition", "enumerator",
                 "namespacename", "originalnamespacename", "namespacedefinition",
                 "namednamespacedefinition", "namespacebody", "namespacealias",
                 "qualifiednamespacespecifier", "usingdeclaration", "usingdirective",
                 "asmdefinition", "linkagespecification", "attributespecifierseq",
                 "attributespecifier", "alignmentspecifier", "attributelist",
                 "attribute", "attributetoken", "attributescopedtoken",
                 "attributenamespace", "attributeargumentclause", "balancedtokenseq",
                 "balancedtoken", "initdeclaratorlist", "initdeclarator",
                 "declarator", "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers",
                 "trailingreturntype", "ptroperator", "cvqualifierseq",
                 "cvqualifier", "refqualifier", "declaratorid", "thetypeid",
                 "abstractdeclarator", "ptrabstractdeclarator", "noptrabstractdeclarator",
                 "abstractpackdeclarator", "noptrabstractpackdeclarator",
                 "parameterdeclarationclause", "parameterdeclarationlist",
                 "parameterdeclaration", "functiondefinition", "functionbody",
                 "initializer", "braceorequalinitializer", "initializerclause",
                 "initializerlist", "bracedinitlist", "classname", "classspecifier",
                 "classhead", "classheadname", "classvirtspecifier", "classkey",
                 "memberspecification", "memberdeclaration", "memberdeclaratorlist",
                 "memberdeclarator", "virtspecifierseq", "virtspecifier",
                 "purespecifier", "baseclause", "basespecifierlist", "basespecifier",
                 "classordecltype", "basetypespecifier", "accessspecifier",
                 "conversionfunctionid", "conversiontypeid", "conversiondeclarator",
                 "ctorinitializer", "meminitializerlist", "meminitializer",
                 "meminitializerid", "operatorfunctionid", "literaloperatorid",
                 "templatedeclaration", "templateparameterlist", "templateparameter",
                 "simpletemplateid", "templateid", "templatename", "templateargumentlist",
                 "templateargument", "typenamespecifier", "explicitinstantiation",
                 "explicitspecialization", "tryblock", "functiontryblock",
                 "handlerseq", "handler", "exceptiondeclaration", "throwexpression",
                 "exceptionspecification", "dynamicexceptionspecification",
                 "typeidlist", "noexceptspecification", "rightShift",
                 "rightShiftAssign", "theoperator", "literal", "userdefinedliteral"]

    EOF = Token.EOF
    Capturedefault = 1
    MultiLineMacro = 2
    Directive = 3
    Alignas = 4
    Alignof = 5
    Asm = 6
    Auto = 7
    Bool = 8
    Break = 9
    Case = 10
    Catch = 11
    Char = 12
    Char16 = 13
    Char32 = 14
    Class = 15
    Const = 16
    Constexpr = 17
    Const_cast = 18
    Continue = 19
    Decltype = 20
    Default = 21
    Delete = 22
    Do = 23
    Double = 24
    Dynamic_cast = 25
    Else = 26
    Enum = 27
    Explicit = 28
    Export = 29
    Extern = 30
    FalseToken = 31
    Final = 32
    Float = 33
    For = 34
    Friend = 35
    Goto = 36
    If = 37
    Inline = 38
    Int = 39
    Long = 40
    Mutable = 41
    Namespace = 42
    New = 43
    Noexcept = 44
    Nullptr = 45
    Operator = 46
    Override = 47
    Private = 48
    Protected = 49
    Public = 50
    Register = 51
    Reinterpret_cast = 52
    Return = 53
    Short = 54
    Signed = 55
    Sizeof = 56
    Static = 57
    Static_assert = 58
    Static_cast = 59
    Struct = 60
    Switch = 61
    Template = 62
    This = 63
    Thread_local = 64
    Throw = 65
    TrueToken = 66
    Try = 67
    Typedef = 68
    Typeid = 69
    Typename = 70
    Union = 71
    Unsigned = 72
    Using = 73
    Virtual = 74
    Void = 75
    Volatile = 76
    Wchar = 77
    While = 78
    LeftParen = 79
    RightParen = 80
    LeftBracket = 81
    RightBracket = 82
    LeftBrace = 83
    RightBrace = 84
    Plus = 85
    Minus = 86
    Star = 87
    Div = 88
    Mod = 89
    Caret = 90
    And = 91
    Or = 92
    Tilde = 93
    Not = 94
    Assign = 95
    Less = 96
    Greater = 97
    PlusAssign = 98
    MinusAssign = 99
    StarAssign = 100
    DivAssign = 101
    ModAssign = 102
    XorAssign = 103
    AndAssign = 104
    OrAssign = 105
    LeftShift = 106
    LeftShiftAssign = 107
    Equal = 108
    NotEqual = 109
    LessEqual = 110
    GreaterEqual = 111
    AndAnd = 112
    OrOr = 113
    PlusPlus = 114
    MinusMinus = 115
    Comma = 116
    ArrowStar = 117
    Arrow = 118
    Question = 119
    Colon = 120
    Doublecolon = 121
    Semi = 122
    Dot = 123
    DotStar = 124
    Ellipsis = 125
    Identifier = 126
    Integerliteral = 127
    Decimalliteral = 128
    Octalliteral = 129
    Hexadecimalliteral = 130
    Binaryliteral = 131
    Integersuffix = 132
    Characterliteral = 133
    Floatingliteral = 134
    Stringliteral = 135
    Userdefinedintegerliteral = 136
    Userdefinedfloatingliteral = 137
    Userdefinedstringliteral = 138
    Userdefinedcharacterliteral = 139
    Whitespace = 140
    Newline = 141
    BlockComment = 142
    LineComment = 143

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class TranslationunitContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CPP14Parser.EOF, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_translationunit

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTranslationunit"):
                listener.enterTranslationunit(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTranslationunit"):
                listener.exitTranslationunit(self)

    def translationunit(self):

        localctx = CPP14Parser.TranslationunitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationunit)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (
                1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (
                1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (
                1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                1 << CPP14Parser.Template))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                CPP14Parser.Thread_local - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (
                1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                1 << (CPP14Parser.Semi - 64)) | (1 << (CPP14Parser.Ellipsis - 64)) | (
                1 << (CPP14Parser.Identifier - 64)))) != 0):
                self.state = 362
                self.declarationseq(0)

            self.state = 365
            self.match(CPP14Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdacaptureContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Capturedefault(self):
            return self.getToken(CPP14Parser.Capturedefault, 0)

        def capturelist(self):
            return self.getTypedRuleContext(CPP14Parser.CapturelistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdacapture

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambdacapture"):
                listener.enterLambdacapture(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambdacapture"):
                listener.exitLambdacapture(self)

    def lambdacapture(self):

        localctx = CPP14Parser.LambdacaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_lambdacapture)
        try:
            self.state = 372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 1, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 367
                self.match(CPP14Parser.Capturedefault)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 368
                self.capturelist(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 369
                self.match(CPP14Parser.Capturedefault)
                self.state = 370
                self.match(CPP14Parser.Comma)
                self.state = 371
                self.capturelist(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def qualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.QualifiedidContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_idexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdexpression"):
                listener.enterIdexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdexpression"):
                listener.exitIdexpression(self)

    def idexpression(self):

        localctx = CPP14Parser.IdexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_idexpression)
        try:
            self.state = 376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 2, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 374
                self.unqualifiedid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 375
                self.qualifiedid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnqualifiedidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def operatorfunctionid(self):
            return self.getTypedRuleContext(CPP14Parser.OperatorfunctionidContext, 0)

        def conversionfunctionid(self):
            return self.getTypedRuleContext(CPP14Parser.ConversionfunctionidContext, 0)

        def literaloperatorid(self):
            return self.getTypedRuleContext(CPP14Parser.LiteraloperatoridContext, 0)

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext, 0)

        def templateid(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateidContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unqualifiedid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnqualifiedid"):
                listener.enterUnqualifiedid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnqualifiedid"):
                listener.exitUnqualifiedid(self)

    def unqualifiedid(self):

        localctx = CPP14Parser.UnqualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_unqualifiedid)
        try:
            self.state = 387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 3, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 378
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 379
                self.operatorfunctionid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 380
                self.conversionfunctionid()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 381
                self.literaloperatorid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 382
                self.match(CPP14Parser.Tilde)
                self.state = 383
                self.classname()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 384
                self.match(CPP14Parser.Tilde)
                self.state = 385
                self.decltypespecifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 386
                self.templateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_qualifiedid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQualifiedid"):
                listener.enterQualifiedid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQualifiedid"):
                listener.exitQualifiedid(self)

    def qualifiedid(self):

        localctx = CPP14Parser.QualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_qualifiedid)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.nestednamespecifier(0)
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Template:
                self.state = 390
                self.match(CPP14Parser.Template)

            self.state = 393
            self.unqualifiedid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestednamespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypenameContext, 0)

        def namespacename(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacenameContext, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_nestednamespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNestednamespecifier"):
                listener.enterNestednamespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNestednamespecifier"):
                listener.exitNestednamespecifier(self)

    def nestednamespecifier(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NestednamespecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 10
        self.enterRecursionRule(localctx, 10, self.RULE_nestednamespecifier, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 5, self._ctx)
            if la_ == 1:
                self.state = 396
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 2:
                self.state = 397
                self.thetypename()
                self.state = 398
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 3:
                self.state = 400
                self.namespacename()
                self.state = 401
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 4:
                self.state = 403
                self.decltypespecifier()
                self.state = 404
                self.match(CPP14Parser.Doublecolon)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 420
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 8, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 418
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 7, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NestednamespecifierContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                        self.state = 408
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 409
                        self.match(CPP14Parser.Identifier)
                        self.state = 410
                        self.match(CPP14Parser.Doublecolon)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NestednamespecifierContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                        self.state = 411
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 413
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 412
                            self.match(CPP14Parser.Template)

                        self.state = 415
                        self.simpletemplateid()
                        self.state = 416
                        self.match(CPP14Parser.Doublecolon)
                        pass

                self.state = 422
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 8, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class CapturelistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capture(self):
            return self.getTypedRuleContext(CPP14Parser.CaptureContext, 0)

        def capturelist(self):
            return self.getTypedRuleContext(CPP14Parser.CapturelistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_capturelist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCapturelist"):
                listener.enterCapturelist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCapturelist"):
                listener.exitCapturelist(self)

    def capturelist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.CapturelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 12
        self.enterRecursionRule(localctx, 12, self.RULE_capturelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.capture()
            self.state = 426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 9, self._ctx)
            if la_ == 1:
                self.state = 425
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 436
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.CapturelistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_capturelist)
                    self.state = 428
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 429
                    self.match(CPP14Parser.Comma)
                    self.state = 430
                    self.capture()
                    self.state = 432
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 10, self._ctx)
                    if la_ == 1:
                        self.state = 431
                        self.match(CPP14Parser.Ellipsis)

                self.state = 438
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class CaptureContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def This(self):
            return self.getToken(CPP14Parser.This, 0)

        def initializer(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_capture

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCapture"):
                listener.enterCapture(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCapture"):
                listener.exitCapture(self)

    def capture(self):

        localctx = CPP14Parser.CaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_capture)
        try:
            self.state = 448
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 12, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 439
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 440
                self.match(CPP14Parser.And)
                self.state = 441
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 442
                self.match(CPP14Parser.This)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 443
                self.match(CPP14Parser.Identifier)
                self.state = 444
                self.initializer()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 445
                self.match(CPP14Parser.And)
                self.state = 446
                self.match(CPP14Parser.Identifier)
                self.state = 447
                self.initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdadeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationclauseContext, 0)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionspecificationContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingreturntypeContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdadeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambdadeclarator"):
                listener.enterLambdadeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambdadeclarator"):
                listener.exitLambdadeclarator(self)

    def lambdadeclarator(self):

        localctx = CPP14Parser.LambdadeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_lambdadeclarator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.match(CPP14Parser.LeftParen)
            self.state = 451
            self.parameterdeclarationclause()
            self.state = 452
            self.match(CPP14Parser.RightParen)
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Mutable:
                self.state = 453
                self.match(CPP14Parser.Mutable)

            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Noexcept or _la == CPP14Parser.Throw:
                self.state = 456
                self.exceptionspecification()

            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 459
                self.attributespecifierseq(0)

            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Arrow:
                self.state = 462
                self.trailingreturntype()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(CPP14Parser.LiteralContext, 0)

        def This(self):
            return self.getToken(CPP14Parser.This, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext, 0)

        def lambdacapture(self):
            return self.getTypedRuleContext(CPP14Parser.LambdacaptureContext, 0)

        def lambdadeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.LambdadeclaratorContext, 0)

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext, 0)

        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypenamespecifierContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def Dynamic_cast(self):
            return self.getToken(CPP14Parser.Dynamic_cast, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext, 0)

        def Static_cast(self):
            return self.getToken(CPP14Parser.Static_cast, 0)

        def Reinterpret_cast(self):
            return self.getToken(CPP14Parser.Reinterpret_cast, 0)

        def Const_cast(self):
            return self.getToken(CPP14Parser.Const_cast, 0)

        def Typeid(self):
            return self.getToken(CPP14Parser.Typeid, 0)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def pseudodestructorname(self):
            return self.getTypedRuleContext(CPP14Parser.PseudodestructornameContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_postfixexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPostfixexpression"):
                listener.enterPostfixexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPostfixexpression"):
                listener.exitPostfixexpression(self)

    def postfixexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PostfixexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 18
        self.enterRecursionRule(localctx, 18, self.RULE_postfixexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 21, self._ctx)
            if la_ == 1:
                self.state = 466
                self.literal()
                pass

            elif la_ == 2:
                self.state = 467
                self.match(CPP14Parser.This)
                pass

            elif la_ == 3:
                self.state = 468
                self.match(CPP14Parser.LeftParen)
                self.state = 469
                self.expression(0)
                self.state = 470
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 4:
                self.state = 472
                self.idexpression()
                pass

            elif la_ == 5:
                self.state = 473
                self.match(CPP14Parser.LeftBracket)
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Capturedefault or _la == CPP14Parser.This or _la == CPP14Parser.And or _la == CPP14Parser.Identifier:
                    self.state = 474
                    self.lambdacapture()

                self.state = 477
                self.match(CPP14Parser.RightBracket)
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.LeftParen:
                    self.state = 478
                    self.lambdadeclarator()

                self.state = 481
                self.compoundstatement()
                pass

            elif la_ == 6:
                self.state = 482
                self.simpletypespecifier()
                self.state = 483
                self.match(CPP14Parser.LeftParen)
                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Throw - 65)) | (
                    1 << (CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                    1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                    1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                    1 << (CPP14Parser.LeftBrace - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                    (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                    1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 484
                    self.expressionlist()

                self.state = 487
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 7:
                self.state = 489
                self.typenamespecifier()
                self.state = 490
                self.match(CPP14Parser.LeftParen)
                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Throw - 65)) | (
                    1 << (CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                    1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                    1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                    1 << (CPP14Parser.LeftBrace - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                    (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                    1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 491
                    self.expressionlist()

                self.state = 494
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 8:
                self.state = 496
                self.simpletypespecifier()
                self.state = 497
                self.bracedinitlist()
                pass

            elif la_ == 9:
                self.state = 499
                self.typenamespecifier()
                self.state = 500
                self.bracedinitlist()
                pass

            elif la_ == 10:
                self.state = 502
                self.match(CPP14Parser.Dynamic_cast)
                self.state = 503
                self.match(CPP14Parser.Less)
                self.state = 504
                self.thetypeid()
                self.state = 505
                self.match(CPP14Parser.Greater)
                self.state = 506
                self.match(CPP14Parser.LeftParen)
                self.state = 507
                self.expression(0)
                self.state = 508
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 11:
                self.state = 510
                self.match(CPP14Parser.Static_cast)
                self.state = 511
                self.match(CPP14Parser.Less)
                self.state = 512
                self.thetypeid()
                self.state = 513
                self.match(CPP14Parser.Greater)
                self.state = 514
                self.match(CPP14Parser.LeftParen)
                self.state = 515
                self.expression(0)
                self.state = 516
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 12:
                self.state = 518
                self.match(CPP14Parser.Reinterpret_cast)
                self.state = 519
                self.match(CPP14Parser.Less)
                self.state = 520
                self.thetypeid()
                self.state = 521
                self.match(CPP14Parser.Greater)
                self.state = 522
                self.match(CPP14Parser.LeftParen)
                self.state = 523
                self.expression(0)
                self.state = 524
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 13:
                self.state = 526
                self.match(CPP14Parser.Const_cast)
                self.state = 527
                self.match(CPP14Parser.Less)
                self.state = 528
                self.thetypeid()
                self.state = 529
                self.match(CPP14Parser.Greater)
                self.state = 530
                self.match(CPP14Parser.LeftParen)
                self.state = 531
                self.expression(0)
                self.state = 532
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 14:
                self.state = 534
                self.match(CPP14Parser.Typeid)
                self.state = 535
                self.match(CPP14Parser.LeftParen)
                self.state = 536
                self.expression(0)
                self.state = 537
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 15:
                self.state = 539
                self.match(CPP14Parser.Typeid)
                self.state = 540
                self.match(CPP14Parser.LeftParen)
                self.state = 541
                self.thetypeid()
                self.state = 542
                self.match(CPP14Parser.RightParen)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 586
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 26, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 584
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 25, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 546
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 547
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 548
                        self.expression(0)
                        self.state = 549
                        self.match(CPP14Parser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 551
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 552
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 553
                        self.bracedinitlist()
                        self.state = 554
                        self.match(CPP14Parser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 556
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 557
                        self.match(CPP14Parser.LeftParen)
                        self.state = 559
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.Throw - 65)) | (1 << (CPP14Parser.TrueToken - 65)) | (
                            1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                            1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                            1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                            1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.LeftBrace - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 558
                            self.expressionlist()

                        self.state = 561
                        self.match(CPP14Parser.RightParen)
                        pass

                    elif la_ == 4:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 562
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 563
                        self.match(CPP14Parser.Dot)
                        self.state = 565
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 564
                            self.match(CPP14Parser.Template)

                        self.state = 567
                        self.idexpression()
                        pass

                    elif la_ == 5:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 568
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 569
                        self.match(CPP14Parser.Arrow)
                        self.state = 571
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 570
                            self.match(CPP14Parser.Template)

                        self.state = 573
                        self.idexpression()
                        pass

                    elif la_ == 6:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 574
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 575
                        self.match(CPP14Parser.Dot)
                        self.state = 576
                        self.pseudodestructorname()
                        pass

                    elif la_ == 7:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 577
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 578
                        self.match(CPP14Parser.Arrow)
                        self.state = 579
                        self.pseudodestructorname()
                        pass

                    elif la_ == 8:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 580
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 581
                        self.match(CPP14Parser.PlusPlus)
                        pass

                    elif la_ == 9:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 582
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 583
                        self.match(CPP14Parser.MinusMinus)
                        pass

                self.state = 588
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 26, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExpressionlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_expressionlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionlist"):
                listener.enterExpressionlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionlist"):
                listener.exitExpressionlist(self)

    def expressionlist(self):

        localctx = CPP14Parser.ExpressionlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_expressionlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.initializerlist(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PseudodestructornameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ThetypenameContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ThetypenameContext, i)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pseudodestructorname

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPseudodestructorname"):
                listener.enterPseudodestructorname(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPseudodestructorname"):
                listener.exitPseudodestructorname(self)

    def pseudodestructorname(self):

        localctx = CPP14Parser.PseudodestructornameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_pseudodestructorname)
        self._la = 0  # Token type
        try:
            self.state = 613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 29, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 592
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 27, self._ctx)
                if la_ == 1:
                    self.state = 591
                    self.nestednamespecifier(0)

                self.state = 594
                self.thetypename()
                self.state = 595
                self.match(CPP14Parser.Doublecolon)
                self.state = 596
                self.match(CPP14Parser.Tilde)
                self.state = 597
                self.thetypename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 599
                self.nestednamespecifier(0)
                self.state = 600
                self.match(CPP14Parser.Template)
                self.state = 601
                self.simpletemplateid()
                self.state = 602
                self.match(CPP14Parser.Doublecolon)
                self.state = 603
                self.match(CPP14Parser.Tilde)
                self.state = 604
                self.thetypename()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                    self.state = 606
                    self.nestednamespecifier(0)

                self.state = 609
                self.match(CPP14Parser.Tilde)
                self.state = 610
                self.thetypename()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 611
                self.match(CPP14Parser.Tilde)
                self.state = 612
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext, 0)

        def unaryincdecexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryincdecexpressionContext, 0)

        def unaryoperator(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryoperatorContext, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def Sizeof(self):
            return self.getToken(CPP14Parser.Sizeof, 0)

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Alignof(self):
            return self.getToken(CPP14Parser.Alignof, 0)

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def newexpression(self):
            return self.getTypedRuleContext(CPP14Parser.NewexpressionContext, 0)

        def deleteexpression(self):
            return self.getTypedRuleContext(CPP14Parser.DeleteexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryexpression"):
                listener.enterUnaryexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryexpression"):
                listener.exitUnaryexpression(self)

    def unaryexpression(self):

        localctx = CPP14Parser.UnaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_unaryexpression)
        try:
            self.state = 644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 30, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 615
                self.postfixexpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 616
                self.unaryincdecexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 617
                self.unaryoperator()
                self.state = 618
                self.castexpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 620
                self.match(CPP14Parser.Sizeof)
                self.state = 621
                self.unaryexpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 622
                self.match(CPP14Parser.Sizeof)
                self.state = 623
                self.match(CPP14Parser.LeftParen)
                self.state = 624
                self.thetypeid()
                self.state = 625
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 627
                self.match(CPP14Parser.Sizeof)
                self.state = 628
                self.match(CPP14Parser.Ellipsis)
                self.state = 629
                self.match(CPP14Parser.LeftParen)
                self.state = 630
                self.match(CPP14Parser.Identifier)
                self.state = 631
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 632
                self.match(CPP14Parser.Alignof)
                self.state = 633
                self.match(CPP14Parser.LeftParen)
                self.state = 634
                self.thetypeid()
                self.state = 635
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 637
                self.match(CPP14Parser.Noexcept)
                self.state = 638
                self.match(CPP14Parser.LeftParen)
                self.state = 639
                self.expression(0)
                self.state = 640
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 642
                self.newexpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 643
                self.deleteexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryincdecexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryincdecexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryincdecexpression"):
                listener.enterUnaryincdecexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryincdecexpression"):
                listener.exitUnaryincdecexpression(self)

    def unaryincdecexpression(self):

        localctx = CPP14Parser.UnaryincdecexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_unaryincdecexpression)
        try:
            self.state = 650
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.PlusPlus]:
                self.enterOuterAlt(localctx, 1)
                self.state = 646
                self.match(CPP14Parser.PlusPlus)
                self.state = 647
                self.castexpression()
                pass
            elif token in [CPP14Parser.MinusMinus]:
                self.enterOuterAlt(localctx, 2)
                self.state = 648
                self.match(CPP14Parser.MinusMinus)
                self.state = 649
                self.castexpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryoperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryoperator"):
                listener.enterUnaryoperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryoperator"):
                listener.exitUnaryoperator(self)

    def unaryoperator(self):

        localctx = CPP14Parser.UnaryoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_unaryoperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            _la = self._input.LA(1)
            if not (((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & (
                                    (1 << (CPP14Parser.Plus - 85)) | (1 << (CPP14Parser.Minus - 85)) | (
                                1 << (CPP14Parser.Star - 85)) | (1 << (CPP14Parser.And - 85)) | (
                        1 << (CPP14Parser.Or - 85)) | (1 << (CPP14Parser.Tilde - 85)) | (
                1 << (CPP14Parser.Not - 85)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def newplacement(self):
            return self.getTypedRuleContext(CPP14Parser.NewplacementContext, 0)

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext, 0)

        def newinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.NewinitializerContext, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewexpression"):
                listener.enterNewexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewexpression"):
                listener.exitNewexpression(self)

    def newexpression(self):

        localctx = CPP14Parser.NewexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_newexpression)
        self._la = 0  # Token type
        try:
            self.state = 681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 39, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Doublecolon:
                    self.state = 654
                    self.match(CPP14Parser.Doublecolon)

                self.state = 657
                self.match(CPP14Parser.New)
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.LeftParen:
                    self.state = 658
                    self.newplacement()

                self.state = 661
                self.typespecifierseq()
                self.state = 663
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 34, self._ctx)
                if la_ == 1:
                    self.state = 662
                    self.newdeclarator()

                self.state = 666
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 35, self._ctx)
                if la_ == 1:
                    self.state = 665
                    self.newinitializer()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Doublecolon:
                    self.state = 668
                    self.match(CPP14Parser.Doublecolon)

                self.state = 671
                self.match(CPP14Parser.New)
                self.state = 673
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 37, self._ctx)
                if la_ == 1:
                    self.state = 672
                    self.newplacement()

                self.state = 675
                self.match(CPP14Parser.LeftParen)
                self.state = 676
                self.thetypeid()
                self.state = 677
                self.match(CPP14Parser.RightParen)
                self.state = 679
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 38, self._ctx)
                if la_ == 1:
                    self.state = 678
                    self.newinitializer()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewplacementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newplacement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewplacement"):
                listener.enterNewplacement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewplacement"):
                listener.exitNewplacement(self)

    def newplacement(self):

        localctx = CPP14Parser.NewplacementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_newplacement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(CPP14Parser.LeftParen)
            self.state = 684
            self.expressionlist()
            self.state = 685
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext, 0)

        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrnewdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewdeclarator"):
                listener.enterNewdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewdeclarator"):
                listener.exitNewdeclarator(self)

    def newdeclarator(self):

        localctx = CPP14Parser.NewdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_newdeclarator)
        try:
            self.state = 692
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                         CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 687
                self.ptroperator()
                self.state = 689
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 40, self._ctx)
                if la_ == 1:
                    self.state = 688
                    self.newdeclarator()

                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 691
                self.noptrnewdeclarator(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrnewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrnewdeclaratorContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrnewdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrnewdeclarator"):
                listener.enterNoptrnewdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrnewdeclarator"):
                listener.exitNoptrnewdeclarator(self)

    def noptrnewdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrnewdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_noptrnewdeclarator, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(CPP14Parser.LeftBracket)
            self.state = 696
            self.expression(0)
            self.state = 697
            self.match(CPP14Parser.RightBracket)
            self.state = 699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 42, self._ctx)
            if la_ == 1:
                self.state = 698
                self.attributespecifierseq(0)

            self._ctx.stop = self._input.LT(-1)
            self.state = 710
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 44, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoptrnewdeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrnewdeclarator)
                    self.state = 701
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 702
                    self.match(CPP14Parser.LeftBracket)
                    self.state = 703
                    self.constantexpression()
                    self.state = 704
                    self.match(CPP14Parser.RightBracket)
                    self.state = 706
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 43, self._ctx)
                    if la_ == 1:
                        self.state = 705
                        self.attributespecifierseq(0)

                self.state = 712
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 44, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class NewinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newinitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewinitializer"):
                listener.enterNewinitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewinitializer"):
                listener.exitNewinitializer(self)

    def newinitializer(self):

        localctx = CPP14Parser.NewinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_newinitializer)
        self._la = 0  # Token type
        try:
            self.state = 719
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 713
                self.match(CPP14Parser.LeftParen)
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Throw - 65)) | (
                    1 << (CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                    1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                    1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                    1 << (CPP14Parser.LeftBrace - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                    (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                    1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 714
                    self.expressionlist()

                self.state = 717
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 718
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_deleteexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeleteexpression"):
                listener.enterDeleteexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeleteexpression"):
                listener.exitDeleteexpression(self)

    def deleteexpression(self):

        localctx = CPP14Parser.DeleteexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_deleteexpression)
        self._la = 0  # Token type
        try:
            self.state = 733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 49, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Doublecolon:
                    self.state = 721
                    self.match(CPP14Parser.Doublecolon)

                self.state = 724
                self.match(CPP14Parser.Delete)
                self.state = 725
                self.castexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Doublecolon:
                    self.state = 726
                    self.match(CPP14Parser.Doublecolon)

                self.state = 729
                self.match(CPP14Parser.Delete)
                self.state = 730
                self.match(CPP14Parser.LeftBracket)
                self.state = 731
                self.match(CPP14Parser.RightBracket)
                self.state = 732
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_castexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCastexpression"):
                listener.enterCastexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCastexpression"):
                listener.exitCastexpression(self)

    def castexpression(self):

        localctx = CPP14Parser.CastexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_castexpression)
        try:
            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 50, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 735
                self.unaryexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 736
                self.match(CPP14Parser.LeftParen)
                self.state = 737
                self.thetypeid()
                self.state = 738
                self.match(CPP14Parser.RightParen)
                self.state = 739
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PmexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def pmexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PmexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pmexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPmexpression"):
                listener.enterPmexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPmexpression"):
                listener.exitPmexpression(self)

    def pmexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PmexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 44
        self.enterRecursionRule(localctx, 44, self.RULE_pmexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.castexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 754
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 52, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 752
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 51, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.PmexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                        self.state = 746
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 747
                        self.match(CPP14Parser.DotStar)
                        self.state = 748
                        self.castexpression()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.PmexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                        self.state = 749
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 750
                        self.match(CPP14Parser.ArrowStar)
                        self.state = 751
                        self.castexpression()
                        pass

                self.state = 756
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 52, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class MultiplicativeexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pmexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PmexpressionContext, 0)

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14Parser.MultiplicativeexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_multiplicativeexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMultiplicativeexpression"):
                listener.enterMultiplicativeexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMultiplicativeexpression"):
                listener.exitMultiplicativeexpression(self)

    def multiplicativeexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.MultiplicativeexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 46
        self.enterRecursionRule(localctx, 46, self.RULE_multiplicativeexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.pmexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 771
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 54, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 769
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 53, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 760
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 761
                        self.match(CPP14Parser.Star)
                        self.state = 762
                        self.pmexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 763
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 764
                        self.match(CPP14Parser.Div)
                        self.state = 765
                        self.pmexpression(0)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 766
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 767
                        self.match(CPP14Parser.Mod)
                        self.state = 768
                        self.pmexpression(0)
                        pass

                self.state = 773
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 54, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AdditiveexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14Parser.MultiplicativeexpressionContext, 0)

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AdditiveexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_additiveexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAdditiveexpression"):
                listener.enterAdditiveexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAdditiveexpression"):
                listener.exitAdditiveexpression(self)

    def additiveexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AdditiveexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 48
        self.enterRecursionRule(localctx, 48, self.RULE_additiveexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.multiplicativeexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 785
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 56, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 783
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 55, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.AdditiveexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                        self.state = 777
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 778
                        self.match(CPP14Parser.Plus)
                        self.state = 779
                        self.multiplicativeexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.AdditiveexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                        self.state = 780
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 781
                        self.match(CPP14Parser.Minus)
                        self.state = 782
                        self.multiplicativeexpression(0)
                        pass

                self.state = 787
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 56, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ShiftexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AdditiveexpressionContext, 0)

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext, 0)

        def rightShift(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_shiftexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShiftexpression"):
                listener.enterShiftexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShiftexpression"):
                listener.exitShiftexpression(self)

    def shiftexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ShiftexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 50
        self.enterRecursionRule(localctx, 50, self.RULE_shiftexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.additiveexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 800
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 58, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 798
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 57, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.ShiftexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftexpression)
                        self.state = 791
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 792
                        self.match(CPP14Parser.LeftShift)
                        self.state = 793
                        self.additiveexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.ShiftexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftexpression)
                        self.state = 794
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 795
                        self.rightShift()
                        self.state = 796
                        self.additiveexpression(0)
                        pass

                self.state = 802
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 58, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class RelationalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext, 0)

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_relationalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelationalexpression"):
                listener.enterRelationalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelationalexpression"):
                listener.exitRelationalexpression(self)

    def relationalexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.RelationalexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_relationalexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.shiftexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 820
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 60, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 818
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 59, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 806
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 807
                        self.match(CPP14Parser.Less)
                        self.state = 808
                        self.shiftexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 809
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 810
                        self.match(CPP14Parser.Greater)
                        self.state = 811
                        self.shiftexpression(0)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 812
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 813
                        self.match(CPP14Parser.LessEqual)
                        self.state = 814
                        self.shiftexpression(0)
                        pass

                    elif la_ == 4:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 815
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 816
                        self.match(CPP14Parser.GreaterEqual)
                        self.state = 817
                        self.shiftexpression(0)
                        pass

                self.state = 822
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 60, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EqualityexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext, 0)

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_equalityexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEqualityexpression"):
                listener.enterEqualityexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEqualityexpression"):
                listener.exitEqualityexpression(self)

    def equalityexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EqualityexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 54
        self.enterRecursionRule(localctx, 54, self.RULE_equalityexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.relationalexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 834
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 62, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 832
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 61, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                        self.state = 826
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 827
                        self.match(CPP14Parser.Equal)
                        self.state = 828
                        self.relationalexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                        self.state = 829
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 830
                        self.match(CPP14Parser.NotEqual)
                        self.state = 831
                        self.relationalexpression(0)
                        pass

                self.state = 836
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 62, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AndexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, 0)

        def andexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AndexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_andexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAndexpression"):
                listener.enterAndexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAndexpression"):
                listener.exitAndexpression(self)

    def andexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AndexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_andexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.equalityexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 845
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 63, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AndexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_andexpression)
                    self.state = 840
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 841
                    self.match(CPP14Parser.And)
                    self.state = 842
                    self.equalityexpression(0)
                self.state = 847
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 63, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExclusiveorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AndexpressionContext, 0)

        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ExclusiveorexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exclusiveorexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExclusiveorexpression"):
                listener.enterExclusiveorexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExclusiveorexpression"):
                listener.exitExclusiveorexpression(self)

    def exclusiveorexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ExclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 58
        self.enterRecursionRule(localctx, 58, self.RULE_exclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.andexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 856
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 64, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ExclusiveorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusiveorexpression)
                    self.state = 851
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 852
                    self.match(CPP14Parser.Caret)
                    self.state = 853
                    self.andexpression(0)
                self.state = 858
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 64, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class InclusiveorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ExclusiveorexpressionContext, 0)

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.InclusiveorexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_inclusiveorexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInclusiveorexpression"):
                listener.enterInclusiveorexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInclusiveorexpression"):
                listener.exitInclusiveorexpression(self)

    def inclusiveorexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_inclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.exclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 867
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 65, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InclusiveorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_inclusiveorexpression)
                    self.state = 862
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 863
                    self.match(CPP14Parser.Or)
                    self.state = 864
                    self.exclusiveorexpression(0)
                self.state = 869
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 65, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalandexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.InclusiveorexpressionContext, 0)

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalandexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalandexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalandexpression"):
                listener.enterLogicalandexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalandexpression"):
                listener.exitLogicalandexpression(self)

    def logicalandexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.LogicalandexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 62
        self.enterRecursionRule(localctx, 62, self.RULE_logicalandexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.inclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 878
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 66, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.LogicalandexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalandexpression)
                    self.state = 873
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 874
                    self.match(CPP14Parser.AndAnd)
                    self.state = 875
                    self.inclusiveorexpression(0)
                self.state = 880
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 66, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalandexpressionContext, 0)

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalorexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalorexpression"):
                listener.enterLogicalorexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalorexpression"):
                listener.exitLogicalorexpression(self)

    def logicalorexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.LogicalorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_logicalorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.logicalandexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 889
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 67, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.LogicalorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalorexpression)
                    self.state = 884
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 885
                    self.match(CPP14Parser.OrOr)
                    self.state = 886
                    self.logicalandexpression(0)
                self.state = 891
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 67, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ConditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def ternaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.TernaryconditionalexpressionContext, 0)

        def unaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryconditionalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_conditionalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConditionalexpression"):
                listener.enterConditionalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConditionalexpression"):
                listener.exitConditionalexpression(self)

    def conditionalexpression(self):

        localctx = CPP14Parser.ConditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_conditionalexpression)
        try:
            self.state = 895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 68, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 892
                self.logicalorexpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 893
                self.ternaryconditionalexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 894
                self.unaryconditionalexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TernaryconditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ternaryconditionalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTernaryconditionalexpression"):
                listener.enterTernaryconditionalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTernaryconditionalexpression"):
                listener.exitTernaryconditionalexpression(self)

    def ternaryconditionalexpression(self):

        localctx = CPP14Parser.TernaryconditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_ternaryconditionalexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.logicalorexpression(0)
            self.state = 898
            self.match(CPP14Parser.Question)
            self.state = 899
            self.expression(0)
            self.state = 900
            self.match(CPP14Parser.Colon)
            self.state = 901
            self.assignmentexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryconditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryconditionalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryconditionalexpression"):
                listener.enterUnaryconditionalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryconditionalexpression"):
                listener.exitUnaryconditionalexpression(self)

    def unaryconditionalexpression(self):

        localctx = CPP14Parser.UnaryconditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_unaryconditionalexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.logicalorexpression(0)
            self.state = 904
            self.match(CPP14Parser.Question)
            self.state = 905
            self.match(CPP14Parser.Colon)
            self.state = 906
            self.assignmentexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def assignmentoperator(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentoperatorContext, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext, 0)

        def throwexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ThrowexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentexpression"):
                listener.enterAssignmentexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentexpression"):
                listener.exitAssignmentexpression(self)

    def assignmentexpression(self):

        localctx = CPP14Parser.AssignmentexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_assignmentexpression)
        try:
            self.state = 914
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 69, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 908
                self.conditionalexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 909
                self.logicalorexpression(0)
                self.state = 910
                self.assignmentoperator()
                self.state = 911
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 913
                self.throwexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rightShiftAssign(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftAssignContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentoperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentoperator"):
                listener.enterAssignmentoperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentoperator"):
                listener.exitAssignmentoperator(self)

    def assignmentoperator(self):

        localctx = CPP14Parser.AssignmentoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_assignmentoperator)
        try:
            self.state = 927
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 916
                self.match(CPP14Parser.Assign)
                pass
            elif token in [CPP14Parser.StarAssign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 917
                self.match(CPP14Parser.StarAssign)
                pass
            elif token in [CPP14Parser.DivAssign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 918
                self.match(CPP14Parser.DivAssign)
                pass
            elif token in [CPP14Parser.ModAssign]:
                self.enterOuterAlt(localctx, 4)
                self.state = 919
                self.match(CPP14Parser.ModAssign)
                pass
            elif token in [CPP14Parser.PlusAssign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 920
                self.match(CPP14Parser.PlusAssign)
                pass
            elif token in [CPP14Parser.MinusAssign]:
                self.enterOuterAlt(localctx, 6)
                self.state = 921
                self.match(CPP14Parser.MinusAssign)
                pass
            elif token in [CPP14Parser.Greater]:
                self.enterOuterAlt(localctx, 7)
                self.state = 922
                self.rightShiftAssign()
                pass
            elif token in [CPP14Parser.LeftShiftAssign]:
                self.enterOuterAlt(localctx, 8)
                self.state = 923
                self.match(CPP14Parser.LeftShiftAssign)
                pass
            elif token in [CPP14Parser.AndAssign]:
                self.enterOuterAlt(localctx, 9)
                self.state = 924
                self.match(CPP14Parser.AndAssign)
                pass
            elif token in [CPP14Parser.XorAssign]:
                self.enterOuterAlt(localctx, 10)
                self.state = 925
                self.match(CPP14Parser.XorAssign)
                pass
            elif token in [CPP14Parser.OrAssign]:
                self.enterOuterAlt(localctx, 11)
                self.state = 926
                self.match(CPP14Parser.OrAssign)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

    def expression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.assignmentexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 937
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 71, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 932
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 933
                    self.match(CPP14Parser.Comma)
                    self.state = 934
                    self.assignmentexpression()
                self.state = 939
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 71, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ConstantexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_constantexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstantexpression"):
                listener.enterConstantexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstantexpression"):
                listener.exitConstantexpression(self)

    def constantexpression(self):

        localctx = CPP14Parser.ConstantexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_constantexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.conditionalexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def casestatement(self):
            return self.getTypedRuleContext(CPP14Parser.CasestatementContext, 0)

        def defaultstatement(self):
            return self.getTypedRuleContext(CPP14Parser.DefaultstatementContext, 0)

        def expressionstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionstatementContext, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext, 0)

        def selectionstatement(self):
            return self.getTypedRuleContext(CPP14Parser.SelectionstatementContext, 0)

        def iterationstatement(self):
            return self.getTypedRuleContext(CPP14Parser.IterationstatementContext, 0)

        def jumpstatement(self):
            return self.getTypedRuleContext(CPP14Parser.JumpstatementContext, 0)

        def blockdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.BlockdeclarationContext, 0)

        def tryblock(self):
            return self.getTypedRuleContext(CPP14Parser.TryblockContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

    def statement(self):

        localctx = CPP14Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_statement)
        self._la = 0  # Token type
        try:
            self.state = 981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 81, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 942
                    self.attributespecifierseq(0)

                self.state = 945
                self.match(CPP14Parser.Identifier)
                self.state = 946
                self.match(CPP14Parser.Colon)
                self.state = 947
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 948
                    self.attributespecifierseq(0)

                self.state = 951
                self.casestatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 952
                    self.attributespecifierseq(0)

                self.state = 955
                self.defaultstatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 957
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 75, self._ctx)
                if la_ == 1:
                    self.state = 956
                    self.attributespecifierseq(0)

                self.state = 959
                self.expressionstatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 960
                    self.attributespecifierseq(0)

                self.state = 963
                self.compoundstatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 964
                    self.attributespecifierseq(0)

                self.state = 967
                self.selectionstatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 968
                    self.attributespecifierseq(0)

                self.state = 971
                self.iterationstatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 972
                    self.attributespecifierseq(0)

                self.state = 975
                self.jumpstatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 976
                self.blockdeclaration()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 977
                    self.attributespecifierseq(0)

                self.state = 980
                self.tryblock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CasestatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Case(self):
            return self.getToken(CPP14Parser.Case, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_casestatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCasestatement"):
                listener.enterCasestatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCasestatement"):
                listener.exitCasestatement(self)

    def casestatement(self):

        localctx = CPP14Parser.CasestatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_casestatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self.match(CPP14Parser.Case)
            self.state = 984
            self.constantexpression()
            self.state = 985
            self.match(CPP14Parser.Colon)
            self.state = 986
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_defaultstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDefaultstatement"):
                listener.enterDefaultstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDefaultstatement"):
                listener.exitDefaultstatement(self)

    def defaultstatement(self):

        localctx = CPP14Parser.DefaultstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_defaultstatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.match(CPP14Parser.Default)
            self.state = 989
            self.match(CPP14Parser.Colon)
            self.state = 990
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_expressionstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionstatement"):
                listener.enterExpressionstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionstatement"):
                listener.exitExpressionstatement(self)

    def expressionstatement(self):

        localctx = CPP14Parser.ExpressionstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_expressionstatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and (
                (1 << (_la - 65)) & ((1 << (CPP14Parser.Throw - 65)) | (1 << (CPP14Parser.TrueToken - 65)) | (
                1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (
                1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                    (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                    (1 << (CPP14Parser.Characterliteral - 133)) | (
                                    1 << (CPP14Parser.Floatingliteral - 133)) | (
                                1 << (CPP14Parser.Stringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                self.state = 992
                self.expression(0)

            self.state = 995
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompoundstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementseq(self):
            return self.getTypedRuleContext(CPP14Parser.StatementseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_compoundstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompoundstatement"):
                listener.enterCompoundstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompoundstatement"):
                listener.exitCompoundstatement(self)

    def compoundstatement(self):

        localctx = CPP14Parser.CompoundstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_compoundstatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.match(CPP14Parser.LeftBrace)
            self.state = 999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (
                1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (
                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (
                1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (
                1 << CPP14Parser.Friend) | (1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (
                1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (
                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (
                1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Static_cast) | (
                1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (1 << CPP14Parser.This))) != 0) or (
                    (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Thread_local - 64)) | (
                1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Try - 64)) | (
                1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                1 << (CPP14Parser.Semi - 64)) | (1 << (CPP14Parser.Ellipsis - 64)) | (
                1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                    (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                    (1 << (CPP14Parser.Characterliteral - 133)) | (
                                    1 << (CPP14Parser.Floatingliteral - 133)) | (
                                1 << (CPP14Parser.Stringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                self.state = 998
                self.statementseq(0)

            self.state = 1001
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def statementseq(self):
            return self.getTypedRuleContext(CPP14Parser.StatementseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_statementseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatementseq"):
                listener.enterStatementseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatementseq"):
                listener.exitStatementseq(self)

    def statementseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.StatementseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 90
        self.enterRecursionRule(localctx, 90, self.RULE_statementseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.statement()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1010
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 84, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.StatementseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_statementseq)
                    self.state = 1006
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1007
                    self.statement()
                self.state = 1012
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 84, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SelectionstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(CPP14Parser.If, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def elsestatement(self):
            return self.getTypedRuleContext(CPP14Parser.ElsestatementContext, 0)

        def Switch(self):
            return self.getToken(CPP14Parser.Switch, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_selectionstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectionstatement"):
                listener.enterSelectionstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectionstatement"):
                listener.exitSelectionstatement(self)

    def selectionstatement(self):

        localctx = CPP14Parser.SelectionstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_selectionstatement)
        try:
            self.state = 1032
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 85, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1013
                self.match(CPP14Parser.If)
                self.state = 1014
                self.match(CPP14Parser.LeftParen)
                self.state = 1015
                self.condition()
                self.state = 1016
                self.match(CPP14Parser.RightParen)
                self.state = 1017
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1019
                self.match(CPP14Parser.If)
                self.state = 1020
                self.match(CPP14Parser.LeftParen)
                self.state = 1021
                self.condition()
                self.state = 1022
                self.match(CPP14Parser.RightParen)
                self.state = 1023
                self.statement()
                self.state = 1024
                self.elsestatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1026
                self.match(CPP14Parser.Switch)
                self.state = 1027
                self.match(CPP14Parser.LeftParen)
                self.state = 1028
                self.condition()
                self.state = 1029
                self.match(CPP14Parser.RightParen)
                self.state = 1030
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElsestatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(CPP14Parser.Else, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_elsestatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElsestatement"):
                listener.enterElsestatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElsestatement"):
                listener.exitElsestatement(self)

    def elsestatement(self):

        localctx = CPP14Parser.ElsestatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_elsestatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self.match(CPP14Parser.Else)
            self.state = 1035
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_condition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCondition"):
                listener.enterCondition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCondition"):
                listener.exitCondition(self)

    def condition(self):

        localctx = CPP14Parser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_condition)
        self._la = 0  # Token type
        try:
            self.state = 1053
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 88, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1037
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1038
                    self.attributespecifierseq(0)

                self.state = 1041
                self.declspecifierseq()
                self.state = 1042
                self.declarator()
                self.state = 1043
                self.match(CPP14Parser.Assign)
                self.state = 1044
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1046
                    self.attributespecifierseq(0)

                self.state = 1049
                self.declspecifierseq()
                self.state = 1050
                self.declarator()
                self.state = 1051
                self.bracedinitlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IterationstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(CPP14Parser.While, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def Do(self):
            return self.getToken(CPP14Parser.Do, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def For(self):
            return self.getToken(CPP14Parser.For, 0)

        def forinitstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ForinitstatementContext, 0)

        def forrangedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ForrangedeclarationContext, 0)

        def forrangeinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.ForrangeinitializerContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_iterationstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIterationstatement"):
                listener.enterIterationstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIterationstatement"):
                listener.exitIterationstatement(self)

    def iterationstatement(self):

        localctx = CPP14Parser.IterationstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_iterationstatement)
        self._la = 0  # Token type
        try:
            self.state = 1090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 91, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1055
                self.match(CPP14Parser.While)
                self.state = 1056
                self.match(CPP14Parser.LeftParen)
                self.state = 1057
                self.condition()
                self.state = 1058
                self.match(CPP14Parser.RightParen)
                self.state = 1059
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1061
                self.match(CPP14Parser.Do)
                self.state = 1062
                self.statement()
                self.state = 1063
                self.match(CPP14Parser.While)
                self.state = 1064
                self.match(CPP14Parser.LeftParen)
                self.state = 1065
                self.expression(0)
                self.state = 1066
                self.match(CPP14Parser.RightParen)
                self.state = 1067
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1069
                self.match(CPP14Parser.For)
                self.state = 1070
                self.match(CPP14Parser.LeftParen)
                self.state = 1071
                self.forinitstatement()
                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                    1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (
                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                    1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (
                    1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.New) | (
                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (
                    1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Thread_local - 64)) | (
                    1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                    1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                    1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (
                    1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                    1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                    1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                    1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                    (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                    1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 1072
                    self.condition()

                self.state = 1075
                self.match(CPP14Parser.Semi)
                self.state = 1077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Throw - 65)) | (
                    1 << (CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                    1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                    1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                    1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (
                    1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                    1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                    1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                    1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                        (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                        (1 << (CPP14Parser.Characterliteral - 133)) | (
                                        1 << (CPP14Parser.Floatingliteral - 133)) | (
                                    1 << (CPP14Parser.Stringliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 1076
                    self.expression(0)

                self.state = 1079
                self.match(CPP14Parser.RightParen)
                self.state = 1080
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1082
                self.match(CPP14Parser.For)
                self.state = 1083
                self.match(CPP14Parser.LeftParen)
                self.state = 1084
                self.forrangedeclaration()
                self.state = 1085
                self.match(CPP14Parser.Colon)
                self.state = 1086
                self.forrangeinitializer()
                self.state = 1087
                self.match(CPP14Parser.RightParen)
                self.state = 1088
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForinitstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionstatementContext, 0)

        def simpledeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.SimpledeclarationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_forinitstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForinitstatement"):
                listener.enterForinitstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForinitstatement"):
                listener.exitForinitstatement(self)

    def forinitstatement(self):

        localctx = CPP14Parser.ForinitstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_forinitstatement)
        try:
            self.state = 1094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 92, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1092
                self.expressionstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1093
                self.simpledeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForrangedeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_forrangedeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForrangedeclaration"):
                listener.enterForrangedeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForrangedeclaration"):
                listener.exitForrangedeclaration(self)

    def forrangedeclaration(self):

        localctx = CPP14Parser.ForrangedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_forrangedeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 1096
                self.attributespecifierseq(0)

            self.state = 1099
            self.declspecifierseq()
            self.state = 1100
            self.declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForrangeinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_forrangeinitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForrangeinitializer"):
                listener.enterForrangeinitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForrangeinitializer"):
                listener.exitForrangeinitializer(self)

    def forrangeinitializer(self):

        localctx = CPP14Parser.ForrangeinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_forrangeinitializer)
        try:
            self.state = 1104
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16,
                         CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype, CPP14Parser.Delete,
                         CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.FalseToken, CPP14Parser.Float,
                         CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Nullptr,
                         CPP14Parser.Operator, CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed,
                         CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw,
                         CPP14Parser.TrueToken, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.Unsigned,
                         CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                         CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                         CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                         CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Integerliteral,
                         CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral,
                         CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral,
                         CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1102
                self.expression(0)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1103
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JumpstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(CPP14Parser.Break, 0)

        def Continue(self):
            return self.getToken(CPP14Parser.Continue, 0)

        def Return(self):
            return self.getToken(CPP14Parser.Return, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def gotostatement(self):
            return self.getTypedRuleContext(CPP14Parser.GotostatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_jumpstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJumpstatement"):
                listener.enterJumpstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJumpstatement"):
                listener.exitJumpstatement(self)

    def jumpstatement(self):

        localctx = CPP14Parser.JumpstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_jumpstatement)
        self._la = 0  # Token type
        try:
            self.state = 1120
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 96, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1106
                self.match(CPP14Parser.Break)
                self.state = 1107
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1108
                self.match(CPP14Parser.Continue)
                self.state = 1109
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1110
                self.match(CPP14Parser.Return)
                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Throw - 65)) | (
                    1 << (CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                    1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                    1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                    1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (
                    1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                    1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                    1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                    1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                        (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                        (1 << (CPP14Parser.Characterliteral - 133)) | (
                                        1 << (CPP14Parser.Floatingliteral - 133)) | (
                                    1 << (CPP14Parser.Stringliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 1111
                    self.expression(0)

                self.state = 1114
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1115
                self.match(CPP14Parser.Return)
                self.state = 1116
                self.bracedinitlist()
                self.state = 1117
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1119
                self.gotostatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GotostatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Goto(self):
            return self.getToken(CPP14Parser.Goto, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_gotostatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGotostatement"):
                listener.enterGotostatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGotostatement"):
                listener.exitGotostatement(self)

    def gotostatement(self):

        localctx = CPP14Parser.GotostatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_gotostatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.match(CPP14Parser.Goto)
            self.state = 1123
            self.match(CPP14Parser.Identifier)
            self.state = 1124
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declarationseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclarationseq"):
                listener.enterDeclarationseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclarationseq"):
                listener.exitDeclarationseq(self)

    def declarationseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.DeclarationseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 110
        self.enterRecursionRule(localctx, 110, self.RULE_declarationseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1127
            self.declaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1133
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 97, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.DeclarationseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_declarationseq)
                    self.state = 1129
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1130
                    self.declaration()
                self.state = 1135
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 97, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.BlockdeclarationContext, 0)

        def functiondefinition(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiondefinitionContext, 0)

        def templatedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.TemplatedeclarationContext, 0)

        def explicitinstantiation(self):
            return self.getTypedRuleContext(CPP14Parser.ExplicitinstantiationContext, 0)

        def explicitspecialization(self):
            return self.getTypedRuleContext(CPP14Parser.ExplicitspecializationContext, 0)

        def linkagespecification(self):
            return self.getTypedRuleContext(CPP14Parser.LinkagespecificationContext, 0)

        def namespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacedefinitionContext, 0)

        def emptydeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.EmptydeclarationContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclaration"):
                listener.enterDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclaration"):
                listener.exitDeclaration(self)

    def declaration(self):

        localctx = CPP14Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_declaration)
        try:
            self.state = 1147
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 98, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1136
                self.blockdeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1137
                self.functiondefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1138
                self.templatedeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1139
                self.explicitinstantiation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1140
                self.explicitspecialization()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1141
                self.linkagespecification()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1142
                self.namespacedefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1143
                self.emptydeclaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1144
                self.attributespecifierseq(0)
                self.state = 1145
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpledeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.SimpledeclarationContext, 0)

        def asmdefinition(self):
            return self.getTypedRuleContext(CPP14Parser.AsmdefinitionContext, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def qualifiednamespacespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.QualifiednamespacespecifierContext, 0)

        def usingdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.UsingdeclarationContext, 0)

        def usingdirective(self):
            return self.getTypedRuleContext(CPP14Parser.UsingdirectiveContext, 0)

        def static_assertdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.Static_assertdeclarationContext, 0)

        def aliasdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.AliasdeclarationContext, 0)

        def enumkey(self):
            return self.getTypedRuleContext(CPP14Parser.EnumkeyContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def enumbase(self):
            return self.getTypedRuleContext(CPP14Parser.EnumbaseContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_blockdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBlockdeclaration"):
                listener.enterBlockdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBlockdeclaration"):
                listener.exitBlockdeclaration(self)

    def blockdeclaration(self):

        localctx = CPP14Parser.BlockdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_blockdeclaration)
        self._la = 0  # Token type
        try:
            self.state = 1171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 101, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1149
                self.simpledeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1150
                self.asmdefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1151
                self.match(CPP14Parser.Namespace)
                self.state = 1152
                self.match(CPP14Parser.Identifier)
                self.state = 1153
                self.match(CPP14Parser.Assign)
                self.state = 1154
                self.qualifiednamespacespecifier()
                self.state = 1155
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1157
                self.usingdeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1158
                self.usingdirective()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1159
                self.static_assertdeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1160
                self.aliasdeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1161
                self.enumkey()
                self.state = 1163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1162
                    self.attributespecifierseq(0)

                self.state = 1165
                self.match(CPP14Parser.Identifier)
                self.state = 1167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1166
                    self.enumbase()

                self.state = 1169
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_aliasdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAliasdeclaration"):
                listener.enterAliasdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAliasdeclaration"):
                listener.exitAliasdeclaration(self)

    def aliasdeclaration(self):

        localctx = CPP14Parser.AliasdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_aliasdeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1173
            self.match(CPP14Parser.Using)
            self.state = 1174
            self.match(CPP14Parser.Identifier)
            self.state = 1176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 1175
                self.attributespecifierseq(0)

            self.state = 1178
            self.match(CPP14Parser.Assign)
            self.state = 1179
            self.thetypeid()
            self.state = 1180
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpledeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_simpledeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpledeclaration"):
                listener.enterSimpledeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpledeclaration"):
                listener.exitSimpledeclaration(self)

    def simpledeclaration(self):

        localctx = CPP14Parser.SimpledeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_simpledeclaration)
        self._la = 0  # Token type
        try:
            self.state = 1196
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32,
                         CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Constexpr, CPP14Parser.Decltype,
                         CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Explicit, CPP14Parser.Extern,
                         CPP14Parser.Float, CPP14Parser.Friend, CPP14Parser.Inline, CPP14Parser.Int, CPP14Parser.Long,
                         CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Register, CPP14Parser.Short,
                         CPP14Parser.Signed, CPP14Parser.Static, CPP14Parser.Struct, CPP14Parser.Thread_local,
                         CPP14Parser.Typedef, CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Unsigned,
                         CPP14Parser.Virtual, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar,
                         CPP14Parser.LeftParen, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Tilde,
                         CPP14Parser.AndAnd, CPP14Parser.Doublecolon, CPP14Parser.Semi, CPP14Parser.Ellipsis,
                         CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1183
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 103, self._ctx)
                if la_ == 1:
                    self.state = 1182
                    self.declspecifierseq()

                self.state = 1186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Operator or ((((_la - 79)) & ~0x3f) == 0 and (
                    (1 << (_la - 79)) & ((1 << (CPP14Parser.LeftParen - 79)) | (1 << (CPP14Parser.Star - 79)) | (
                    1 << (CPP14Parser.And - 79)) | (1 << (CPP14Parser.Tilde - 79)) | (
                    1 << (CPP14Parser.AndAnd - 79)) | (1 << (CPP14Parser.Doublecolon - 79)) | (
                    1 << (CPP14Parser.Ellipsis - 79)) | (1 << (CPP14Parser.Identifier - 79)))) != 0):
                    self.state = 1185
                    self.initdeclaratorlist(0)

                self.state = 1188
                self.match(CPP14Parser.Semi)
                pass
            elif token in [CPP14Parser.Alignas, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1189
                self.attributespecifierseq(0)
                self.state = 1191
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 105, self._ctx)
                if la_ == 1:
                    self.state = 1190
                    self.declspecifierseq()

                self.state = 1193
                self.initdeclaratorlist(0)
                self.state = 1194
                self.match(CPP14Parser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Static_assertdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_static_assertdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatic_assertdeclaration"):
                listener.enterStatic_assertdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatic_assertdeclaration"):
                listener.exitStatic_assertdeclaration(self)

    def static_assertdeclaration(self):

        localctx = CPP14Parser.Static_assertdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_static_assertdeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self.match(CPP14Parser.Static_assert)
            self.state = 1199
            self.match(CPP14Parser.LeftParen)
            self.state = 1200
            self.constantexpression()
            self.state = 1201
            self.match(CPP14Parser.Comma)
            self.state = 1202
            self.match(CPP14Parser.Stringliteral)
            self.state = 1203
            self.match(CPP14Parser.RightParen)
            self.state = 1204
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EmptydeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return CPP14Parser.RULE_emptydeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEmptydeclaration"):
                listener.enterEmptydeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEmptydeclaration"):
                listener.exitEmptydeclaration(self)

    def emptydeclaration(self):

        localctx = CPP14Parser.EmptydeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_emptydeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1206
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Register(self):
            return self.getToken(CPP14Parser.Register, 0)

        def Static(self):
            return self.getToken(CPP14Parser.Static, 0)

        def Thread_local(self):
            return self.getToken(CPP14Parser.Thread_local, 0)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def Explicit(self):
            return self.getToken(CPP14Parser.Explicit, 0)

        def Friend(self):
            return self.getToken(CPP14Parser.Friend, 0)

        def Typedef(self):
            return self.getToken(CPP14Parser.Typedef, 0)

        def Constexpr(self):
            return self.getToken(CPP14Parser.Constexpr, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclspecifier"):
                listener.enterDeclspecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclspecifier"):
                listener.exitDeclspecifier(self)

    def declspecifier(self):

        localctx = CPP14Parser.DeclspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_declspecifier)
        try:
            self.state = 1220
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Register]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1208
                self.match(CPP14Parser.Register)
                pass
            elif token in [CPP14Parser.Static]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1209
                self.match(CPP14Parser.Static)
                pass
            elif token in [CPP14Parser.Thread_local]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1210
                self.match(CPP14Parser.Thread_local)
                pass
            elif token in [CPP14Parser.Extern]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1211
                self.match(CPP14Parser.Extern)
                pass
            elif token in [CPP14Parser.Mutable]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1212
                self.match(CPP14Parser.Mutable)
                pass
            elif token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32,
                           CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Decltype, CPP14Parser.Double,
                           CPP14Parser.Enum, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Short,
                           CPP14Parser.Signed, CPP14Parser.Struct, CPP14Parser.Typename, CPP14Parser.Union,
                           CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar,
                           CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1213
                self.typespecifier()
                pass
            elif token in [CPP14Parser.Inline]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1214
                self.match(CPP14Parser.Inline)
                pass
            elif token in [CPP14Parser.Virtual]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1215
                self.match(CPP14Parser.Virtual)
                pass
            elif token in [CPP14Parser.Explicit]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1216
                self.match(CPP14Parser.Explicit)
                pass
            elif token in [CPP14Parser.Friend]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1217
                self.match(CPP14Parser.Friend)
                pass
            elif token in [CPP14Parser.Typedef]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1218
                self.match(CPP14Parser.Typedef)
                pass
            elif token in [CPP14Parser.Constexpr]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1219
                self.match(CPP14Parser.Constexpr)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclspecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclspecifierseq"):
                listener.enterDeclspecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclspecifierseq"):
                listener.exitDeclspecifierseq(self)

    def declspecifierseq(self):

        localctx = CPP14Parser.DeclspecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_declspecifierseq)
        try:
            self.state = 1229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 109, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1222
                self.declspecifier()
                self.state = 1224
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 108, self._ctx)
                if la_ == 1:
                    self.state = 1223
                    self.attributespecifierseq(0)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1226
                self.declspecifier()
                self.state = 1227
                self.declspecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, 0)

        def classspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.ClassspecifierContext, 0)

        def enumhead(self):
            return self.getTypedRuleContext(CPP14Parser.EnumheadContext, 0)

        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypespecifier"):
                listener.enterTypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypespecifier"):
                listener.exitTypespecifier(self)

    def typespecifier(self):

        localctx = CPP14Parser.TypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_typespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 111, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1231
                self.trailingtypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1232
                self.classspecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1233
                self.enumhead()
                self.state = 1234
                self.match(CPP14Parser.LeftBrace)
                self.state = 1236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 1235
                    self.enumeratorlist(0)

                self.state = 1238
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1240
                self.enumhead()
                self.state = 1241
                self.match(CPP14Parser.LeftBrace)
                self.state = 1242
                self.enumeratorlist(0)
                self.state = 1243
                self.match(CPP14Parser.Comma)
                self.state = 1244
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingtypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext, 0)

        def classkey(self):
            return self.getTypedRuleContext(CPP14Parser.ClasskeyContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypenamespecifierContext, 0)

        def cvqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrailingtypespecifier"):
                listener.enterTrailingtypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrailingtypespecifier"):
                listener.exitTrailingtypespecifier(self)

    def trailingtypespecifier(self):

        localctx = CPP14Parser.TrailingtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_trailingtypespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 116, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1248
                self.simpletypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1249
                self.classkey()
                self.state = 1251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1250
                    self.attributespecifierseq(0)

                self.state = 1254
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 113, self._ctx)
                if la_ == 1:
                    self.state = 1253
                    self.nestednamespecifier(0)

                self.state = 1256
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1258
                self.classkey()
                self.state = 1259
                self.simpletemplateid()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1261
                self.classkey()
                self.state = 1262
                self.nestednamespecifier(0)
                self.state = 1264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Template:
                    self.state = 1263
                    self.match(CPP14Parser.Template)

                self.state = 1266
                self.simpletemplateid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1268
                self.match(CPP14Parser.Enum)
                self.state = 1270
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 115, self._ctx)
                if la_ == 1:
                    self.state = 1269
                    self.nestednamespecifier(0)

                self.state = 1272
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1273
                self.typenamespecifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1274
                self.cvqualifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypespecifierseq"):
                listener.enterTypespecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypespecifierseq"):
                listener.exitTypespecifierseq(self)

    def typespecifierseq(self):

        localctx = CPP14Parser.TypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_typespecifierseq)
        try:
            self.state = 1284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 118, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1277
                self.typespecifier()
                self.state = 1279
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 117, self._ctx)
                if la_ == 1:
                    self.state = 1278
                    self.attributespecifierseq(0)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1281
                self.typespecifier()
                self.state = 1282
                self.typespecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingtypespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrailingtypespecifierseq"):
                listener.enterTrailingtypespecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrailingtypespecifierseq"):
                listener.exitTrailingtypespecifierseq(self)

    def trailingtypespecifierseq(self):

        localctx = CPP14Parser.TrailingtypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_trailingtypespecifierseq)
        try:
            self.state = 1293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 120, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1286
                self.trailingtypespecifier()
                self.state = 1288
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 119, self._ctx)
                if la_ == 1:
                    self.state = 1287
                    self.attributespecifierseq(0)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1290
                self.trailingtypespecifier()
                self.state = 1291
                self.trailingtypespecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpletypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypenameContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext, 0)

        def Char(self):
            return self.getToken(CPP14Parser.Char, 0)

        def Char16(self):
            return self.getToken(CPP14Parser.Char16, 0)

        def Char32(self):
            return self.getToken(CPP14Parser.Char32, 0)

        def Wchar(self):
            return self.getToken(CPP14Parser.Wchar, 0)

        def Bool(self):
            return self.getToken(CPP14Parser.Bool, 0)

        def Short(self):
            return self.getToken(CPP14Parser.Short, 0)

        def Int(self):
            return self.getToken(CPP14Parser.Int, 0)

        def Long(self):
            return self.getToken(CPP14Parser.Long, 0)

        def Signed(self):
            return self.getToken(CPP14Parser.Signed, 0)

        def Unsigned(self):
            return self.getToken(CPP14Parser.Unsigned, 0)

        def Float(self):
            return self.getToken(CPP14Parser.Float, 0)

        def Double(self):
            return self.getToken(CPP14Parser.Double, 0)

        def Void(self):
            return self.getToken(CPP14Parser.Void, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_simpletypespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpletypespecifier"):
                listener.enterSimpletypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpletypespecifier"):
                listener.exitSimpletypespecifier(self)

    def simpletypespecifier(self):

        localctx = CPP14Parser.SimpletypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_simpletypespecifier)
        try:
            self.state = 1318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 122, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1296
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 121, self._ctx)
                if la_ == 1:
                    self.state = 1295
                    self.nestednamespecifier(0)

                self.state = 1298
                self.thetypename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1299
                self.nestednamespecifier(0)
                self.state = 1300
                self.match(CPP14Parser.Template)
                self.state = 1301
                self.simpletemplateid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1303
                self.match(CPP14Parser.Char)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1304
                self.match(CPP14Parser.Char16)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1305
                self.match(CPP14Parser.Char32)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1306
                self.match(CPP14Parser.Wchar)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1307
                self.match(CPP14Parser.Bool)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1308
                self.match(CPP14Parser.Short)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1309
                self.match(CPP14Parser.Int)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1310
                self.match(CPP14Parser.Long)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1311
                self.match(CPP14Parser.Signed)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1312
                self.match(CPP14Parser.Unsigned)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1313
                self.match(CPP14Parser.Float)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1314
                self.match(CPP14Parser.Double)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1315
                self.match(CPP14Parser.Void)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1316
                self.match(CPP14Parser.Auto)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1317
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThetypenameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_thetypename

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterThetypename"):
                listener.enterThetypename(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitThetypename"):
                listener.exitThetypename(self)

    def thetypename(self):

        localctx = CPP14Parser.ThetypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_thetypename)
        try:
            self.state = 1323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 123, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1320
                self.classname()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1321
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1322
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecltypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_decltypespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDecltypespecifier"):
                listener.enterDecltypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDecltypespecifier"):
                listener.exitDecltypespecifier(self)

    def decltypespecifier(self):

        localctx = CPP14Parser.DecltypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_decltypespecifier)
        try:
            self.state = 1334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 124, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1325
                self.match(CPP14Parser.Decltype)
                self.state = 1326
                self.match(CPP14Parser.LeftParen)
                self.state = 1327
                self.expression(0)
                self.state = 1328
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1330
                self.match(CPP14Parser.Decltype)
                self.state = 1331
                self.match(CPP14Parser.LeftParen)
                self.state = 1332
                self.match(CPP14Parser.Auto)
                self.state = 1333
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumheadContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumkey(self):
            return self.getTypedRuleContext(CPP14Parser.EnumkeyContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def enumbase(self):
            return self.getTypedRuleContext(CPP14Parser.EnumbaseContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumhead

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumhead"):
                listener.enterEnumhead(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumhead"):
                listener.exitEnumhead(self)

    def enumhead(self):

        localctx = CPP14Parser.EnumheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_enumhead)
        self._la = 0  # Token type
        try:
            self.state = 1355
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 130, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1336
                self.enumkey()
                self.state = 1338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1337
                    self.attributespecifierseq(0)

                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 1340
                    self.match(CPP14Parser.Identifier)

                self.state = 1344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1343
                    self.enumbase()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1346
                self.enumkey()
                self.state = 1348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1347
                    self.attributespecifierseq(0)

                self.state = 1350
                self.nestednamespecifier(0)
                self.state = 1351
                self.match(CPP14Parser.Identifier)
                self.state = 1353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1352
                    self.enumbase()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumkeyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumkey

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumkey"):
                listener.enterEnumkey(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumkey"):
                listener.exitEnumkey(self)

    def enumkey(self):

        localctx = CPP14Parser.EnumkeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_enumkey)
        try:
            self.state = 1362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 131, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1357
                self.match(CPP14Parser.Enum)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1358
                self.match(CPP14Parser.Enum)
                self.state = 1359
                self.match(CPP14Parser.Class)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1360
                self.match(CPP14Parser.Enum)
                self.state = 1361
                self.match(CPP14Parser.Struct)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumbaseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumbase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumbase"):
                listener.enterEnumbase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumbase"):
                listener.exitEnumbase(self)

    def enumbase(self):

        localctx = CPP14Parser.EnumbaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_enumbase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self.match(CPP14Parser.Colon)
            self.state = 1365
            self.typespecifierseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumeratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeratordefinition(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratordefinitionContext, 0)

        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumeratorlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumeratorlist"):
                listener.enterEnumeratorlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumeratorlist"):
                listener.exitEnumeratorlist(self)

    def enumeratorlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EnumeratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 148
        self.enterRecursionRule(localctx, 148, self.RULE_enumeratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            self.enumeratordefinition()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1375
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 132, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.EnumeratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_enumeratorlist)
                    self.state = 1370
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1371
                    self.match(CPP14Parser.Comma)
                    self.state = 1372
                    self.enumeratordefinition()
                self.state = 1377
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 132, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EnumeratordefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumeratordefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumeratordefinition"):
                listener.enterEnumeratordefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumeratordefinition"):
                listener.exitEnumeratordefinition(self)

    def enumeratordefinition(self):

        localctx = CPP14Parser.EnumeratordefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_enumeratordefinition)
        try:
            self.state = 1383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 133, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1378
                self.enumerator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1379
                self.enumerator()
                self.state = 1380
                self.match(CPP14Parser.Assign)
                self.state = 1381
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumeratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumerator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumerator"):
                listener.enterEnumerator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumerator"):
                listener.exitEnumerator(self)

    def enumerator(self):

        localctx = CPP14Parser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_enumerator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1385
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespacenameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def originalnamespacename(self):
            return self.getTypedRuleContext(CPP14Parser.OriginalnamespacenameContext, 0)

        def namespacealias(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacealiasContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacename

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamespacename"):
                listener.enterNamespacename(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamespacename"):
                listener.exitNamespacename(self)

    def namespacename(self):

        localctx = CPP14Parser.NamespacenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_namespacename)
        try:
            self.state = 1389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 134, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1387
                self.originalnamespacename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1388
                self.namespacealias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OriginalnamespacenameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_originalnamespacename

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOriginalnamespacename"):
                listener.enterOriginalnamespacename(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOriginalnamespacename"):
                listener.exitOriginalnamespacename(self)

    def originalnamespacename(self):

        localctx = CPP14Parser.OriginalnamespacenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_originalnamespacename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1391
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespacedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namednamespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.NamednamespacedefinitionContext, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacebodyContext, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacedefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamespacedefinition"):
                listener.enterNamespacedefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamespacedefinition"):
                listener.exitNamespacedefinition(self)

    def namespacedefinition(self):

        localctx = CPP14Parser.NamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_namespacedefinition)
        self._la = 0  # Token type
        try:
            self.state = 1402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 136, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1393
                self.namednamespacedefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Inline:
                    self.state = 1394
                    self.match(CPP14Parser.Inline)

                self.state = 1397
                self.match(CPP14Parser.Namespace)
                self.state = 1398
                self.match(CPP14Parser.LeftBrace)
                self.state = 1399
                self.namespacebody()
                self.state = 1400
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamednamespacedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacebodyContext, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def originalnamespacename(self):
            return self.getTypedRuleContext(CPP14Parser.OriginalnamespacenameContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_namednamespacedefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamednamespacedefinition"):
                listener.enterNamednamespacedefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamednamespacedefinition"):
                listener.exitNamednamespacedefinition(self)

    def namednamespacedefinition(self):

        localctx = CPP14Parser.NamednamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_namednamespacedefinition)
        self._la = 0  # Token type
        try:
            self.state = 1422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 139, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Inline:
                    self.state = 1404
                    self.match(CPP14Parser.Inline)

                self.state = 1407
                self.match(CPP14Parser.Namespace)
                self.state = 1408
                self.match(CPP14Parser.Identifier)
                self.state = 1409
                self.match(CPP14Parser.LeftBrace)
                self.state = 1410
                self.namespacebody()
                self.state = 1411
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Inline:
                    self.state = 1413
                    self.match(CPP14Parser.Inline)

                self.state = 1416
                self.match(CPP14Parser.Namespace)
                self.state = 1417
                self.originalnamespacename()
                self.state = 1418
                self.match(CPP14Parser.LeftBrace)
                self.state = 1419
                self.namespacebody()
                self.state = 1420
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespacebodyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacebody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamespacebody"):
                listener.enterNamespacebody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamespacebody"):
                listener.exitNamespacebody(self)

    def namespacebody(self):

        localctx = CPP14Parser.NamespacebodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_namespacebody)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (
                1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (
                1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (
                1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                1 << CPP14Parser.Template))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                CPP14Parser.Thread_local - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (
                1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                1 << (CPP14Parser.Semi - 64)) | (1 << (CPP14Parser.Ellipsis - 64)) | (
                1 << (CPP14Parser.Identifier - 64)))) != 0):
                self.state = 1424
                self.declarationseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespacealiasContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacealias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamespacealias"):
                listener.enterNamespacealias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamespacealias"):
                listener.exitNamespacealias(self)

    def namespacealias(self):

        localctx = CPP14Parser.NamespacealiasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_namespacealias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1427
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiednamespacespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespacename(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacenameContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_qualifiednamespacespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQualifiednamespacespecifier"):
                listener.enterQualifiednamespacespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQualifiednamespacespecifier"):
                listener.exitQualifiednamespacespecifier(self)

    def qualifiednamespacespecifier(self):

        localctx = CPP14Parser.QualifiednamespacespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_qualifiednamespacespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 141, self._ctx)
            if la_ == 1:
                self.state = 1429
                self.nestednamespecifier(0)

            self.state = 1432
            self.namespacename()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UsingdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_usingdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUsingdeclaration"):
                listener.enterUsingdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUsingdeclaration"):
                listener.exitUsingdeclaration(self)

    def usingdeclaration(self):

        localctx = CPP14Parser.UsingdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_usingdeclaration)
        self._la = 0  # Token type
        try:
            self.state = 1447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 143, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1434
                self.match(CPP14Parser.Using)
                self.state = 1436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Typename:
                    self.state = 1435
                    self.match(CPP14Parser.Typename)

                self.state = 1438
                self.nestednamespecifier(0)
                self.state = 1439
                self.unqualifiedid()
                self.state = 1440
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1442
                self.match(CPP14Parser.Using)
                self.state = 1443
                self.match(CPP14Parser.Doublecolon)
                self.state = 1444
                self.unqualifiedid()
                self.state = 1445
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UsingdirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def namespacename(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacenameContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_usingdirective

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUsingdirective"):
                listener.enterUsingdirective(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUsingdirective"):
                listener.exitUsingdirective(self)

    def usingdirective(self):

        localctx = CPP14Parser.UsingdirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_usingdirective)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 1449
                self.attributespecifierseq(0)

            self.state = 1452
            self.match(CPP14Parser.Using)
            self.state = 1453
            self.match(CPP14Parser.Namespace)
            self.state = 1455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 145, self._ctx)
            if la_ == 1:
                self.state = 1454
                self.nestednamespecifier(0)

            self.state = 1457
            self.namespacename()
            self.state = 1458
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AsmdefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Asm(self):
            return self.getToken(CPP14Parser.Asm, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_asmdefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAsmdefinition"):
                listener.enterAsmdefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAsmdefinition"):
                listener.exitAsmdefinition(self)

    def asmdefinition(self):

        localctx = CPP14Parser.AsmdefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_asmdefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1460
            self.match(CPP14Parser.Asm)
            self.state = 1461
            self.match(CPP14Parser.LeftParen)
            self.state = 1462
            self.match(CPP14Parser.Stringliteral)
            self.state = 1463
            self.match(CPP14Parser.RightParen)
            self.state = 1464
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinkagespecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_linkagespecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLinkagespecification"):
                listener.enterLinkagespecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLinkagespecification"):
                listener.exitLinkagespecification(self)

    def linkagespecification(self):

        localctx = CPP14Parser.LinkagespecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_linkagespecification)
        self._la = 0  # Token type
        try:
            self.state = 1476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 147, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1466
                self.match(CPP14Parser.Extern)
                self.state = 1467
                self.match(CPP14Parser.Stringliteral)
                self.state = 1468
                self.match(CPP14Parser.LeftBrace)
                self.state = 1470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                    1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                    1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (
                    1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                    1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                    1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Template))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                    CPP14Parser.Thread_local - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                    1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                    1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                    1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                    1 << (CPP14Parser.Semi - 64)) | (1 << (CPP14Parser.Ellipsis - 64)) | (
                    1 << (CPP14Parser.Identifier - 64)))) != 0):
                    self.state = 1469
                    self.declarationseq(0)

                self.state = 1472
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1473
                self.match(CPP14Parser.Extern)
                self.state = 1474
                self.match(CPP14Parser.Stringliteral)
                self.state = 1475
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributespecifierseq"):
                listener.enterAttributespecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributespecifierseq"):
                listener.exitAttributespecifierseq(self)

    def attributespecifierseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AttributespecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 176
        self.enterRecursionRule(localctx, 176, self.RULE_attributespecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1479
            self.attributespecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1485
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 148, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AttributespecifierseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_attributespecifierseq)
                    self.state = 1481
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1482
                    self.attributespecifier()
                self.state = 1487
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 148, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AttributespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributelist(self):
            return self.getTypedRuleContext(CPP14Parser.AttributelistContext, 0)

        def alignmentspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AlignmentspecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributespecifier"):
                listener.enterAttributespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributespecifier"):
                listener.exitAttributespecifier(self)

    def attributespecifier(self):

        localctx = CPP14Parser.AttributespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_attributespecifier)
        try:
            self.state = 1495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1488
                self.match(CPP14Parser.LeftBracket)
                self.state = 1489
                self.match(CPP14Parser.LeftBracket)
                self.state = 1490
                self.attributelist(0)
                self.state = 1491
                self.match(CPP14Parser.RightBracket)
                self.state = 1492
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.Alignas]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1494
                self.alignmentspecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlignmentspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(CPP14Parser.Alignas, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_alignmentspecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAlignmentspecifier"):
                listener.enterAlignmentspecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAlignmentspecifier"):
                listener.exitAlignmentspecifier(self)

    def alignmentspecifier(self):

        localctx = CPP14Parser.AlignmentspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_alignmentspecifier)
        self._la = 0  # Token type
        try:
            self.state = 1513
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 152, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1497
                self.match(CPP14Parser.Alignas)
                self.state = 1498
                self.match(CPP14Parser.LeftParen)
                self.state = 1499
                self.thetypeid()
                self.state = 1501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1500
                    self.match(CPP14Parser.Ellipsis)

                self.state = 1503
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1505
                self.match(CPP14Parser.Alignas)
                self.state = 1506
                self.match(CPP14Parser.LeftParen)
                self.state = 1507
                self.constantexpression()
                self.state = 1509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1508
                    self.match(CPP14Parser.Ellipsis)

                self.state = 1511
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributelistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeContext, 0)

        def attributelist(self):
            return self.getTypedRuleContext(CPP14Parser.AttributelistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributelist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributelist"):
                listener.enterAttributelist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributelist"):
                listener.exitAttributelist(self)

    def attributelist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AttributelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 182
        self.enterRecursionRule(localctx, 182, self.RULE_attributelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 154, self._ctx)
            if la_ == 1:
                self.state = 1517
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 153, self._ctx)
                if la_ == 1:
                    self.state = 1516
                    self.attribute()

                pass

            elif la_ == 2:
                self.state = 1519
                self.attribute()
                self.state = 1520
                self.match(CPP14Parser.Ellipsis)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 1536
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 157, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1534
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 156, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.AttributelistContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                        self.state = 1524
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1525
                        self.match(CPP14Parser.Comma)
                        self.state = 1527
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 155, self._ctx)
                        if la_ == 1:
                            self.state = 1526
                            self.attribute()

                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.AttributelistContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                        self.state = 1529
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1530
                        self.match(CPP14Parser.Comma)
                        self.state = 1531
                        self.attribute()
                        self.state = 1532
                        self.match(CPP14Parser.Ellipsis)
                        pass

                self.state = 1538
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 157, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AttributeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributetoken(self):
            return self.getTypedRuleContext(CPP14Parser.AttributetokenContext, 0)

        def attributeargumentclause(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeargumentclauseContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attribute

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttribute"):
                listener.enterAttribute(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttribute"):
                listener.exitAttribute(self)

    def attribute(self):

        localctx = CPP14Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1539
            self.attributetoken()
            self.state = 1541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 158, self._ctx)
            if la_ == 1:
                self.state = 1540
                self.attributeargumentclause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributetokenContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributescopedtoken(self):
            return self.getTypedRuleContext(CPP14Parser.AttributescopedtokenContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributetoken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributetoken"):
                listener.enterAttributetoken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributetoken"):
                listener.exitAttributetoken(self)

    def attributetoken(self):

        localctx = CPP14Parser.AttributetokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_attributetoken)
        try:
            self.state = 1545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 159, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1543
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1544
                self.attributescopedtoken()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributescopedtokenContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributenamespace(self):
            return self.getTypedRuleContext(CPP14Parser.AttributenamespaceContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributescopedtoken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributescopedtoken"):
                listener.enterAttributescopedtoken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributescopedtoken"):
                listener.exitAttributescopedtoken(self)

    def attributescopedtoken(self):

        localctx = CPP14Parser.AttributescopedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_attributescopedtoken)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1547
            self.attributenamespace()
            self.state = 1548
            self.match(CPP14Parser.Doublecolon)
            self.state = 1549
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributenamespaceContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributenamespace

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributenamespace"):
                listener.enterAttributenamespace(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributenamespace"):
                listener.exitAttributenamespace(self)

    def attributenamespace(self):

        localctx = CPP14Parser.AttributenamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_attributenamespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeargumentclauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributeargumentclause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributeargumentclause"):
                listener.enterAttributeargumentclause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributeargumentclause"):
                listener.exitAttributeargumentclause(self)

    def attributeargumentclause(self):

        localctx = CPP14Parser.AttributeargumentclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_attributeargumentclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1553
            self.match(CPP14Parser.LeftParen)
            self.state = 1554
            self.balancedtokenseq(0)
            self.state = 1555
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BalancedtokenseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtoken(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenContext, 0)

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtokenseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBalancedtokenseq"):
                listener.enterBalancedtokenseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBalancedtokenseq"):
                listener.exitBalancedtokenseq(self)

    def balancedtokenseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.BalancedtokenseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 194
        self.enterRecursionRule(localctx, 194, self.RULE_balancedtokenseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 160, self._ctx)
            if la_ == 1:
                self.state = 1558
                self.balancedtoken()

            self._ctx.stop = self._input.LT(-1)
            self.state = 1565
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 161, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.BalancedtokenseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_balancedtokenseq)
                    self.state = 1561
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1562
                    self.balancedtoken()
                self.state = 1567
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 161, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BalancedtokenContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtoken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBalancedtoken"):
                listener.enterBalancedtoken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBalancedtoken"):
                listener.exitBalancedtoken(self)

    def balancedtoken(self):

        localctx = CPP14Parser.BalancedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_balancedtoken)
        try:
            self.state = 1580
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1568
                self.match(CPP14Parser.LeftParen)
                self.state = 1569
                self.balancedtokenseq(0)
                self.state = 1570
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1572
                self.match(CPP14Parser.LeftBracket)
                self.state = 1573
                self.balancedtokenseq(0)
                self.state = 1574
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1576
                self.match(CPP14Parser.LeftBrace)
                self.state = 1577
                self.balancedtokenseq(0)
                self.state = 1578
                self.match(CPP14Parser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitdeclaratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorContext, 0)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initdeclaratorlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitdeclaratorlist"):
                listener.enterInitdeclaratorlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitdeclaratorlist"):
                listener.exitInitdeclaratorlist(self)

    def initdeclaratorlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InitdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 198
        self.enterRecursionRule(localctx, 198, self.RULE_initdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1583
            self.initdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1590
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 163, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InitdeclaratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initdeclaratorlist)
                    self.state = 1585
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1586
                    self.match(CPP14Parser.Comma)
                    self.state = 1587
                    self.initdeclarator()
                self.state = 1592
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 163, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class InitdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def initializer(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitdeclarator"):
                listener.enterInitdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitdeclarator"):
                listener.exitInitdeclarator(self)

    def initdeclarator(self):

        localctx = CPP14Parser.InitdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_initdeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1593
            self.declarator()
            self.state = 1595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 164, self._ctx)
            if la_ == 1:
                self.state = 1594
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext, 0)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingreturntypeContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclarator"):
                listener.enterDeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclarator"):
                listener.exitDeclarator(self)

    def declarator(self):

        localctx = CPP14Parser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_declarator)
        try:
            self.state = 1602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 165, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1597
                self.ptrdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1598
                self.noptrdeclarator(0)
                self.state = 1599
                self.parametersandqualifiers()
                self.state = 1600
                self.trailingreturntype()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtrdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext, 0)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPtrdeclarator"):
                listener.enterPtrdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPtrdeclarator"):
                listener.exitPtrdeclarator(self)

    def ptrdeclarator(self):

        localctx = CPP14Parser.PtrdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_ptrdeclarator)
        try:
            self.state = 1608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 166, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1604
                self.noptrdeclarator(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1605
                self.ptroperator()
                self.state = 1606
                self.ptrdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaratorid(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratoridContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext, 0)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrdeclarator"):
                listener.enterNoptrdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrdeclarator"):
                listener.exitNoptrdeclarator(self)

    def noptrdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 206
        self.enterRecursionRule(localctx, 206, self.RULE_noptrdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1619
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Operator, CPP14Parser.Tilde, CPP14Parser.Doublecolon,
                         CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                self.state = 1611
                self.declaratorid()
                self.state = 1613
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 167, self._ctx)
                if la_ == 1:
                    self.state = 1612
                    self.attributespecifierseq(0)

                pass
            elif token in [CPP14Parser.LeftParen]:
                self.state = 1615
                self.match(CPP14Parser.LeftParen)
                self.state = 1616
                self.ptrdeclarator()
                self.state = 1617
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1634
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 172, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1632
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 171, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1621
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1622
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1623
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1624
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1626
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (
                            CPP14Parser.TrueToken - 66)) | (1 << (CPP14Parser.Typeid - 66)) | (
                            1 << (CPP14Parser.Typename - 66)) | (1 << (CPP14Parser.Unsigned - 66)) | (
                            1 << (CPP14Parser.Void - 66)) | (1 << (CPP14Parser.Wchar - 66)) | (
                            1 << (CPP14Parser.LeftParen - 66)) | (1 << (CPP14Parser.LeftBracket - 66)) | (
                            1 << (CPP14Parser.Plus - 66)) | (1 << (CPP14Parser.Minus - 66)) | (
                            1 << (CPP14Parser.Star - 66)) | (1 << (CPP14Parser.And - 66)) | (
                            1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                            1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                            1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                            1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Integerliteral - 66)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 1625
                            self.constantexpression()

                        self.state = 1628
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1630
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 170, self._ctx)
                        if la_ == 1:
                            self.state = 1629
                            self.attributespecifierseq(0)

                        pass

                self.state = 1636
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 172, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParametersandqualifiersContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationclauseContext, 0)

        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext, 0)

        def refqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.RefqualifierContext, 0)

        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionspecificationContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parametersandqualifiers

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParametersandqualifiers"):
                listener.enterParametersandqualifiers(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParametersandqualifiers"):
                listener.exitParametersandqualifiers(self)

    def parametersandqualifiers(self):

        localctx = CPP14Parser.ParametersandqualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_parametersandqualifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1637
            self.match(CPP14Parser.LeftParen)
            self.state = 1638
            self.parameterdeclarationclause()
            self.state = 1639
            self.match(CPP14Parser.RightParen)
            self.state = 1641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 173, self._ctx)
            if la_ == 1:
                self.state = 1640
                self.cvqualifierseq()

            self.state = 1644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 174, self._ctx)
            if la_ == 1:
                self.state = 1643
                self.refqualifier()

            self.state = 1647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 175, self._ctx)
            if la_ == 1:
                self.state = 1646
                self.exceptionspecification()

            self.state = 1650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 176, self._ctx)
            if la_ == 1:
                self.state = 1649
                self.attributespecifierseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingreturntypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingreturntype

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrailingreturntype"):
                listener.enterTrailingreturntype(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrailingreturntype"):
                listener.exitTrailingreturntype(self)

    def trailingreturntype(self):

        localctx = CPP14Parser.TrailingreturntypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_trailingreturntype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1652
            self.match(CPP14Parser.Arrow)
            self.state = 1653
            self.trailingtypespecifierseq()
            self.state = 1655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 177, self._ctx)
            if la_ == 1:
                self.state = 1654
                self.abstractdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtroperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptroperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPtroperator"):
                listener.enterPtroperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPtroperator"):
                listener.exitPtroperator(self)

    def ptroperator(self):

        localctx = CPP14Parser.PtroperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_ptroperator)
        try:
            self.state = 1680
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Star]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1657
                self.match(CPP14Parser.Star)
                self.state = 1659
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 178, self._ctx)
                if la_ == 1:
                    self.state = 1658
                    self.attributespecifierseq(0)

                self.state = 1662
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 179, self._ctx)
                if la_ == 1:
                    self.state = 1661
                    self.cvqualifierseq()

                pass
            elif token in [CPP14Parser.And]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1664
                self.match(CPP14Parser.And)
                self.state = 1666
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 180, self._ctx)
                if la_ == 1:
                    self.state = 1665
                    self.attributespecifierseq(0)

                pass
            elif token in [CPP14Parser.AndAnd]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1668
                self.match(CPP14Parser.AndAnd)
                self.state = 1670
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 181, self._ctx)
                if la_ == 1:
                    self.state = 1669
                    self.attributespecifierseq(0)

                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1672
                self.nestednamespecifier(0)
                self.state = 1673
                self.match(CPP14Parser.Star)
                self.state = 1675
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 182, self._ctx)
                if la_ == 1:
                    self.state = 1674
                    self.attributespecifierseq(0)

                self.state = 1678
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 183, self._ctx)
                if la_ == 1:
                    self.state = 1677
                    self.cvqualifierseq()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CvqualifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cvqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierContext, 0)

        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_cvqualifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCvqualifierseq"):
                listener.enterCvqualifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCvqualifierseq"):
                listener.exitCvqualifierseq(self)

    def cvqualifierseq(self):

        localctx = CPP14Parser.CvqualifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_cvqualifierseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1682
            self.cvqualifier()
            self.state = 1684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 185, self._ctx)
            if la_ == 1:
                self.state = 1683
                self.cvqualifierseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CvqualifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(CPP14Parser.Const, 0)

        def Volatile(self):
            return self.getToken(CPP14Parser.Volatile, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_cvqualifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCvqualifier"):
                listener.enterCvqualifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCvqualifier"):
                listener.exitCvqualifier(self)

    def cvqualifier(self):

        localctx = CPP14Parser.CvqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_cvqualifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1686
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.Const or _la == CPP14Parser.Volatile):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RefqualifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return CPP14Parser.RULE_refqualifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRefqualifier"):
                listener.enterRefqualifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRefqualifier"):
                listener.exitRefqualifier(self)

    def refqualifier(self):

        localctx = CPP14Parser.RefqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_refqualifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1688
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclaratoridContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declaratorid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclaratorid"):
                listener.enterDeclaratorid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclaratorid"):
                listener.exitDeclaratorid(self)

    def declaratorid(self):

        localctx = CPP14Parser.DeclaratoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_declaratorid)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Ellipsis:
                self.state = 1690
                self.match(CPP14Parser.Ellipsis)

            self.state = 1693
            self.idexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThetypeidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_thetypeid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterThetypeid"):
                listener.enterThetypeid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitThetypeid"):
                listener.exitThetypeid(self)

    def thetypeid(self):

        localctx = CPP14Parser.ThetypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_thetypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1695
            self.typespecifierseq()
            self.state = 1697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 187, self._ctx)
            if la_ == 1:
                self.state = 1696
                self.abstractdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingreturntypeContext, 0)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractpackdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbstractdeclarator"):
                listener.enterAbstractdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbstractdeclarator"):
                listener.exitAbstractdeclarator(self)

    def abstractdeclarator(self):

        localctx = CPP14Parser.AbstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_abstractdeclarator)
        try:
            self.state = 1707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 189, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1699
                self.ptrabstractdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1701
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 188, self._ctx)
                if la_ == 1:
                    self.state = 1700
                    self.noptrabstractdeclarator(0)

                self.state = 1703
                self.parametersandqualifiers()
                self.state = 1704
                self.trailingreturntype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1706
                self.abstractpackdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrabstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPtrabstractdeclarator"):
                listener.enterPtrabstractdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPtrabstractdeclarator"):
                listener.exitPtrabstractdeclarator(self)

    def ptrabstractdeclarator(self):

        localctx = CPP14Parser.PtrabstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_ptrabstractdeclarator)
        try:
            self.state = 1714
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1709
                self.noptrabstractdeclarator(0)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                           CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1710
                self.ptroperator()
                self.state = 1712
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 190, self._ctx)
                if la_ == 1:
                    self.state = 1711
                    self.ptrabstractdeclarator()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrabstractdeclarator"):
                listener.enterNoptrabstractdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrabstractdeclarator"):
                listener.exitNoptrabstractdeclarator(self)

    def noptrabstractdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 228
        self.enterRecursionRule(localctx, 228, self.RULE_noptrabstractdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 194, self._ctx)
            if la_ == 1:
                self.state = 1717
                self.parametersandqualifiers()
                pass

            elif la_ == 2:
                self.state = 1718
                self.match(CPP14Parser.LeftBracket)
                self.state = 1720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.TrueToken - 66)) | (
                    1 << (CPP14Parser.Typeid - 66)) | (1 << (CPP14Parser.Typename - 66)) | (
                    1 << (CPP14Parser.Unsigned - 66)) | (1 << (CPP14Parser.Void - 66)) | (
                    1 << (CPP14Parser.Wchar - 66)) | (1 << (CPP14Parser.LeftParen - 66)) | (
                    1 << (CPP14Parser.LeftBracket - 66)) | (1 << (CPP14Parser.Plus - 66)) | (
                    1 << (CPP14Parser.Minus - 66)) | (1 << (CPP14Parser.Star - 66)) | (1 << (CPP14Parser.And - 66)) | (
                    1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                    1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                    1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                    1 << (CPP14Parser.Integerliteral - 66)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                    (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                    1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 1719
                    self.constantexpression()

                self.state = 1722
                self.match(CPP14Parser.RightBracket)
                self.state = 1724
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 193, self._ctx)
                if la_ == 1:
                    self.state = 1723
                    self.attributespecifierseq(0)

                pass

            elif la_ == 3:
                self.state = 1726
                self.match(CPP14Parser.LeftParen)
                self.state = 1727
                self.ptrabstractdeclarator()
                self.state = 1728
                self.match(CPP14Parser.RightParen)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 1745
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 198, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1743
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 197, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1732
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1733
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1734
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1735
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1737
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (
                            CPP14Parser.TrueToken - 66)) | (1 << (CPP14Parser.Typeid - 66)) | (
                            1 << (CPP14Parser.Typename - 66)) | (1 << (CPP14Parser.Unsigned - 66)) | (
                            1 << (CPP14Parser.Void - 66)) | (1 << (CPP14Parser.Wchar - 66)) | (
                            1 << (CPP14Parser.LeftParen - 66)) | (1 << (CPP14Parser.LeftBracket - 66)) | (
                            1 << (CPP14Parser.Plus - 66)) | (1 << (CPP14Parser.Minus - 66)) | (
                            1 << (CPP14Parser.Star - 66)) | (1 << (CPP14Parser.And - 66)) | (
                            1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                            1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                            1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                            1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Integerliteral - 66)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 1736
                            self.constantexpression()

                        self.state = 1739
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1741
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 196, self._ctx)
                        if la_ == 1:
                            self.state = 1740
                            self.attributespecifierseq(0)

                        pass

                self.state = 1747
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 198, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AbstractpackdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractpackdeclaratorContext, 0)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractpackdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractpackdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbstractpackdeclarator"):
                listener.enterAbstractpackdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbstractpackdeclarator"):
                listener.exitAbstractpackdeclarator(self)

    def abstractpackdeclarator(self):

        localctx = CPP14Parser.AbstractpackdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_abstractpackdeclarator)
        try:
            self.state = 1752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Ellipsis]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1748
                self.noptrabstractpackdeclarator(0)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                           CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1749
                self.ptroperator()
                self.state = 1750
                self.abstractpackdeclarator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrabstractpackdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractpackdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractpackdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrabstractpackdeclarator"):
                listener.enterNoptrabstractpackdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrabstractpackdeclarator"):
                listener.exitNoptrabstractpackdeclarator(self)

    def noptrabstractpackdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 232
        self.enterRecursionRule(localctx, 232, self.RULE_noptrabstractpackdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1755
            self.match(CPP14Parser.Ellipsis)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1770
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 203, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1768
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 202, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1757
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1758
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1759
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1760
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1762
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (
                            CPP14Parser.TrueToken - 66)) | (1 << (CPP14Parser.Typeid - 66)) | (
                            1 << (CPP14Parser.Typename - 66)) | (1 << (CPP14Parser.Unsigned - 66)) | (
                            1 << (CPP14Parser.Void - 66)) | (1 << (CPP14Parser.Wchar - 66)) | (
                            1 << (CPP14Parser.LeftParen - 66)) | (1 << (CPP14Parser.LeftBracket - 66)) | (
                            1 << (CPP14Parser.Plus - 66)) | (1 << (CPP14Parser.Minus - 66)) | (
                            1 << (CPP14Parser.Star - 66)) | (1 << (CPP14Parser.And - 66)) | (
                            1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                            1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                            1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                            1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Integerliteral - 66)))) != 0) or (
                                (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                                (1 << (CPP14Parser.Characterliteral - 133)) | (
                                                1 << (CPP14Parser.Floatingliteral - 133)) | (
                                            1 << (CPP14Parser.Stringliteral - 133)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                            self.state = 1761
                            self.constantexpression()

                        self.state = 1764
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1766
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 201, self._ctx)
                        if la_ == 1:
                            self.state = 1765
                            self.attributespecifierseq(0)

                        pass

                self.state = 1772
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 203, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParameterdeclarationclauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclarationclause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterdeclarationclause"):
                listener.enterParameterdeclarationclause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterdeclarationclause"):
                listener.exitParameterdeclarationclause(self)

    def parameterdeclarationclause(self):

        localctx = CPP14Parser.ParameterdeclarationclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_parameterdeclarationclause)
        self._la = 0  # Token type
        try:
            self.state = 1783
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 206, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                    1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                    1 << CPP14Parser.Static) | (1 << CPP14Parser.Struct))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and (
                    (1 << (_la - 64)) & ((1 << (CPP14Parser.Thread_local - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                    1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (
                    1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)))) != 0):
                    self.state = 1773
                    self.parameterdeclarationlist(0)

                self.state = 1777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1776
                    self.match(CPP14Parser.Ellipsis)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1779
                self.parameterdeclarationlist(0)
                self.state = 1780
                self.match(CPP14Parser.Comma)
                self.state = 1781
                self.match(CPP14Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterdeclarationlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, 0)

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclarationlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterdeclarationlist"):
                listener.enterParameterdeclarationlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterdeclarationlist"):
                listener.exitParameterdeclarationlist(self)

    def parameterdeclarationlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ParameterdeclarationlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 236
        self.enterRecursionRule(localctx, 236, self.RULE_parameterdeclarationlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1786
            self.parameterdeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1793
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 207, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ParameterdeclarationlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_parameterdeclarationlist)
                    self.state = 1788
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1789
                    self.match(CPP14Parser.Comma)
                    self.state = 1790
                    self.parameterdeclaration()
                self.state = 1795
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 207, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParameterdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterdeclaration"):
                listener.enterParameterdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterdeclaration"):
                listener.exitParameterdeclaration(self)

    def parameterdeclaration(self):

        localctx = CPP14Parser.ParameterdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_parameterdeclaration)
        self._la = 0  # Token type
        try:
            self.state = 1827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 214, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1796
                    self.attributespecifierseq(0)

                self.state = 1799
                self.declspecifierseq()
                self.state = 1800
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1802
                    self.attributespecifierseq(0)

                self.state = 1805
                self.declspecifierseq()
                self.state = 1806
                self.declarator()
                self.state = 1807
                self.match(CPP14Parser.Assign)
                self.state = 1808
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1810
                    self.attributespecifierseq(0)

                self.state = 1813
                self.declspecifierseq()
                self.state = 1815
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 211, self._ctx)
                if la_ == 1:
                    self.state = 1814
                    self.abstractdeclarator()

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1817
                    self.attributespecifierseq(0)

                self.state = 1820
                self.declspecifierseq()
                self.state = 1822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & (
                                            (1 << (CPP14Parser.LeftParen - 79)) | (
                                            1 << (CPP14Parser.LeftBracket - 79)) | (1 << (CPP14Parser.Star - 79)) | (
                                    1 << (CPP14Parser.And - 79)) | (1 << (CPP14Parser.AndAnd - 79)) | (
                            1 << (CPP14Parser.Doublecolon - 79)) | (1 << (CPP14Parser.Ellipsis - 79)) | (
                    1 << (CPP14Parser.Identifier - 79)))) != 0):
                    self.state = 1821
                    self.abstractdeclarator()

                self.state = 1824
                self.match(CPP14Parser.Assign)
                self.state = 1825
                self.initializerclause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctiondefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def functionbody(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionbodyContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functiondefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctiondefinition"):
                listener.enterFunctiondefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctiondefinition"):
                listener.exitFunctiondefinition(self)

    def functiondefinition(self):

        localctx = CPP14Parser.FunctiondefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_functiondefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 1829
                self.attributespecifierseq(0)

            self.state = 1833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 216, self._ctx)
            if la_ == 1:
                self.state = 1832
                self.declspecifierseq()

            self.state = 1835
            self.declarator()
            self.state = 1837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Final or _la == CPP14Parser.Override:
                self.state = 1836
                self.virtspecifierseq(0)

            self.state = 1839
            self.functionbody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionbodyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext, 0)

        def ctorinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.CtorinitializerContext, 0)

        def functiontryblock(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiontryblockContext, 0)

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functionbody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionbody"):
                listener.enterFunctionbody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionbody"):
                listener.exitFunctionbody(self)

    def functionbody(self):

        localctx = CPP14Parser.FunctionbodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_functionbody)
        self._la = 0  # Token type
        try:
            self.state = 1852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 219, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1841
                    self.ctorinitializer()

                self.state = 1844
                self.compoundstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1845
                self.functiontryblock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1846
                self.match(CPP14Parser.Assign)
                self.state = 1847
                self.match(CPP14Parser.Default)
                self.state = 1848
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1849
                self.match(CPP14Parser.Assign)
                self.state = 1850
                self.match(CPP14Parser.Delete)
                self.state = 1851
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def braceorequalinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.BraceorequalinitializerContext, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitializer"):
                listener.enterInitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitializer"):
                listener.exitInitializer(self)

    def initializer(self):

        localctx = CPP14Parser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_initializer)
        try:
            self.state = 1859
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBrace, CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1854
                self.braceorequalinitializer()
                pass
            elif token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1855
                self.match(CPP14Parser.LeftParen)
                self.state = 1856
                self.expressionlist()
                self.state = 1857
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BraceorequalinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_braceorequalinitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBraceorequalinitializer"):
                listener.enterBraceorequalinitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBraceorequalinitializer"):
                listener.exitBraceorequalinitializer(self)

    def braceorequalinitializer(self):

        localctx = CPP14Parser.BraceorequalinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_braceorequalinitializer)
        try:
            self.state = 1864
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1861
                self.match(CPP14Parser.Assign)
                self.state = 1862
                self.initializerclause()
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1863
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerclauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerclause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitializerclause"):
                listener.enterInitializerclause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitializerclause"):
                listener.exitInitializerclause(self)

    def initializerclause(self):

        localctx = CPP14Parser.InitializerclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_initializerclause)
        try:
            self.state = 1868
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16,
                         CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype, CPP14Parser.Delete,
                         CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.FalseToken, CPP14Parser.Float,
                         CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Nullptr,
                         CPP14Parser.Operator, CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed,
                         CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw,
                         CPP14Parser.TrueToken, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.Unsigned,
                         CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                         CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                         CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                         CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Integerliteral,
                         CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral,
                         CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral,
                         CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1866
                self.assignmentexpression()
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1867
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitializerlist"):
                listener.enterInitializerlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitializerlist"):
                listener.exitInitializerlist(self)

    def initializerlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InitializerlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 250
        self.enterRecursionRule(localctx, 250, self.RULE_initializerlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1871
            self.initializerclause()
            self.state = 1873
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 223, self._ctx)
            if la_ == 1:
                self.state = 1872
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1883
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 225, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InitializerlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initializerlist)
                    self.state = 1875
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1876
                    self.match(CPP14Parser.Comma)
                    self.state = 1877
                    self.initializerclause()
                    self.state = 1879
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 224, self._ctx)
                    if la_ == 1:
                        self.state = 1878
                        self.match(CPP14Parser.Ellipsis)

                self.state = 1885
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 225, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BracedinitlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_bracedinitlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBracedinitlist"):
                listener.enterBracedinitlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBracedinitlist"):
                listener.exitBracedinitlist(self)

    def bracedinitlist(self):

        localctx = CPP14Parser.BracedinitlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_bracedinitlist)
        self._la = 0  # Token type
        try:
            self.state = 1895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 227, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1886
                self.match(CPP14Parser.LeftBrace)
                self.state = 1887
                self.initializerlist(0)
                self.state = 1889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Comma:
                    self.state = 1888
                    self.match(CPP14Parser.Comma)

                self.state = 1891
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1893
                self.match(CPP14Parser.LeftBrace)
                self.state = 1894
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassnameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classname

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassname"):
                listener.enterClassname(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassname"):
                listener.exitClassname(self)

    def classname(self):

        localctx = CPP14Parser.ClassnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_classname)
        try:
            self.state = 1899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 228, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1897
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1898
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classhead(self):
            return self.getTypedRuleContext(CPP14Parser.ClassheadContext, 0)

        def memberspecification(self):
            return self.getTypedRuleContext(CPP14Parser.MemberspecificationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classspecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassspecifier"):
                listener.enterClassspecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassspecifier"):
                listener.exitClassspecifier(self)

    def classspecifier(self):

        localctx = CPP14Parser.ClassspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_classspecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1901
            self.classhead()
            self.state = 1902
            self.match(CPP14Parser.LeftBrace)
            self.state = 1904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (
                1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (
                1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                1 << CPP14Parser.Operator) | (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (
                1 << CPP14Parser.Public) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (
                1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (
                1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and (
                (1 << (_la - 64)) & ((1 << (CPP14Parser.Thread_local - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (
                1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.Colon - 64)) | (
                1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Semi - 64)) | (
                1 << (CPP14Parser.Ellipsis - 64)) | (1 << (CPP14Parser.Identifier - 64)))) != 0):
                self.state = 1903
                self.memberspecification()

            self.state = 1906
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassheadContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classkey(self):
            return self.getTypedRuleContext(CPP14Parser.ClasskeyContext, 0)

        def classheadname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassheadnameContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def classvirtspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.ClassvirtspecifierContext, 0)

        def baseclause(self):
            return self.getTypedRuleContext(CPP14Parser.BaseclauseContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classhead

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClasshead"):
                listener.enterClasshead(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClasshead"):
                listener.exitClasshead(self)

    def classhead(self):

        localctx = CPP14Parser.ClassheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_classhead)
        self._la = 0  # Token type
        try:
            self.state = 1926
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 235, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1908
                self.classkey()
                self.state = 1910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1909
                    self.attributespecifierseq(0)

                self.state = 1912
                self.classheadname()
                self.state = 1914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Final:
                    self.state = 1913
                    self.classvirtspecifier()

                self.state = 1917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1916
                    self.baseclause()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1919
                self.classkey()
                self.state = 1921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1920
                    self.attributespecifierseq(0)

                self.state = 1924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1923
                    self.baseclause()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassheadnameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classheadname

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassheadname"):
                listener.enterClassheadname(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassheadname"):
                listener.exitClassheadname(self)

    def classheadname(self):

        localctx = CPP14Parser.ClassheadnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_classheadname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1929
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 236, self._ctx)
            if la_ == 1:
                self.state = 1928
                self.nestednamespecifier(0)

            self.state = 1931
            self.classname()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassvirtspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classvirtspecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassvirtspecifier"):
                listener.enterClassvirtspecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassvirtspecifier"):
                listener.exitClassvirtspecifier(self)

    def classvirtspecifier(self):

        localctx = CPP14Parser.ClassvirtspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_classvirtspecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1933
            self.match(CPP14Parser.Final)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClasskeyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def Union(self):
            return self.getToken(CPP14Parser.Union, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classkey

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClasskey"):
                listener.enterClasskey(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClasskey"):
                listener.exitClasskey(self)

    def classkey(self):

        localctx = CPP14Parser.ClasskeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_classkey)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1935
            _la = self._input.LA(1)
            if not (((((_la - 15)) & ~0x3f) == 0 and ((1 << (_la - 15)) & (
                    (1 << (CPP14Parser.Class - 15)) | (1 << (CPP14Parser.Struct - 15)) | (
                1 << (CPP14Parser.Union - 15)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclarationContext, 0)

        def memberspecification(self):
            return self.getTypedRuleContext(CPP14Parser.MemberspecificationContext, 0)

        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AccessspecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberspecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberspecification"):
                listener.enterMemberspecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberspecification"):
                listener.exitMemberspecification(self)

    def memberspecification(self):

        localctx = CPP14Parser.MemberspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_memberspecification)
        self._la = 0  # Token type
        try:
            self.state = 1946
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignas, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16,
                         CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Constexpr,
                         CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Explicit,
                         CPP14Parser.Extern, CPP14Parser.Float, CPP14Parser.Friend, CPP14Parser.Inline, CPP14Parser.Int,
                         CPP14Parser.Long, CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Register,
                         CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Static, CPP14Parser.Static_assert,
                         CPP14Parser.Struct, CPP14Parser.Template, CPP14Parser.Thread_local, CPP14Parser.Typedef,
                         CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Using,
                         CPP14Parser.Virtual, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar,
                         CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Star, CPP14Parser.And,
                         CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Colon, CPP14Parser.Doublecolon,
                         CPP14Parser.Semi, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1937
                self.memberdeclaration()
                self.state = 1939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                    1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (
                    1 << CPP14Parser.Public) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (
                    1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (
                    1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and (
                    (1 << (_la - 64)) & ((1 << (CPP14Parser.Thread_local - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                    1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                    1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                    1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.Colon - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Semi - 64)) | (
                    1 << (CPP14Parser.Ellipsis - 64)) | (1 << (CPP14Parser.Identifier - 64)))) != 0):
                    self.state = 1938
                    self.memberspecification()

                pass
            elif token in [CPP14Parser.Private, CPP14Parser.Protected, CPP14Parser.Public]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1941
                self.accessspecifier()
                self.state = 1942
                self.match(CPP14Parser.Colon)
                self.state = 1944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                    1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (
                    1 << CPP14Parser.Public) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (
                    1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (
                    1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and (
                    (1 << (_la - 64)) & ((1 << (CPP14Parser.Thread_local - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                    1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                    1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                    1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.Colon - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Semi - 64)) | (
                    1 << (CPP14Parser.Ellipsis - 64)) | (1 << (CPP14Parser.Identifier - 64)))) != 0):
                    self.state = 1943
                    self.memberspecification()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorlistContext, 0)

        def functiondefinition(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiondefinitionContext, 0)

        def usingdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.UsingdeclarationContext, 0)

        def static_assertdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.Static_assertdeclarationContext, 0)

        def templatedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.TemplatedeclarationContext, 0)

        def aliasdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.AliasdeclarationContext, 0)

        def emptydeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.EmptydeclarationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberdeclaration"):
                listener.enterMemberdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberdeclaration"):
                listener.exitMemberdeclaration(self)

    def memberdeclaration(self):

        localctx = CPP14Parser.MemberdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_memberdeclaration)
        self._la = 0  # Token type
        try:
            self.state = 1964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 243, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1949
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 240, self._ctx)
                if la_ == 1:
                    self.state = 1948
                    self.attributespecifierseq(0)

                self.state = 1952
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 241, self._ctx)
                if la_ == 1:
                    self.state = 1951
                    self.declspecifierseq()

                self.state = 1955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Operator))) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & (
                                                    (1 << (CPP14Parser.LeftParen - 79)) | (
                                                    1 << (CPP14Parser.LeftBracket - 79)) | (
                                                1 << (CPP14Parser.Star - 79)) | (1 << (CPP14Parser.And - 79)) | (
                                        1 << (CPP14Parser.Tilde - 79)) | (1 << (CPP14Parser.AndAnd - 79)) | (
                                1 << (CPP14Parser.Colon - 79)) | (1 << (CPP14Parser.Doublecolon - 79)) | (
                        1 << (CPP14Parser.Ellipsis - 79)) | (1 << (CPP14Parser.Identifier - 79)))) != 0):
                    self.state = 1954
                    self.memberdeclaratorlist(0)

                self.state = 1957
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1958
                self.functiondefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1959
                self.usingdeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1960
                self.static_assertdeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1961
                self.templatedeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1962
                self.aliasdeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1963
                self.emptydeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberdeclaratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorContext, 0)

        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaratorlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberdeclaratorlist"):
                listener.enterMemberdeclaratorlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberdeclaratorlist"):
                listener.exitMemberdeclaratorlist(self)

    def memberdeclaratorlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.MemberdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 270
        self.enterRecursionRule(localctx, 270, self.RULE_memberdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1967
            self.memberdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1974
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 244, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.MemberdeclaratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_memberdeclaratorlist)
                    self.state = 1969
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1970
                    self.match(CPP14Parser.Comma)
                    self.state = 1971
                    self.memberdeclarator()
                self.state = 1976
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 244, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class MemberdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext, 0)

        def purespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.PurespecifierContext, 0)

        def braceorequalinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.BraceorequalinitializerContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberdeclarator"):
                listener.enterMemberdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberdeclarator"):
                listener.exitMemberdeclarator(self)

    def memberdeclarator(self):

        localctx = CPP14Parser.MemberdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_memberdeclarator)
        self._la = 0  # Token type
        try:
            self.state = 1996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 250, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1977
                self.declarator()
                self.state = 1979
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 245, self._ctx)
                if la_ == 1:
                    self.state = 1978
                    self.virtspecifierseq(0)

                self.state = 1982
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 246, self._ctx)
                if la_ == 1:
                    self.state = 1981
                    self.purespecifier()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1984
                self.declarator()
                self.state = 1986
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 247, self._ctx)
                if la_ == 1:
                    self.state = 1985
                    self.braceorequalinitializer()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1989
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 1988
                    self.match(CPP14Parser.Identifier)

                self.state = 1992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1991
                    self.attributespecifierseq(0)

                self.state = 1994
                self.match(CPP14Parser.Colon)
                self.state = 1995
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VirtspecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def virtspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierContext, 0)

        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_virtspecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVirtspecifierseq"):
                listener.enterVirtspecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVirtspecifierseq"):
                listener.exitVirtspecifierseq(self)

    def virtspecifierseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.VirtspecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 274
        self.enterRecursionRule(localctx, 274, self.RULE_virtspecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1999
            self.virtspecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2005
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 251, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.VirtspecifierseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_virtspecifierseq)
                    self.state = 2001
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2002
                    self.virtspecifier()
                self.state = 2007
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 251, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class VirtspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Override(self):
            return self.getToken(CPP14Parser.Override, 0)

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_virtspecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVirtspecifier"):
                listener.enterVirtspecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVirtspecifier"):
                listener.exitVirtspecifier(self)

    def virtspecifier(self):

        localctx = CPP14Parser.VirtspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_virtspecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2008
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.Final or _la == CPP14Parser.Override):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PurespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None  # Token

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Octalliteral(self):
            return self.getToken(CPP14Parser.Octalliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_purespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPurespecifier"):
                listener.enterPurespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPurespecifier"):
                listener.exitPurespecifier(self)

    def purespecifier(self):

        localctx = CPP14Parser.PurespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_purespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2010
            self.match(CPP14Parser.Assign)
            self.state = 2011
            localctx.val = self.match(CPP14Parser.Octalliteral)
            if (None if localctx.val is None else localctx.val.text).compareTo("0") != 0:
                raise InputMismatchException(self)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BaseclauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_baseclause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBaseclause"):
                listener.enterBaseclause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBaseclause"):
                listener.exitBaseclause(self)

    def baseclause(self):

        localctx = CPP14Parser.BaseclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_baseclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2014
            self.match(CPP14Parser.Colon)
            self.state = 2015
            self.basespecifierlist(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BasespecifierlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierContext, 0)

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifierlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBasespecifierlist"):
                listener.enterBasespecifierlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBasespecifierlist"):
                listener.exitBasespecifierlist(self)

    def basespecifierlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.BasespecifierlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 282
        self.enterRecursionRule(localctx, 282, self.RULE_basespecifierlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2018
            self.basespecifier()
            self.state = 2020
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 252, self._ctx)
            if la_ == 1:
                self.state = 2019
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2030
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 254, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.BasespecifierlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_basespecifierlist)
                    self.state = 2022
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2023
                    self.match(CPP14Parser.Comma)
                    self.state = 2024
                    self.basespecifier()
                    self.state = 2026
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 253, self._ctx)
                    if la_ == 1:
                        self.state = 2025
                        self.match(CPP14Parser.Ellipsis)

                self.state = 2032
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 254, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BasespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basetypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.BasetypespecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AccessspecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBasespecifier"):
                listener.enterBasespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBasespecifier"):
                listener.exitBasespecifier(self)

    def basespecifier(self):

        localctx = CPP14Parser.BasespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_basespecifier)
        self._la = 0  # Token type
        try:
            self.state = 2054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 260, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2033
                    self.attributespecifierseq(0)

                self.state = 2036
                self.basetypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2037
                    self.attributespecifierseq(0)

                self.state = 2040
                self.match(CPP14Parser.Virtual)
                self.state = 2042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public))) != 0):
                    self.state = 2041
                    self.accessspecifier()

                self.state = 2044
                self.basetypespecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2045
                    self.attributespecifierseq(0)

                self.state = 2048
                self.accessspecifier()
                self.state = 2050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Virtual:
                    self.state = 2049
                    self.match(CPP14Parser.Virtual)

                self.state = 2052
                self.basetypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassordecltypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classordecltype

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassordecltype"):
                listener.enterClassordecltype(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassordecltype"):
                listener.exitClassordecltype(self)

    def classordecltype(self):

        localctx = CPP14Parser.ClassordecltypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_classordecltype)
        try:
            self.state = 2061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 262, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2057
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 261, self._ctx)
                if la_ == 1:
                    self.state = 2056
                    self.nestednamespecifier(0)

                self.state = 2059
                self.classname()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2060
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BasetypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_basetypespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBasetypespecifier"):
                listener.enterBasetypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBasetypespecifier"):
                listener.exitBasetypespecifier(self)

    def basetypespecifier(self):

        localctx = CPP14Parser.BasetypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_basetypespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2063
            self.classordecltype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AccessspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Private(self):
            return self.getToken(CPP14Parser.Private, 0)

        def Protected(self):
            return self.getToken(CPP14Parser.Protected, 0)

        def Public(self):
            return self.getToken(CPP14Parser.Public, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_accessspecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAccessspecifier"):
                listener.enterAccessspecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAccessspecifier"):
                listener.exitAccessspecifier(self)

    def accessspecifier(self):

        localctx = CPP14Parser.AccessspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_accessspecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2065
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConversionfunctionidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def conversiontypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ConversiontypeidContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_conversionfunctionid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConversionfunctionid"):
                listener.enterConversionfunctionid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConversionfunctionid"):
                listener.exitConversionfunctionid(self)

    def conversionfunctionid(self):

        localctx = CPP14Parser.ConversionfunctionidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_conversionfunctionid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2067
            self.match(CPP14Parser.Operator)
            self.state = 2068
            self.conversiontypeid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConversiontypeidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def conversiondeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.ConversiondeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_conversiontypeid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConversiontypeid"):
                listener.enterConversiontypeid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConversiontypeid"):
                listener.exitConversiontypeid(self)

    def conversiontypeid(self):

        localctx = CPP14Parser.ConversiontypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_conversiontypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2070
            self.typespecifierseq()
            self.state = 2072
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 263, self._ctx)
            if la_ == 1:
                self.state = 2071
                self.conversiondeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConversiondeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def conversiondeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.ConversiondeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_conversiondeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConversiondeclarator"):
                listener.enterConversiondeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConversiondeclarator"):
                listener.exitConversiondeclarator(self)

    def conversiondeclarator(self):

        localctx = CPP14Parser.ConversiondeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_conversiondeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2074
            self.ptroperator()
            self.state = 2076
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 264, self._ctx)
            if la_ == 1:
                self.state = 2075
                self.conversiondeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CtorinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ctorinitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCtorinitializer"):
                listener.enterCtorinitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCtorinitializer"):
                listener.exitCtorinitializer(self)

    def ctorinitializer(self):

        localctx = CPP14Parser.CtorinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_ctorinitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2078
            self.match(CPP14Parser.Colon)
            self.state = 2079
            self.meminitializerlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeminitializerlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializer(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerContext, 0)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializerlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeminitializerlist"):
                listener.enterMeminitializerlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeminitializerlist"):
                listener.exitMeminitializerlist(self)

    def meminitializerlist(self):

        localctx = CPP14Parser.MeminitializerlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_meminitializerlist)
        self._la = 0  # Token type
        try:
            self.state = 2092
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 267, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2081
                self.meminitializer()
                self.state = 2083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 2082
                    self.match(CPP14Parser.Ellipsis)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2085
                self.meminitializer()
                self.state = 2087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 2086
                    self.match(CPP14Parser.Ellipsis)

                self.state = 2089
                self.match(CPP14Parser.Comma)
                self.state = 2090
                self.meminitializerlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeminitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializerid(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializeridContext, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeminitializer"):
                listener.enterMeminitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeminitializer"):
                listener.exitMeminitializer(self)

    def meminitializer(self):

        localctx = CPP14Parser.MeminitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_meminitializer)
        self._la = 0  # Token type
        try:
            self.state = 2104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 269, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2094
                self.meminitializerid()
                self.state = 2095
                self.match(CPP14Parser.LeftParen)
                self.state = 2097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Throw - 65)) | (
                    1 << (CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                    1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                    1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                    1 << (CPP14Parser.LeftBrace - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                    (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                    1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 2096
                    self.expressionlist()

                self.state = 2099
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2101
                self.meminitializerid()
                self.state = 2102
                self.bracedinitlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeminitializeridContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializerid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeminitializerid"):
                listener.enterMeminitializerid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeminitializerid"):
                listener.exitMeminitializerid(self)

    def meminitializerid(self):

        localctx = CPP14Parser.MeminitializeridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_meminitializerid)
        try:
            self.state = 2108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 270, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2106
                self.classordecltype()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2107
                self.match(CPP14Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperatorfunctionidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def theoperator(self):
            return self.getTypedRuleContext(CPP14Parser.TheoperatorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_operatorfunctionid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOperatorfunctionid"):
                listener.enterOperatorfunctionid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOperatorfunctionid"):
                listener.exitOperatorfunctionid(self)

    def operatorfunctionid(self):

        localctx = CPP14Parser.OperatorfunctionidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_operatorfunctionid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2110
            self.match(CPP14Parser.Operator)
            self.state = 2111
            self.theoperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteraloperatoridContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_literaloperatorid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLiteraloperatorid"):
                listener.enterLiteraloperatorid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLiteraloperatorid"):
                listener.exitLiteraloperatorid(self)

    def literaloperatorid(self):

        localctx = CPP14Parser.LiteraloperatoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_literaloperatorid)
        try:
            self.state = 2118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 271, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2113
                self.match(CPP14Parser.Operator)
                self.state = 2114
                self.match(CPP14Parser.Stringliteral)
                self.state = 2115
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2116
                self.match(CPP14Parser.Operator)
                self.state = 2117
                self.match(CPP14Parser.Userdefinedstringliteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplatedeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templatedeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplatedeclaration"):
                listener.enterTemplatedeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplatedeclaration"):
                listener.exitTemplatedeclaration(self)

    def templatedeclaration(self):

        localctx = CPP14Parser.TemplatedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_templatedeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2120
            self.match(CPP14Parser.Template)
            self.state = 2121
            self.match(CPP14Parser.Less)
            self.state = 2122
            self.templateparameterlist(0)
            self.state = 2123
            self.match(CPP14Parser.Greater)
            self.state = 2124
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateparameterlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateparameter(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterContext, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameterlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateparameterlist"):
                listener.enterTemplateparameterlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateparameterlist"):
                listener.exitTemplateparameterlist(self)

    def templateparameterlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TemplateparameterlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 312
        self.enterRecursionRule(localctx, 312, self.RULE_templateparameterlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2127
            self.templateparameter()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2134
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 272, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TemplateparameterlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateparameterlist)
                    self.state = 2129
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2130
                    self.match(CPP14Parser.Comma)
                    self.state = 2131
                    self.templateparameter()
                self.state = 2136
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 272, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TemplateparameterContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateparameter"):
                listener.enterTemplateparameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateparameter"):
                listener.exitTemplateparameter(self)

    def templateparameter(self):

        localctx = CPP14Parser.TemplateparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_templateparameter)
        self._la = 0  # Token type
        try:
            self.state = 2186
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 282, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2137
                self.match(CPP14Parser.Class)
                self.state = 2139
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 273, self._ctx)
                if la_ == 1:
                    self.state = 2138
                    self.match(CPP14Parser.Ellipsis)

                self.state = 2142
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 274, self._ctx)
                if la_ == 1:
                    self.state = 2141
                    self.match(CPP14Parser.Identifier)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2144
                self.match(CPP14Parser.Class)
                self.state = 2146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 2145
                    self.match(CPP14Parser.Identifier)

                self.state = 2148
                self.match(CPP14Parser.Assign)
                self.state = 2149
                self.thetypeid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2150
                self.match(CPP14Parser.Typename)
                self.state = 2152
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 276, self._ctx)
                if la_ == 1:
                    self.state = 2151
                    self.match(CPP14Parser.Ellipsis)

                self.state = 2155
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 277, self._ctx)
                if la_ == 1:
                    self.state = 2154
                    self.match(CPP14Parser.Identifier)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2157
                self.match(CPP14Parser.Typename)
                self.state = 2159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 2158
                    self.match(CPP14Parser.Identifier)

                self.state = 2161
                self.match(CPP14Parser.Assign)
                self.state = 2162
                self.thetypeid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2163
                self.match(CPP14Parser.Template)
                self.state = 2164
                self.match(CPP14Parser.Less)
                self.state = 2165
                self.templateparameterlist(0)
                self.state = 2166
                self.match(CPP14Parser.Greater)
                self.state = 2167
                self.match(CPP14Parser.Class)
                self.state = 2169
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 279, self._ctx)
                if la_ == 1:
                    self.state = 2168
                    self.match(CPP14Parser.Ellipsis)

                self.state = 2172
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 280, self._ctx)
                if la_ == 1:
                    self.state = 2171
                    self.match(CPP14Parser.Identifier)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2174
                self.match(CPP14Parser.Template)
                self.state = 2175
                self.match(CPP14Parser.Less)
                self.state = 2176
                self.templateparameterlist(0)
                self.state = 2177
                self.match(CPP14Parser.Greater)
                self.state = 2178
                self.match(CPP14Parser.Class)
                self.state = 2180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 2179
                    self.match(CPP14Parser.Identifier)

                self.state = 2182
                self.match(CPP14Parser.Assign)
                self.state = 2183
                self.idexpression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2185
                self.parameterdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpletemplateidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templatename(self):
            return self.getTypedRuleContext(CPP14Parser.TemplatenameContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_simpletemplateid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpletemplateid"):
                listener.enterSimpletemplateid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpletemplateid"):
                listener.exitSimpletemplateid(self)

    def simpletemplateid(self):

        localctx = CPP14Parser.SimpletemplateidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_simpletemplateid)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2188
            self.templatename()
            self.state = 2189
            self.match(CPP14Parser.Less)
            self.state = 2191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                    (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.TrueToken - 66)) | (
                1 << (CPP14Parser.Typeid - 66)) | (1 << (CPP14Parser.Typename - 66)) | (
                1 << (CPP14Parser.Union - 66)) | (1 << (CPP14Parser.Unsigned - 66)) | (1 << (CPP14Parser.Void - 66)) | (
                1 << (CPP14Parser.Volatile - 66)) | (1 << (CPP14Parser.Wchar - 66)) | (
                1 << (CPP14Parser.LeftParen - 66)) | (1 << (CPP14Parser.LeftBracket - 66)) | (
                1 << (CPP14Parser.Plus - 66)) | (1 << (CPP14Parser.Minus - 66)) | (1 << (CPP14Parser.Star - 66)) | (
                1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Integerliteral - 66)))) != 0) or (
                    (((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & (
                                    (1 << (CPP14Parser.Characterliteral - 133)) | (
                                    1 << (CPP14Parser.Floatingliteral - 133)) | (
                                1 << (CPP14Parser.Stringliteral - 133)) | (
                            1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                self.state = 2190
                self.templateargumentlist(0)

            self.state = 2193
            self.match(CPP14Parser.Greater)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext, 0)

        def operatorfunctionid(self):
            return self.getTypedRuleContext(CPP14Parser.OperatorfunctionidContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def literaloperatorid(self):
            return self.getTypedRuleContext(CPP14Parser.LiteraloperatoridContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateid"):
                listener.enterTemplateid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateid"):
                listener.exitTemplateid(self)

    def templateid(self):

        localctx = CPP14Parser.TemplateidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_templateid)
        self._la = 0  # Token type
        try:
            self.state = 2210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 286, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2195
                self.simpletemplateid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2196
                self.operatorfunctionid()
                self.state = 2197
                self.match(CPP14Parser.Less)
                self.state = 2199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.TrueToken - 66)) | (
                    1 << (CPP14Parser.Typeid - 66)) | (1 << (CPP14Parser.Typename - 66)) | (
                    1 << (CPP14Parser.Union - 66)) | (1 << (CPP14Parser.Unsigned - 66)) | (
                    1 << (CPP14Parser.Void - 66)) | (1 << (CPP14Parser.Volatile - 66)) | (
                    1 << (CPP14Parser.Wchar - 66)) | (1 << (CPP14Parser.LeftParen - 66)) | (
                    1 << (CPP14Parser.LeftBracket - 66)) | (1 << (CPP14Parser.Plus - 66)) | (
                    1 << (CPP14Parser.Minus - 66)) | (1 << (CPP14Parser.Star - 66)) | (1 << (CPP14Parser.And - 66)) | (
                    1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                    1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                    1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                    1 << (CPP14Parser.Integerliteral - 66)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                    (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                    1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 2198
                    self.templateargumentlist(0)

                self.state = 2201
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2203
                self.literaloperatorid()
                self.state = 2204
                self.match(CPP14Parser.Less)
                self.state = 2206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.TrueToken - 66)) | (
                    1 << (CPP14Parser.Typeid - 66)) | (1 << (CPP14Parser.Typename - 66)) | (
                    1 << (CPP14Parser.Union - 66)) | (1 << (CPP14Parser.Unsigned - 66)) | (
                    1 << (CPP14Parser.Void - 66)) | (1 << (CPP14Parser.Volatile - 66)) | (
                    1 << (CPP14Parser.Wchar - 66)) | (1 << (CPP14Parser.LeftParen - 66)) | (
                    1 << (CPP14Parser.LeftBracket - 66)) | (1 << (CPP14Parser.Plus - 66)) | (
                    1 << (CPP14Parser.Minus - 66)) | (1 << (CPP14Parser.Star - 66)) | (1 << (CPP14Parser.And - 66)) | (
                    1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                    1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                    1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                    1 << (CPP14Parser.Integerliteral - 66)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and (
                    (1 << (_la - 133)) & ((1 << (CPP14Parser.Characterliteral - 133)) | (
                    1 << (CPP14Parser.Floatingliteral - 133)) | (1 << (CPP14Parser.Stringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 133)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 133)))) != 0):
                    self.state = 2205
                    self.templateargumentlist(0)

                self.state = 2208
                self.match(CPP14Parser.Greater)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplatenameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templatename

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplatename"):
                listener.enterTemplatename(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplatename"):
                listener.exitTemplatename(self)

    def templatename(self):

        localctx = CPP14Parser.TemplatenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_templatename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2212
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateargumentlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateargument(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargumentlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateargumentlist"):
                listener.enterTemplateargumentlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateargumentlist"):
                listener.exitTemplateargumentlist(self)

    def templateargumentlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TemplateargumentlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 322
        self.enterRecursionRule(localctx, 322, self.RULE_templateargumentlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2215
            self.templateargument()
            self.state = 2217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 287, self._ctx)
            if la_ == 1:
                self.state = 2216
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2227
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 289, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TemplateargumentlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateargumentlist)
                    self.state = 2219
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2220
                    self.match(CPP14Parser.Comma)
                    self.state = 2221
                    self.templateargument()
                    self.state = 2223
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 288, self._ctx)
                    if la_ == 1:
                        self.state = 2222
                        self.match(CPP14Parser.Ellipsis)

                self.state = 2229
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 289, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TemplateargumentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateargument"):
                listener.enterTemplateargument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateargument"):
                listener.exitTemplateargument(self)

    def templateargument(self):

        localctx = CPP14Parser.TemplateargumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_templateargument)
        try:
            self.state = 2233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 290, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2230
                self.thetypeid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2231
                self.constantexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2232
                self.idexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypenamespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typenamespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypenamespecifier"):
                listener.enterTypenamespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypenamespecifier"):
                listener.exitTypenamespecifier(self)

    def typenamespecifier(self):

        localctx = CPP14Parser.TypenamespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_typenamespecifier)
        self._la = 0  # Token type
        try:
            self.state = 2246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 292, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2235
                self.match(CPP14Parser.Typename)
                self.state = 2236
                self.nestednamespecifier(0)
                self.state = 2237
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2239
                self.match(CPP14Parser.Typename)
                self.state = 2240
                self.nestednamespecifier(0)
                self.state = 2242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Template:
                    self.state = 2241
                    self.match(CPP14Parser.Template)

                self.state = 2244
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitinstantiationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_explicitinstantiation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExplicitinstantiation"):
                listener.enterExplicitinstantiation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExplicitinstantiation"):
                listener.exitExplicitinstantiation(self)

    def explicitinstantiation(self):

        localctx = CPP14Parser.ExplicitinstantiationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_explicitinstantiation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Extern:
                self.state = 2248
                self.match(CPP14Parser.Extern)

            self.state = 2251
            self.match(CPP14Parser.Template)
            self.state = 2252
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitspecializationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_explicitspecialization

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExplicitspecialization"):
                listener.enterExplicitspecialization(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExplicitspecialization"):
                listener.exitExplicitspecialization(self)

    def explicitspecialization(self):

        localctx = CPP14Parser.ExplicitspecializationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_explicitspecialization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2254
            self.match(CPP14Parser.Template)
            self.state = 2255
            self.match(CPP14Parser.Less)
            self.state = 2256
            self.match(CPP14Parser.Greater)
            self.state = 2257
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryblockContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext, 0)

        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_tryblock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTryblock"):
                listener.enterTryblock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTryblock"):
                listener.exitTryblock(self)

    def tryblock(self):

        localctx = CPP14Parser.TryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_tryblock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2259
            self.match(CPP14Parser.Try)
            self.state = 2260
            self.compoundstatement()
            self.state = 2261
            self.handlerseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctiontryblockContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext, 0)

        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext, 0)

        def ctorinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.CtorinitializerContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functiontryblock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctiontryblock"):
                listener.enterFunctiontryblock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctiontryblock"):
                listener.exitFunctiontryblock(self)

    def functiontryblock(self):

        localctx = CPP14Parser.FunctiontryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_functiontryblock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2263
            self.match(CPP14Parser.Try)
            self.state = 2265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Colon:
                self.state = 2264
                self.ctorinitializer()

            self.state = 2267
            self.compoundstatement()
            self.state = 2268
            self.handlerseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def handler(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerContext, 0)

        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_handlerseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHandlerseq"):
                listener.enterHandlerseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHandlerseq"):
                listener.exitHandlerseq(self)

    def handlerseq(self):

        localctx = CPP14Parser.HandlerseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_handlerseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2270
            self.handler()
            self.state = 2272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 295, self._ctx)
            if la_ == 1:
                self.state = 2271
                self.handlerseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(CPP14Parser.Catch, 0)

        def exceptiondeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptiondeclarationContext, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_handler

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHandler"):
                listener.enterHandler(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHandler"):
                listener.exitHandler(self)

    def handler(self):

        localctx = CPP14Parser.HandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_handler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2274
            self.match(CPP14Parser.Catch)
            self.state = 2275
            self.match(CPP14Parser.LeftParen)
            self.state = 2276
            self.exceptiondeclaration()
            self.state = 2277
            self.match(CPP14Parser.RightParen)
            self.state = 2278
            self.compoundstatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExceptiondeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exceptiondeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExceptiondeclaration"):
                listener.enterExceptiondeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExceptiondeclaration"):
                listener.exitExceptiondeclaration(self)

    def exceptiondeclaration(self):

        localctx = CPP14Parser.ExceptiondeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_exceptiondeclaration)
        self._la = 0  # Token type
        try:
            self.state = 2294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 299, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2280
                    self.attributespecifierseq(0)

                self.state = 2283
                self.typespecifierseq()
                self.state = 2284
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2286
                    self.attributespecifierseq(0)

                self.state = 2289
                self.typespecifierseq()
                self.state = 2291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & (
                                            (1 << (CPP14Parser.LeftParen - 79)) | (
                                            1 << (CPP14Parser.LeftBracket - 79)) | (1 << (CPP14Parser.Star - 79)) | (
                                    1 << (CPP14Parser.And - 79)) | (1 << (CPP14Parser.AndAnd - 79)) | (
                            1 << (CPP14Parser.Doublecolon - 79)) | (1 << (CPP14Parser.Ellipsis - 79)) | (
                    1 << (CPP14Parser.Identifier - 79)))) != 0):
                    self.state = 2290
                    self.abstractdeclarator()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2293
                self.match(CPP14Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThrowexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_throwexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterThrowexpression"):
                listener.enterThrowexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitThrowexpression"):
                listener.exitThrowexpression(self)

    def throwexpression(self):

        localctx = CPP14Parser.ThrowexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_throwexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2296
            self.match(CPP14Parser.Throw)
            self.state = 2298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 300, self._ctx)
            if la_ == 1:
                self.state = 2297
                self.assignmentexpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExceptionspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamicexceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.DynamicexceptionspecificationContext, 0)

        def noexceptspecification(self):
            return self.getTypedRuleContext(CPP14Parser.NoexceptspecificationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exceptionspecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExceptionspecification"):
                listener.enterExceptionspecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExceptionspecification"):
                listener.exitExceptionspecification(self)

    def exceptionspecification(self):

        localctx = CPP14Parser.ExceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_exceptionspecification)
        try:
            self.state = 2302
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Throw]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2300
                self.dynamicexceptionspecification()
                pass
            elif token in [CPP14Parser.Noexcept]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2301
                self.noexceptspecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DynamicexceptionspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_dynamicexceptionspecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDynamicexceptionspecification"):
                listener.enterDynamicexceptionspecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDynamicexceptionspecification"):
                listener.exitDynamicexceptionspecification(self)

    def dynamicexceptionspecification(self):

        localctx = CPP14Parser.DynamicexceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_dynamicexceptionspecification)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2304
            self.match(CPP14Parser.Throw)
            self.state = 2305
            self.match(CPP14Parser.LeftParen)
            self.state = 2307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (
                1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (
                1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Decltype) | (
                1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Float) | (
                1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Short) | (
                1 << CPP14Parser.Signed) | (1 << CPP14Parser.Struct))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and (
                (1 << (_la - 70)) & ((1 << (CPP14Parser.Typename - 70)) | (1 << (CPP14Parser.Union - 70)) | (
                1 << (CPP14Parser.Unsigned - 70)) | (1 << (CPP14Parser.Void - 70)) | (
                1 << (CPP14Parser.Volatile - 70)) | (1 << (CPP14Parser.Wchar - 70)) | (
                1 << (CPP14Parser.Doublecolon - 70)) | (1 << (CPP14Parser.Identifier - 70)))) != 0):
                self.state = 2306
                self.typeidlist(0)

            self.state = 2309
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeidlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typeidlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeidlist"):
                listener.enterTypeidlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeidlist"):
                listener.exitTypeidlist(self)

    def typeidlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TypeidlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 348
        self.enterRecursionRule(localctx, 348, self.RULE_typeidlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2312
            self.thetypeid()
            self.state = 2314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 303, self._ctx)
            if la_ == 1:
                self.state = 2313
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2324
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 305, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TypeidlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeidlist)
                    self.state = 2316
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2317
                    self.match(CPP14Parser.Comma)
                    self.state = 2318
                    self.thetypeid()
                    self.state = 2320
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 304, self._ctx)
                    if la_ == 1:
                        self.state = 2319
                        self.match(CPP14Parser.Ellipsis)

                self.state = 2326
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 305, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class NoexceptspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noexceptspecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoexceptspecification"):
                listener.enterNoexceptspecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoexceptspecification"):
                listener.exitNoexceptspecification(self)

    def noexceptspecification(self):

        localctx = CPP14Parser.NoexceptspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_noexceptspecification)
        try:
            self.state = 2333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 306, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2327
                self.match(CPP14Parser.Noexcept)
                self.state = 2328
                self.match(CPP14Parser.LeftParen)
                self.state = 2329
                self.constantexpression()
                self.state = 2330
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2332
                self.match(CPP14Parser.Noexcept)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RightShiftContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_rightShift

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRightShift"):
                listener.enterRightShift(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRightShift"):
                listener.exitRightShift(self)

    def rightShift(self):

        localctx = CPP14Parser.RightShiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_rightShift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2335
            self.match(CPP14Parser.Greater)
            self.state = 2336
            self.match(CPP14Parser.Greater)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RightShiftAssignContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_rightShiftAssign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRightShiftAssign"):
                listener.enterRightShiftAssign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRightShiftAssign"):
                listener.exitRightShiftAssign(self)

    def rightShiftAssign(self):

        localctx = CPP14Parser.RightShiftAssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_rightShiftAssign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2338
            self.match(CPP14Parser.Greater)
            self.state = 2339
            self.match(CPP14Parser.Greater)
            self.state = 2340
            self.match(CPP14Parser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TheoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def rightShift(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftContext, 0)

        def rightShiftAssign(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftAssignContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_theoperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTheoperator"):
                listener.enterTheoperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTheoperator"):
                listener.exitTheoperator(self)

    def theoperator(self):

        localctx = CPP14Parser.TheoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_theoperator)
        try:
            self.state = 2390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 307, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2342
                self.match(CPP14Parser.New)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2343
                self.match(CPP14Parser.Delete)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2344
                self.match(CPP14Parser.New)
                self.state = 2345
                self.match(CPP14Parser.LeftBracket)
                self.state = 2346
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2347
                self.match(CPP14Parser.Delete)
                self.state = 2348
                self.match(CPP14Parser.LeftBracket)
                self.state = 2349
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2350
                self.match(CPP14Parser.Plus)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2351
                self.match(CPP14Parser.Minus)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2352
                self.match(CPP14Parser.Star)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2353
                self.match(CPP14Parser.Div)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2354
                self.match(CPP14Parser.Mod)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2355
                self.match(CPP14Parser.Caret)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2356
                self.match(CPP14Parser.And)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2357
                self.match(CPP14Parser.Or)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2358
                self.match(CPP14Parser.Tilde)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2359
                self.match(CPP14Parser.Not)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2360
                self.match(CPP14Parser.Assign)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2361
                self.match(CPP14Parser.Less)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2362
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2363
                self.match(CPP14Parser.PlusAssign)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2364
                self.match(CPP14Parser.MinusAssign)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2365
                self.match(CPP14Parser.StarAssign)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2366
                self.match(CPP14Parser.DivAssign)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2367
                self.match(CPP14Parser.ModAssign)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2368
                self.match(CPP14Parser.XorAssign)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2369
                self.match(CPP14Parser.AndAssign)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2370
                self.match(CPP14Parser.OrAssign)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2371
                self.match(CPP14Parser.LeftShift)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2372
                self.rightShift()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2373
                self.rightShiftAssign()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2374
                self.match(CPP14Parser.LeftShiftAssign)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2375
                self.match(CPP14Parser.Equal)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2376
                self.match(CPP14Parser.NotEqual)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2377
                self.match(CPP14Parser.LessEqual)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2378
                self.match(CPP14Parser.GreaterEqual)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 2379
                self.match(CPP14Parser.AndAnd)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 2380
                self.match(CPP14Parser.OrOr)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 2381
                self.match(CPP14Parser.PlusPlus)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 2382
                self.match(CPP14Parser.MinusMinus)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2383
                self.match(CPP14Parser.Comma)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2384
                self.match(CPP14Parser.ArrowStar)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2385
                self.match(CPP14Parser.Arrow)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2386
                self.match(CPP14Parser.LeftParen)
                self.state = 2387
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 2388
                self.match(CPP14Parser.LeftBracket)
                self.state = 2389
                self.match(CPP14Parser.RightBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integerliteral(self):
            return self.getToken(CPP14Parser.Integerliteral, 0)

        def Characterliteral(self):
            return self.getToken(CPP14Parser.Characterliteral, 0)

        def Floatingliteral(self):
            return self.getToken(CPP14Parser.Floatingliteral, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def FalseToken(self):
            return self.getToken(CPP14Parser.FalseToken, 0)

        def TrueToken(self):
            return self.getToken(CPP14Parser.TrueToken, 0)

        def Nullptr(self):
            return self.getToken(CPP14Parser.Nullptr, 0)

        def userdefinedliteral(self):
            return self.getTypedRuleContext(CPP14Parser.UserdefinedliteralContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_literal

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLiteral"):
                listener.enterLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLiteral"):
                listener.exitLiteral(self)

    def literal(self):

        localctx = CPP14Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_literal)
        try:
            self.state = 2400
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Integerliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2392
                self.match(CPP14Parser.Integerliteral)
                pass
            elif token in [CPP14Parser.Characterliteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2393
                self.match(CPP14Parser.Characterliteral)
                pass
            elif token in [CPP14Parser.Floatingliteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2394
                self.match(CPP14Parser.Floatingliteral)
                pass
            elif token in [CPP14Parser.Stringliteral]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2395
                self.match(CPP14Parser.Stringliteral)
                pass
            elif token in [CPP14Parser.FalseToken]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2396
                self.match(CPP14Parser.FalseToken)
                pass
            elif token in [CPP14Parser.TrueToken]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2397
                self.match(CPP14Parser.TrueToken)
                pass
            elif token in [CPP14Parser.Nullptr]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2398
                self.match(CPP14Parser.Nullptr)
                pass
            elif token in [CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral,
                           CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2399
                self.userdefinedliteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UserdefinedliteralContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Userdefinedintegerliteral(self):
            return self.getToken(CPP14Parser.Userdefinedintegerliteral, 0)

        def Userdefinedfloatingliteral(self):
            return self.getToken(CPP14Parser.Userdefinedfloatingliteral, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def Userdefinedcharacterliteral(self):
            return self.getToken(CPP14Parser.Userdefinedcharacterliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_userdefinedliteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUserdefinedliteral"):
                listener.enterUserdefinedliteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUserdefinedliteral"):
                listener.exitUserdefinedliteral(self)

    def userdefinedliteral(self):

        localctx = CPP14Parser.UserdefinedliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_userdefinedliteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2402
            _la = self._input.LA(1)
            if not (((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & (
                        (1 << (CPP14Parser.Userdefinedintegerliteral - 136)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 136)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 136)) | (
                1 << (CPP14Parser.Userdefinedcharacterliteral - 136)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[5] = self.nestednamespecifier_sempred
        self._predicates[6] = self.capturelist_sempred
        self._predicates[9] = self.postfixexpression_sempred
        self._predicates[18] = self.noptrnewdeclarator_sempred
        self._predicates[22] = self.pmexpression_sempred
        self._predicates[23] = self.multiplicativeexpression_sempred
        self._predicates[24] = self.additiveexpression_sempred
        self._predicates[25] = self.shiftexpression_sempred
        self._predicates[26] = self.relationalexpression_sempred
        self._predicates[27] = self.equalityexpression_sempred
        self._predicates[28] = self.andexpression_sempred
        self._predicates[29] = self.exclusiveorexpression_sempred
        self._predicates[30] = self.inclusiveorexpression_sempred
        self._predicates[31] = self.logicalandexpression_sempred
        self._predicates[32] = self.logicalorexpression_sempred
        self._predicates[38] = self.expression_sempred
        self._predicates[45] = self.statementseq_sempred
        self._predicates[55] = self.declarationseq_sempred
        self._predicates[74] = self.enumeratorlist_sempred
        self._predicates[88] = self.attributespecifierseq_sempred
        self._predicates[91] = self.attributelist_sempred
        self._predicates[97] = self.balancedtokenseq_sempred
        self._predicates[99] = self.initdeclaratorlist_sempred
        self._predicates[103] = self.noptrdeclarator_sempred
        self._predicates[114] = self.noptrabstractdeclarator_sempred
        self._predicates[116] = self.noptrabstractpackdeclarator_sempred
        self._predicates[118] = self.parameterdeclarationlist_sempred
        self._predicates[125] = self.initializerlist_sempred
        self._predicates[135] = self.memberdeclaratorlist_sempred
        self._predicates[137] = self.virtspecifierseq_sempred
        self._predicates[141] = self.basespecifierlist_sempred
        self._predicates[156] = self.templateparameterlist_sempred
        self._predicates[161] = self.templateargumentlist_sempred
        self._predicates[174] = self.typeidlist_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def nestednamespecifier_sempred(self, localctx: NestednamespecifierContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 2)

        if predIndex == 1:
            return self.precpred(self._ctx, 1)

    def capturelist_sempred(self, localctx: CapturelistContext, predIndex: int):
        if predIndex == 2:
            return self.precpred(self._ctx, 1)

    def postfixexpression_sempred(self, localctx: PostfixexpressionContext, predIndex: int):
        if predIndex == 3:
            return self.precpred(self._ctx, 19)

        if predIndex == 4:
            return self.precpred(self._ctx, 18)

        if predIndex == 5:
            return self.precpred(self._ctx, 17)

        if predIndex == 6:
            return self.precpred(self._ctx, 12)

        if predIndex == 7:
            return self.precpred(self._ctx, 11)

        if predIndex == 8:
            return self.precpred(self._ctx, 10)

        if predIndex == 9:
            return self.precpred(self._ctx, 9)

        if predIndex == 10:
            return self.precpred(self._ctx, 8)

        if predIndex == 11:
            return self.precpred(self._ctx, 7)

    def noptrnewdeclarator_sempred(self, localctx: NoptrnewdeclaratorContext, predIndex: int):
        if predIndex == 12:
            return self.precpred(self._ctx, 1)

    def pmexpression_sempred(self, localctx: PmexpressionContext, predIndex: int):
        if predIndex == 13:
            return self.precpred(self._ctx, 2)

        if predIndex == 14:
            return self.precpred(self._ctx, 1)

    def multiplicativeexpression_sempred(self, localctx: MultiplicativeexpressionContext, predIndex: int):
        if predIndex == 15:
            return self.precpred(self._ctx, 3)

        if predIndex == 16:
            return self.precpred(self._ctx, 2)

        if predIndex == 17:
            return self.precpred(self._ctx, 1)

    def additiveexpression_sempred(self, localctx: AdditiveexpressionContext, predIndex: int):
        if predIndex == 18:
            return self.precpred(self._ctx, 2)

        if predIndex == 19:
            return self.precpred(self._ctx, 1)

    def shiftexpression_sempred(self, localctx: ShiftexpressionContext, predIndex: int):
        if predIndex == 20:
            return self.precpred(self._ctx, 2)

        if predIndex == 21:
            return self.precpred(self._ctx, 1)

    def relationalexpression_sempred(self, localctx: RelationalexpressionContext, predIndex: int):
        if predIndex == 22:
            return self.precpred(self._ctx, 4)

        if predIndex == 23:
            return self.precpred(self._ctx, 3)

        if predIndex == 24:
            return self.precpred(self._ctx, 2)

        if predIndex == 25:
            return self.precpred(self._ctx, 1)

    def equalityexpression_sempred(self, localctx: EqualityexpressionContext, predIndex: int):
        if predIndex == 26:
            return self.precpred(self._ctx, 2)

        if predIndex == 27:
            return self.precpred(self._ctx, 1)

    def andexpression_sempred(self, localctx: AndexpressionContext, predIndex: int):
        if predIndex == 28:
            return self.precpred(self._ctx, 1)

    def exclusiveorexpression_sempred(self, localctx: ExclusiveorexpressionContext, predIndex: int):
        if predIndex == 29:
            return self.precpred(self._ctx, 1)

    def inclusiveorexpression_sempred(self, localctx: InclusiveorexpressionContext, predIndex: int):
        if predIndex == 30:
            return self.precpred(self._ctx, 1)

    def logicalandexpression_sempred(self, localctx: LogicalandexpressionContext, predIndex: int):
        if predIndex == 31:
            return self.precpred(self._ctx, 1)

    def logicalorexpression_sempred(self, localctx: LogicalorexpressionContext, predIndex: int):
        if predIndex == 32:
            return self.precpred(self._ctx, 1)

    def expression_sempred(self, localctx: ExpressionContext, predIndex: int):
        if predIndex == 33:
            return self.precpred(self._ctx, 1)

    def statementseq_sempred(self, localctx: StatementseqContext, predIndex: int):
        if predIndex == 34:
            return self.precpred(self._ctx, 1)

    def declarationseq_sempred(self, localctx: DeclarationseqContext, predIndex: int):
        if predIndex == 35:
            return self.precpred(self._ctx, 1)

    def enumeratorlist_sempred(self, localctx: EnumeratorlistContext, predIndex: int):
        if predIndex == 36:
            return self.precpred(self._ctx, 1)

    def attributespecifierseq_sempred(self, localctx: AttributespecifierseqContext, predIndex: int):
        if predIndex == 37:
            return self.precpred(self._ctx, 1)

    def attributelist_sempred(self, localctx: AttributelistContext, predIndex: int):
        if predIndex == 38:
            return self.precpred(self._ctx, 3)

        if predIndex == 39:
            return self.precpred(self._ctx, 1)

    def balancedtokenseq_sempred(self, localctx: BalancedtokenseqContext, predIndex: int):
        if predIndex == 40:
            return self.precpred(self._ctx, 1)

    def initdeclaratorlist_sempred(self, localctx: InitdeclaratorlistContext, predIndex: int):
        if predIndex == 41:
            return self.precpred(self._ctx, 1)

    def noptrdeclarator_sempred(self, localctx: NoptrdeclaratorContext, predIndex: int):
        if predIndex == 42:
            return self.precpred(self._ctx, 3)

        if predIndex == 43:
            return self.precpred(self._ctx, 2)

    def noptrabstractdeclarator_sempred(self, localctx: NoptrabstractdeclaratorContext, predIndex: int):
        if predIndex == 44:
            return self.precpred(self._ctx, 5)

        if predIndex == 45:
            return self.precpred(self._ctx, 3)

    def noptrabstractpackdeclarator_sempred(self, localctx: NoptrabstractpackdeclaratorContext, predIndex: int):
        if predIndex == 46:
            return self.precpred(self._ctx, 3)

        if predIndex == 47:
            return self.precpred(self._ctx, 2)

    def parameterdeclarationlist_sempred(self, localctx: ParameterdeclarationlistContext, predIndex: int):
        if predIndex == 48:
            return self.precpred(self._ctx, 1)

    def initializerlist_sempred(self, localctx: InitializerlistContext, predIndex: int):
        if predIndex == 49:
            return self.precpred(self._ctx, 1)

    def memberdeclaratorlist_sempred(self, localctx: MemberdeclaratorlistContext, predIndex: int):
        if predIndex == 50:
            return self.precpred(self._ctx, 1)

    def virtspecifierseq_sempred(self, localctx: VirtspecifierseqContext, predIndex: int):
        if predIndex == 51:
            return self.precpred(self._ctx, 1)

    def basespecifierlist_sempred(self, localctx: BasespecifierlistContext, predIndex: int):
        if predIndex == 52:
            return self.precpred(self._ctx, 1)

    def templateparameterlist_sempred(self, localctx: TemplateparameterlistContext, predIndex: int):
        if predIndex == 53:
            return self.precpred(self._ctx, 1)

    def templateargumentlist_sempred(self, localctx: TemplateargumentlistContext, predIndex: int):
        if predIndex == 54:
            return self.precpred(self._ctx, 1)

    def typeidlist_sempred(self, localctx: TypeidlistContext, predIndex: int):
        if predIndex == 55:
            return self.precpred(self._ctx, 1)
