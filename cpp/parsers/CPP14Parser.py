# Generated from /home/meanmail/MyProjects/antlr/cpp/grammars/CPP14.g4 by ANTLR 4.7
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *
from antlr4.error.Errors import InputMismatchException
from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0090")
        buf.write("\u08c8\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\3\2\5\2\u00e4\n\2\3\2\3\2\3\3\3\3\3\3\5\3\u00eb\n")
        buf.write("\3\3\3\5\3\u00ee\n\3\3\4\3\4\5\4\u00f2\n\4\5\4\u00f4\n")
        buf.write("\4\3\4\3\4\3\5\3\5\3\5\5\5\u00fb\n\5\3\5\5\5\u00fe\n\5")
        buf.write("\3\5\3\5\3\5\3\5\5\5\u0104\n\5\3\5\5\5\u0107\n\5\3\5\3")
        buf.write("\5\7\5\u010b\n\5\f\5\16\5\u010e\13\5\5\5\u0110\n\5\3\5")
        buf.write("\3\5\3\5\3\5\5\5\u0116\n\5\3\5\3\5\5\5\u011a\n\5\3\5\5")
        buf.write("\5\u011d\n\5\3\5\3\5\3\5\5\5\u0122\n\5\5\5\u0124\n\5\3")
        buf.write("\6\3\6\3\6\3\6\5\6\u012a\n\6\3\6\3\6\3\6\3\6\3\6\3\6\5")
        buf.write("\6\u0132\n\6\3\6\3\6\3\6\5\6\u0137\n\6\3\6\3\6\5\6\u013b")
        buf.write("\n\6\7\6\u013d\n\6\f\6\16\6\u0140\13\6\3\7\3\7\3\7\5\7")
        buf.write("\u0145\n\7\3\7\3\7\3\7\3\7\5\7\u014b\n\7\7\7\u014d\n\7")
        buf.write("\f\7\16\7\u0150\13\7\3\b\5\b\u0153\n\b\3\b\3\b\5\b\u0157")
        buf.write("\n\b\3\b\5\b\u015a\n\b\3\t\3\t\3\t\3\t\5\t\u0160\n\t\3")
        buf.write("\t\5\t\u0163\n\t\3\t\5\t\u0166\n\t\3\t\3\t\3\t\5\t\u016b")
        buf.write("\n\t\5\t\u016d\n\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u0183")
        buf.write("\n\n\3\n\3\n\5\n\u0187\n\n\3\n\3\n\7\n\u018b\n\n\f\n\16")
        buf.write("\n\u018e\13\n\3\n\3\n\3\n\3\n\5\n\u0194\n\n\3\n\3\n\5")
        buf.write("\n\u0198\n\n\3\n\3\n\3\n\5\n\u019d\n\n\3\n\3\n\5\n\u01a1")
        buf.write("\n\n\3\n\3\n\3\n\3\n\5\n\u01a7\n\n\3\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\3\n\3\n\3\n\5\n\u01b2\n\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\3\n\3\n\5\n\u01bd\n\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\3\n\5\n\u01c8\n\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\3\n\3\n\3\n\3\n\5\n\u01d7\n\n\3\n\3\n\5\n\u01db\n")
        buf.write("\n\5\n\u01dd\n\n\3\n\3\n\3\n\3\n\5\n\u01e3\n\n\3\n\3\n")
        buf.write("\3\n\3\n\5\n\u01e9\n\n\3\n\5\n\u01ec\n\n\3\n\3\n\3\n\5")
        buf.write("\n\u01f1\n\n\3\n\3\n\5\n\u01f5\n\n\3\n\3\n\7\n\u01f9\n")
        buf.write("\n\f\n\16\n\u01fc\13\n\3\13\5\13\u01ff\n\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u020b\n")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u0213\n\13\3\13")
        buf.write("\3\13\3\13\3\13\5\13\u0219\n\13\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\5\f\u0226\n\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u0233\n\f\3\f\3\f\3\f\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\5\f\u023e\n\f\3\r\3\r\3\r\3\16")
        buf.write("\3\16\3\17\5\17\u0246\n\17\3\17\3\17\3\17\3\17\3\17\5")
        buf.write("\17\u024d\n\17\3\17\3\17\5\17\u0251\n\17\3\17\5\17\u0254")
        buf.write("\n\17\3\17\5\17\u0257\n\17\3\17\3\17\3\17\3\17\3\17\5")
        buf.write("\17\u025e\n\17\3\17\3\17\3\17\5\17\u0263\n\17\3\17\3\17")
        buf.write("\5\17\u0267\n\17\5\17\u0269\n\17\3\20\3\20\5\20\u026d")
        buf.write("\n\20\3\20\5\20\u0270\n\20\3\21\3\21\3\21\3\21\3\21\5")
        buf.write("\21\u0277\n\21\3\21\3\21\3\21\3\21\3\21\5\21\u027e\n\21")
        buf.write("\7\21\u0280\n\21\f\21\16\21\u0283\13\21\3\22\3\22\5\22")
        buf.write("\u0287\n\22\3\22\3\22\5\22\u028b\n\22\3\23\5\23\u028e")
        buf.write("\n\23\3\23\3\23\3\23\5\23\u0293\n\23\3\23\3\23\3\24\3")
        buf.write("\24\3\24\3\24\5\24\u029b\n\24\3\24\3\24\3\24\5\24\u02a0")
        buf.write("\n\24\3\25\3\25\3\25\3\25\3\25\3\25\7\25\u02a8\n\25\f")
        buf.write("\25\16\25\u02ab\13\25\3\26\3\26\3\26\3\26\3\26\3\26\7")
        buf.write("\26\u02b3\n\26\f\26\16\26\u02b6\13\26\3\27\3\27\3\27\3")
        buf.write("\27\3\27\3\27\7\27\u02be\n\27\f\27\16\27\u02c1\13\27\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\5\30\u02c9\n\30\3\30\7\30")
        buf.write("\u02cc\n\30\f\30\16\30\u02cf\13\30\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\7\31\u02d7\n\31\f\31\16\31\u02da\13\31\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\7\32\u02e2\n\32\f\32\16\32\u02e5")
        buf.write("\13\32\3\33\3\33\3\33\3\33\3\33\3\33\7\33\u02ed\n\33\f")
        buf.write("\33\16\33\u02f0\13\33\3\34\3\34\3\34\3\34\3\34\3\34\7")
        buf.write("\34\u02f8\n\34\f\34\16\34\u02fb\13\34\3\35\3\35\3\35\3")
        buf.write("\35\3\35\3\35\7\35\u0303\n\35\f\35\16\35\u0306\13\35\3")
        buf.write("\36\3\36\3\36\3\36\3\36\3\36\7\36\u030e\n\36\f\36\16\36")
        buf.write("\u0311\13\36\3\37\3\37\3\37\3\37\3\37\3\37\7\37\u0319")
        buf.write("\n\37\f\37\16\37\u031c\13\37\3 \3 \3 \3 \3 \3 \3!\3!\3")
        buf.write("!\3!\3!\3\"\3\"\3\"\3\"\5\"\u032d\n\"\3\"\3\"\3\"\3\"")
        buf.write("\5\"\u0333\n\"\5\"\u0335\n\"\3#\3#\3#\3#\3#\3#\3#\3#\3")
        buf.write("#\3#\3#\5#\u0342\n#\3$\3$\3$\3$\3$\3$\7$\u034a\n$\f$\16")
        buf.write("$\u034d\13$\3%\3%\3%\5%\u0352\n%\3&\5&\u0355\n&\3&\3&")
        buf.write("\3&\3&\5&\u035b\n&\3&\3&\5&\u035f\n&\3&\3&\5&\u0363\n")
        buf.write("&\3&\5&\u0366\n&\3&\3&\5&\u036a\n&\3&\3&\7&\u036e\n&\f")
        buf.write("&\16&\u0371\13&\3&\3&\5&\u0375\n&\3&\3&\5&\u0379\n&\3")
        buf.write("&\3&\5&\u037d\n&\3&\3&\5&\u0381\n&\3&\3&\3&\5&\u0386\n")
        buf.write("&\3&\3&\3&\3&\5&\u038c\n&\3&\3&\3&\3&\5&\u0392\n&\3&\3")
        buf.write("&\5&\u0396\n&\3&\5&\u0399\n&\3&\3&\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\5&\u03a5\n&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u03b0\n")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\5&\u03b9\n&\3&\3&\3&\5&\u03be\n")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u03cc\n&\3&\3")
        buf.write("&\3&\5&\u03d1\n&\3&\3&\5&\u03d5\n&\3\'\3\'\3\'\3\'\3\'")
        buf.write("\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\5)\u03e6\n)\3)\3)\3)\3")
        buf.write(")\3)\3)\5)\u03ee\n)\3*\3*\3*\3+\3+\5+\u03f5\n+\3+\3+\3")
        buf.write("+\3+\3+\5+\u03fc\n+\5+\u03fe\n+\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u0412\n,\3,\3,\5,\u0416")
        buf.write("\n,\3,\3,\3,\3,\3,\3,\5,\u041e\n,\3,\3,\3,\3,\3,\5,\u0425")
        buf.write("\n,\3,\3,\3,\5,\u042a\n,\3-\5-\u042d\n-\3-\3-\5-\u0431")
        buf.write("\n-\3-\5-\u0434\n-\3-\3-\3-\5-\u0439\n-\3-\3-\3-\5-\u043e")
        buf.write("\n-\3.\3.\3.\3.\5.\u0444\n.\3.\5.\u0447\n.\3.\3.\5.\u044b")
        buf.write("\n.\3/\3/\3/\3/\3\60\3\60\3\60\3\60\3\60\7\60\u0456\n")
        buf.write("\60\f\60\16\60\u0459\13\60\3\61\5\61\u045c\n\61\3\61\5")
        buf.write("\61\u045f\n\61\3\61\3\61\3\61\5\61\u0464\n\61\3\61\5\61")
        buf.write("\u0467\n\61\3\61\3\61\3\61\5\61\u046c\n\61\3\61\3\61\3")
        buf.write("\61\5\61\u0471\n\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\5\61\u047e\n\61\3\61\3\61\3\61\3")
        buf.write("\61\3\61\3\61\3\61\3\61\3\61\5\61\u0489\n\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\5\61\u0492\n\61\3\61\3\61\3")
        buf.write("\61\5\61\u0497\n\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\5\61\u04a5\n\61\3\61\3\61\3")
        buf.write("\61\5\61\u04aa\n\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61")
        buf.write("\u04b2\n\61\3\61\3\61\3\61\5\61\u04b7\n\61\3\61\3\61\3")
        buf.write("\61\3\61\3\61\3\61\5\61\u04bf\n\61\3\61\3\61\5\61\u04c3")
        buf.write("\n\61\3\61\5\61\u04c6\n\61\3\61\3\61\3\61\3\61\5\61\u04cc")
        buf.write("\n\61\3\61\3\61\3\61\5\61\u04d1\n\61\3\61\5\61\u04d4\n")
        buf.write("\61\3\61\5\61\u04d7\n\61\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u04e5\n\62\3\63\3")
        buf.write("\63\3\63\5\63\u04ea\n\63\3\64\3\64\3\64\5\64\u04ef\n\64")
        buf.write("\3\64\5\64\u04f2\n\64\3\64\3\64\5\64\u04f6\n\64\5\64\u04f8")
        buf.write("\n\64\3\64\3\64\5\64\u04fc\n\64\3\64\3\64\3\64\3\64\3")
        buf.write("\64\5\64\u0503\n\64\3\64\3\64\3\64\3\64\5\64\u0509\n\64")
        buf.write("\3\64\5\64\u050c\n\64\3\64\5\64\u050f\n\64\3\64\3\64\5")
        buf.write("\64\u0513\n\64\3\64\3\64\5\64\u0517\n\64\3\64\5\64\u051a")
        buf.write("\n\64\3\64\3\64\5\64\u051e\n\64\3\65\3\65\3\65\5\65\u0523")
        buf.write("\n\65\3\65\5\65\u0526\n\65\3\65\3\65\3\65\3\65\3\65\3")
        buf.write("\65\5\65\u052e\n\65\3\65\3\65\3\65\3\65\3\65\5\65\u0535")
        buf.write("\n\65\3\65\3\65\3\65\5\65\u053a\n\65\3\65\3\65\3\65\3")
        buf.write("\65\5\65\u0540\n\65\3\65\3\65\3\65\5\65\u0545\n\65\3\66")
        buf.write("\3\66\3\66\5\66\u054a\n\66\3\67\3\67\3\67\5\67\u054f\n")
        buf.write("\67\38\58\u0552\n8\38\38\38\38\38\38\58\u055a\n8\38\3")
        buf.write("8\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\58\u056d")
        buf.write("\n8\39\39\39\39\59\u0573\n9\39\59\u0576\n9\59\u0578\n")
        buf.write("9\3:\3:\3:\3:\5:\u057e\n:\3:\3:\3;\3;\5;\u0584\n;\3<\3")
        buf.write("<\3<\3<\5<\u058a\n<\3<\3<\3<\3<\3<\5<\u0591\n<\7<\u0593")
        buf.write("\n<\f<\16<\u0596\13<\3=\3=\3=\3=\3=\7=\u059d\n=\f=\16")
        buf.write("=\u05a0\13=\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u05ac\n>")
        buf.write("\3>\5>\u05af\n>\3>\3>\3>\3>\3>\3>\5>\u05b7\n>\3>\3>\5")
        buf.write(">\u05bb\n>\3?\3?\3?\5?\u05c0\n?\5?\u05c2\n?\3?\3?\3?\3")
        buf.write("?\5?\u05c8\n?\5?\u05ca\n?\7?\u05cc\n?\f?\16?\u05cf\13")
        buf.write("?\3@\3@\3@\5@\u05d4\n@\3@\3@\3@\3@\5@\u05da\n@\3A\3A\5")
        buf.write("A\u05de\nA\3A\3A\7A\u05e2\nA\fA\16A\u05e5\13A\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\3B\3B\3B\5B\u05f3\nB\3C\3C\3C\5C\u05f8")
        buf.write("\nC\3C\3C\3C\3C\5C\u05fe\nC\7C\u0600\nC\fC\16C\u0603\13")
        buf.write("C\3D\3D\3D\3D\3D\3D\5D\u060b\nD\5D\u060d\nD\3E\3E\3E\3")
        buf.write("E\5E\u0613\nE\3F\3F\5F\u0617\nF\3F\3F\5F\u061b\nF\3F\3")
        buf.write("F\3F\3F\5F\u0621\nF\3F\3F\3F\3F\3F\5F\u0628\nF\3F\3F\5")
        buf.write("F\u062c\nF\7F\u062e\nF\fF\16F\u0631\13F\3G\3G\3G\3G\7")
        buf.write("G\u0637\nG\fG\16G\u063a\13G\3G\5G\u063d\nG\3G\5G\u0640")
        buf.write("\nG\3G\5G\u0643\nG\3H\5H\u0646\nH\3H\3H\5H\u064a\nH\3")
        buf.write("H\7H\u064d\nH\fH\16H\u0650\13H\3H\3H\5H\u0654\nH\5H\u0656")
        buf.write("\nH\3I\3I\3J\3J\5J\u065c\nJ\3J\3J\3J\3J\5J\u0662\nJ\3")
        buf.write("J\5J\u0665\nJ\3K\3K\3K\5K\u066a\nK\5K\u066c\nK\3L\3L\3")
        buf.write("L\3L\5L\u0672\nL\3L\3L\5L\u0676\nL\3L\3L\3L\3L\5L\u067c")
        buf.write("\nL\3L\3L\3L\3L\3L\5L\u0683\nL\3L\3L\5L\u0687\nL\7L\u0689")
        buf.write("\nL\fL\16L\u068c\13L\3M\3M\3M\3M\5M\u0692\nM\3N\3N\3N")
        buf.write("\3N\3N\3N\3N\3N\5N\u069c\nN\3N\3N\5N\u06a0\nN\7N\u06a2")
        buf.write("\nN\fN\16N\u06a5\13N\3O\5O\u06a8\nO\3O\5O\u06ab\nO\3O")
        buf.write("\3O\3O\3O\5O\u06b1\nO\3P\3P\3P\3P\3P\3P\7P\u06b9\nP\f")
        buf.write("P\16P\u06bc\13P\3Q\5Q\u06bf\nQ\3Q\3Q\3Q\5Q\u06c4\nQ\3")
        buf.write("Q\3Q\5Q\u06c8\nQ\3R\5R\u06cb\nR\3R\5R\u06ce\nR\3R\3R\5")
        buf.write("R\u06d2\nR\3R\3R\3S\3S\5S\u06d8\nS\3S\3S\7S\u06dc\nS\f")
        buf.write("S\16S\u06df\13S\3S\3S\3S\3S\5S\u06e5\nS\3S\3S\7S\u06e9")
        buf.write("\nS\fS\16S\u06ec\13S\3S\3S\6S\u06f0\nS\rS\16S\u06f1\3")
        buf.write("S\3S\3S\5S\u06f7\nS\3T\3T\3T\3T\3T\5T\u06fe\nT\3U\3U\3")
        buf.write("U\5U\u0703\nU\3V\3V\5V\u0707\nV\3W\3W\3W\5W\u070c\nW\3")
        buf.write("W\3W\3W\3W\5W\u0712\nW\7W\u0714\nW\fW\16W\u0717\13W\3")
        buf.write("X\3X\3X\5X\u071c\nX\3X\3X\3X\3X\5X\u0722\nX\3Y\3Y\3Y\5")
        buf.write("Y\u0727\nY\3Y\5Y\u072a\nY\3Z\3Z\3[\5[\u072f\n[\3[\5[\u0732")
        buf.write("\n[\3[\5[\u0735\n[\3[\3[\3[\3[\5[\u073b\n[\3[\3[\5[\u073f")
        buf.write("\n[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3")
        buf.write("[\3[\3[\3[\5[\u0755\n[\3[\3[\3[\5[\u075a\n[\3[\3[\3[\5")
        buf.write("[\u075f\n[\3\\\3\\\3\\\3\\\3\\\3\\\7\\\u0767\n\\\f\\\16")
        buf.write("\\\u076a\13\\\3]\3]\5]\u076e\n]\3]\5]\u0771\n]\3]\5]\u0774")
        buf.write("\n]\5]\u0776\n]\3]\5]\u0779\n]\3]\5]\u077c\n]\3]\3]\5")
        buf.write("]\u0780\n]\3^\3^\3^\3^\3^\7^\u0787\n^\f^\16^\u078a\13")
        buf.write("^\3_\3_\3_\3_\3`\3`\3`\5`\u0793\n`\3`\3`\3`\3`\5`\u0799")
        buf.write("\n`\7`\u079b\n`\f`\16`\u079e\13`\3a\5a\u07a1\na\3a\3a")
        buf.write("\5a\u07a5\na\3a\3a\5a\u07a9\na\3a\3a\5a\u07ad\na\3a\3")
        buf.write("a\5a\u07b1\na\3a\3a\5a\u07b5\na\3b\5b\u07b8\nb\3b\3b\5")
        buf.write("b\u07bc\nb\3c\3c\3d\3d\5d\u07c2\nd\3d\3d\5d\u07c6\nd\3")
        buf.write("d\3d\5d\u07ca\nd\3d\5d\u07cd\nd\3d\3d\5d\u07d1\nd\3e\3")
        buf.write("e\3e\3e\3e\3e\7e\u07d9\ne\fe\16e\u07dc\13e\3f\3f\5f\u07e0")
        buf.write("\nf\3f\5f\u07e3\nf\3f\5f\u07e6\nf\3f\3f\3f\5f\u07eb\n")
        buf.write("f\5f\u07ed\nf\3f\3f\5f\u07f1\nf\3f\5f\u07f4\nf\3f\5f\u07f7")
        buf.write("\nf\3f\3f\3f\5f\u07fc\nf\5f\u07fe\nf\3f\3f\3f\3f\3f\3")
        buf.write("f\5f\u0806\nf\3f\5f\u0809\nf\3f\5f\u080c\nf\3f\3f\5f\u0810")
        buf.write("\nf\3f\5f\u0813\nf\3g\3g\3g\5g\u0818\ng\3g\3g\3g\3g\5")
        buf.write("g\u081e\ng\7g\u0820\ng\fg\16g\u0823\13g\3h\3h\5h\u0827")
        buf.write("\nh\3h\3h\5h\u082b\nh\3i\3i\3i\3i\3i\3i\3i\5i\u0834\n")
        buf.write("i\3i\3i\3i\5i\u0839\ni\3i\3i\5i\u083d\ni\3j\3j\3j\7j\u0842")
        buf.write("\nj\fj\16j\u0845\13j\3j\3j\6j\u0849\nj\rj\16j\u084a\3")
        buf.write("k\3k\3k\3k\3k\3k\7k\u0853\nk\fk\16k\u0856\13k\3k\3k\3")
        buf.write("l\5l\u085b\nl\3l\3l\3l\3l\5l\u0861\nl\3l\3l\5l\u0865\n")
        buf.write("l\3l\5l\u0868\nl\3m\3m\3m\5m\u086d\nm\3m\3m\3m\3m\3m\3")
        buf.write("m\5m\u0875\nm\5m\u0877\nm\3n\3n\3n\5n\u087c\nn\3n\5n\u087f")
        buf.write("\nn\3n\3n\3n\3n\5n\u0885\nn\3n\5n\u0888\nn\7n\u088a\n")
        buf.write("n\fn\16n\u088d\13n\3o\3o\3o\3p\3p\3p\3p\3q\3q\3q\3q\3")
        buf.write("q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3")
        buf.write("q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3")
        buf.write("q\3q\3q\3q\3q\3q\3q\3q\5q\u08c6\nq\3q\2#\n\f\22 (*,.\60")
        buf.write("\62\64\668:<F^vx|\u0080\u0084\u008a\u0096\u009a\u009e")
        buf.write("\u00ac\u00b6\u00ba\u00be\u00c8\u00cc\u00dar\2\4\6\b\n")
        buf.write("\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<")
        buf.write(">@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce")
        buf.write("\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0")
        buf.write("\2\23\4\2\\\\``\4\2ww||\3\2st\4\2VX\\_\4\2vv}}\3\2XZ\3")
        buf.write("\2VW\4\2abop\3\2mn\4\2\n\n\24\24\4\2\20\20==\4\2\\\\q")
        buf.write("q\4\2\21\21MM\3\2\26\27\5\2\20\20==HH\4\2!!\60\60\3\2")
        buf.write("\61\63\2\u0a5f\2\u00e3\3\2\2\2\4\u00ed\3\2\2\2\6\u00f3")
        buf.write("\3\2\2\2\b\u0123\3\2\2\2\n\u0125\3\2\2\2\f\u0141\3\2\2")
        buf.write("\2\16\u0159\3\2\2\2\20\u015b\3\2\2\2\22\u01dc\3\2\2\2")
        buf.write("\24\u0218\3\2\2\2\26\u023d\3\2\2\2\30\u023f\3\2\2\2\32")
        buf.write("\u0242\3\2\2\2\34\u0268\3\2\2\2\36\u026f\3\2\2\2 \u0271")
        buf.write("\3\2\2\2\"\u028a\3\2\2\2$\u028d\3\2\2\2&\u029f\3\2\2\2")
        buf.write("(\u02a1\3\2\2\2*\u02ac\3\2\2\2,\u02b7\3\2\2\2.\u02c2\3")
        buf.write("\2\2\2\60\u02d0\3\2\2\2\62\u02db\3\2\2\2\64\u02e6\3\2")
        buf.write("\2\2\66\u02f1\3\2\2\28\u02fc\3\2\2\2:\u0307\3\2\2\2<\u0312")
        buf.write("\3\2\2\2>\u031d\3\2\2\2@\u0323\3\2\2\2B\u0334\3\2\2\2")
        buf.write("D\u0341\3\2\2\2F\u0343\3\2\2\2H\u0351\3\2\2\2J\u03d4\3")
        buf.write("\2\2\2L\u03d6\3\2\2\2N\u03db\3\2\2\2P\u03ed\3\2\2\2R\u03ef")
        buf.write("\3\2\2\2T\u03fd\3\2\2\2V\u0429\3\2\2\2X\u043d\3\2\2\2")
        buf.write("Z\u044a\3\2\2\2\\\u044c\3\2\2\2^\u0450\3\2\2\2`\u04d6")
        buf.write("\3\2\2\2b\u04e4\3\2\2\2d\u04e6\3\2\2\2f\u051d\3\2\2\2")
        buf.write("h\u0544\3\2\2\2j\u0546\3\2\2\2l\u054b\3\2\2\2n\u056c\3")
        buf.write("\2\2\2p\u0577\3\2\2\2r\u0579\3\2\2\2t\u0581\3\2\2\2v\u0585")
        buf.write("\3\2\2\2x\u0597\3\2\2\2z\u05ba\3\2\2\2|\u05bc\3\2\2\2")
        buf.write("~\u05d0\3\2\2\2\u0080\u05db\3\2\2\2\u0082\u05f2\3\2\2")
        buf.write("\2\u0084\u05f4\3\2\2\2\u0086\u060c\3\2\2\2\u0088\u0612")
        buf.write("\3\2\2\2\u008a\u0620\3\2\2\2\u008c\u0632\3\2\2\2\u008e")
        buf.write("\u0655\3\2\2\2\u0090\u0657\3\2\2\2\u0092\u0664\3\2\2\2")
        buf.write("\u0094\u066b\3\2\2\2\u0096\u067b\3\2\2\2\u0098\u0691\3")
        buf.write("\2\2\2\u009a\u0693\3\2\2\2\u009c\u06b0\3\2\2\2\u009e\u06b2")
        buf.write("\3\2\2\2\u00a0\u06be\3\2\2\2\u00a2\u06ca\3\2\2\2\u00a4")
        buf.write("\u06f6\3\2\2\2\u00a6\u06fd\3\2\2\2\u00a8\u0702\3\2\2\2")
        buf.write("\u00aa\u0706\3\2\2\2\u00ac\u0708\3\2\2\2\u00ae\u0721\3")
        buf.write("\2\2\2\u00b0\u0723\3\2\2\2\u00b2\u072b\3\2\2\2\u00b4\u075e")
        buf.write("\3\2\2\2\u00b6\u0760\3\2\2\2\u00b8\u077f\3\2\2\2\u00ba")
        buf.write("\u0781\3\2\2\2\u00bc\u078b\3\2\2\2\u00be\u078f\3\2\2\2")
        buf.write("\u00c0\u07b4\3\2\2\2\u00c2\u07bb\3\2\2\2\u00c4\u07bd\3")
        buf.write("\2\2\2\u00c6\u07c1\3\2\2\2\u00c8\u07d2\3\2\2\2\u00ca\u0812")
        buf.write("\3\2\2\2\u00cc\u0814\3\2\2\2\u00ce\u082a\3\2\2\2\u00d0")
        buf.write("\u083c\3\2\2\2\u00d2\u083e\3\2\2\2\u00d4\u084c\3\2\2\2")
        buf.write("\u00d6\u0867\3\2\2\2\u00d8\u0876\3\2\2\2\u00da\u0878\3")
        buf.write("\2\2\2\u00dc\u088e\3\2\2\2\u00de\u0891\3\2\2\2\u00e0\u08c5")
        buf.write("\3\2\2\2\u00e2\u00e4\5^\60\2\u00e3\u00e2\3\2\2\2\u00e3")
        buf.write("\u00e4\3\2\2\2\u00e4\u00e5\3\2\2\2\u00e5\u00e6\7\2\2\3")
        buf.write("\u00e6\3\3\2\2\2\u00e7\u00ea\t\2\2\2\u00e8\u00e9\7u\2")
        buf.write("\2\u00e9\u00eb\5\f\7\2\u00ea\u00e8\3\2\2\2\u00ea\u00eb")
        buf.write("\3\2\2\2\u00eb\u00ee\3\2\2\2\u00ec\u00ee\5\f\7\2\u00ed")
        buf.write("\u00e7\3\2\2\2\u00ed\u00ec\3\2\2\2\u00ee\5\3\2\2\2\u00ef")
        buf.write("\u00f1\5\n\6\2\u00f0\u00f2\7?\2\2\u00f1\u00f0\3\2\2\2")
        buf.write("\u00f1\u00f2\3\2\2\2\u00f2\u00f4\3\2\2\2\u00f3\u00ef\3")
        buf.write("\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f5\3\2\2\2\u00f5\u00f6")
        buf.write("\5\b\5\2\u00f6\7\3\2\2\2\u00f7\u00fd\7\177\2\2\u00f8\u00fa")
        buf.write("\7a\2\2\u00f9\u00fb\5\u00ccg\2\u00fa\u00f9\3\2\2\2\u00fa")
        buf.write("\u00fb\3\2\2\2\u00fb\u00fc\3\2\2\2\u00fc\u00fe\7b\2\2")
        buf.write("\u00fd\u00f8\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe\u0124\3")
        buf.write("\2\2\2\u00ff\u010f\7/\2\2\u0100\u0106\5\u00e0q\2\u0101")
        buf.write("\u0103\7a\2\2\u0102\u0104\5\u00ccg\2\u0103\u0102\3\2\2")
        buf.write("\2\u0103\u0104\3\2\2\2\u0104\u0105\3\2\2\2\u0105\u0107")
        buf.write("\7b\2\2\u0106\u0101\3\2\2\2\u0106\u0107\3\2\2\2\u0107")
        buf.write("\u0110\3\2\2\2\u0108\u010c\5j\66\2\u0109\u010b\5\u008e")
        buf.write("H\2\u010a\u0109\3\2\2\2\u010b\u010e\3\2\2\2\u010c\u010a")
        buf.write("\3\2\2\2\u010c\u010d\3\2\2\2\u010d\u0110\3\2\2\2\u010e")
        buf.write("\u010c\3\2\2\2\u010f\u0100\3\2\2\2\u010f\u0108\3\2\2\2")
        buf.write("\u0110\u0124\3\2\2\2\u0111\u0115\7/\2\2\u0112\u0113\7")
        buf.write("\u0088\2\2\u0113\u0116\7\177\2\2\u0114\u0116\7\u008b\2")
        buf.write("\2\u0115\u0112\3\2\2\2\u0115\u0114\3\2\2\2\u0116\u011c")
        buf.write("\3\2\2\2\u0117\u0119\7a\2\2\u0118\u011a\5\u00ccg\2\u0119")
        buf.write("\u0118\3\2\2\2\u0119\u011a\3\2\2\2\u011a\u011b\3\2\2\2")
        buf.write("\u011b\u011d\7b\2\2\u011c\u0117\3\2\2\2\u011c\u011d\3")
        buf.write("\2\2\2\u011d\u0124\3\2\2\2\u011e\u0121\7^\2\2\u011f\u0122")
        buf.write("\5\u00b0Y\2\u0120\u0122\5r:\2\u0121\u011f\3\2\2\2\u0121")
        buf.write("\u0120\3\2\2\2\u0122\u0124\3\2\2\2\u0123\u00f7\3\2\2\2")
        buf.write("\u0123\u00ff\3\2\2\2\u0123\u0111\3\2\2\2\u0123\u011e\3")
        buf.write("\2\2\2\u0124\t\3\2\2\2\u0125\u0129\b\6\1\2\u0126\u012a")
        buf.write("\5p9\2\u0127\u012a\7\177\2\2\u0128\u012a\5r:\2\u0129\u0126")
        buf.write("\3\2\2\2\u0129\u0127\3\2\2\2\u0129\u0128\3\2\2\2\u012a")
        buf.write("\u012b\3\2\2\2\u012b\u012c\7z\2\2\u012c\u013e\3\2\2\2")
        buf.write("\u012d\u013a\f\3\2\2\u012e\u012f\7\177\2\2\u012f\u013b")
        buf.write("\7z\2\2\u0130\u0132\7?\2\2\u0131\u0130\3\2\2\2\u0131\u0132")
        buf.write("\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0134\7\177\2\2\u0134")
        buf.write("\u0136\7a\2\2\u0135\u0137\5\u00ccg\2\u0136\u0135\3\2\2")
        buf.write("\2\u0136\u0137\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u0139")
        buf.write("\7b\2\2\u0139\u013b\7z\2\2\u013a\u012e\3\2\2\2\u013a\u0131")
        buf.write("\3\2\2\2\u013b\u013d\3\2\2\2\u013c\u012d\3\2\2\2\u013d")
        buf.write("\u0140\3\2\2\2\u013e\u013c\3\2\2\2\u013e\u013f\3\2\2\2")
        buf.write("\u013f\13\3\2\2\2\u0140\u013e\3\2\2\2\u0141\u0142\b\7")
        buf.write("\1\2\u0142\u0144\5\16\b\2\u0143\u0145\7~\2\2\u0144\u0143")
        buf.write("\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u014e\3\2\2\2\u0146")
        buf.write("\u0147\f\3\2\2\u0147\u0148\7u\2\2\u0148\u014a\5\16\b\2")
        buf.write("\u0149\u014b\7~\2\2\u014a\u0149\3\2\2\2\u014a\u014b\3")
        buf.write("\2\2\2\u014b\u014d\3\2\2\2\u014c\u0146\3\2\2\2\u014d\u0150")
        buf.write("\3\2\2\2\u014e\u014c\3\2\2\2\u014e\u014f\3\2\2\2\u014f")
        buf.write("\r\3\2\2\2\u0150\u014e\3\2\2\2\u0151\u0153\7\\\2\2\u0152")
        buf.write("\u0151\3\2\2\2\u0152\u0153\3\2\2\2\u0153\u0154\3\2\2\2")
        buf.write("\u0154\u0156\7\177\2\2\u0155\u0157\5\u00a6T\2\u0156\u0155")
        buf.write("\3\2\2\2\u0156\u0157\3\2\2\2\u0157\u015a\3\2\2\2\u0158")
        buf.write("\u015a\7@\2\2\u0159\u0152\3\2\2\2\u0159\u0158\3\2\2\2")
        buf.write("\u015a\17\3\2\2\2\u015b\u015c\7P\2\2\u015c\u015d\5\u009c")
        buf.write("O\2\u015d\u015f\7Q\2\2\u015e\u0160\7*\2\2\u015f\u015e")
        buf.write("\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u0162\3\2\2\2\u0161")
        buf.write("\u0163\5\u00d8m\2\u0162\u0161\3\2\2\2\u0162\u0163\3\2")
        buf.write("\2\2\u0163\u0165\3\2\2\2\u0164\u0166\5x=\2\u0165\u0164")
        buf.write("\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u016c\3\2\2\2\u0167")
        buf.write("\u0168\7w\2\2\u0168\u016a\5l\67\2\u0169\u016b\5\u0092")
        buf.write("J\2\u016a\u0169\3\2\2\2\u016a\u016b\3\2\2\2\u016b\u016d")
        buf.write("\3\2\2\2\u016c\u0167\3\2\2\2\u016c\u016d\3\2\2\2\u016d")
        buf.write("\21\3\2\2\2\u016e\u016f\b\n\1\2\u016f\u01dd\7\u0080\2")
        buf.write("\2\u0170\u01dd\7\u0086\2\2\u0171\u01dd\7\u0087\2\2\u0172")
        buf.write("\u01dd\7\u0088\2\2\u0173\u01dd\7 \2\2\u0174\u01dd\7C\2")
        buf.write("\2\u0175\u01dd\7.\2\2\u0176\u01dd\7\u0089\2\2\u0177\u01dd")
        buf.write("\7\u008a\2\2\u0178\u01dd\7\u008b\2\2\u0179\u01dd\7\u008c")
        buf.write("\2\2\u017a\u01dd\7@\2\2\u017b\u017c\7P\2\2\u017c\u017d")
        buf.write("\5F$\2\u017d\u017e\7Q\2\2\u017e\u01dd\3\2\2\2\u017f\u01dd")
        buf.write("\5\6\4\2\u0180\u0182\7R\2\2\u0181\u0183\5\4\3\2\u0182")
        buf.write("\u0181\3\2\2\2\u0182\u0183\3\2\2\2\u0183\u0184\3\2\2\2")
        buf.write("\u0184\u0186\7S\2\2\u0185\u0187\5\20\t\2\u0186\u0185\3")
        buf.write("\2\2\2\u0186\u0187\3\2\2\2\u0187\u0188\3\2\2\2\u0188\u018c")
        buf.write("\7T\2\2\u0189\u018b\5J&\2\u018a\u0189\3\2\2\2\u018b\u018e")
        buf.write("\3\2\2\2\u018c\u018a\3\2\2\2\u018c\u018d\3\2\2\2\u018d")
        buf.write("\u018f\3\2\2\2\u018e\u018c\3\2\2\2\u018f\u01dd\7U\2\2")
        buf.write("\u0190\u0197\5n8\2\u0191\u0193\7P\2\2\u0192\u0194\5\u00ac")
        buf.write("W\2\u0193\u0192\3\2\2\2\u0193\u0194\3\2\2\2\u0194\u0195")
        buf.write("\3\2\2\2\u0195\u0198\7Q\2\2\u0196\u0198\5\u00aeX\2\u0197")
        buf.write("\u0191\3\2\2\2\u0197\u0196\3\2\2\2\u0198\u01dd\3\2\2\2")
        buf.write("\u0199\u01a0\5\u00d0i\2\u019a\u019c\7P\2\2\u019b\u019d")
        buf.write("\5\u00acW\2\u019c\u019b\3\2\2\2\u019c\u019d\3\2\2\2\u019d")
        buf.write("\u019e\3\2\2\2\u019e\u01a1\7Q\2\2\u019f\u01a1\5\u00ae")
        buf.write("X\2\u01a0\u019a\3\2\2\2\u01a0\u019f\3\2\2\2\u01a1\u01dd")
        buf.write("\3\2\2\2\u01a2\u01a3\7\32\2\2\u01a3\u01a4\7a\2\2\u01a4")
        buf.write("\u01a6\5j\66\2\u01a5\u01a7\5\u0092J\2\u01a6\u01a5\3\2")
        buf.write("\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8\u01a9")
        buf.write("\7b\2\2\u01a9\u01aa\7P\2\2\u01aa\u01ab\5F$\2\u01ab\u01ac")
        buf.write("\7Q\2\2\u01ac\u01dd\3\2\2\2\u01ad\u01ae\7<\2\2\u01ae\u01af")
        buf.write("\7a\2\2\u01af\u01b1\5j\66\2\u01b0\u01b2\5\u0092J\2\u01b1")
        buf.write("\u01b0\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u01b3\3\2\2\2")
        buf.write("\u01b3\u01b4\7b\2\2\u01b4\u01b5\7P\2\2\u01b5\u01b6\5F")
        buf.write("$\2\u01b6\u01b7\7Q\2\2\u01b7\u01dd\3\2\2\2\u01b8\u01b9")
        buf.write("\7\65\2\2\u01b9\u01ba\7a\2\2\u01ba\u01bc\5j\66\2\u01bb")
        buf.write("\u01bd\5\u0092J\2\u01bc\u01bb\3\2\2\2\u01bc\u01bd\3\2")
        buf.write("\2\2\u01bd\u01be\3\2\2\2\u01be\u01bf\7b\2\2\u01bf\u01c0")
        buf.write("\7P\2\2\u01c0\u01c1\5F$\2\u01c1\u01c2\7Q\2\2\u01c2\u01dd")
        buf.write("\3\2\2\2\u01c3\u01c4\7\23\2\2\u01c4\u01c5\7a\2\2\u01c5")
        buf.write("\u01c7\5j\66\2\u01c6\u01c8\5\u0092J\2\u01c7\u01c6\3\2")
        buf.write("\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01ca")
        buf.write("\7b\2\2\u01ca\u01cb\7P\2\2\u01cb\u01cc\5F$\2\u01cc\u01cd")
        buf.write("\7Q\2\2\u01cd\u01dd\3\2\2\2\u01ce\u01da\7F\2\2\u01cf\u01d0")
        buf.write("\7P\2\2\u01d0\u01d1\5F$\2\u01d1\u01d2\7Q\2\2\u01d2\u01db")
        buf.write("\3\2\2\2\u01d3\u01d4\7P\2\2\u01d4\u01d6\5j\66\2\u01d5")
        buf.write("\u01d7\5\u0092J\2\u01d6\u01d5\3\2\2\2\u01d6\u01d7\3\2")
        buf.write("\2\2\u01d7\u01d8\3\2\2\2\u01d8\u01d9\7Q\2\2\u01d9\u01db")
        buf.write("\3\2\2\2\u01da\u01cf\3\2\2\2\u01da\u01d3\3\2\2\2\u01db")
        buf.write("\u01dd\3\2\2\2\u01dc\u016e\3\2\2\2\u01dc\u0170\3\2\2\2")
        buf.write("\u01dc\u0171\3\2\2\2\u01dc\u0172\3\2\2\2\u01dc\u0173\3")
        buf.write("\2\2\2\u01dc\u0174\3\2\2\2\u01dc\u0175\3\2\2\2\u01dc\u0176")
        buf.write("\3\2\2\2\u01dc\u0177\3\2\2\2\u01dc\u0178\3\2\2\2\u01dc")
        buf.write("\u0179\3\2\2\2\u01dc\u017a\3\2\2\2\u01dc\u017b\3\2\2\2")
        buf.write("\u01dc\u017f\3\2\2\2\u01dc\u0180\3\2\2\2\u01dc\u0190\3")
        buf.write("\2\2\2\u01dc\u0199\3\2\2\2\u01dc\u01a2\3\2\2\2\u01dc\u01ad")
        buf.write("\3\2\2\2\u01dc\u01b8\3\2\2\2\u01dc\u01c3\3\2\2\2\u01dc")
        buf.write("\u01ce\3\2\2\2\u01dd\u01fa\3\2\2\2\u01de\u01eb\f\n\2\2")
        buf.write("\u01df\u01e2\7R\2\2\u01e0\u01e3\5F$\2\u01e1\u01e3\5\u00ae")
        buf.write("X\2\u01e2\u01e0\3\2\2\2\u01e2\u01e1\3\2\2\2\u01e3\u01e4")
        buf.write("\3\2\2\2\u01e4\u01e5\7S\2\2\u01e5\u01ec\3\2\2\2\u01e6")
        buf.write("\u01e8\7P\2\2\u01e7\u01e9\5\u00acW\2\u01e8\u01e7\3\2\2")
        buf.write("\2\u01e8\u01e9\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01ec")
        buf.write("\7Q\2\2\u01eb\u01df\3\2\2\2\u01eb\u01e6\3\2\2\2\u01ec")
        buf.write("\u01f9\3\2\2\2\u01ed\u01ee\f\t\2\2\u01ee\u01f4\t\3\2\2")
        buf.write("\u01ef\u01f1\7?\2\2\u01f0\u01ef\3\2\2\2\u01f0\u01f1\3")
        buf.write("\2\2\2\u01f1\u01f2\3\2\2\2\u01f2\u01f5\5\6\4\2\u01f3\u01f5")
        buf.write("\5\24\13\2\u01f4\u01f0\3\2\2\2\u01f4\u01f3\3\2\2\2\u01f5")
        buf.write("\u01f9\3\2\2\2\u01f6\u01f7\f\b\2\2\u01f7\u01f9\t\4\2\2")
        buf.write("\u01f8\u01de\3\2\2\2\u01f8\u01ed\3\2\2\2\u01f8\u01f6\3")
        buf.write("\2\2\2\u01f9\u01fc\3\2\2\2\u01fa\u01f8\3\2\2\2\u01fa\u01fb")
        buf.write("\3\2\2\2\u01fb\23\3\2\2\2\u01fc\u01fa\3\2\2\2\u01fd\u01ff")
        buf.write("\5\n\6\2\u01fe\u01fd\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff")
        buf.write("\u0200\3\2\2\2\u0200\u0201\5p9\2\u0201\u0202\7z\2\2\u0202")
        buf.write("\u0203\7^\2\2\u0203\u0204\5p9\2\u0204\u0219\3\2\2\2\u0205")
        buf.write("\u0206\5\n\6\2\u0206\u0207\7?\2\2\u0207\u0208\7\177\2")
        buf.write("\2\u0208\u020a\7a\2\2\u0209\u020b\5\u00ccg\2\u020a\u0209")
        buf.write("\3\2\2\2\u020a\u020b\3\2\2\2\u020b\u020c\3\2\2\2\u020c")
        buf.write("\u020d\7b\2\2\u020d\u020e\7z\2\2\u020e\u020f\7^\2\2\u020f")
        buf.write("\u0210\5p9\2\u0210\u0219\3\2\2\2\u0211\u0213\5\n\6\2\u0212")
        buf.write("\u0211\3\2\2\2\u0212\u0213\3\2\2\2\u0213\u0214\3\2\2\2")
        buf.write("\u0214\u0215\7^\2\2\u0215\u0219\5p9\2\u0216\u0217\7^\2")
        buf.write("\2\u0217\u0219\5r:\2\u0218\u01fe\3\2\2\2\u0218\u0205\3")
        buf.write("\2\2\2\u0218\u0212\3\2\2\2\u0218\u0216\3\2\2\2\u0219\25")
        buf.write("\3\2\2\2\u021a\u023e\5\22\n\2\u021b\u023e\5\30\r\2\u021c")
        buf.write("\u021d\5\32\16\2\u021d\u021e\5&\24\2\u021e\u023e\3\2\2")
        buf.write("\2\u021f\u0220\79\2\2\u0220\u023e\5\26\f\2\u0221\u0222")
        buf.write("\79\2\2\u0222\u0223\7P\2\2\u0223\u0225\5j\66\2\u0224\u0226")
        buf.write("\5\u0092J\2\u0225\u0224\3\2\2\2\u0225\u0226\3\2\2\2\u0226")
        buf.write("\u0227\3\2\2\2\u0227\u0228\7Q\2\2\u0228\u023e\3\2\2\2")
        buf.write("\u0229\u022a\79\2\2\u022a\u022b\7~\2\2\u022b\u022c\7P")
        buf.write("\2\2\u022c\u022d\7\177\2\2\u022d\u023e\7Q\2\2\u022e\u022f")
        buf.write("\7\6\2\2\u022f\u0230\7P\2\2\u0230\u0232\5j\66\2\u0231")
        buf.write("\u0233\5\u0092J\2\u0232\u0231\3\2\2\2\u0232\u0233\3\2")
        buf.write("\2\2\u0233\u0234\3\2\2\2\u0234\u0235\7Q\2\2\u0235\u023e")
        buf.write("\3\2\2\2\u0236\u0237\7-\2\2\u0237\u0238\7P\2\2\u0238\u0239")
        buf.write("\5F$\2\u0239\u023a\7Q\2\2\u023a\u023e\3\2\2\2\u023b\u023e")
        buf.write("\5\34\17\2\u023c\u023e\5$\23\2\u023d\u021a\3\2\2\2\u023d")
        buf.write("\u021b\3\2\2\2\u023d\u021c\3\2\2\2\u023d\u021f\3\2\2\2")
        buf.write("\u023d\u0221\3\2\2\2\u023d\u0229\3\2\2\2\u023d\u022e\3")
        buf.write("\2\2\2\u023d\u0236\3\2\2\2\u023d\u023b\3\2\2\2\u023d\u023c")
        buf.write("\3\2\2\2\u023e\27\3\2\2\2\u023f\u0240\t\4\2\2\u0240\u0241")
        buf.write("\5&\24\2\u0241\31\3\2\2\2\u0242\u0243\t\5\2\2\u0243\33")
        buf.write("\3\2\2\2\u0244\u0246\7z\2\2\u0245\u0244\3\2\2\2\u0245")
        buf.write("\u0246\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u024c\7,\2\2")
        buf.write("\u0248\u0249\7P\2\2\u0249\u024a\5\u00acW\2\u024a\u024b")
        buf.write("\7Q\2\2\u024b\u024d\3\2\2\2\u024c\u0248\3\2\2\2\u024c")
        buf.write("\u024d\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u0250\5j\66\2")
        buf.write("\u024f\u0251\5\36\20\2\u0250\u024f\3\2\2\2\u0250\u0251")
        buf.write("\3\2\2\2\u0251\u0253\3\2\2\2\u0252\u0254\5\"\22\2\u0253")
        buf.write("\u0252\3\2\2\2\u0253\u0254\3\2\2\2\u0254\u0269\3\2\2\2")
        buf.write("\u0255\u0257\7z\2\2\u0256\u0255\3\2\2\2\u0256\u0257\3")
        buf.write("\2\2\2\u0257\u0258\3\2\2\2\u0258\u025d\7,\2\2\u0259\u025a")
        buf.write("\7P\2\2\u025a\u025b\5\u00acW\2\u025b\u025c\7Q\2\2\u025c")
        buf.write("\u025e\3\2\2\2\u025d\u0259\3\2\2\2\u025d\u025e\3\2\2\2")
        buf.write("\u025e\u025f\3\2\2\2\u025f\u0260\7P\2\2\u0260\u0262\5")
        buf.write("j\66\2\u0261\u0263\5\u0092J\2\u0262\u0261\3\2\2\2\u0262")
        buf.write("\u0263\3\2\2\2\u0263\u0264\3\2\2\2\u0264\u0266\7Q\2\2")
        buf.write("\u0265\u0267\5\"\22\2\u0266\u0265\3\2\2\2\u0266\u0267")
        buf.write("\3\2\2\2\u0267\u0269\3\2\2\2\u0268\u0245\3\2\2\2\u0268")
        buf.write("\u0256\3\2\2\2\u0269\35\3\2\2\2\u026a\u026c\5\u008eH\2")
        buf.write("\u026b\u026d\5\36\20\2\u026c\u026b\3\2\2\2\u026c\u026d")
        buf.write("\3\2\2\2\u026d\u0270\3\2\2\2\u026e\u0270\5 \21\2\u026f")
        buf.write("\u026a\3\2\2\2\u026f\u026e\3\2\2\2\u0270\37\3\2\2\2\u0271")
        buf.write("\u0272\b\21\1\2\u0272\u0273\7R\2\2\u0273\u0274\5F$\2\u0274")
        buf.write("\u0276\7S\2\2\u0275\u0277\5x=\2\u0276\u0275\3\2\2\2\u0276")
        buf.write("\u0277\3\2\2\2\u0277\u0281\3\2\2\2\u0278\u0279\f\3\2\2")
        buf.write("\u0279\u027a\7R\2\2\u027a\u027b\5H%\2\u027b\u027d\7S\2")
        buf.write("\2\u027c\u027e\5x=\2\u027d\u027c\3\2\2\2\u027d\u027e\3")
        buf.write("\2\2\2\u027e\u0280\3\2\2\2\u027f\u0278\3\2\2\2\u0280\u0283")
        buf.write("\3\2\2\2\u0281\u027f\3\2\2\2\u0281\u0282\3\2\2\2\u0282")
        buf.write("!\3\2\2\2\u0283\u0281\3\2\2\2\u0284\u0286\7P\2\2\u0285")
        buf.write("\u0287\5\u00acW\2\u0286\u0285\3\2\2\2\u0286\u0287\3\2")
        buf.write("\2\2\u0287\u0288\3\2\2\2\u0288\u028b\7Q\2\2\u0289\u028b")
        buf.write("\5\u00aeX\2\u028a\u0284\3\2\2\2\u028a\u0289\3\2\2\2\u028b")
        buf.write("#\3\2\2\2\u028c\u028e\7z\2\2\u028d\u028c\3\2\2\2\u028d")
        buf.write("\u028e\3\2\2\2\u028e\u028f\3\2\2\2\u028f\u0292\7\27\2")
        buf.write("\2\u0290\u0291\7R\2\2\u0291\u0293\7S\2\2\u0292\u0290\3")
        buf.write("\2\2\2\u0292\u0293\3\2\2\2\u0293\u0294\3\2\2\2\u0294\u0295")
        buf.write("\5&\24\2\u0295%\3\2\2\2\u0296\u02a0\5\26\f\2\u0297\u0298")
        buf.write("\7P\2\2\u0298\u029a\5j\66\2\u0299\u029b\5\u0092J\2\u029a")
        buf.write("\u0299\3\2\2\2\u029a\u029b\3\2\2\2\u029b\u029c\3\2\2\2")
        buf.write("\u029c\u029d\7Q\2\2\u029d\u029e\5&\24\2\u029e\u02a0\3")
        buf.write("\2\2\2\u029f\u0296\3\2\2\2\u029f\u0297\3\2\2\2\u02a0\'")
        buf.write("\3\2\2\2\u02a1\u02a2\b\25\1\2\u02a2\u02a3\5&\24\2\u02a3")
        buf.write("\u02a9\3\2\2\2\u02a4\u02a5\f\3\2\2\u02a5\u02a6\t\6\2\2")
        buf.write("\u02a6\u02a8\5&\24\2\u02a7\u02a4\3\2\2\2\u02a8\u02ab\3")
        buf.write("\2\2\2\u02a9\u02a7\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa)")
        buf.write("\3\2\2\2\u02ab\u02a9\3\2\2\2\u02ac\u02ad\b\26\1\2\u02ad")
        buf.write("\u02ae\5(\25\2\u02ae\u02b4\3\2\2\2\u02af\u02b0\f\3\2\2")
        buf.write("\u02b0\u02b1\t\7\2\2\u02b1\u02b3\5(\25\2\u02b2\u02af\3")
        buf.write("\2\2\2\u02b3\u02b6\3\2\2\2\u02b4\u02b2\3\2\2\2\u02b4\u02b5")
        buf.write("\3\2\2\2\u02b5+\3\2\2\2\u02b6\u02b4\3\2\2\2\u02b7\u02b8")
        buf.write("\b\27\1\2\u02b8\u02b9\5*\26\2\u02b9\u02bf\3\2\2\2\u02ba")
        buf.write("\u02bb\f\3\2\2\u02bb\u02bc\t\b\2\2\u02bc\u02be\5*\26\2")
        buf.write("\u02bd\u02ba\3\2\2\2\u02be\u02c1\3\2\2\2\u02bf\u02bd\3")
        buf.write("\2\2\2\u02bf\u02c0\3\2\2\2\u02c0-\3\2\2\2\u02c1\u02bf")
        buf.write("\3\2\2\2\u02c2\u02c3\b\30\1\2\u02c3\u02c4\5,\27\2\u02c4")
        buf.write("\u02cd\3\2\2\2\u02c5\u02c8\f\3\2\2\u02c6\u02c9\7k\2\2")
        buf.write("\u02c7\u02c9\5\u00dco\2\u02c8\u02c6\3\2\2\2\u02c8\u02c7")
        buf.write("\3\2\2\2\u02c9\u02ca\3\2\2\2\u02ca\u02cc\5,\27\2\u02cb")
        buf.write("\u02c5\3\2\2\2\u02cc\u02cf\3\2\2\2\u02cd\u02cb\3\2\2\2")
        buf.write("\u02cd\u02ce\3\2\2\2\u02ce/\3\2\2\2\u02cf\u02cd\3\2\2")
        buf.write("\2\u02d0\u02d1\b\31\1\2\u02d1\u02d2\5.\30\2\u02d2\u02d8")
        buf.write("\3\2\2\2\u02d3\u02d4\f\3\2\2\u02d4\u02d5\t\t\2\2\u02d5")
        buf.write("\u02d7\5.\30\2\u02d6\u02d3\3\2\2\2\u02d7\u02da\3\2\2\2")
        buf.write("\u02d8\u02d6\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\61\3\2")
        buf.write("\2\2\u02da\u02d8\3\2\2\2\u02db\u02dc\b\32\1\2\u02dc\u02dd")
        buf.write("\5\60\31\2\u02dd\u02e3\3\2\2\2\u02de\u02df\f\3\2\2\u02df")
        buf.write("\u02e0\t\n\2\2\u02e0\u02e2\5\60\31\2\u02e1\u02de\3\2\2")
        buf.write("\2\u02e2\u02e5\3\2\2\2\u02e3\u02e1\3\2\2\2\u02e3\u02e4")
        buf.write("\3\2\2\2\u02e4\63\3\2\2\2\u02e5\u02e3\3\2\2\2\u02e6\u02e7")
        buf.write("\b\33\1\2\u02e7\u02e8\5\62\32\2\u02e8\u02ee\3\2\2\2\u02e9")
        buf.write("\u02ea\f\3\2\2\u02ea\u02eb\7\\\2\2\u02eb\u02ed\5\62\32")
        buf.write("\2\u02ec\u02e9\3\2\2\2\u02ed\u02f0\3\2\2\2\u02ee\u02ec")
        buf.write("\3\2\2\2\u02ee\u02ef\3\2\2\2\u02ef\65\3\2\2\2\u02f0\u02ee")
        buf.write("\3\2\2\2\u02f1\u02f2\b\34\1\2\u02f2\u02f3\5\64\33\2\u02f3")
        buf.write("\u02f9\3\2\2\2\u02f4\u02f5\f\3\2\2\u02f5\u02f6\7[\2\2")
        buf.write("\u02f6\u02f8\5\64\33\2\u02f7\u02f4\3\2\2\2\u02f8\u02fb")
        buf.write("\3\2\2\2\u02f9\u02f7\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa")
        buf.write("\67\3\2\2\2\u02fb\u02f9\3\2\2\2\u02fc\u02fd\b\35\1\2\u02fd")
        buf.write("\u02fe\5\66\34\2\u02fe\u0304\3\2\2\2\u02ff\u0300\f\3\2")
        buf.write("\2\u0300\u0301\7]\2\2\u0301\u0303\5\66\34\2\u0302\u02ff")
        buf.write("\3\2\2\2\u0303\u0306\3\2\2\2\u0304\u0302\3\2\2\2\u0304")
        buf.write("\u0305\3\2\2\2\u03059\3\2\2\2\u0306\u0304\3\2\2\2\u0307")
        buf.write("\u0308\b\36\1\2\u0308\u0309\58\35\2\u0309\u030f\3\2\2")
        buf.write("\2\u030a\u030b\f\3\2\2\u030b\u030c\7q\2\2\u030c\u030e")
        buf.write("\58\35\2\u030d\u030a\3\2\2\2\u030e\u0311\3\2\2\2\u030f")
        buf.write("\u030d\3\2\2\2\u030f\u0310\3\2\2\2\u0310;\3\2\2\2\u0311")
        buf.write("\u030f\3\2\2\2\u0312\u0313\b\37\1\2\u0313\u0314\5:\36")
        buf.write("\2\u0314\u031a\3\2\2\2\u0315\u0316\f\3\2\2\u0316\u0317")
        buf.write("\7r\2\2\u0317\u0319\5:\36\2\u0318\u0315\3\2\2\2\u0319")
        buf.write("\u031c\3\2\2\2\u031a\u0318\3\2\2\2\u031a\u031b\3\2\2\2")
        buf.write("\u031b=\3\2\2\2\u031c\u031a\3\2\2\2\u031d\u031e\5<\37")
        buf.write("\2\u031e\u031f\7x\2\2\u031f\u0320\5F$\2\u0320\u0321\7")
        buf.write("y\2\2\u0321\u0322\5B\"\2\u0322?\3\2\2\2\u0323\u0324\5")
        buf.write("<\37\2\u0324\u0325\7x\2\2\u0325\u0326\7y\2\2\u0326\u0327")
        buf.write("\5B\"\2\u0327A\3\2\2\2\u0328\u032c\5<\37\2\u0329\u032a")
        buf.write("\5D#\2\u032a\u032b\5\u00aaV\2\u032b\u032d\3\2\2\2\u032c")
        buf.write("\u0329\3\2\2\2\u032c\u032d\3\2\2\2\u032d\u0335\3\2\2\2")
        buf.write("\u032e\u0335\5> \2\u032f\u0335\5@!\2\u0330\u0332\7B\2")
        buf.write("\2\u0331\u0333\5B\"\2\u0332\u0331\3\2\2\2\u0332\u0333")
        buf.write("\3\2\2\2\u0333\u0335\3\2\2\2\u0334\u0328\3\2\2\2\u0334")
        buf.write("\u032e\3\2\2\2\u0334\u032f\3\2\2\2\u0334\u0330\3\2\2\2")
        buf.write("\u0335C\3\2\2\2\u0336\u0342\7`\2\2\u0337\u0342\7e\2\2")
        buf.write("\u0338\u0342\7f\2\2\u0339\u0342\7g\2\2\u033a\u0342\7c")
        buf.write("\2\2\u033b\u0342\7d\2\2\u033c\u0342\5\u00dep\2\u033d\u0342")
        buf.write("\7l\2\2\u033e\u0342\7i\2\2\u033f\u0342\7h\2\2\u0340\u0342")
        buf.write("\7j\2\2\u0341\u0336\3\2\2\2\u0341\u0337\3\2\2\2\u0341")
        buf.write("\u0338\3\2\2\2\u0341\u0339\3\2\2\2\u0341\u033a\3\2\2\2")
        buf.write("\u0341\u033b\3\2\2\2\u0341\u033c\3\2\2\2\u0341\u033d\3")
        buf.write("\2\2\2\u0341\u033e\3\2\2\2\u0341\u033f\3\2\2\2\u0341\u0340")
        buf.write("\3\2\2\2\u0342E\3\2\2\2\u0343\u0344\b$\1\2\u0344\u0345")
        buf.write("\5B\"\2\u0345\u034b\3\2\2\2\u0346\u0347\f\3\2\2\u0347")
        buf.write("\u0348\7u\2\2\u0348\u034a\5B\"\2\u0349\u0346\3\2\2\2\u034a")
        buf.write("\u034d\3\2\2\2\u034b\u0349\3\2\2\2\u034b\u034c\3\2\2\2")
        buf.write("\u034cG\3\2\2\2\u034d\u034b\3\2\2\2\u034e\u0352\5<\37")
        buf.write("\2\u034f\u0352\5> \2\u0350\u0352\5@!\2\u0351\u034e\3\2")
        buf.write("\2\2\u0351\u034f\3\2\2\2\u0351\u0350\3\2\2\2\u0352I\3")
        buf.write("\2\2\2\u0353\u0355\5x=\2\u0354\u0353\3\2\2\2\u0354\u0355")
        buf.write("\3\2\2\2\u0355\u0356\3\2\2\2\u0356\u0357\7\177\2\2\u0357")
        buf.write("\u0358\7y\2\2\u0358\u03d5\5J&\2\u0359\u035b\5x=\2\u035a")
        buf.write("\u0359\3\2\2\2\u035a\u035b\3\2\2\2\u035b\u035c\3\2\2\2")
        buf.write("\u035c\u03d5\5L\'\2\u035d\u035f\5x=\2\u035e\u035d\3\2")
        buf.write("\2\2\u035e\u035f\3\2\2\2\u035f\u0360\3\2\2\2\u0360\u03d5")
        buf.write("\5N(\2\u0361\u0363\5x=\2\u0362\u0361\3\2\2\2\u0362\u0363")
        buf.write("\3\2\2\2\u0363\u0365\3\2\2\2\u0364\u0366\5F$\2\u0365\u0364")
        buf.write("\3\2\2\2\u0365\u0366\3\2\2\2\u0366\u0367\3\2\2\2\u0367")
        buf.write("\u03d5\7{\2\2\u0368\u036a\5x=\2\u0369\u0368\3\2\2\2\u0369")
        buf.write("\u036a\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u036f\7T\2\2")
        buf.write("\u036c\u036e\5J&\2\u036d\u036c\3\2\2\2\u036e\u0371\3\2")
        buf.write("\2\2\u036f\u036d\3\2\2\2\u036f\u0370\3\2\2\2\u0370\u0372")
        buf.write("\3\2\2\2\u0371\u036f\3\2\2\2\u0372\u03d5\7U\2\2\u0373")
        buf.write("\u0375\5x=\2\u0374\u0373\3\2\2\2\u0374\u0375\3\2\2\2\u0375")
        buf.write("\u0376\3\2\2\2\u0376\u03d5\5P)\2\u0377\u0379\5x=\2\u0378")
        buf.write("\u0377\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037a\3\2\2\2")
        buf.write("\u037a\u03d5\5V,\2\u037b\u037d\5x=\2\u037c\u037b\3\2\2")
        buf.write("\2\u037c\u037d\3\2\2\2\u037d\u037e\3\2\2\2\u037e\u03d5")
        buf.write("\5Z.\2\u037f\u0381\5x=\2\u0380\u037f\3\2\2\2\u0380\u0381")
        buf.write("\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0383\7J\2\2\u0383")
        buf.write("\u0385\7+\2\2\u0384\u0386\5\n\6\2\u0385\u0384\3\2\2\2")
        buf.write("\u0385\u0386\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u0388\7")
        buf.write("\177\2\2\u0388\u03d5\7{\2\2\u0389\u038b\5x=\2\u038a\u038c")
        buf.write("\5d\63\2\u038b\u038a\3\2\2\2\u038b\u038c\3\2\2\2\u038c")
        buf.write("\u038d\3\2\2\2\u038d\u038e\5\u0084C\2\u038e\u038f\7{\2")
        buf.write("\2\u038f\u03d5\3\2\2\2\u0390\u0392\5x=\2\u0391\u0390\3")
        buf.write("\2\2\2\u0391\u0392\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u03d5")
        buf.write("\5\u00d2j\2\u0394\u0396\5d\63\2\u0395\u0394\3\2\2\2\u0395")
        buf.write("\u0396\3\2\2\2\u0396\u0398\3\2\2\2\u0397\u0399\5\u0084")
        buf.write("C\2\u0398\u0397\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u039a")
        buf.write("\3\2\2\2\u039a\u03d5\7{\2\2\u039b\u039c\7\7\2\2\u039c")
        buf.write("\u039d\7P\2\2\u039d\u039e\7\u0088\2\2\u039e\u039f\7Q\2")
        buf.write("\2\u039f\u03d5\7{\2\2\u03a0\u03a1\7+\2\2\u03a1\u03a2\7")
        buf.write("\177\2\2\u03a2\u03a4\7`\2\2\u03a3\u03a5\5\n\6\2\u03a4")
        buf.write("\u03a3\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a6\3\2\2\2")
        buf.write("\u03a6\u03a7\7\177\2\2\u03a7\u03d5\7{\2\2\u03a8\u03a9")
        buf.write("\7J\2\2\u03a9\u03aa\7z\2\2\u03aa\u03ab\5\b\5\2\u03ab\u03ac")
        buf.write("\7{\2\2\u03ac\u03d5\3\2\2\2\u03ad\u03af\7J\2\2\u03ae\u03b0")
        buf.write("\7G\2\2\u03af\u03ae\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0")
        buf.write("\u03b1\3\2\2\2\u03b1\u03b2\5\n\6\2\u03b2\u03b3\5\b\5\2")
        buf.write("\u03b3\u03b4\7{\2\2\u03b4\u03d5\3\2\2\2\u03b5\u03b6\7")
        buf.write("J\2\2\u03b6\u03b8\7\177\2\2\u03b7\u03b9\5x=\2\u03b8\u03b7")
        buf.write("\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba")
        buf.write("\u03bb\7`\2\2\u03bb\u03bd\5j\66\2\u03bc\u03be\5\u0092")
        buf.write("J\2\u03bd\u03bc\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03bf")
        buf.write("\3\2\2\2\u03bf\u03c0\7{\2\2\u03c0\u03d5\3\2\2\2\u03c1")
        buf.write("\u03c2\7;\2\2\u03c2\u03c3\7P\2\2\u03c3\u03c4\5H%\2\u03c4")
        buf.write("\u03c5\7u\2\2\u03c5\u03c6\7\u0088\2\2\u03c6\u03c7\7Q\2")
        buf.write("\2\u03c7\u03c8\7{\2\2\u03c8\u03d5\3\2\2\2\u03c9\u03cb")
        buf.write("\5t;\2\u03ca\u03cc\5x=\2\u03cb\u03ca\3\2\2\2\u03cb\u03cc")
        buf.write("\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u03d0\7\177\2\2\u03ce")
        buf.write("\u03cf\7y\2\2\u03cf\u03d1\5j\66\2\u03d0\u03ce\3\2\2\2")
        buf.write("\u03d0\u03d1\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d3\7")
        buf.write("{\2\2\u03d3\u03d5\3\2\2\2\u03d4\u0354\3\2\2\2\u03d4\u035a")
        buf.write("\3\2\2\2\u03d4\u035e\3\2\2\2\u03d4\u0362\3\2\2\2\u03d4")
        buf.write("\u0369\3\2\2\2\u03d4\u0374\3\2\2\2\u03d4\u0378\3\2\2\2")
        buf.write("\u03d4\u037c\3\2\2\2\u03d4\u0380\3\2\2\2\u03d4\u0389\3")
        buf.write("\2\2\2\u03d4\u0391\3\2\2\2\u03d4\u0395\3\2\2\2\u03d4\u039b")
        buf.write("\3\2\2\2\u03d4\u03a0\3\2\2\2\u03d4\u03a8\3\2\2\2\u03d4")
        buf.write("\u03ad\3\2\2\2\u03d4\u03b5\3\2\2\2\u03d4\u03c1\3\2\2\2")
        buf.write("\u03d4\u03c9\3\2\2\2\u03d5K\3\2\2\2\u03d6\u03d7\7\13\2")
        buf.write("\2\u03d7\u03d8\5H%\2\u03d8\u03d9\7y\2\2\u03d9\u03da\5")
        buf.write("J&\2\u03daM\3\2\2\2\u03db\u03dc\7\26\2\2\u03dc\u03dd\7")
        buf.write("y\2\2\u03dd\u03de\5J&\2\u03deO\3\2\2\2\u03df\u03e0\7&")
        buf.write("\2\2\u03e0\u03e1\7P\2\2\u03e1\u03e2\5T+\2\u03e2\u03e3")
        buf.write("\7Q\2\2\u03e3\u03e5\5J&\2\u03e4\u03e6\5R*\2\u03e5\u03e4")
        buf.write("\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03ee\3\2\2\2\u03e7")
        buf.write("\u03e8\7>\2\2\u03e8\u03e9\7P\2\2\u03e9\u03ea\5T+\2\u03ea")
        buf.write("\u03eb\7Q\2\2\u03eb\u03ec\5J&\2\u03ec\u03ee\3\2\2\2\u03ed")
        buf.write("\u03df\3\2\2\2\u03ed\u03e7\3\2\2\2\u03eeQ\3\2\2\2\u03ef")
        buf.write("\u03f0\7\33\2\2\u03f0\u03f1\5J&\2\u03f1S\3\2\2\2\u03f2")
        buf.write("\u03fe\5F$\2\u03f3\u03f5\5x=\2\u03f4\u03f3\3\2\2\2\u03f4")
        buf.write("\u03f5\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f7\5d\63\2")
        buf.write("\u03f7\u03fb\5\u0086D\2\u03f8\u03f9\7`\2\2\u03f9\u03fc")
        buf.write("\5\u00aaV\2\u03fa\u03fc\5\u00aeX\2\u03fb\u03f8\3\2\2\2")
        buf.write("\u03fb\u03fa\3\2\2\2\u03fc\u03fe\3\2\2\2\u03fd\u03f2\3")
        buf.write("\2\2\2\u03fd\u03f4\3\2\2\2\u03feU\3\2\2\2\u03ff\u0400")
        buf.write("\7O\2\2\u0400\u0401\7P\2\2\u0401\u0402\5T+\2\u0402\u0403")
        buf.write("\7Q\2\2\u0403\u0404\5J&\2\u0404\u042a\3\2\2\2\u0405\u0406")
        buf.write("\7\30\2\2\u0406\u0407\5J&\2\u0407\u0408\7O\2\2\u0408\u0409")
        buf.write("\7P\2\2\u0409\u040a\5F$\2\u040a\u040b\7Q\2\2\u040b\u040c")
        buf.write("\7{\2\2\u040c\u042a\3\2\2\2\u040d\u040e\7#\2\2\u040e\u040f")
        buf.write("\7P\2\2\u040f\u0411\5X-\2\u0410\u0412\5T+\2\u0411\u0410")
        buf.write("\3\2\2\2\u0411\u0412\3\2\2\2\u0412\u0413\3\2\2\2\u0413")
        buf.write("\u0415\7{\2\2\u0414\u0416\5F$\2\u0415\u0414\3\2\2\2\u0415")
        buf.write("\u0416\3\2\2\2\u0416\u0417\3\2\2\2\u0417\u0418\7Q\2\2")
        buf.write("\u0418\u0419\5J&\2\u0419\u042a\3\2\2\2\u041a\u041b\7#")
        buf.write("\2\2\u041b\u041d\7P\2\2\u041c\u041e\5x=\2\u041d\u041c")
        buf.write("\3\2\2\2\u041d\u041e\3\2\2\2\u041e\u041f\3\2\2\2\u041f")
        buf.write("\u0420\5d\63\2\u0420\u0421\5\u0086D\2\u0421\u0424\7y\2")
        buf.write("\2\u0422\u0425\5F$\2\u0423\u0425\5\u00aeX\2\u0424\u0422")
        buf.write("\3\2\2\2\u0424\u0423\3\2\2\2\u0425\u0426\3\2\2\2\u0426")
        buf.write("\u0427\7Q\2\2\u0427\u0428\5J&\2\u0428\u042a\3\2\2\2\u0429")
        buf.write("\u03ff\3\2\2\2\u0429\u0405\3\2\2\2\u0429\u040d\3\2\2\2")
        buf.write("\u0429\u041a\3\2\2\2\u042aW\3\2\2\2\u042b\u042d\5F$\2")
        buf.write("\u042c\u042b\3\2\2\2\u042c\u042d\3\2\2\2\u042d\u042e\3")
        buf.write("\2\2\2\u042e\u043e\7{\2\2\u042f\u0431\5d\63\2\u0430\u042f")
        buf.write("\3\2\2\2\u0430\u0431\3\2\2\2\u0431\u0433\3\2\2\2\u0432")
        buf.write("\u0434\5\u0084C\2\u0433\u0432\3\2\2\2\u0433\u0434\3\2")
        buf.write("\2\2\u0434\u0435\3\2\2\2\u0435\u043e\7{\2\2\u0436\u0438")
        buf.write("\5x=\2\u0437\u0439\5d\63\2\u0438\u0437\3\2\2\2\u0438\u0439")
        buf.write("\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u043b\5\u0084C\2\u043b")
        buf.write("\u043c\7{\2\2\u043c\u043e\3\2\2\2\u043d\u042c\3\2\2\2")
        buf.write("\u043d\u0430\3\2\2\2\u043d\u0436\3\2\2\2\u043eY\3\2\2")
        buf.write("\2\u043f\u0440\t\13\2\2\u0440\u044b\7{\2\2\u0441\u0446")
        buf.write("\7\66\2\2\u0442\u0444\5F$\2\u0443\u0442\3\2\2\2\u0443")
        buf.write("\u0444\3\2\2\2\u0444\u0447\3\2\2\2\u0445\u0447\5\u00ae")
        buf.write("X\2\u0446\u0443\3\2\2\2\u0446\u0445\3\2\2\2\u0447\u0448")
        buf.write("\3\2\2\2\u0448\u044b\7{\2\2\u0449\u044b\5\\/\2\u044a\u043f")
        buf.write("\3\2\2\2\u044a\u0441\3\2\2\2\u044a\u0449\3\2\2\2\u044b")
        buf.write("[\3\2\2\2\u044c\u044d\7%\2\2\u044d\u044e\7\177\2\2\u044e")
        buf.write("\u044f\7{\2\2\u044f]\3\2\2\2\u0450\u0451\b\60\1\2\u0451")
        buf.write("\u0452\5`\61\2\u0452\u0457\3\2\2\2\u0453\u0454\f\3\2\2")
        buf.write("\u0454\u0456\5`\61\2\u0455\u0453\3\2\2\2\u0456\u0459\3")
        buf.write("\2\2\2\u0457\u0455\3\2\2\2\u0457\u0458\3\2\2\2\u0458_")
        buf.write("\3\2\2\2\u0459\u0457\3\2\2\2\u045a\u045c\5d\63\2\u045b")
        buf.write("\u045a\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u045e\3\2\2\2")
        buf.write("\u045d\u045f\5\u0084C\2\u045e\u045d\3\2\2\2\u045e\u045f")
        buf.write("\3\2\2\2\u045f\u0460\3\2\2\2\u0460\u04d7\7{\2\2\u0461")
        buf.write("\u0466\5x=\2\u0462\u0464\5d\63\2\u0463\u0462\3\2\2\2\u0463")
        buf.write("\u0464\3\2\2\2\u0464\u0465\3\2\2\2\u0465\u0467\5\u0084")
        buf.write("C\2\u0466\u0463\3\2\2\2\u0466\u0467\3\2\2\2\u0467\u0468")
        buf.write("\3\2\2\2\u0468\u0469\7{\2\2\u0469\u04d7\3\2\2\2\u046a")
        buf.write("\u046c\5x=\2\u046b\u046a\3\2\2\2\u046b\u046c\3\2\2\2\u046c")
        buf.write("\u046d\3\2\2\2\u046d\u046e\7J\2\2\u046e\u0470\7+\2\2\u046f")
        buf.write("\u0471\5\n\6\2\u0470\u046f\3\2\2\2\u0470\u0471\3\2\2\2")
        buf.write("\u0471\u0472\3\2\2\2\u0472\u0473\7\177\2\2\u0473\u04d7")
        buf.write("\7{\2\2\u0474\u0475\7\7\2\2\u0475\u0476\7P\2\2\u0476\u0477")
        buf.write("\7\u0088\2\2\u0477\u0478\7Q\2\2\u0478\u04d7\7{\2\2\u0479")
        buf.write("\u047a\7+\2\2\u047a\u047b\7\177\2\2\u047b\u047d\7`\2\2")
        buf.write("\u047c\u047e\5\n\6\2\u047d\u047c\3\2\2\2\u047d\u047e\3")
        buf.write("\2\2\2\u047e\u047f\3\2\2\2\u047f\u0480\7\177\2\2\u0480")
        buf.write("\u04d7\7{\2\2\u0481\u0482\7J\2\2\u0482\u0483\7z\2\2\u0483")
        buf.write("\u0484\5\b\5\2\u0484\u0485\7{\2\2\u0485\u04d7\3\2\2\2")
        buf.write("\u0486\u0488\7J\2\2\u0487\u0489\7G\2\2\u0488\u0487\3\2")
        buf.write("\2\2\u0488\u0489\3\2\2\2\u0489\u048a\3\2\2\2\u048a\u048b")
        buf.write("\5\n\6\2\u048b\u048c\5\b\5\2\u048c\u048d\7{\2\2\u048d")
        buf.write("\u04d7\3\2\2\2\u048e\u048f\7J\2\2\u048f\u0491\7\177\2")
        buf.write("\2\u0490\u0492\5x=\2\u0491\u0490\3\2\2\2\u0491\u0492\3")
        buf.write("\2\2\2\u0492\u0493\3\2\2\2\u0493\u0494\7`\2\2\u0494\u0496")
        buf.write("\5j\66\2\u0495\u0497\5\u0092J\2\u0496\u0495\3\2\2\2\u0496")
        buf.write("\u0497\3\2\2\2\u0497\u0498\3\2\2\2\u0498\u0499\7{\2\2")
        buf.write("\u0499\u04d7\3\2\2\2\u049a\u049b\7;\2\2\u049b\u049c\7")
        buf.write("P\2\2\u049c\u049d\5H%\2\u049d\u049e\7u\2\2\u049e\u049f")
        buf.write("\7\u0088\2\2\u049f\u04a0\7Q\2\2\u04a0\u04a1\7{\2\2\u04a1")
        buf.write("\u04d7\3\2\2\2\u04a2\u04a4\5t;\2\u04a3\u04a5\5x=\2\u04a4")
        buf.write("\u04a3\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u04a6\3\2\2\2")
        buf.write("\u04a6\u04a9\7\177\2\2\u04a7\u04a8\7y\2\2\u04a8\u04aa")
        buf.write("\5j\66\2\u04a9\u04a7\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa")
        buf.write("\u04ab\3\2\2\2\u04ab\u04ac\7{\2\2\u04ac\u04d7\3\2\2\2")
        buf.write("\u04ad\u04d7\5\u00a2R\2\u04ae\u04af\7?\2\2\u04af\u04b1")
        buf.write("\7a\2\2\u04b0\u04b2\5\u00c8e\2\u04b1\u04b0\3\2\2\2\u04b1")
        buf.write("\u04b2\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3\u04b4\7b\2\2")
        buf.write("\u04b4\u04d7\5`\61\2\u04b5\u04b7\7\37\2\2\u04b6\u04b5")
        buf.write("\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7\u04b8\3\2\2\2\u04b8")
        buf.write("\u04b9\7?\2\2\u04b9\u04d7\5`\61\2\u04ba\u04bb\7\37\2\2")
        buf.write("\u04bb\u04c2\7\u0088\2\2\u04bc\u04be\7T\2\2\u04bd\u04bf")
        buf.write("\5^\60\2\u04be\u04bd\3\2\2\2\u04be\u04bf\3\2\2\2\u04bf")
        buf.write("\u04c0\3\2\2\2\u04c0\u04c3\7U\2\2\u04c1\u04c3\5`\61\2")
        buf.write("\u04c2\u04bc\3\2\2\2\u04c2\u04c1\3\2\2\2\u04c3\u04d7\3")
        buf.write("\2\2\2\u04c4\u04c6\7\'\2\2\u04c5\u04c4\3\2\2\2\u04c5\u04c6")
        buf.write("\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7\u04d3\7+\2\2\u04c8")
        buf.write("\u04c9\7\177\2\2\u04c9\u04cb\7T\2\2\u04ca\u04cc\5^\60")
        buf.write("\2\u04cb\u04ca\3\2\2\2\u04cb\u04cc\3\2\2\2\u04cc\u04cd")
        buf.write("\3\2\2\2\u04cd\u04d4\7U\2\2\u04ce\u04d0\7T\2\2\u04cf\u04d1")
        buf.write("\5^\60\2\u04d0\u04cf\3\2\2\2\u04d0\u04d1\3\2\2\2\u04d1")
        buf.write("\u04d2\3\2\2\2\u04d2\u04d4\7U\2\2\u04d3\u04c8\3\2\2\2")
        buf.write("\u04d3\u04ce\3\2\2\2\u04d4\u04d7\3\2\2\2\u04d5\u04d7\7")
        buf.write("{\2\2\u04d6\u045b\3\2\2\2\u04d6\u0461\3\2\2\2\u04d6\u046b")
        buf.write("\3\2\2\2\u04d6\u0474\3\2\2\2\u04d6\u0479\3\2\2\2\u04d6")
        buf.write("\u0481\3\2\2\2\u04d6\u0486\3\2\2\2\u04d6\u048e\3\2\2\2")
        buf.write("\u04d6\u049a\3\2\2\2\u04d6\u04a2\3\2\2\2\u04d6\u04ad\3")
        buf.write("\2\2\2\u04d6\u04ae\3\2\2\2\u04d6\u04b6\3\2\2\2\u04d6\u04ba")
        buf.write("\3\2\2\2\u04d6\u04c5\3\2\2\2\u04d6\u04d5\3\2\2\2\u04d7")
        buf.write("a\3\2\2\2\u04d8\u04e5\7\64\2\2\u04d9\u04e5\7:\2\2\u04da")
        buf.write("\u04e5\7A\2\2\u04db\u04e5\7\37\2\2\u04dc\u04e5\7*\2\2")
        buf.write("\u04dd\u04e5\5f\64\2\u04de\u04e5\7\'\2\2\u04df\u04e5\7")
        buf.write("K\2\2\u04e0\u04e5\7\35\2\2\u04e1\u04e5\7$\2\2\u04e2\u04e5")
        buf.write("\7E\2\2\u04e3\u04e5\7\22\2\2\u04e4\u04d8\3\2\2\2\u04e4")
        buf.write("\u04d9\3\2\2\2\u04e4\u04da\3\2\2\2\u04e4\u04db\3\2\2\2")
        buf.write("\u04e4\u04dc\3\2\2\2\u04e4\u04dd\3\2\2\2\u04e4\u04de\3")
        buf.write("\2\2\2\u04e4\u04df\3\2\2\2\u04e4\u04e0\3\2\2\2\u04e4\u04e1")
        buf.write("\3\2\2\2\u04e4\u04e2\3\2\2\2\u04e4\u04e3\3\2\2\2\u04e5")
        buf.write("c\3\2\2\2\u04e6\u04e9\5b\62\2\u04e7\u04ea\5x=\2\u04e8")
        buf.write("\u04ea\5d\63\2\u04e9\u04e7\3\2\2\2\u04e9\u04e8\3\2\2\2")
        buf.write("\u04e9\u04ea\3\2\2\2\u04eae\3\2\2\2\u04eb\u051e\5h\65")
        buf.write("\2\u04ec\u04ee\5\u00b2Z\2\u04ed\u04ef\5x=\2\u04ee\u04ed")
        buf.write("\3\2\2\2\u04ee\u04ef\3\2\2\2\u04ef\u04f7\3\2\2\2\u04f0")
        buf.write("\u04f2\5\n\6\2\u04f1\u04f0\3\2\2\2\u04f1\u04f2\3\2\2\2")
        buf.write("\u04f2\u04f3\3\2\2\2\u04f3\u04f5\5\u00b0Y\2\u04f4\u04f6")
        buf.write("\7!\2\2\u04f5\u04f4\3\2\2\2\u04f5\u04f6\3\2\2\2\u04f6")
        buf.write("\u04f8\3\2\2\2\u04f7\u04f1\3\2\2\2\u04f7\u04f8\3\2\2\2")
        buf.write("\u04f8\u04fb\3\2\2\2\u04f9\u04fa\7y\2\2\u04fa\u04fc\5")
        buf.write("\u00be`\2\u04fb\u04f9\3\2\2\2\u04fb\u04fc\3\2\2\2\u04fc")
        buf.write("\u04fd\3\2\2\2\u04fd\u0502\7T\2\2\u04fe\u0503\5\u00b4")
        buf.write("[\2\u04ff\u0500\5\u00c4c\2\u0500\u0501\7y\2\2\u0501\u0503")
        buf.write("\3\2\2\2\u0502\u04fe\3\2\2\2\u0502\u04ff\3\2\2\2\u0502")
        buf.write("\u0503\3\2\2\2\u0503\u0504\3\2\2\2\u0504\u0505\7U\2\2")
        buf.write("\u0505\u051e\3\2\2\2\u0506\u0508\5t;\2\u0507\u0509\5x")
        buf.write("=\2\u0508\u0507\3\2\2\2\u0508\u0509\3\2\2\2\u0509\u050e")
        buf.write("\3\2\2\2\u050a\u050c\5\n\6\2\u050b\u050a\3\2\2\2\u050b")
        buf.write("\u050c\3\2\2\2\u050c\u050d\3\2\2\2\u050d\u050f\7\177\2")
        buf.write("\2\u050e\u050b\3\2\2\2\u050e\u050f\3\2\2\2\u050f\u0512")
        buf.write("\3\2\2\2\u0510\u0511\7y\2\2\u0511\u0513\5j\66\2\u0512")
        buf.write("\u0510\3\2\2\2\u0512\u0513\3\2\2\2\u0513\u0514\3\2\2\2")
        buf.write("\u0514\u0516\7T\2\2\u0515\u0517\5v<\2\u0516\u0515\3\2")
        buf.write("\2\2\u0516\u0517\3\2\2\2\u0517\u0519\3\2\2\2\u0518\u051a")
        buf.write("\7u\2\2\u0519\u0518\3\2\2\2\u0519\u051a\3\2\2\2\u051a")
        buf.write("\u051b\3\2\2\2\u051b\u051c\7U\2\2\u051c\u051e\3\2\2\2")
        buf.write("\u051d\u04eb\3\2\2\2\u051d\u04ec\3\2\2\2\u051d\u0506\3")
        buf.write("\2\2\2\u051eg\3\2\2\2\u051f\u0545\5n8\2\u0520\u0522\5")
        buf.write("\u00b2Z\2\u0521\u0523\5x=\2\u0522\u0521\3\2\2\2\u0522")
        buf.write("\u0523\3\2\2\2\u0523\u0525\3\2\2\2\u0524\u0526\5\n\6\2")
        buf.write("\u0525\u0524\3\2\2\2\u0525\u0526\3\2\2\2\u0526\u0527\3")
        buf.write("\2\2\2\u0527\u0528\7\177\2\2\u0528\u0545\3\2\2\2\u0529")
        buf.write("\u052a\5\u00b2Z\2\u052a\u052b\7\177\2\2\u052b\u052d\7")
        buf.write("a\2\2\u052c\u052e\5\u00ccg\2\u052d\u052c\3\2\2\2\u052d")
        buf.write("\u052e\3\2\2\2\u052e\u052f\3\2\2\2\u052f\u0530\7b\2\2")
        buf.write("\u0530\u0545\3\2\2\2\u0531\u0532\5\u00b2Z\2\u0532\u0534")
        buf.write("\5\n\6\2\u0533\u0535\7?\2\2\u0534\u0533\3\2\2\2\u0534")
        buf.write("\u0535\3\2\2\2\u0535\u0536\3\2\2\2\u0536\u0537\7\177\2")
        buf.write("\2\u0537\u0539\7a\2\2\u0538\u053a\5\u00ccg\2\u0539\u0538")
        buf.write("\3\2\2\2\u0539\u053a\3\2\2\2\u053a\u053b\3\2\2\2\u053b")
        buf.write("\u053c\7b\2\2\u053c\u0545\3\2\2\2\u053d\u053f\7\34\2\2")
        buf.write("\u053e\u0540\5\n\6\2\u053f\u053e\3\2\2\2\u053f\u0540\3")
        buf.write("\2\2\2\u0540\u0541\3\2\2\2\u0541\u0545\7\177\2\2\u0542")
        buf.write("\u0545\5\u00d0i\2\u0543\u0545\5\u0090I\2\u0544\u051f\3")
        buf.write("\2\2\2\u0544\u0520\3\2\2\2\u0544\u0529\3\2\2\2\u0544\u0531")
        buf.write("\3\2\2\2\u0544\u053d\3\2\2\2\u0544\u0542\3\2\2\2\u0544")
        buf.write("\u0543\3\2\2\2\u0545i\3\2\2\2\u0546\u0549\5f\64\2\u0547")
        buf.write("\u054a\5x=\2\u0548\u054a\5j\66\2\u0549\u0547\3\2\2\2\u0549")
        buf.write("\u0548\3\2\2\2\u0549\u054a\3\2\2\2\u054ak\3\2\2\2\u054b")
        buf.write("\u054e\5h\65\2\u054c\u054f\5x=\2\u054d\u054f\5l\67\2\u054e")
        buf.write("\u054c\3\2\2\2\u054e\u054d\3\2\2\2\u054e\u054f\3\2\2\2")
        buf.write("\u054fm\3\2\2\2\u0550\u0552\5\n\6\2\u0551\u0550\3\2\2")
        buf.write("\2\u0551\u0552\3\2\2\2\u0552\u0553\3\2\2\2\u0553\u056d")
        buf.write("\5p9\2\u0554\u0555\5\n\6\2\u0555\u0556\7?\2\2\u0556\u0557")
        buf.write("\7\177\2\2\u0557\u0559\7a\2\2\u0558\u055a\5\u00ccg\2\u0559")
        buf.write("\u0558\3\2\2\2\u0559\u055a\3\2\2\2\u055a\u055b\3\2\2\2")
        buf.write("\u055b\u055c\7b\2\2\u055c\u056d\3\2\2\2\u055d\u056d\7")
        buf.write("\r\2\2\u055e\u056d\7\16\2\2\u055f\u056d\7\17\2\2\u0560")
        buf.write("\u056d\7N\2\2\u0561\u056d\7\t\2\2\u0562\u056d\7\67\2\2")
        buf.write("\u0563\u056d\7(\2\2\u0564\u056d\7)\2\2\u0565\u056d\78")
        buf.write("\2\2\u0566\u056d\7I\2\2\u0567\u056d\7\"\2\2\u0568\u056d")
        buf.write("\7\31\2\2\u0569\u056d\7L\2\2\u056a\u056d\7\b\2\2\u056b")
        buf.write("\u056d\5r:\2\u056c\u0551\3\2\2\2\u056c\u0554\3\2\2\2\u056c")
        buf.write("\u055d\3\2\2\2\u056c\u055e\3\2\2\2\u056c\u055f\3\2\2\2")
        buf.write("\u056c\u0560\3\2\2\2\u056c\u0561\3\2\2\2\u056c\u0562\3")
        buf.write("\2\2\2\u056c\u0563\3\2\2\2\u056c\u0564\3\2\2\2\u056c\u0565")
        buf.write("\3\2\2\2\u056c\u0566\3\2\2\2\u056c\u0567\3\2\2\2\u056c")
        buf.write("\u0568\3\2\2\2\u056c\u0569\3\2\2\2\u056c\u056a\3\2\2\2")
        buf.write("\u056c\u056b\3\2\2\2\u056do\3\2\2\2\u056e\u0578\5\u00b0")
        buf.write("Y\2\u056f\u0575\7\177\2\2\u0570\u0572\7a\2\2\u0571\u0573")
        buf.write("\5\u00ccg\2\u0572\u0571\3\2\2\2\u0572\u0573\3\2\2\2\u0573")
        buf.write("\u0574\3\2\2\2\u0574\u0576\7b\2\2\u0575\u0570\3\2\2\2")
        buf.write("\u0575\u0576\3\2\2\2\u0576\u0578\3\2\2\2\u0577\u056e\3")
        buf.write("\2\2\2\u0577\u056f\3\2\2\2\u0578q\3\2\2\2\u0579\u057a")
        buf.write("\7\25\2\2\u057a\u057d\7P\2\2\u057b\u057e\5F$\2\u057c\u057e")
        buf.write("\7\b\2\2\u057d\u057b\3\2\2\2\u057d\u057c\3\2\2\2\u057e")
        buf.write("\u057f\3\2\2\2\u057f\u0580\7Q\2\2\u0580s\3\2\2\2\u0581")
        buf.write("\u0583\7\34\2\2\u0582\u0584\t\f\2\2\u0583\u0582\3\2\2")
        buf.write("\2\u0583\u0584\3\2\2\2\u0584u\3\2\2\2\u0585\u0586\b<\1")
        buf.write("\2\u0586\u0589\7\177\2\2\u0587\u0588\7`\2\2\u0588\u058a")
        buf.write("\5H%\2\u0589\u0587\3\2\2\2\u0589\u058a\3\2\2\2\u058a\u0594")
        buf.write("\3\2\2\2\u058b\u058c\f\3\2\2\u058c\u058d\7u\2\2\u058d")
        buf.write("\u0590\7\177\2\2\u058e\u058f\7`\2\2\u058f\u0591\5H%\2")
        buf.write("\u0590\u058e\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0593\3")
        buf.write("\2\2\2\u0592\u058b\3\2\2\2\u0593\u0596\3\2\2\2\u0594\u0592")
        buf.write("\3\2\2\2\u0594\u0595\3\2\2\2\u0595w\3\2\2\2\u0596\u0594")
        buf.write("\3\2\2\2\u0597\u0598\b=\1\2\u0598\u0599\5z>\2\u0599\u059e")
        buf.write("\3\2\2\2\u059a\u059b\f\3\2\2\u059b\u059d\5z>\2\u059c\u059a")
        buf.write("\3\2\2\2\u059d\u05a0\3\2\2\2\u059e\u059c\3\2\2\2\u059e")
        buf.write("\u059f\3\2\2\2\u059fy\3\2\2\2\u05a0\u059e\3\2\2\2\u05a1")
        buf.write("\u05a2\7R\2\2\u05a2\u05a3\7R\2\2\u05a3\u05a4\5|?\2\u05a4")
        buf.write("\u05a5\7S\2\2\u05a5\u05a6\7S\2\2\u05a6\u05bb\3\2\2\2\u05a7")
        buf.write("\u05a8\7\5\2\2\u05a8\u05a9\7P\2\2\u05a9\u05ab\5j\66\2")
        buf.write("\u05aa\u05ac\5\u0092J\2\u05ab\u05aa\3\2\2\2\u05ab\u05ac")
        buf.write("\3\2\2\2\u05ac\u05ae\3\2\2\2\u05ad\u05af\7~\2\2\u05ae")
        buf.write("\u05ad\3\2\2\2\u05ae\u05af\3\2\2\2\u05af\u05b0\3\2\2\2")
        buf.write("\u05b0\u05b1\7Q\2\2\u05b1\u05bb\3\2\2\2\u05b2\u05b3\7")
        buf.write("\5\2\2\u05b3\u05b4\7P\2\2\u05b4\u05b6\5H%\2\u05b5\u05b7")
        buf.write("\7~\2\2\u05b6\u05b5\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7")
        buf.write("\u05b8\3\2\2\2\u05b8\u05b9\7Q\2\2\u05b9\u05bb\3\2\2\2")
        buf.write("\u05ba\u05a1\3\2\2\2\u05ba\u05a7\3\2\2\2\u05ba\u05b2\3")
        buf.write("\2\2\2\u05bb{\3\2\2\2\u05bc\u05c1\b?\1\2\u05bd\u05bf\5")
        buf.write("~@\2\u05be\u05c0\7~\2\2\u05bf\u05be\3\2\2\2\u05bf\u05c0")
        buf.write("\3\2\2\2\u05c0\u05c2\3\2\2\2\u05c1\u05bd\3\2\2\2\u05c1")
        buf.write("\u05c2\3\2\2\2\u05c2\u05cd\3\2\2\2\u05c3\u05c4\f\3\2\2")
        buf.write("\u05c4\u05c9\7u\2\2\u05c5\u05c7\5~@\2\u05c6\u05c8\7~\2")
        buf.write("\2\u05c7\u05c6\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8\u05ca")
        buf.write("\3\2\2\2\u05c9\u05c5\3\2\2\2\u05c9\u05ca\3\2\2\2\u05ca")
        buf.write("\u05cc\3\2\2\2\u05cb\u05c3\3\2\2\2\u05cc\u05cf\3\2\2\2")
        buf.write("\u05cd\u05cb\3\2\2\2\u05cd\u05ce\3\2\2\2\u05ce}\3\2\2")
        buf.write("\2\u05cf\u05cd\3\2\2\2\u05d0\u05d3\7\177\2\2\u05d1\u05d2")
        buf.write("\7z\2\2\u05d2\u05d4\7\177\2\2\u05d3\u05d1\3\2\2\2\u05d3")
        buf.write("\u05d4\3\2\2\2\u05d4\u05d9\3\2\2\2\u05d5\u05d6\7P\2\2")
        buf.write("\u05d6\u05d7\5\u0080A\2\u05d7\u05d8\7Q\2\2\u05d8\u05da")
        buf.write("\3\2\2\2\u05d9\u05d5\3\2\2\2\u05d9\u05da\3\2\2\2\u05da")
        buf.write("\177\3\2\2\2\u05db\u05dd\bA\1\2\u05dc\u05de\5\u0082B\2")
        buf.write("\u05dd\u05dc\3\2\2\2\u05dd\u05de\3\2\2\2\u05de\u05e3\3")
        buf.write("\2\2\2\u05df\u05e0\f\3\2\2\u05e0\u05e2\5\u0082B\2\u05e1")
        buf.write("\u05df\3\2\2\2\u05e2\u05e5\3\2\2\2\u05e3\u05e1\3\2\2\2")
        buf.write("\u05e3\u05e4\3\2\2\2\u05e4\u0081\3\2\2\2\u05e5\u05e3\3")
        buf.write("\2\2\2\u05e6\u05e7\7P\2\2\u05e7\u05e8\5\u0080A\2\u05e8")
        buf.write("\u05e9\7Q\2\2\u05e9\u05f3\3\2\2\2\u05ea\u05eb\7R\2\2\u05eb")
        buf.write("\u05ec\5\u0080A\2\u05ec\u05ed\7S\2\2\u05ed\u05f3\3\2\2")
        buf.write("\2\u05ee\u05ef\7T\2\2\u05ef\u05f0\5\u0080A\2\u05f0\u05f1")
        buf.write("\7U\2\2\u05f1\u05f3\3\2\2\2\u05f2\u05e6\3\2\2\2\u05f2")
        buf.write("\u05ea\3\2\2\2\u05f2\u05ee\3\2\2\2\u05f3\u0083\3\2\2\2")
        buf.write("\u05f4\u05f5\bC\1\2\u05f5\u05f7\5\u0086D\2\u05f6\u05f8")
        buf.write("\5\u00a6T\2\u05f7\u05f6\3\2\2\2\u05f7\u05f8\3\2\2\2\u05f8")
        buf.write("\u0601\3\2\2\2\u05f9\u05fa\f\3\2\2\u05fa\u05fb\7u\2\2")
        buf.write("\u05fb\u05fd\5\u0086D\2\u05fc\u05fe\5\u00a6T\2\u05fd\u05fc")
        buf.write("\3\2\2\2\u05fd\u05fe\3\2\2\2\u05fe\u0600\3\2\2\2\u05ff")
        buf.write("\u05f9\3\2\2\2\u0600\u0603\3\2\2\2\u0601\u05ff\3\2\2\2")
        buf.write("\u0601\u0602\3\2\2\2\u0602\u0085\3\2\2\2\u0603\u0601\3")
        buf.write("\2\2\2\u0604\u060d\5\u0088E\2\u0605\u0606\5\u008aF\2\u0606")
        buf.write("\u0607\5\u008cG\2\u0607\u0608\7w\2\2\u0608\u060a\5l\67")
        buf.write("\2\u0609\u060b\5\u0092J\2\u060a\u0609\3\2\2\2\u060a\u060b")
        buf.write("\3\2\2\2\u060b\u060d\3\2\2\2\u060c\u0604\3\2\2\2\u060c")
        buf.write("\u0605\3\2\2\2\u060d\u0087\3\2\2\2\u060e\u0613\5\u008a")
        buf.write("F\2\u060f\u0610\5\u008eH\2\u0610\u0611\5\u0088E\2\u0611")
        buf.write("\u0613\3\2\2\2\u0612\u060e\3\2\2\2\u0612\u060f\3\2\2\2")
        buf.write("\u0613\u0089\3\2\2\2\u0614\u0616\bF\1\2\u0615\u0617\7")
        buf.write("~\2\2\u0616\u0615\3\2\2\2\u0616\u0617\3\2\2\2\u0617\u0618")
        buf.write("\3\2\2\2\u0618\u061a\5\6\4\2\u0619\u061b\5x=\2\u061a\u0619")
        buf.write("\3\2\2\2\u061a\u061b\3\2\2\2\u061b\u0621\3\2\2\2\u061c")
        buf.write("\u061d\7P\2\2\u061d\u061e\5\u0088E\2\u061e\u061f\7Q\2")
        buf.write("\2\u061f\u0621\3\2\2\2\u0620\u0614\3\2\2\2\u0620\u061c")
        buf.write("\3\2\2\2\u0621\u062f\3\2\2\2\u0622\u0623\f\5\2\2\u0623")
        buf.write("\u062e\5\u008cG\2\u0624\u0625\f\4\2\2\u0625\u0627\7R\2")
        buf.write("\2\u0626\u0628\5H%\2\u0627\u0626\3\2\2\2\u0627\u0628\3")
        buf.write("\2\2\2\u0628\u0629\3\2\2\2\u0629\u062b\7S\2\2\u062a\u062c")
        buf.write("\5x=\2\u062b\u062a\3\2\2\2\u062b\u062c\3\2\2\2\u062c\u062e")
        buf.write("\3\2\2\2\u062d\u0622\3\2\2\2\u062d\u0624\3\2\2\2\u062e")
        buf.write("\u0631\3\2\2\2\u062f\u062d\3\2\2\2\u062f\u0630\3\2\2\2")
        buf.write("\u0630\u008b\3\2\2\2\u0631\u062f\3\2\2\2\u0632\u0633\7")
        buf.write("P\2\2\u0633\u0634\5\u009cO\2\u0634\u0638\7Q\2\2\u0635")
        buf.write("\u0637\5\u0090I\2\u0636\u0635\3\2\2\2\u0637\u063a\3\2")
        buf.write("\2\2\u0638\u0636\3\2\2\2\u0638\u0639\3\2\2\2\u0639\u063c")
        buf.write("\3\2\2\2\u063a\u0638\3\2\2\2\u063b\u063d\t\r\2\2\u063c")
        buf.write("\u063b\3\2\2\2\u063c\u063d\3\2\2\2\u063d\u063f\3\2\2\2")
        buf.write("\u063e\u0640\5\u00d8m\2\u063f\u063e\3\2\2\2\u063f\u0640")
        buf.write("\3\2\2\2\u0640\u0642\3\2\2\2\u0641\u0643\5x=\2\u0642\u0641")
        buf.write("\3\2\2\2\u0642\u0643\3\2\2\2\u0643\u008d\3\2\2\2\u0644")
        buf.write("\u0646\5\n\6\2\u0645\u0644\3\2\2\2\u0645\u0646\3\2\2\2")
        buf.write("\u0646\u0647\3\2\2\2\u0647\u0649\7X\2\2\u0648\u064a\5")
        buf.write("x=\2\u0649\u0648\3\2\2\2\u0649\u064a\3\2\2\2\u064a\u064e")
        buf.write("\3\2\2\2\u064b\u064d\5\u0090I\2\u064c\u064b\3\2\2\2\u064d")
        buf.write("\u0650\3\2\2\2\u064e\u064c\3\2\2\2\u064e\u064f\3\2\2\2")
        buf.write("\u064f\u0656\3\2\2\2\u0650\u064e\3\2\2\2\u0651\u0653\t")
        buf.write("\r\2\2\u0652\u0654\5x=\2\u0653\u0652\3\2\2\2\u0653\u0654")
        buf.write("\3\2\2\2\u0654\u0656\3\2\2\2\u0655\u0645\3\2\2\2\u0655")
        buf.write("\u0651\3\2\2\2\u0656\u008f\3\2\2\2\u0657\u0658\t\16\2")
        buf.write("\2\u0658\u0091\3\2\2\2\u0659\u0665\5\u0094K\2\u065a\u065c")
        buf.write("\5\u0096L\2\u065b\u065a\3\2\2\2\u065b\u065c\3\2\2\2\u065c")
        buf.write("\u065d\3\2\2\2\u065d\u065e\5\u008cG\2\u065e\u065f\7w\2")
        buf.write("\2\u065f\u0661\5l\67\2\u0660\u0662\5\u0092J\2\u0661\u0660")
        buf.write("\3\2\2\2\u0661\u0662\3\2\2\2\u0662\u0665\3\2\2\2\u0663")
        buf.write("\u0665\5\u0098M\2\u0664\u0659\3\2\2\2\u0664\u065b\3\2")
        buf.write("\2\2\u0664\u0663\3\2\2\2\u0665\u0093\3\2\2\2\u0666\u066c")
        buf.write("\5\u0096L\2\u0667\u0669\5\u008eH\2\u0668\u066a\5\u0094")
        buf.write("K\2\u0669\u0668\3\2\2\2\u0669\u066a\3\2\2\2\u066a\u066c")
        buf.write("\3\2\2\2\u066b\u0666\3\2\2\2\u066b\u0667\3\2\2\2\u066c")
        buf.write("\u0095\3\2\2\2\u066d\u066e\bL\1\2\u066e\u067c\5\u008c")
        buf.write("G\2\u066f\u0671\7R\2\2\u0670\u0672\5H%\2\u0671\u0670\3")
        buf.write("\2\2\2\u0671\u0672\3\2\2\2\u0672\u0673\3\2\2\2\u0673\u0675")
        buf.write("\7S\2\2\u0674\u0676\5x=\2\u0675\u0674\3\2\2\2\u0675\u0676")
        buf.write("\3\2\2\2\u0676\u067c\3\2\2\2\u0677\u0678\7P\2\2\u0678")
        buf.write("\u0679\5\u0094K\2\u0679\u067a\7Q\2\2\u067a\u067c\3\2\2")
        buf.write("\2\u067b\u066d\3\2\2\2\u067b\u066f\3\2\2\2\u067b\u0677")
        buf.write("\3\2\2\2\u067c\u068a\3\2\2\2\u067d\u067e\f\7\2\2\u067e")
        buf.write("\u0689\5\u008cG\2\u067f\u0680\f\5\2\2\u0680\u0682\7R\2")
        buf.write("\2\u0681\u0683\5H%\2\u0682\u0681\3\2\2\2\u0682\u0683\3")
        buf.write("\2\2\2\u0683\u0684\3\2\2\2\u0684\u0686\7S\2\2\u0685\u0687")
        buf.write("\5x=\2\u0686\u0685\3\2\2\2\u0686\u0687\3\2\2\2\u0687\u0689")
        buf.write("\3\2\2\2\u0688\u067d\3\2\2\2\u0688\u067f\3\2\2\2\u0689")
        buf.write("\u068c\3\2\2\2\u068a\u0688\3\2\2\2\u068a\u068b\3\2\2\2")
        buf.write("\u068b\u0097\3\2\2\2\u068c\u068a\3\2\2\2\u068d\u0692\5")
        buf.write("\u009aN\2\u068e\u068f\5\u008eH\2\u068f\u0690\5\u0098M")
        buf.write("\2\u0690\u0692\3\2\2\2\u0691\u068d\3\2\2\2\u0691\u068e")
        buf.write("\3\2\2\2\u0692\u0099\3\2\2\2\u0693\u0694\bN\1\2\u0694")
        buf.write("\u0695\7~\2\2\u0695\u06a3\3\2\2\2\u0696\u0697\f\5\2\2")
        buf.write("\u0697\u06a2\5\u008cG\2\u0698\u0699\f\4\2\2\u0699\u069b")
        buf.write("\7R\2\2\u069a\u069c\5H%\2\u069b\u069a\3\2\2\2\u069b\u069c")
        buf.write("\3\2\2\2\u069c\u069d\3\2\2\2\u069d\u069f\7S\2\2\u069e")
        buf.write("\u06a0\5x=\2\u069f\u069e\3\2\2\2\u069f\u06a0\3\2\2\2\u06a0")
        buf.write("\u06a2\3\2\2\2\u06a1\u0696\3\2\2\2\u06a1\u0698\3\2\2\2")
        buf.write("\u06a2\u06a5\3\2\2\2\u06a3\u06a1\3\2\2\2\u06a3\u06a4\3")
        buf.write("\2\2\2\u06a4\u009b\3\2\2\2\u06a5\u06a3\3\2\2\2\u06a6\u06a8")
        buf.write("\5\u009eP\2\u06a7\u06a6\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8")
        buf.write("\u06aa\3\2\2\2\u06a9\u06ab\7~\2\2\u06aa\u06a9\3\2\2\2")
        buf.write("\u06aa\u06ab\3\2\2\2\u06ab\u06b1\3\2\2\2\u06ac\u06ad\5")
        buf.write("\u009eP\2\u06ad\u06ae\7u\2\2\u06ae\u06af\7~\2\2\u06af")
        buf.write("\u06b1\3\2\2\2\u06b0\u06a7\3\2\2\2\u06b0\u06ac\3\2\2\2")
        buf.write("\u06b1\u009d\3\2\2\2\u06b2\u06b3\bP\1\2\u06b3\u06b4\5")
        buf.write("\u00a0Q\2\u06b4\u06ba\3\2\2\2\u06b5\u06b6\f\3\2\2\u06b6")
        buf.write("\u06b7\7u\2\2\u06b7\u06b9\5\u00a0Q\2\u06b8\u06b5\3\2\2")
        buf.write("\2\u06b9\u06bc\3\2\2\2\u06ba\u06b8\3\2\2\2\u06ba\u06bb")
        buf.write("\3\2\2\2\u06bb\u009f\3\2\2\2\u06bc\u06ba\3\2\2\2\u06bd")
        buf.write("\u06bf\5x=\2\u06be\u06bd\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf")
        buf.write("\u06c0\3\2\2\2\u06c0\u06c3\5d\63\2\u06c1\u06c4\5\u0086")
        buf.write("D\2\u06c2\u06c4\5\u0092J\2\u06c3\u06c1\3\2\2\2\u06c3\u06c2")
        buf.write("\3\2\2\2\u06c4\u06c7\3\2\2\2\u06c5\u06c6\7`\2\2\u06c6")
        buf.write("\u06c8\5\u00aaV\2\u06c7\u06c5\3\2\2\2\u06c7\u06c8\3\2")
        buf.write("\2\2\u06c8\u00a1\3\2\2\2\u06c9\u06cb\5x=\2\u06ca\u06c9")
        buf.write("\3\2\2\2\u06ca\u06cb\3\2\2\2\u06cb\u06cd\3\2\2\2\u06cc")
        buf.write("\u06ce\5d\63\2\u06cd\u06cc\3\2\2\2\u06cd\u06ce\3\2\2\2")
        buf.write("\u06ce\u06cf\3\2\2\2\u06cf\u06d1\5\u0086D\2\u06d0\u06d2")
        buf.write("\5\u00ba^\2\u06d1\u06d0\3\2\2\2\u06d1\u06d2\3\2\2\2\u06d2")
        buf.write("\u06d3\3\2\2\2\u06d3\u06d4\5\u00a4S\2\u06d4\u00a3\3\2")
        buf.write("\2\2\u06d5\u06d6\7y\2\2\u06d6\u06d8\5\u00c6d\2\u06d7\u06d5")
        buf.write("\3\2\2\2\u06d7\u06d8\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9")
        buf.write("\u06dd\7T\2\2\u06da\u06dc\5J&\2\u06db\u06da\3\2\2\2\u06dc")
        buf.write("\u06df\3\2\2\2\u06dd\u06db\3\2\2\2\u06dd\u06de\3\2\2\2")
        buf.write("\u06de\u06e0\3\2\2\2\u06df\u06dd\3\2\2\2\u06e0\u06f7\7")
        buf.write("U\2\2\u06e1\u06e4\7D\2\2\u06e2\u06e3\7y\2\2\u06e3\u06e5")
        buf.write("\5\u00c6d\2\u06e4\u06e2\3\2\2\2\u06e4\u06e5\3\2\2\2\u06e5")
        buf.write("\u06e6\3\2\2\2\u06e6\u06ea\7T\2\2\u06e7\u06e9\5J&\2\u06e8")
        buf.write("\u06e7\3\2\2\2\u06e9\u06ec\3\2\2\2\u06ea\u06e8\3\2\2\2")
        buf.write("\u06ea\u06eb\3\2\2\2\u06eb\u06ed\3\2\2\2\u06ec\u06ea\3")
        buf.write("\2\2\2\u06ed\u06ef\7U\2\2\u06ee\u06f0\5\u00d4k\2\u06ef")
        buf.write("\u06ee\3\2\2\2\u06f0\u06f1\3\2\2\2\u06f1\u06ef\3\2\2\2")
        buf.write("\u06f1\u06f2\3\2\2\2\u06f2\u06f7\3\2\2\2\u06f3\u06f4\7")
        buf.write("`\2\2\u06f4\u06f5\t\17\2\2\u06f5\u06f7\7{\2\2\u06f6\u06d7")
        buf.write("\3\2\2\2\u06f6\u06e1\3\2\2\2\u06f6\u06f3\3\2\2\2\u06f7")
        buf.write("\u00a5\3\2\2\2\u06f8\u06fe\5\u00a8U\2\u06f9\u06fa\7P\2")
        buf.write("\2\u06fa\u06fb\5\u00acW\2\u06fb\u06fc\7Q\2\2\u06fc\u06fe")
        buf.write("\3\2\2\2\u06fd\u06f8\3\2\2\2\u06fd\u06f9\3\2\2\2\u06fe")
        buf.write("\u00a7\3\2\2\2\u06ff\u0700\7`\2\2\u0700\u0703\5\u00aa")
        buf.write("V\2\u0701\u0703\5\u00aeX\2\u0702\u06ff\3\2\2\2\u0702\u0701")
        buf.write("\3\2\2\2\u0703\u00a9\3\2\2\2\u0704\u0707\5B\"\2\u0705")
        buf.write("\u0707\5\u00aeX\2\u0706\u0704\3\2\2\2\u0706\u0705\3\2")
        buf.write("\2\2\u0707\u00ab\3\2\2\2\u0708\u0709\bW\1\2\u0709\u070b")
        buf.write("\5\u00aaV\2\u070a\u070c\7~\2\2\u070b\u070a\3\2\2\2\u070b")
        buf.write("\u070c\3\2\2\2\u070c\u0715\3\2\2\2\u070d\u070e\f\3\2\2")
        buf.write("\u070e\u070f\7u\2\2\u070f\u0711\5\u00aaV\2\u0710\u0712")
        buf.write("\7~\2\2\u0711\u0710\3\2\2\2\u0711\u0712\3\2\2\2\u0712")
        buf.write("\u0714\3\2\2\2\u0713\u070d\3\2\2\2\u0714\u0717\3\2\2\2")
        buf.write("\u0715\u0713\3\2\2\2\u0715\u0716\3\2\2\2\u0716\u00ad\3")
        buf.write("\2\2\2\u0717\u0715\3\2\2\2\u0718\u0719\7T\2\2\u0719\u071b")
        buf.write("\5\u00acW\2\u071a\u071c\7u\2\2\u071b\u071a\3\2\2\2\u071b")
        buf.write("\u071c\3\2\2\2\u071c\u071d\3\2\2\2\u071d\u071e\7U\2\2")
        buf.write("\u071e\u0722\3\2\2\2\u071f\u0720\7T\2\2\u0720\u0722\7")
        buf.write("U\2\2\u0721\u0718\3\2\2\2\u0721\u071f\3\2\2\2\u0722\u00af")
        buf.write("\3\2\2\2\u0723\u0729\7\177\2\2\u0724\u0726\7a\2\2\u0725")
        buf.write("\u0727\5\u00ccg\2\u0726\u0725\3\2\2\2\u0726\u0727\3\2")
        buf.write("\2\2\u0727\u0728\3\2\2\2\u0728\u072a\7b\2\2\u0729\u0724")
        buf.write("\3\2\2\2\u0729\u072a\3\2\2\2\u072a\u00b1\3\2\2\2\u072b")
        buf.write("\u072c\t\20\2\2\u072c\u00b3\3\2\2\2\u072d\u072f\5x=\2")
        buf.write("\u072e\u072d\3\2\2\2\u072e\u072f\3\2\2\2\u072f\u0731\3")
        buf.write("\2\2\2\u0730\u0732\5d\63\2\u0731\u0730\3\2\2\2\u0731\u0732")
        buf.write("\3\2\2\2\u0732\u0734\3\2\2\2\u0733\u0735\5\u00b6\\\2\u0734")
        buf.write("\u0733\3\2\2\2\u0734\u0735\3\2\2\2\u0735\u0736\3\2\2\2")
        buf.write("\u0736\u075f\7{\2\2\u0737\u075f\5\u00a2R\2\u0738\u073e")
        buf.write("\7J\2\2\u0739\u073b\7G\2\2\u073a\u0739\3\2\2\2\u073a\u073b")
        buf.write("\3\2\2\2\u073b\u073c\3\2\2\2\u073c\u073f\5\n\6\2\u073d")
        buf.write("\u073f\7z\2\2\u073e\u073a\3\2\2\2\u073e\u073d\3\2\2\2")
        buf.write("\u073f\u0740\3\2\2\2\u0740\u0741\5\b\5\2\u0741\u0742\7")
        buf.write("{\2\2\u0742\u075f\3\2\2\2\u0743\u0744\7;\2\2\u0744\u0745")
        buf.write("\7P\2\2\u0745\u0746\5H%\2\u0746\u0747\7u\2\2\u0747\u0748")
        buf.write("\7\u0088\2\2\u0748\u0749\7Q\2\2\u0749\u074a\7{\2\2\u074a")
        buf.write("\u075f\3\2\2\2\u074b\u074c\7?\2\2\u074c\u074d\7a\2\2\u074d")
        buf.write("\u074e\5\u00c8e\2\u074e\u074f\7b\2\2\u074f\u0750\5`\61")
        buf.write("\2\u0750\u075f\3\2\2\2\u0751\u0752\7J\2\2\u0752\u0754")
        buf.write("\7\177\2\2\u0753\u0755\5x=\2\u0754\u0753\3\2\2\2\u0754")
        buf.write("\u0755\3\2\2\2\u0755\u0756\3\2\2\2\u0756\u0757\7`\2\2")
        buf.write("\u0757\u0759\5j\66\2\u0758\u075a\5\u0092J\2\u0759\u0758")
        buf.write("\3\2\2\2\u0759\u075a\3\2\2\2\u075a\u075b\3\2\2\2\u075b")
        buf.write("\u075c\7{\2\2\u075c\u075f\3\2\2\2\u075d\u075f\7{\2\2\u075e")
        buf.write("\u072e\3\2\2\2\u075e\u0737\3\2\2\2\u075e\u0738\3\2\2\2")
        buf.write("\u075e\u0743\3\2\2\2\u075e\u074b\3\2\2\2\u075e\u0751\3")
        buf.write("\2\2\2\u075e\u075d\3\2\2\2\u075f\u00b5\3\2\2\2\u0760\u0761")
        buf.write("\b\\\1\2\u0761\u0762\5\u00b8]\2\u0762\u0768\3\2\2\2\u0763")
        buf.write("\u0764\f\3\2\2\u0764\u0765\7u\2\2\u0765\u0767\5\u00b8")
        buf.write("]\2\u0766\u0763\3\2\2\2\u0767\u076a\3\2\2\2\u0768\u0766")
        buf.write("\3\2\2\2\u0768\u0769\3\2\2\2\u0769\u00b7\3\2\2\2\u076a")
        buf.write("\u0768\3\2\2\2\u076b\u0775\5\u0086D\2\u076c\u076e\5\u00ba")
        buf.write("^\2\u076d\u076c\3\2\2\2\u076d\u076e\3\2\2\2\u076e\u0770")
        buf.write("\3\2\2\2\u076f\u0771\5\u00bc_\2\u0770\u076f\3\2\2\2\u0770")
        buf.write("\u0771\3\2\2\2\u0771\u0776\3\2\2\2\u0772\u0774\5\u00a8")
        buf.write("U\2\u0773\u0772\3\2\2\2\u0773\u0774\3\2\2\2\u0774\u0776")
        buf.write("\3\2\2\2\u0775\u076d\3\2\2\2\u0775\u0773\3\2\2\2\u0776")
        buf.write("\u0780\3\2\2\2\u0777\u0779\7\177\2\2\u0778\u0777\3\2\2")
        buf.write("\2\u0778\u0779\3\2\2\2\u0779\u077b\3\2\2\2\u077a\u077c")
        buf.write("\5x=\2\u077b\u077a\3\2\2\2\u077b\u077c\3\2\2\2\u077c\u077d")
        buf.write("\3\2\2\2\u077d\u077e\7y\2\2\u077e\u0780\5H%\2\u077f\u076b")
        buf.write("\3\2\2\2\u077f\u0778\3\2\2\2\u0780\u00b9\3\2\2\2\u0781")
        buf.write("\u0782\b^\1\2\u0782\u0783\t\21\2\2\u0783\u0788\3\2\2\2")
        buf.write("\u0784\u0785\f\3\2\2\u0785\u0787\t\21\2\2\u0786\u0784")
        buf.write("\3\2\2\2\u0787\u078a\3\2\2\2\u0788\u0786\3\2\2\2\u0788")
        buf.write("\u0789\3\2\2\2\u0789\u00bb\3\2\2\2\u078a\u0788\3\2\2\2")
        buf.write("\u078b\u078c\7`\2\2\u078c\u078d\7\u0082\2\2\u078d\u078e")
        buf.write("\b_\1\2\u078e\u00bd\3\2\2\2\u078f\u0790\b`\1\2\u0790\u0792")
        buf.write("\5\u00c0a\2\u0791\u0793\7~\2\2\u0792\u0791\3\2\2\2\u0792")
        buf.write("\u0793\3\2\2\2\u0793\u079c\3\2\2\2\u0794\u0795\f\3\2\2")
        buf.write("\u0795\u0796\7u\2\2\u0796\u0798\5\u00c0a\2\u0797\u0799")
        buf.write("\7~\2\2\u0798\u0797\3\2\2\2\u0798\u0799\3\2\2\2\u0799")
        buf.write("\u079b\3\2\2\2\u079a\u0794\3\2\2\2\u079b\u079e\3\2\2\2")
        buf.write("\u079c\u079a\3\2\2\2\u079c\u079d\3\2\2\2\u079d\u00bf\3")
        buf.write("\2\2\2\u079e\u079c\3\2\2\2\u079f\u07a1\5x=\2\u07a0\u079f")
        buf.write("\3\2\2\2\u07a0\u07a1\3\2\2\2\u07a1\u07a2\3\2\2\2\u07a2")
        buf.write("\u07b5\5\u00c2b\2\u07a3\u07a5\5x=\2\u07a4\u07a3\3\2\2")
        buf.write("\2\u07a4\u07a5\3\2\2\2\u07a5\u07a6\3\2\2\2\u07a6\u07a8")
        buf.write("\7K\2\2\u07a7\u07a9\5\u00c4c\2\u07a8\u07a7\3\2\2\2\u07a8")
        buf.write("\u07a9\3\2\2\2\u07a9\u07aa\3\2\2\2\u07aa\u07b5\5\u00c2")
        buf.write("b\2\u07ab\u07ad\5x=\2\u07ac\u07ab\3\2\2\2\u07ac\u07ad")
        buf.write("\3\2\2\2\u07ad\u07ae\3\2\2\2\u07ae\u07b0\5\u00c4c\2\u07af")
        buf.write("\u07b1\7K\2\2\u07b0\u07af\3\2\2\2\u07b0\u07b1\3\2\2\2")
        buf.write("\u07b1\u07b2\3\2\2\2\u07b2\u07b3\5\u00c2b\2\u07b3\u07b5")
        buf.write("\3\2\2\2\u07b4\u07a0\3\2\2\2\u07b4\u07a4\3\2\2\2\u07b4")
        buf.write("\u07ac\3\2\2\2\u07b5\u00c1\3\2\2\2\u07b6\u07b8\5\n\6\2")
        buf.write("\u07b7\u07b6\3\2\2\2\u07b7\u07b8\3\2\2\2\u07b8\u07b9\3")
        buf.write("\2\2\2\u07b9\u07bc\5\u00b0Y\2\u07ba\u07bc\5r:\2\u07bb")
        buf.write("\u07b7\3\2\2\2\u07bb\u07ba\3\2\2\2\u07bc\u00c3\3\2\2\2")
        buf.write("\u07bd\u07be\t\22\2\2\u07be\u00c5\3\2\2\2\u07bf\u07c2")
        buf.write("\5\u00c2b\2\u07c0\u07c2\7\177\2\2\u07c1\u07bf\3\2\2\2")
        buf.write("\u07c1\u07c0\3\2\2\2\u07c2\u07c9\3\2\2\2\u07c3\u07c5\7")
        buf.write("P\2\2\u07c4\u07c6\5\u00acW\2\u07c5\u07c4\3\2\2\2\u07c5")
        buf.write("\u07c6\3\2\2\2\u07c6\u07c7\3\2\2\2\u07c7\u07ca\7Q\2\2")
        buf.write("\u07c8\u07ca\5\u00aeX\2\u07c9\u07c3\3\2\2\2\u07c9\u07c8")
        buf.write("\3\2\2\2\u07ca\u07cc\3\2\2\2\u07cb\u07cd\7~\2\2\u07cc")
        buf.write("\u07cb\3\2\2\2\u07cc\u07cd\3\2\2\2\u07cd\u07d0\3\2\2\2")
        buf.write("\u07ce\u07cf\7u\2\2\u07cf\u07d1\5\u00c6d\2\u07d0\u07ce")
        buf.write("\3\2\2\2\u07d0\u07d1\3\2\2\2\u07d1\u00c7\3\2\2\2\u07d2")
        buf.write("\u07d3\be\1\2\u07d3\u07d4\5\u00caf\2\u07d4\u07da\3\2\2")
        buf.write("\2\u07d5\u07d6\f\3\2\2\u07d6\u07d7\7u\2\2\u07d7\u07d9")
        buf.write("\5\u00caf\2\u07d8\u07d5\3\2\2\2\u07d9\u07dc\3\2\2\2\u07da")
        buf.write("\u07d8\3\2\2\2\u07da\u07db\3\2\2\2\u07db\u00c9\3\2\2\2")
        buf.write("\u07dc\u07da\3\2\2\2\u07dd\u07ec\7\20\2\2\u07de\u07e0")
        buf.write("\7~\2\2\u07df\u07de\3\2\2\2\u07df\u07e0\3\2\2\2\u07e0")
        buf.write("\u07e2\3\2\2\2\u07e1\u07e3\7\177\2\2\u07e2\u07e1\3\2\2")
        buf.write("\2\u07e2\u07e3\3\2\2\2\u07e3\u07ed\3\2\2\2\u07e4\u07e6")
        buf.write("\7\177\2\2\u07e5\u07e4\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6")
        buf.write("\u07e7\3\2\2\2\u07e7\u07e8\7`\2\2\u07e8\u07ea\5j\66\2")
        buf.write("\u07e9\u07eb\5\u0092J\2\u07ea\u07e9\3\2\2\2\u07ea\u07eb")
        buf.write("\3\2\2\2\u07eb\u07ed\3\2\2\2\u07ec\u07df\3\2\2\2\u07ec")
        buf.write("\u07e5\3\2\2\2\u07ed\u0813\3\2\2\2\u07ee\u07fd\7G\2\2")
        buf.write("\u07ef\u07f1\7~\2\2\u07f0\u07ef\3\2\2\2\u07f0\u07f1\3")
        buf.write("\2\2\2\u07f1\u07f3\3\2\2\2\u07f2\u07f4\7\177\2\2\u07f3")
        buf.write("\u07f2\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u07fe\3\2\2\2")
        buf.write("\u07f5\u07f7\7\177\2\2\u07f6\u07f5\3\2\2\2\u07f6\u07f7")
        buf.write("\3\2\2\2\u07f7\u07f8\3\2\2\2\u07f8\u07f9\7`\2\2\u07f9")
        buf.write("\u07fb\5j\66\2\u07fa\u07fc\5\u0092J\2\u07fb\u07fa\3\2")
        buf.write("\2\2\u07fb\u07fc\3\2\2\2\u07fc\u07fe\3\2\2\2\u07fd\u07f0")
        buf.write("\3\2\2\2\u07fd\u07f6\3\2\2\2\u07fe\u0813\3\2\2\2\u07ff")
        buf.write("\u0800\7?\2\2\u0800\u0801\7a\2\2\u0801\u0802\5\u00c8e")
        buf.write("\2\u0802\u0803\7b\2\2\u0803\u080f\7\20\2\2\u0804\u0806")
        buf.write("\7~\2\2\u0805\u0804\3\2\2\2\u0805\u0806\3\2\2\2\u0806")
        buf.write("\u0808\3\2\2\2\u0807\u0809\7\177\2\2\u0808\u0807\3\2\2")
        buf.write("\2\u0808\u0809\3\2\2\2\u0809\u0810\3\2\2\2\u080a\u080c")
        buf.write("\7\177\2\2\u080b\u080a\3\2\2\2\u080b\u080c\3\2\2\2\u080c")
        buf.write("\u080d\3\2\2\2\u080d\u080e\7`\2\2\u080e\u0810\5\6\4\2")
        buf.write("\u080f\u0805\3\2\2\2\u080f\u080b\3\2\2\2\u0810\u0813\3")
        buf.write("\2\2\2\u0811\u0813\5\u00a0Q\2\u0812\u07dd\3\2\2\2\u0812")
        buf.write("\u07ee\3\2\2\2\u0812\u07ff\3\2\2\2\u0812\u0811\3\2\2\2")
        buf.write("\u0813\u00cb\3\2\2\2\u0814\u0815\bg\1\2\u0815\u0817\5")
        buf.write("\u00ceh\2\u0816\u0818\7~\2\2\u0817\u0816\3\2\2\2\u0817")
        buf.write("\u0818\3\2\2\2\u0818\u0821\3\2\2\2\u0819\u081a\f\3\2\2")
        buf.write("\u081a\u081b\7u\2\2\u081b\u081d\5\u00ceh\2\u081c\u081e")
        buf.write("\7~\2\2\u081d\u081c\3\2\2\2\u081d\u081e\3\2\2\2\u081e")
        buf.write("\u0820\3\2\2\2\u081f\u0819\3\2\2\2\u0820\u0823\3\2\2\2")
        buf.write("\u0821\u081f\3\2\2\2\u0821\u0822\3\2\2\2\u0822\u00cd\3")
        buf.write("\2\2\2\u0823\u0821\3\2\2\2\u0824\u0826\5j\66\2\u0825\u0827")
        buf.write("\5\u0092J\2\u0826\u0825\3\2\2\2\u0826\u0827\3\2\2\2\u0827")
        buf.write("\u082b\3\2\2\2\u0828\u082b\5H%\2\u0829\u082b\5\6\4\2\u082a")
        buf.write("\u0824\3\2\2\2\u082a\u0828\3\2\2\2\u082a\u0829\3\2\2\2")
        buf.write("\u082b\u00cf\3\2\2\2\u082c\u082d\7G\2\2\u082d\u082e\5")
        buf.write("\n\6\2\u082e\u082f\7\177\2\2\u082f\u083d\3\2\2\2\u0830")
        buf.write("\u0831\7G\2\2\u0831\u0833\5\n\6\2\u0832\u0834\7?\2\2\u0833")
        buf.write("\u0832\3\2\2\2\u0833\u0834\3\2\2\2\u0834\u0835\3\2\2\2")
        buf.write("\u0835\u0836\7\177\2\2\u0836\u0838\7a\2\2\u0837\u0839")
        buf.write("\5\u00ccg\2\u0838\u0837\3\2\2\2\u0838\u0839\3\2\2\2\u0839")
        buf.write("\u083a\3\2\2\2\u083a\u083b\7b\2\2\u083b\u083d\3\2\2\2")
        buf.write("\u083c\u082c\3\2\2\2\u083c\u0830\3\2\2\2\u083d\u00d1\3")
        buf.write("\2\2\2\u083e\u083f\7D\2\2\u083f\u0843\7T\2\2\u0840\u0842")
        buf.write("\5J&\2\u0841\u0840\3\2\2\2\u0842\u0845\3\2\2\2\u0843\u0841")
        buf.write("\3\2\2\2\u0843\u0844\3\2\2\2\u0844\u0846\3\2\2\2\u0845")
        buf.write("\u0843\3\2\2\2\u0846\u0848\7U\2\2\u0847\u0849\5\u00d4")
        buf.write("k\2\u0848\u0847\3\2\2\2\u0849\u084a\3\2\2\2\u084a\u0848")
        buf.write("\3\2\2\2\u084a\u084b\3\2\2\2\u084b\u00d3\3\2\2\2\u084c")
        buf.write("\u084d\7\f\2\2\u084d\u084e\7P\2\2\u084e\u084f\5\u00d6")
        buf.write("l\2\u084f\u0850\7Q\2\2\u0850\u0854\7T\2\2\u0851\u0853")
        buf.write("\5J&\2\u0852\u0851\3\2\2\2\u0853\u0856\3\2\2\2\u0854\u0852")
        buf.write("\3\2\2\2\u0854\u0855\3\2\2\2\u0855\u0857\3\2\2\2\u0856")
        buf.write("\u0854\3\2\2\2\u0857\u0858\7U\2\2\u0858\u00d5\3\2\2\2")
        buf.write("\u0859\u085b\5x=\2\u085a\u0859\3\2\2\2\u085a\u085b\3\2")
        buf.write("\2\2\u085b\u085c\3\2\2\2\u085c\u085d\5j\66\2\u085d\u085e")
        buf.write("\5\u0086D\2\u085e\u0868\3\2\2\2\u085f\u0861\5x=\2\u0860")
        buf.write("\u085f\3\2\2\2\u0860\u0861\3\2\2\2\u0861\u0862\3\2\2\2")
        buf.write("\u0862\u0864\5j\66\2\u0863\u0865\5\u0092J\2\u0864\u0863")
        buf.write("\3\2\2\2\u0864\u0865\3\2\2\2\u0865\u0868\3\2\2\2\u0866")
        buf.write("\u0868\7~\2\2\u0867\u085a\3\2\2\2\u0867\u0860\3\2\2\2")
        buf.write("\u0867\u0866\3\2\2\2\u0868\u00d7\3\2\2\2\u0869\u086a\7")
        buf.write("B\2\2\u086a\u086c\7P\2\2\u086b\u086d\5\u00dan\2\u086c")
        buf.write("\u086b\3\2\2\2\u086c\u086d\3\2\2\2\u086d\u086e\3\2\2\2")
        buf.write("\u086e\u0877\7Q\2\2\u086f\u0874\7-\2\2\u0870\u0871\7P")
        buf.write("\2\2\u0871\u0872\5H%\2\u0872\u0873\7Q\2\2\u0873\u0875")
        buf.write("\3\2\2\2\u0874\u0870\3\2\2\2\u0874\u0875\3\2\2\2\u0875")
        buf.write("\u0877\3\2\2\2\u0876\u0869\3\2\2\2\u0876\u086f\3\2\2\2")
        buf.write("\u0877\u00d9\3\2\2\2\u0878\u0879\bn\1\2\u0879\u087b\5")
        buf.write("j\66\2\u087a\u087c\5\u0092J\2\u087b\u087a\3\2\2\2\u087b")
        buf.write("\u087c\3\2\2\2\u087c\u087e\3\2\2\2\u087d\u087f\7~\2\2")
        buf.write("\u087e\u087d\3\2\2\2\u087e\u087f\3\2\2\2\u087f\u088b\3")
        buf.write("\2\2\2\u0880\u0881\f\3\2\2\u0881\u0882\7u\2\2\u0882\u0884")
        buf.write("\5j\66\2\u0883\u0885\5\u0092J\2\u0884\u0883\3\2\2\2\u0884")
        buf.write("\u0885\3\2\2\2\u0885\u0887\3\2\2\2\u0886\u0888\7~\2\2")
        buf.write("\u0887\u0886\3\2\2\2\u0887\u0888\3\2\2\2\u0888\u088a\3")
        buf.write("\2\2\2\u0889\u0880\3\2\2\2\u088a\u088d\3\2\2\2\u088b\u0889")
        buf.write("\3\2\2\2\u088b\u088c\3\2\2\2\u088c\u00db\3\2\2\2\u088d")
        buf.write("\u088b\3\2\2\2\u088e\u088f\7b\2\2\u088f\u0890\7b\2\2\u0890")
        buf.write("\u00dd\3\2\2\2\u0891\u0892\7b\2\2\u0892\u0893\7b\2\2\u0893")
        buf.write("\u0894\7`\2\2\u0894\u00df\3\2\2\2\u0895\u08c6\7,\2\2\u0896")
        buf.write("\u08c6\7\27\2\2\u0897\u0898\7,\2\2\u0898\u0899\7R\2\2")
        buf.write("\u0899\u08c6\7S\2\2\u089a\u089b\7\27\2\2\u089b\u089c\7")
        buf.write("R\2\2\u089c\u08c6\7S\2\2\u089d\u08c6\7V\2\2\u089e\u08c6")
        buf.write("\7W\2\2\u089f\u08c6\7X\2\2\u08a0\u08c6\7Y\2\2\u08a1\u08c6")
        buf.write("\7Z\2\2\u08a2\u08c6\7[\2\2\u08a3\u08c6\7\\\2\2\u08a4\u08c6")
        buf.write("\7]\2\2\u08a5\u08c6\7^\2\2\u08a6\u08c6\7_\2\2\u08a7\u08c6")
        buf.write("\7`\2\2\u08a8\u08c6\7a\2\2\u08a9\u08c6\7b\2\2\u08aa\u08c6")
        buf.write("\7c\2\2\u08ab\u08c6\7d\2\2\u08ac\u08c6\7e\2\2\u08ad\u08c6")
        buf.write("\7f\2\2\u08ae\u08c6\7g\2\2\u08af\u08c6\7h\2\2\u08b0\u08c6")
        buf.write("\7i\2\2\u08b1\u08c6\7j\2\2\u08b2\u08c6\7k\2\2\u08b3\u08c6")
        buf.write("\5\u00dco\2\u08b4\u08c6\5\u00dep\2\u08b5\u08c6\7l\2\2")
        buf.write("\u08b6\u08c6\7m\2\2\u08b7\u08c6\7n\2\2\u08b8\u08c6\7o")
        buf.write("\2\2\u08b9\u08c6\7p\2\2\u08ba\u08c6\7q\2\2\u08bb\u08c6")
        buf.write("\7r\2\2\u08bc\u08c6\7s\2\2\u08bd\u08c6\7t\2\2\u08be\u08c6")
        buf.write("\7u\2\2\u08bf\u08c6\7v\2\2\u08c0\u08c6\7w\2\2\u08c1\u08c2")
        buf.write("\7P\2\2\u08c2\u08c6\7Q\2\2\u08c3\u08c4\7R\2\2\u08c4\u08c6")
        buf.write("\7S\2\2\u08c5\u0895\3\2\2\2\u08c5\u0896\3\2\2\2\u08c5")
        buf.write("\u0897\3\2\2\2\u08c5\u089a\3\2\2\2\u08c5\u089d\3\2\2\2")
        buf.write("\u08c5\u089e\3\2\2\2\u08c5\u089f\3\2\2\2\u08c5\u08a0\3")
        buf.write("\2\2\2\u08c5\u08a1\3\2\2\2\u08c5\u08a2\3\2\2\2\u08c5\u08a3")
        buf.write("\3\2\2\2\u08c5\u08a4\3\2\2\2\u08c5\u08a5\3\2\2\2\u08c5")
        buf.write("\u08a6\3\2\2\2\u08c5\u08a7\3\2\2\2\u08c5\u08a8\3\2\2\2")
        buf.write("\u08c5\u08a9\3\2\2\2\u08c5\u08aa\3\2\2\2\u08c5\u08ab\3")
        buf.write("\2\2\2\u08c5\u08ac\3\2\2\2\u08c5\u08ad\3\2\2\2\u08c5\u08ae")
        buf.write("\3\2\2\2\u08c5\u08af\3\2\2\2\u08c5\u08b0\3\2\2\2\u08c5")
        buf.write("\u08b1\3\2\2\2\u08c5\u08b2\3\2\2\2\u08c5\u08b3\3\2\2\2")
        buf.write("\u08c5\u08b4\3\2\2\2\u08c5\u08b5\3\2\2\2\u08c5\u08b6\3")
        buf.write("\2\2\2\u08c5\u08b7\3\2\2\2\u08c5\u08b8\3\2\2\2\u08c5\u08b9")
        buf.write("\3\2\2\2\u08c5\u08ba\3\2\2\2\u08c5\u08bb\3\2\2\2\u08c5")
        buf.write("\u08bc\3\2\2\2\u08c5\u08bd\3\2\2\2\u08c5\u08be\3\2\2\2")
        buf.write("\u08c5\u08bf\3\2\2\2\u08c5\u08c0\3\2\2\2\u08c5\u08c1\3")
        buf.write("\2\2\2\u08c5\u08c3\3\2\2\2\u08c6\u00e1\3\2\2\2\u015f\u00e3")
        buf.write("\u00ea\u00ed\u00f1\u00f3\u00fa\u00fd\u0103\u0106\u010c")
        buf.write("\u010f\u0115\u0119\u011c\u0121\u0123\u0129\u0131\u0136")
        buf.write("\u013a\u013e\u0144\u014a\u014e\u0152\u0156\u0159\u015f")
        buf.write("\u0162\u0165\u016a\u016c\u0182\u0186\u018c\u0193\u0197")
        buf.write("\u019c\u01a0\u01a6\u01b1\u01bc\u01c7\u01d6\u01da\u01dc")
        buf.write("\u01e2\u01e8\u01eb\u01f0\u01f4\u01f8\u01fa\u01fe\u020a")
        buf.write("\u0212\u0218\u0225\u0232\u023d\u0245\u024c\u0250\u0253")
        buf.write("\u0256\u025d\u0262\u0266\u0268\u026c\u026f\u0276\u027d")
        buf.write("\u0281\u0286\u028a\u028d\u0292\u029a\u029f\u02a9\u02b4")
        buf.write("\u02bf\u02c8\u02cd\u02d8\u02e3\u02ee\u02f9\u0304\u030f")
        buf.write("\u031a\u032c\u0332\u0334\u0341\u034b\u0351\u0354\u035a")
        buf.write("\u035e\u0362\u0365\u0369\u036f\u0374\u0378\u037c\u0380")
        buf.write("\u0385\u038b\u0391\u0395\u0398\u03a4\u03af\u03b8\u03bd")
        buf.write("\u03cb\u03d0\u03d4\u03e5\u03ed\u03f4\u03fb\u03fd\u0411")
        buf.write("\u0415\u041d\u0424\u0429\u042c\u0430\u0433\u0438\u043d")
        buf.write("\u0443\u0446\u044a\u0457\u045b\u045e\u0463\u0466\u046b")
        buf.write("\u0470\u047d\u0488\u0491\u0496\u04a4\u04a9\u04b1\u04b6")
        buf.write("\u04be\u04c2\u04c5\u04cb\u04d0\u04d3\u04d6\u04e4\u04e9")
        buf.write("\u04ee\u04f1\u04f5\u04f7\u04fb\u0502\u0508\u050b\u050e")
        buf.write("\u0512\u0516\u0519\u051d\u0522\u0525\u052d\u0534\u0539")
        buf.write("\u053f\u0544\u0549\u054e\u0551\u0559\u056c\u0572\u0575")
        buf.write("\u0577\u057d\u0583\u0589\u0590\u0594\u059e\u05ab\u05ae")
        buf.write("\u05b6\u05ba\u05bf\u05c1\u05c7\u05c9\u05cd\u05d3\u05d9")
        buf.write("\u05dd\u05e3\u05f2\u05f7\u05fd\u0601\u060a\u060c\u0612")
        buf.write("\u0616\u061a\u0620\u0627\u062b\u062d\u062f\u0638\u063c")
        buf.write("\u063f\u0642\u0645\u0649\u064e\u0653\u0655\u065b\u0661")
        buf.write("\u0664\u0669\u066b\u0671\u0675\u067b\u0682\u0686\u0688")
        buf.write("\u068a\u0691\u069b\u069f\u06a1\u06a3\u06a7\u06aa\u06b0")
        buf.write("\u06ba\u06be\u06c3\u06c7\u06ca\u06cd\u06d1\u06d7\u06dd")
        buf.write("\u06e4\u06ea\u06f1\u06f6\u06fd\u0702\u0706\u070b\u0711")
        buf.write("\u0715\u071b\u0721\u0726\u0729\u072e\u0731\u0734\u073a")
        buf.write("\u073e\u0754\u0759\u075e\u0768\u076d\u0770\u0773\u0775")
        buf.write("\u0778\u077b\u077f\u0788\u0792\u0798\u079c\u07a0\u07a4")
        buf.write("\u07a8\u07ac\u07b0\u07b4\u07b7\u07bb\u07c1\u07c5\u07c9")
        buf.write("\u07cc\u07d0\u07da\u07df\u07e2\u07e5\u07ea\u07ec\u07f0")
        buf.write("\u07f3\u07f6\u07fb\u07fd\u0805\u0808\u080b\u080f\u0812")
        buf.write("\u0817\u081d\u0821\u0826\u082a\u0833\u0838\u083c\u0843")
        buf.write("\u084a\u0854\u085a\u0860\u0864\u0867\u086c\u0874\u0876")
        buf.write("\u087b\u087e\u0884\u0887\u088b\u08c5")
        return buf.getvalue()


class CPP14Parser(Parser):
    grammarFileName = "CPP14.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = ["<INVALID>", "<INVALID>", "<INVALID>", "'alignas'",
                    "'alignof'", "'asm'", "'auto'", "'bool'", "'break'",
                    "'case'", "'catch'", "'char'", "'char16_t'", "'char32_t'",
                    "'class'", "'const'", "'constexpr'", "'const_cast'",
                    "'continue'", "'decltype'", "'default'", "'delete'",
                    "'do'", "'double'", "'dynamic_cast'", "'else'", "'enum'",
                    "'explicit'", "'export'", "'extern'", "'false'", "'final'",
                    "'float'", "'for'", "'friend'", "'goto'", "'if'", "'inline'",
                    "'int'", "'long'", "'mutable'", "'namespace'", "'new'",
                    "'noexcept'", "'nullptr'", "'operator'", "'override'",
                    "'private'", "'protected'", "'public'", "'register'",
                    "'reinterpret_cast'", "'return'", "'short'", "'signed'",
                    "'sizeof'", "'static'", "'static_assert'", "'static_cast'",
                    "'struct'", "'switch'", "'template'", "'this'", "'thread_local'",
                    "'throw'", "'true'", "'try'", "'typedef'", "'typeid'",
                    "'typename'", "'union'", "'unsigned'", "'using'", "'virtual'",
                    "'void'", "'volatile'", "'wchar_t'", "'while'", "'('",
                    "')'", "'['", "']'", "'{'", "'}'", "'+'", "'-'", "'*'",
                    "'/'", "'%'", "'^'", "'&'", "'|'", "'~'", "'!'", "'='",
                    "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", "'%='",
                    "'^='", "'&='", "'|='", "'<<'", "'<<='", "'=='", "'!='",
                    "'<='", "'>='", "'&&'", "'||'", "'++'", "'--'", "','",
                    "'->*'", "'->'", "'?'", "':'", "'::'", "';'", "'.'",
                    "'.*'", "'...'"]

    symbolicNames = ["<INVALID>", "MultiLineMacro", "Directive", "Alignas",
                     "Alignof", "Asm", "Auto", "Bool", "Break", "Case",
                     "Catch", "Char", "Char16", "Char32", "Class", "Const",
                     "Constexpr", "Const_cast", "Continue", "Decltype",
                     "Default", "Delete", "Do", "Double", "Dynamic_cast",
                     "Else", "Enum", "Explicit", "Export", "Extern", "FalseToken",
                     "Final", "Float", "For", "Friend", "Goto", "If", "Inline",
                     "Int", "Long", "Mutable", "Namespace", "New", "Noexcept",
                     "Nullptr", "Operator", "Override", "Private", "Protected",
                     "Public", "Register", "Reinterpret_cast", "Return",
                     "Short", "Signed", "Sizeof", "Static", "Static_assert",
                     "Static_cast", "Struct", "Switch", "Template", "This",
                     "Thread_local", "Throw", "TrueToken", "Try", "Typedef",
                     "Typeid", "Typename", "Union", "Unsigned", "Using",
                     "Virtual", "Void", "Volatile", "Wchar", "While", "LeftParen",
                     "RightParen", "LeftBracket", "RightBracket", "LeftBrace",
                     "RightBrace", "Plus", "Minus", "Star", "Div", "Mod",
                     "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less",
                     "Greater", "PlusAssign", "MinusAssign", "StarAssign",
                     "DivAssign", "ModAssign", "XorAssign", "AndAssign",
                     "OrAssign", "LeftShift", "LeftShiftAssign", "Equal",
                     "NotEqual", "LessEqual", "GreaterEqual", "AndAnd",
                     "OrOr", "PlusPlus", "MinusMinus", "Comma", "ArrowStar",
                     "Arrow", "Question", "Colon", "Doublecolon", "Semi",
                     "Dot", "DotStar", "Ellipsis", "Identifier", "Integerliteral",
                     "Decimalliteral", "Octalliteral", "Hexadecimalliteral",
                     "Binaryliteral", "Integersuffix", "Characterliteral",
                     "Floatingliteral", "Stringliteral", "Userdefinedintegerliteral",
                     "Userdefinedfloatingliteral", "Userdefinedstringliteral",
                     "Userdefinedcharacterliteral", "Whitespace", "Newline",
                     "BlockComment", "LineComment"]

    RULE_translationunit = 0
    RULE_lambdacapture = 1
    RULE_idexpression = 2
    RULE_unqualifiedid = 3
    RULE_nestednamespecifier = 4
    RULE_capturelist = 5
    RULE_capture = 6
    RULE_lambdadeclarator = 7
    RULE_postfixexpression = 8
    RULE_pseudodestructorname = 9
    RULE_unaryexpression = 10
    RULE_unaryincdecexpression = 11
    RULE_unaryoperator = 12
    RULE_newexpression = 13
    RULE_newdeclarator = 14
    RULE_noptrnewdeclarator = 15
    RULE_newinitializer = 16
    RULE_deleteexpression = 17
    RULE_castexpression = 18
    RULE_pmexpression = 19
    RULE_multiplicativeexpression = 20
    RULE_additiveexpression = 21
    RULE_shiftexpression = 22
    RULE_relationalexpression = 23
    RULE_equalityexpression = 24
    RULE_andexpression = 25
    RULE_exclusiveorexpression = 26
    RULE_inclusiveorexpression = 27
    RULE_logicalandexpression = 28
    RULE_logicalorexpression = 29
    RULE_ternaryconditionalexpression = 30
    RULE_unaryconditionalexpression = 31
    RULE_assignmentexpression = 32
    RULE_assignmentoperator = 33
    RULE_expression = 34
    RULE_constantexpression = 35
    RULE_statement = 36
    RULE_casestatement = 37
    RULE_defaultstatement = 38
    RULE_selectionstatement = 39
    RULE_elsestatement = 40
    RULE_condition = 41
    RULE_iterationstatement = 42
    RULE_forinitstatement = 43
    RULE_jumpstatement = 44
    RULE_gotostatement = 45
    RULE_declarationseq = 46
    RULE_declaration = 47
    RULE_declspecifier = 48
    RULE_declspecifierseq = 49
    RULE_typespecifier = 50
    RULE_trailingtypespecifier = 51
    RULE_typespecifierseq = 52
    RULE_trailingtypespecifierseq = 53
    RULE_simpletypespecifier = 54
    RULE_thetypename = 55
    RULE_decltypespecifier = 56
    RULE_enumkey = 57
    RULE_enumeratorlist = 58
    RULE_attributespecifierseq = 59
    RULE_attributespecifier = 60
    RULE_attributelist = 61
    RULE_attribute = 62
    RULE_balancedtokenseq = 63
    RULE_balancedtoken = 64
    RULE_initdeclaratorlist = 65
    RULE_declarator = 66
    RULE_ptrdeclarator = 67
    RULE_noptrdeclarator = 68
    RULE_parametersandqualifiers = 69
    RULE_ptroperator = 70
    RULE_cvqualifier = 71
    RULE_abstractdeclarator = 72
    RULE_ptrabstractdeclarator = 73
    RULE_noptrabstractdeclarator = 74
    RULE_abstractpackdeclarator = 75
    RULE_noptrabstractpackdeclarator = 76
    RULE_parameterdeclarationclause = 77
    RULE_parameterdeclarationlist = 78
    RULE_parameterdeclaration = 79
    RULE_functiondefinition = 80
    RULE_functionbody = 81
    RULE_initializer = 82
    RULE_braceorequalinitializer = 83
    RULE_initializerclause = 84
    RULE_initializerlist = 85
    RULE_bracedinitlist = 86
    RULE_classname = 87
    RULE_classkey = 88
    RULE_memberdeclaration = 89
    RULE_memberdeclaratorlist = 90
    RULE_memberdeclarator = 91
    RULE_virtspecifierseq = 92
    RULE_purespecifier = 93
    RULE_basespecifierlist = 94
    RULE_basespecifier = 95
    RULE_classordecltype = 96
    RULE_accessspecifier = 97
    RULE_meminitializerlist = 98
    RULE_templateparameterlist = 99
    RULE_templateparameter = 100
    RULE_templateargumentlist = 101
    RULE_templateargument = 102
    RULE_typenamespecifier = 103
    RULE_tryblock = 104
    RULE_handler = 105
    RULE_exceptiondeclaration = 106
    RULE_exceptionspecification = 107
    RULE_typeidlist = 108
    RULE_rightShift = 109
    RULE_rightShiftAssign = 110
    RULE_theoperator = 111

    ruleNames = ["translationunit", "lambdacapture", "idexpression", "unqualifiedid",
                 "nestednamespecifier", "capturelist", "capture", "lambdadeclarator",
                 "postfixexpression", "pseudodestructorname", "unaryexpression",
                 "unaryincdecexpression", "unaryoperator", "newexpression",
                 "newdeclarator", "noptrnewdeclarator", "newinitializer",
                 "deleteexpression", "castexpression", "pmexpression",
                 "multiplicativeexpression", "additiveexpression", "shiftexpression",
                 "relationalexpression", "equalityexpression", "andexpression",
                 "exclusiveorexpression", "inclusiveorexpression", "logicalandexpression",
                 "logicalorexpression", "ternaryconditionalexpression",
                 "unaryconditionalexpression", "assignmentexpression",
                 "assignmentoperator", "expression", "constantexpression",
                 "statement", "casestatement", "defaultstatement", "selectionstatement",
                 "elsestatement", "condition", "iterationstatement", "forinitstatement",
                 "jumpstatement", "gotostatement", "declarationseq", "declaration",
                 "declspecifier", "declspecifierseq", "typespecifier",
                 "trailingtypespecifier", "typespecifierseq", "trailingtypespecifierseq",
                 "simpletypespecifier", "thetypename", "decltypespecifier",
                 "enumkey", "enumeratorlist", "attributespecifierseq",
                 "attributespecifier", "attributelist", "attribute", "balancedtokenseq",
                 "balancedtoken", "initdeclaratorlist", "declarator",
                 "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers",
                 "ptroperator", "cvqualifier", "abstractdeclarator", "ptrabstractdeclarator",
                 "noptrabstractdeclarator", "abstractpackdeclarator",
                 "noptrabstractpackdeclarator", "parameterdeclarationclause",
                 "parameterdeclarationlist", "parameterdeclaration", "functiondefinition",
                 "functionbody", "initializer", "braceorequalinitializer",
                 "initializerclause", "initializerlist", "bracedinitlist",
                 "classname", "classkey", "memberdeclaration", "memberdeclaratorlist",
                 "memberdeclarator", "virtspecifierseq", "purespecifier",
                 "basespecifierlist", "basespecifier", "classordecltype",
                 "accessspecifier", "meminitializerlist", "templateparameterlist",
                 "templateparameter", "templateargumentlist", "templateargument",
                 "typenamespecifier", "tryblock", "handler", "exceptiondeclaration",
                 "exceptionspecification", "typeidlist", "rightShift",
                 "rightShiftAssign", "theoperator"]

    EOF = Token.EOF
    MultiLineMacro = 1
    Directive = 2
    Alignas = 3
    Alignof = 4
    Asm = 5
    Auto = 6
    Bool = 7
    Break = 8
    Case = 9
    Catch = 10
    Char = 11
    Char16 = 12
    Char32 = 13
    Class = 14
    Const = 15
    Constexpr = 16
    Const_cast = 17
    Continue = 18
    Decltype = 19
    Default = 20
    Delete = 21
    Do = 22
    Double = 23
    Dynamic_cast = 24
    Else = 25
    Enum = 26
    Explicit = 27
    Export = 28
    Extern = 29
    FalseToken = 30
    Final = 31
    Float = 32
    For = 33
    Friend = 34
    Goto = 35
    If = 36
    Inline = 37
    Int = 38
    Long = 39
    Mutable = 40
    Namespace = 41
    New = 42
    Noexcept = 43
    Nullptr = 44
    Operator = 45
    Override = 46
    Private = 47
    Protected = 48
    Public = 49
    Register = 50
    Reinterpret_cast = 51
    Return = 52
    Short = 53
    Signed = 54
    Sizeof = 55
    Static = 56
    Static_assert = 57
    Static_cast = 58
    Struct = 59
    Switch = 60
    Template = 61
    This = 62
    Thread_local = 63
    Throw = 64
    TrueToken = 65
    Try = 66
    Typedef = 67
    Typeid = 68
    Typename = 69
    Union = 70
    Unsigned = 71
    Using = 72
    Virtual = 73
    Void = 74
    Volatile = 75
    Wchar = 76
    While = 77
    LeftParen = 78
    RightParen = 79
    LeftBracket = 80
    RightBracket = 81
    LeftBrace = 82
    RightBrace = 83
    Plus = 84
    Minus = 85
    Star = 86
    Div = 87
    Mod = 88
    Caret = 89
    And = 90
    Or = 91
    Tilde = 92
    Not = 93
    Assign = 94
    Less = 95
    Greater = 96
    PlusAssign = 97
    MinusAssign = 98
    StarAssign = 99
    DivAssign = 100
    ModAssign = 101
    XorAssign = 102
    AndAssign = 103
    OrAssign = 104
    LeftShift = 105
    LeftShiftAssign = 106
    Equal = 107
    NotEqual = 108
    LessEqual = 109
    GreaterEqual = 110
    AndAnd = 111
    OrOr = 112
    PlusPlus = 113
    MinusMinus = 114
    Comma = 115
    ArrowStar = 116
    Arrow = 117
    Question = 118
    Colon = 119
    Doublecolon = 120
    Semi = 121
    Dot = 122
    DotStar = 123
    Ellipsis = 124
    Identifier = 125
    Integerliteral = 126
    Decimalliteral = 127
    Octalliteral = 128
    Hexadecimalliteral = 129
    Binaryliteral = 130
    Integersuffix = 131
    Characterliteral = 132
    Floatingliteral = 133
    Stringliteral = 134
    Userdefinedintegerliteral = 135
    Userdefinedfloatingliteral = 136
    Userdefinedstringliteral = 137
    Userdefinedcharacterliteral = 138
    Whitespace = 139
    Newline = 140
    BlockComment = 141
    LineComment = 142

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class TranslationunitContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CPP14Parser.EOF, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_translationunit

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTranslationunit"):
                listener.enterTranslationunit(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTranslationunit"):
                listener.exitTranslationunit(self)

    def translationunit(self):

        localctx = CPP14Parser.TranslationunitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationunit)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (
                1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (
                1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (
                1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or (
                    (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Semi - 67)) | (
                1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                self.state = 224
                self.declarationseq(0)

            self.state = 227
            self.match(CPP14Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdacaptureContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capturelist(self):
            return self.getTypedRuleContext(CPP14Parser.CapturelistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdacapture

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambdacapture"):
                listener.enterLambdacapture(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambdacapture"):
                listener.exitLambdacapture(self)

    def lambdacapture(self):

        localctx = CPP14Parser.LambdacaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_lambdacapture)
        self._la = 0  # Token type
        try:
            self.state = 235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 2, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 229
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.And or _la == CPP14Parser.Assign):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Comma:
                    self.state = 230
                    self.match(CPP14Parser.Comma)
                    self.state = 231
                    self.capturelist(0)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 234
                self.capturelist(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_idexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdexpression"):
                listener.enterIdexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdexpression"):
                listener.exitIdexpression(self)

    def idexpression(self):

        localctx = CPP14Parser.IdexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_idexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 4, self._ctx)
            if la_ == 1:
                self.state = 237
                self.nestednamespecifier(0)
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Template:
                    self.state = 238
                    self.match(CPP14Parser.Template)

            self.state = 243
            self.unqualifiedid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnqualifiedidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def theoperator(self):
            return self.getTypedRuleContext(CPP14Parser.TheoperatorContext, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def ptroperator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PtroperatorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, i)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unqualifiedid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnqualifiedid"):
                listener.enterUnqualifiedid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnqualifiedid"):
                listener.exitUnqualifiedid(self)

    def unqualifiedid(self):

        localctx = CPP14Parser.UnqualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_unqualifiedid)
        self._la = 0  # Token type
        try:
            self.state = 289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 15, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 245
                self.match(CPP14Parser.Identifier)
                self.state = 251
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 6, self._ctx)
                if la_ == 1:
                    self.state = 246
                    self.match(CPP14Parser.Less)
                    self.state = 248
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                        1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                        CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                        1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                        1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                        1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                        1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                        1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                        1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (
                        1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                        1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                        1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                        1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                        (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                        1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                        self.state = 247
                        self.templateargumentlist(0)

                    self.state = 250
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 253
                self.match(CPP14Parser.Operator)
                self.state = 269
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Delete, CPP14Parser.New, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                             CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.Div, CPP14Parser.Mod,
                             CPP14Parser.Caret, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                             CPP14Parser.Assign, CPP14Parser.Less, CPP14Parser.Greater, CPP14Parser.PlusAssign,
                             CPP14Parser.MinusAssign, CPP14Parser.StarAssign, CPP14Parser.DivAssign,
                             CPP14Parser.ModAssign, CPP14Parser.XorAssign, CPP14Parser.AndAssign, CPP14Parser.OrAssign,
                             CPP14Parser.LeftShift, CPP14Parser.LeftShiftAssign, CPP14Parser.Equal,
                             CPP14Parser.NotEqual, CPP14Parser.LessEqual, CPP14Parser.GreaterEqual, CPP14Parser.AndAnd,
                             CPP14Parser.OrOr, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Comma,
                             CPP14Parser.ArrowStar, CPP14Parser.Arrow]:
                    self.state = 254
                    self.theoperator()
                    self.state = 260
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 8, self._ctx)
                    if la_ == 1:
                        self.state = 255
                        self.match(CPP14Parser.Less)
                        self.state = 257
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                            1 << CPP14Parser.Enum) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (
                            1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (
                            1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (
                            1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                            1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                            1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                            1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                            1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                                (1 << (CPP14Parser.Characterliteral - 132)) | (
                                                1 << (CPP14Parser.Floatingliteral - 132)) | (
                                            1 << (CPP14Parser.Stringliteral - 132)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 256
                            self.templateargumentlist(0)

                        self.state = 259
                        self.match(CPP14Parser.Greater)

                    pass
                elif token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16,
                               CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Decltype,
                               CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Float, CPP14Parser.Int,
                               CPP14Parser.Long, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Struct,
                               CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Void,
                               CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.Identifier]:
                    self.state = 262
                    self.typespecifierseq()
                    self.state = 266
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 263
                            self.ptroperator()
                        self.state = 268
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 271
                self.match(CPP14Parser.Operator)
                self.state = 275
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Stringliteral]:
                    self.state = 272
                    self.match(CPP14Parser.Stringliteral)
                    self.state = 273
                    self.match(CPP14Parser.Identifier)
                    pass
                elif token in [CPP14Parser.Userdefinedstringliteral]:
                    self.state = 274
                    self.match(CPP14Parser.Userdefinedstringliteral)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 282
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
                if la_ == 1:
                    self.state = 277
                    self.match(CPP14Parser.Less)
                    self.state = 279
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                        1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                        CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                        1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                        1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                        1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                        1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                        1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                        1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (
                        1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                        1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                        1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                        1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                        (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                        1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                        self.state = 278
                        self.templateargumentlist(0)

                    self.state = 281
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 284
                self.match(CPP14Parser.Tilde)
                self.state = 287
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Identifier]:
                    self.state = 285
                    self.classname()
                    pass
                elif token in [CPP14Parser.Decltype]:
                    self.state = 286
                    self.decltypespecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestednamespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypenameContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_nestednamespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNestednamespecifier"):
                listener.enterNestednamespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNestednamespecifier"):
                listener.exitNestednamespecifier(self)

    def nestednamespecifier(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NestednamespecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 8
        self.enterRecursionRule(localctx, 8, self.RULE_nestednamespecifier, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 16, self._ctx)
            if la_ == 1:
                self.state = 292
                self.thetypename()
                pass

            elif la_ == 2:
                self.state = 293
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 3:
                self.state = 294
                self.decltypespecifier()
                pass

            self.state = 297
            self.match(CPP14Parser.Doublecolon)
            self._ctx.stop = self._input.LT(-1)
            self.state = 316
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 20, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NestednamespecifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                    self.state = 299
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 312
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 19, self._ctx)
                    if la_ == 1:
                        self.state = 300
                        self.match(CPP14Parser.Identifier)
                        self.state = 301
                        self.match(CPP14Parser.Doublecolon)
                        pass

                    elif la_ == 2:
                        self.state = 303
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 302
                            self.match(CPP14Parser.Template)

                        self.state = 305
                        self.match(CPP14Parser.Identifier)
                        self.state = 306
                        self.match(CPP14Parser.Less)
                        self.state = 308
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                            1 << CPP14Parser.Enum) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (
                            1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (
                            1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (
                            1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                            1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                            1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                            1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                            1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                                (1 << (CPP14Parser.Characterliteral - 132)) | (
                                                1 << (CPP14Parser.Floatingliteral - 132)) | (
                                            1 << (CPP14Parser.Stringliteral - 132)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 307
                            self.templateargumentlist(0)

                        self.state = 310
                        self.match(CPP14Parser.Greater)
                        self.state = 311
                        self.match(CPP14Parser.Doublecolon)
                        pass

                self.state = 318
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 20, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class CapturelistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capture(self):
            return self.getTypedRuleContext(CPP14Parser.CaptureContext, 0)

        def capturelist(self):
            return self.getTypedRuleContext(CPP14Parser.CapturelistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_capturelist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCapturelist"):
                listener.enterCapturelist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCapturelist"):
                listener.exitCapturelist(self)

    def capturelist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.CapturelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 10
        self.enterRecursionRule(localctx, 10, self.RULE_capturelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self.capture()
            self.state = 322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 21, self._ctx)
            if la_ == 1:
                self.state = 321
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 332
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 23, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.CapturelistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_capturelist)
                    self.state = 324
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 325
                    self.match(CPP14Parser.Comma)
                    self.state = 326
                    self.capture()
                    self.state = 328
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 22, self._ctx)
                    if la_ == 1:
                        self.state = 327
                        self.match(CPP14Parser.Ellipsis)

                self.state = 334
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 23, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class CaptureContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def initializer(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerContext, 0)

        def This(self):
            return self.getToken(CPP14Parser.This, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_capture

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCapture"):
                listener.enterCapture(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCapture"):
                listener.exitCapture(self)

    def capture(self):

        localctx = CPP14Parser.CaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_capture)
        self._la = 0  # Token type
        try:
            self.state = 343
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.And, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.And:
                    self.state = 335
                    self.match(CPP14Parser.And)

                self.state = 338
                self.match(CPP14Parser.Identifier)
                self.state = 340
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 25, self._ctx)
                if la_ == 1:
                    self.state = 339
                    self.initializer()

                pass
            elif token in [CPP14Parser.This]:
                self.enterOuterAlt(localctx, 2)
                self.state = 342
                self.match(CPP14Parser.This)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdadeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationclauseContext, 0)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionspecificationContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdadeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambdadeclarator"):
                listener.enterLambdadeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambdadeclarator"):
                listener.exitLambdadeclarator(self)

    def lambdadeclarator(self):

        localctx = CPP14Parser.LambdadeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_lambdadeclarator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(CPP14Parser.LeftParen)
            self.state = 346
            self.parameterdeclarationclause()
            self.state = 347
            self.match(CPP14Parser.RightParen)
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Mutable:
                self.state = 348
                self.match(CPP14Parser.Mutable)

            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Noexcept or _la == CPP14Parser.Throw:
                self.state = 351
                self.exceptionspecification()

            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 354
                self.attributespecifierseq(0)

            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Arrow:
                self.state = 357
                self.match(CPP14Parser.Arrow)
                self.state = 358
                self.trailingtypespecifierseq()
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 359
                    self.abstractdeclarator()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integerliteral(self):
            return self.getToken(CPP14Parser.Integerliteral, 0)

        def Characterliteral(self):
            return self.getToken(CPP14Parser.Characterliteral, 0)

        def Floatingliteral(self):
            return self.getToken(CPP14Parser.Floatingliteral, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def FalseToken(self):
            return self.getToken(CPP14Parser.FalseToken, 0)

        def TrueToken(self):
            return self.getToken(CPP14Parser.TrueToken, 0)

        def Nullptr(self):
            return self.getToken(CPP14Parser.Nullptr, 0)

        def Userdefinedintegerliteral(self):
            return self.getToken(CPP14Parser.Userdefinedintegerliteral, 0)

        def Userdefinedfloatingliteral(self):
            return self.getToken(CPP14Parser.Userdefinedfloatingliteral, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def Userdefinedcharacterliteral(self):
            return self.getToken(CPP14Parser.Userdefinedcharacterliteral, 0)

        def This(self):
            return self.getToken(CPP14Parser.This, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def lambdacapture(self):
            return self.getTypedRuleContext(CPP14Parser.LambdacaptureContext, 0)

        def lambdadeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.LambdadeclaratorContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypenamespecifierContext, 0)

        def Dynamic_cast(self):
            return self.getToken(CPP14Parser.Dynamic_cast, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Static_cast(self):
            return self.getToken(CPP14Parser.Static_cast, 0)

        def Reinterpret_cast(self):
            return self.getToken(CPP14Parser.Reinterpret_cast, 0)

        def Const_cast(self):
            return self.getToken(CPP14Parser.Const_cast, 0)

        def Typeid(self):
            return self.getToken(CPP14Parser.Typeid, 0)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext, 0)

        def pseudodestructorname(self):
            return self.getTypedRuleContext(CPP14Parser.PseudodestructornameContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_postfixexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPostfixexpression"):
                listener.enterPostfixexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPostfixexpression"):
                listener.exitPostfixexpression(self)

    def postfixexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PostfixexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 16
        self.enterRecursionRule(localctx, 16, self.RULE_postfixexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 45, self._ctx)
            if la_ == 1:
                self.state = 365
                self.match(CPP14Parser.Integerliteral)
                pass

            elif la_ == 2:
                self.state = 366
                self.match(CPP14Parser.Characterliteral)
                pass

            elif la_ == 3:
                self.state = 367
                self.match(CPP14Parser.Floatingliteral)
                pass

            elif la_ == 4:
                self.state = 368
                self.match(CPP14Parser.Stringliteral)
                pass

            elif la_ == 5:
                self.state = 369
                self.match(CPP14Parser.FalseToken)
                pass

            elif la_ == 6:
                self.state = 370
                self.match(CPP14Parser.TrueToken)
                pass

            elif la_ == 7:
                self.state = 371
                self.match(CPP14Parser.Nullptr)
                pass

            elif la_ == 8:
                self.state = 372
                self.match(CPP14Parser.Userdefinedintegerliteral)
                pass

            elif la_ == 9:
                self.state = 373
                self.match(CPP14Parser.Userdefinedfloatingliteral)
                pass

            elif la_ == 10:
                self.state = 374
                self.match(CPP14Parser.Userdefinedstringliteral)
                pass

            elif la_ == 11:
                self.state = 375
                self.match(CPP14Parser.Userdefinedcharacterliteral)
                pass

            elif la_ == 12:
                self.state = 376
                self.match(CPP14Parser.This)
                pass

            elif la_ == 13:
                self.state = 377
                self.match(CPP14Parser.LeftParen)
                self.state = 378
                self.expression(0)
                self.state = 379
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 14:
                self.state = 381
                self.idexpression()
                pass

            elif la_ == 15:
                self.state = 382
                self.match(CPP14Parser.LeftBracket)
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & (
                            (1 << (CPP14Parser.This - 62)) | (1 << (CPP14Parser.And - 62)) | (
                        1 << (CPP14Parser.Assign - 62)) | (1 << (CPP14Parser.Identifier - 62)))) != 0):
                    self.state = 383
                    self.lambdacapture()

                self.state = 386
                self.match(CPP14Parser.RightBracket)
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.LeftParen:
                    self.state = 387
                    self.lambdadeclarator()

                self.state = 390
                self.match(CPP14Parser.LeftBrace)
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                    1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (
                    1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (
                    1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (
                    1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (
                    1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (
                    1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (1 << CPP14Parser.Short) | (
                    1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static) | (
                    1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Thread_local))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Try - 64)) | (
                    1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                    1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                    1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                    1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                    1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Semi - 64)) | (
                    1 << (CPP14Parser.Ellipsis - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 391
                    self.statement()
                    self.state = 396
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 397
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 16:
                self.state = 398
                self.simpletypespecifier()
                self.state = 405
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.LeftParen]:
                    self.state = 399
                    self.match(CPP14Parser.LeftParen)
                    self.state = 401
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                            (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                        1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                        1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                        1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                        1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                        1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                        1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                        1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (
                        1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                        1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                        1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                        1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                        (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                        1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                        self.state = 400
                        self.initializerlist(0)

                    self.state = 403
                    self.match(CPP14Parser.RightParen)
                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 404
                    self.bracedinitlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 17:
                self.state = 407
                self.typenamespecifier()
                self.state = 414
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.LeftParen]:
                    self.state = 408
                    self.match(CPP14Parser.LeftParen)
                    self.state = 410
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                            (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                        1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                        1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                        1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                        1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                        1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                        1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                        1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (
                        1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                        1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                        1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                        1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                        (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                        1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                        self.state = 409
                        self.initializerlist(0)

                    self.state = 412
                    self.match(CPP14Parser.RightParen)
                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 413
                    self.bracedinitlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 18:
                self.state = 416
                self.match(CPP14Parser.Dynamic_cast)
                self.state = 417
                self.match(CPP14Parser.Less)
                self.state = 418
                self.typespecifierseq()
                self.state = 420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 419
                    self.abstractdeclarator()

                self.state = 422
                self.match(CPP14Parser.Greater)
                self.state = 423
                self.match(CPP14Parser.LeftParen)
                self.state = 424
                self.expression(0)
                self.state = 425
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 19:
                self.state = 427
                self.match(CPP14Parser.Static_cast)
                self.state = 428
                self.match(CPP14Parser.Less)
                self.state = 429
                self.typespecifierseq()
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 430
                    self.abstractdeclarator()

                self.state = 433
                self.match(CPP14Parser.Greater)
                self.state = 434
                self.match(CPP14Parser.LeftParen)
                self.state = 435
                self.expression(0)
                self.state = 436
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 20:
                self.state = 438
                self.match(CPP14Parser.Reinterpret_cast)
                self.state = 439
                self.match(CPP14Parser.Less)
                self.state = 440
                self.typespecifierseq()
                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 441
                    self.abstractdeclarator()

                self.state = 444
                self.match(CPP14Parser.Greater)
                self.state = 445
                self.match(CPP14Parser.LeftParen)
                self.state = 446
                self.expression(0)
                self.state = 447
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 21:
                self.state = 449
                self.match(CPP14Parser.Const_cast)
                self.state = 450
                self.match(CPP14Parser.Less)
                self.state = 451
                self.typespecifierseq()
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 452
                    self.abstractdeclarator()

                self.state = 455
                self.match(CPP14Parser.Greater)
                self.state = 456
                self.match(CPP14Parser.LeftParen)
                self.state = 457
                self.expression(0)
                self.state = 458
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 22:
                self.state = 460
                self.match(CPP14Parser.Typeid)
                self.state = 472
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 44, self._ctx)
                if la_ == 1:
                    self.state = 461
                    self.match(CPP14Parser.LeftParen)
                    self.state = 462
                    self.expression(0)
                    self.state = 463
                    self.match(CPP14Parser.RightParen)
                    pass

                elif la_ == 2:
                    self.state = 465
                    self.match(CPP14Parser.LeftParen)
                    self.state = 466
                    self.typespecifierseq()
                    self.state = 468
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Ellipsis - 78)) | (1 << (CPP14Parser.Identifier - 78)))) != 0):
                        self.state = 467
                        self.abstractdeclarator()

                    self.state = 470
                    self.match(CPP14Parser.RightParen)
                    pass

                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 504
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 52, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 502
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 51, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 476
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 489
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.LeftBracket]:
                            self.state = 477
                            self.match(CPP14Parser.LeftBracket)
                            self.state = 480
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char,
                                         CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast,
                                         CPP14Parser.Decltype, CPP14Parser.Delete, CPP14Parser.Double,
                                         CPP14Parser.Dynamic_cast, CPP14Parser.FalseToken, CPP14Parser.Float,
                                         CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept,
                                         CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.Reinterpret_cast,
                                         CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof,
                                         CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw,
                                         CPP14Parser.TrueToken, CPP14Parser.Typeid, CPP14Parser.Typename,
                                         CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Wchar,
                                         CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus,
                                         CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                                         CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus,
                                         CPP14Parser.MinusMinus, CPP14Parser.Doublecolon, CPP14Parser.Identifier,
                                         CPP14Parser.Integerliteral, CPP14Parser.Characterliteral,
                                         CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral,
                                         CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral,
                                         CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                                self.state = 478
                                self.expression(0)
                                pass
                            elif token in [CPP14Parser.LeftBrace]:
                                self.state = 479
                                self.bracedinitlist()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 482
                            self.match(CPP14Parser.RightBracket)
                            pass
                        elif token in [CPP14Parser.LeftParen]:
                            self.state = 484
                            self.match(CPP14Parser.LeftParen)
                            self.state = 486
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                                1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                                1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                                1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                                1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                                1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                                1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                    (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                                CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                                1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                                1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                                1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                                1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                                1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (
                                1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                                1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                                1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                                1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                                1 << (CPP14Parser.Identifier - 64)) | (
                                1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                                (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                                1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                                self.state = 485
                                self.initializerlist(0)

                            self.state = 488
                            self.match(CPP14Parser.RightParen)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 491
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 492
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Arrow or _la == CPP14Parser.Dot):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 498
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 50, self._ctx)
                        if la_ == 1:
                            self.state = 494
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Template:
                                self.state = 493
                                self.match(CPP14Parser.Template)

                            self.state = 496
                            self.idexpression()
                            pass

                        elif la_ == 2:
                            self.state = 497
                            self.pseudodestructorname()
                            pass

                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 500
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 501
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.PlusPlus or _la == CPP14Parser.MinusMinus):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                self.state = 506
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 52, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PseudodestructornameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ThetypenameContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ThetypenameContext, i)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pseudodestructorname

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPseudodestructorname"):
                listener.enterPseudodestructorname(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPseudodestructorname"):
                listener.exitPseudodestructorname(self)

    def pseudodestructorname(self):

        localctx = CPP14Parser.PseudodestructornameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_pseudodestructorname)
        self._la = 0  # Token type
        try:
            self.state = 534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 56, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 508
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 53, self._ctx)
                if la_ == 1:
                    self.state = 507
                    self.nestednamespecifier(0)

                self.state = 510
                self.thetypename()
                self.state = 511
                self.match(CPP14Parser.Doublecolon)
                self.state = 512
                self.match(CPP14Parser.Tilde)
                self.state = 513
                self.thetypename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 515
                self.nestednamespecifier(0)
                self.state = 516
                self.match(CPP14Parser.Template)
                self.state = 517
                self.match(CPP14Parser.Identifier)
                self.state = 518
                self.match(CPP14Parser.Less)
                self.state = 520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 519
                    self.templateargumentlist(0)

                self.state = 522
                self.match(CPP14Parser.Greater)
                self.state = 523
                self.match(CPP14Parser.Doublecolon)
                self.state = 524
                self.match(CPP14Parser.Tilde)
                self.state = 525
                self.thetypename()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Identifier:
                    self.state = 527
                    self.nestednamespecifier(0)

                self.state = 530
                self.match(CPP14Parser.Tilde)
                self.state = 531
                self.thetypename()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 532
                self.match(CPP14Parser.Tilde)
                self.state = 533
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext, 0)

        def unaryincdecexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryincdecexpressionContext, 0)

        def unaryoperator(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryoperatorContext, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def Sizeof(self):
            return self.getToken(CPP14Parser.Sizeof, 0)

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Alignof(self):
            return self.getToken(CPP14Parser.Alignof, 0)

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def newexpression(self):
            return self.getTypedRuleContext(CPP14Parser.NewexpressionContext, 0)

        def deleteexpression(self):
            return self.getTypedRuleContext(CPP14Parser.DeleteexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryexpression"):
                listener.enterUnaryexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryexpression"):
                listener.exitUnaryexpression(self)

    def unaryexpression(self):

        localctx = CPP14Parser.UnaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_unaryexpression)
        self._la = 0  # Token type
        try:
            self.state = 571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 59, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 536
                self.postfixexpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 537
                self.unaryincdecexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 538
                self.unaryoperator()
                self.state = 539
                self.castexpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 541
                self.match(CPP14Parser.Sizeof)
                self.state = 542
                self.unaryexpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 543
                self.match(CPP14Parser.Sizeof)
                self.state = 544
                self.match(CPP14Parser.LeftParen)
                self.state = 545
                self.typespecifierseq()
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 546
                    self.abstractdeclarator()

                self.state = 549
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 551
                self.match(CPP14Parser.Sizeof)
                self.state = 552
                self.match(CPP14Parser.Ellipsis)
                self.state = 553
                self.match(CPP14Parser.LeftParen)
                self.state = 554
                self.match(CPP14Parser.Identifier)
                self.state = 555
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 556
                self.match(CPP14Parser.Alignof)
                self.state = 557
                self.match(CPP14Parser.LeftParen)
                self.state = 558
                self.typespecifierseq()
                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 559
                    self.abstractdeclarator()

                self.state = 562
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 564
                self.match(CPP14Parser.Noexcept)
                self.state = 565
                self.match(CPP14Parser.LeftParen)
                self.state = 566
                self.expression(0)
                self.state = 567
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 569
                self.newexpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 570
                self.deleteexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryincdecexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryincdecexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryincdecexpression"):
                listener.enterUnaryincdecexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryincdecexpression"):
                listener.exitUnaryincdecexpression(self)

    def unaryincdecexpression(self):

        localctx = CPP14Parser.UnaryincdecexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_unaryincdecexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.PlusPlus or _la == CPP14Parser.MinusMinus):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 574
            self.castexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryoperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryoperator"):
                listener.enterUnaryoperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryoperator"):
                listener.exitUnaryoperator(self)

    def unaryoperator(self):

        localctx = CPP14Parser.UnaryoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_unaryoperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            _la = self._input.LA(1)
            if not (((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & (
                                    (1 << (CPP14Parser.Plus - 84)) | (1 << (CPP14Parser.Minus - 84)) | (
                                1 << (CPP14Parser.Star - 84)) | (1 << (CPP14Parser.And - 84)) | (
                        1 << (CPP14Parser.Or - 84)) | (1 << (CPP14Parser.Tilde - 84)) | (
                1 << (CPP14Parser.Not - 84)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext, 0)

        def newinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.NewinitializerContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewexpression"):
                listener.enterNewexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewexpression"):
                listener.exitNewexpression(self)

    def newexpression(self):

        localctx = CPP14Parser.NewexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_newexpression)
        self._la = 0  # Token type
        try:
            self.state = 614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 68, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Doublecolon:
                    self.state = 578
                    self.match(CPP14Parser.Doublecolon)

                self.state = 581
                self.match(CPP14Parser.New)
                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.LeftParen:
                    self.state = 582
                    self.match(CPP14Parser.LeftParen)
                    self.state = 583
                    self.initializerlist(0)
                    self.state = 584
                    self.match(CPP14Parser.RightParen)

                self.state = 588
                self.typespecifierseq()
                self.state = 590
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 62, self._ctx)
                if la_ == 1:
                    self.state = 589
                    self.newdeclarator()

                self.state = 593
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 63, self._ctx)
                if la_ == 1:
                    self.state = 592
                    self.newinitializer()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Doublecolon:
                    self.state = 595
                    self.match(CPP14Parser.Doublecolon)

                self.state = 598
                self.match(CPP14Parser.New)
                self.state = 603
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 65, self._ctx)
                if la_ == 1:
                    self.state = 599
                    self.match(CPP14Parser.LeftParen)
                    self.state = 600
                    self.initializerlist(0)
                    self.state = 601
                    self.match(CPP14Parser.RightParen)

                self.state = 605
                self.match(CPP14Parser.LeftParen)
                self.state = 606
                self.typespecifierseq()
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 607
                    self.abstractdeclarator()

                self.state = 610
                self.match(CPP14Parser.RightParen)
                self.state = 612
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 67, self._ctx)
                if la_ == 1:
                    self.state = 611
                    self.newinitializer()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext, 0)

        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrnewdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewdeclarator"):
                listener.enterNewdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewdeclarator"):
                listener.exitNewdeclarator(self)

    def newdeclarator(self):

        localctx = CPP14Parser.NewdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_newdeclarator)
        try:
            self.state = 621
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                         CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 616
                self.ptroperator()
                self.state = 618
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 69, self._ctx)
                if la_ == 1:
                    self.state = 617
                    self.newdeclarator()

                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 620
                self.noptrnewdeclarator(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrnewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrnewdeclaratorContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrnewdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrnewdeclarator"):
                listener.enterNoptrnewdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrnewdeclarator"):
                listener.exitNoptrnewdeclarator(self)

    def noptrnewdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrnewdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_noptrnewdeclarator, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.match(CPP14Parser.LeftBracket)
            self.state = 625
            self.expression(0)
            self.state = 626
            self.match(CPP14Parser.RightBracket)
            self.state = 628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 71, self._ctx)
            if la_ == 1:
                self.state = 627
                self.attributespecifierseq(0)

            self._ctx.stop = self._input.LT(-1)
            self.state = 639
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 73, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoptrnewdeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrnewdeclarator)
                    self.state = 630
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 631
                    self.match(CPP14Parser.LeftBracket)
                    self.state = 632
                    self.constantexpression()
                    self.state = 633
                    self.match(CPP14Parser.RightBracket)
                    self.state = 635
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 72, self._ctx)
                    if la_ == 1:
                        self.state = 634
                        self.attributespecifierseq(0)

                self.state = 641
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 73, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class NewinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newinitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewinitializer"):
                listener.enterNewinitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewinitializer"):
                listener.exitNewinitializer(self)

    def newinitializer(self):

        localctx = CPP14Parser.NewinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_newinitializer)
        self._la = 0  # Token type
        try:
            self.state = 648
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 642
                self.match(CPP14Parser.LeftParen)
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                    1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                    1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 643
                    self.initializerlist(0)

                self.state = 646
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 647
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_deleteexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeleteexpression"):
                listener.enterDeleteexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeleteexpression"):
                listener.exitDeleteexpression(self)

    def deleteexpression(self):

        localctx = CPP14Parser.DeleteexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_deleteexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Doublecolon:
                self.state = 650
                self.match(CPP14Parser.Doublecolon)

            self.state = 653
            self.match(CPP14Parser.Delete)
            self.state = 656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 77, self._ctx)
            if la_ == 1:
                self.state = 654
                self.match(CPP14Parser.LeftBracket)
                self.state = 655
                self.match(CPP14Parser.RightBracket)

            self.state = 658
            self.castexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_castexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCastexpression"):
                listener.enterCastexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCastexpression"):
                listener.exitCastexpression(self)

    def castexpression(self):

        localctx = CPP14Parser.CastexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_castexpression)
        self._la = 0  # Token type
        try:
            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 79, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 660
                self.unaryexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 661
                self.match(CPP14Parser.LeftParen)
                self.state = 662
                self.typespecifierseq()
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 663
                    self.abstractdeclarator()

                self.state = 666
                self.match(CPP14Parser.RightParen)
                self.state = 667
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PmexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def pmexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PmexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pmexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPmexpression"):
                listener.enterPmexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPmexpression"):
                listener.exitPmexpression(self)

    def pmexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PmexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 38
        self.enterRecursionRule(localctx, 38, self.RULE_pmexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.castexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 679
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 80, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.PmexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                    self.state = 674
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 675
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.ArrowStar or _la == CPP14Parser.DotStar):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 676
                    self.castexpression()
                self.state = 681
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 80, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class MultiplicativeexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pmexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PmexpressionContext, 0)

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14Parser.MultiplicativeexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_multiplicativeexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMultiplicativeexpression"):
                listener.enterMultiplicativeexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMultiplicativeexpression"):
                listener.exitMultiplicativeexpression(self)

    def multiplicativeexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.MultiplicativeexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 40
        self.enterRecursionRule(localctx, 40, self.RULE_multiplicativeexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.pmexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 690
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 81, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                    self.state = 685
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 686
                    _la = self._input.LA(1)
                    if not (((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & (
                            (1 << (CPP14Parser.Star - 86)) | (1 << (CPP14Parser.Div - 86)) | (
                        1 << (CPP14Parser.Mod - 86)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 687
                    self.pmexpression(0)
                self.state = 692
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 81, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AdditiveexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14Parser.MultiplicativeexpressionContext, 0)

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AdditiveexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_additiveexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAdditiveexpression"):
                listener.enterAdditiveexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAdditiveexpression"):
                listener.exitAdditiveexpression(self)

    def additiveexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AdditiveexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 42
        self.enterRecursionRule(localctx, 42, self.RULE_additiveexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self.multiplicativeexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 701
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 82, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AdditiveexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                    self.state = 696
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 697
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Plus or _la == CPP14Parser.Minus):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 698
                    self.multiplicativeexpression(0)
                self.state = 703
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 82, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ShiftexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AdditiveexpressionContext, 0)

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext, 0)

        def rightShift(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_shiftexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShiftexpression"):
                listener.enterShiftexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShiftexpression"):
                listener.exitShiftexpression(self)

    def shiftexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ShiftexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 44
        self.enterRecursionRule(localctx, 44, self.RULE_shiftexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.additiveexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 715
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 84, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ShiftexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftexpression)
                    self.state = 707
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 710
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.LeftShift]:
                        self.state = 708
                        self.match(CPP14Parser.LeftShift)
                        pass
                    elif token in [CPP14Parser.Greater]:
                        self.state = 709
                        self.rightShift()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 712
                    self.additiveexpression(0)
                self.state = 717
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 84, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class RelationalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext, 0)

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_relationalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelationalexpression"):
                listener.enterRelationalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelationalexpression"):
                listener.exitRelationalexpression(self)

    def relationalexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.RelationalexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 46
        self.enterRecursionRule(localctx, 46, self.RULE_relationalexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.shiftexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 726
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 85, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                    self.state = 721
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 722
                    _la = self._input.LA(1)
                    if not (((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & (
                                (1 << (CPP14Parser.Less - 95)) | (1 << (CPP14Parser.Greater - 95)) | (
                            1 << (CPP14Parser.LessEqual - 95)) | (1 << (CPP14Parser.GreaterEqual - 95)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 723
                    self.shiftexpression(0)
                self.state = 728
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 85, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EqualityexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext, 0)

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_equalityexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEqualityexpression"):
                listener.enterEqualityexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEqualityexpression"):
                listener.exitEqualityexpression(self)

    def equalityexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EqualityexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 48
        self.enterRecursionRule(localctx, 48, self.RULE_equalityexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.relationalexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 737
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 86, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                    self.state = 732
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 733
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Equal or _la == CPP14Parser.NotEqual):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 734
                    self.relationalexpression(0)
                self.state = 739
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 86, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AndexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, 0)

        def andexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AndexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_andexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAndexpression"):
                listener.enterAndexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAndexpression"):
                listener.exitAndexpression(self)

    def andexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AndexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 50
        self.enterRecursionRule(localctx, 50, self.RULE_andexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.equalityexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 748
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 87, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AndexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_andexpression)
                    self.state = 743
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 744
                    self.match(CPP14Parser.And)
                    self.state = 745
                    self.equalityexpression(0)
                self.state = 750
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 87, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExclusiveorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AndexpressionContext, 0)

        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ExclusiveorexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exclusiveorexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExclusiveorexpression"):
                listener.enterExclusiveorexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExclusiveorexpression"):
                listener.exitExclusiveorexpression(self)

    def exclusiveorexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ExclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_exclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.andexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 759
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 88, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ExclusiveorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusiveorexpression)
                    self.state = 754
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 755
                    self.match(CPP14Parser.Caret)
                    self.state = 756
                    self.andexpression(0)
                self.state = 761
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 88, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class InclusiveorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ExclusiveorexpressionContext, 0)

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.InclusiveorexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_inclusiveorexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInclusiveorexpression"):
                listener.enterInclusiveorexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInclusiveorexpression"):
                listener.exitInclusiveorexpression(self)

    def inclusiveorexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 54
        self.enterRecursionRule(localctx, 54, self.RULE_inclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.exclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 770
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 89, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InclusiveorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_inclusiveorexpression)
                    self.state = 765
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 766
                    self.match(CPP14Parser.Or)
                    self.state = 767
                    self.exclusiveorexpression(0)
                self.state = 772
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 89, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalandexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.InclusiveorexpressionContext, 0)

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalandexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalandexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalandexpression"):
                listener.enterLogicalandexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalandexpression"):
                listener.exitLogicalandexpression(self)

    def logicalandexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.LogicalandexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_logicalandexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.inclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 781
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 90, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.LogicalandexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalandexpression)
                    self.state = 776
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 777
                    self.match(CPP14Parser.AndAnd)
                    self.state = 778
                    self.inclusiveorexpression(0)
                self.state = 783
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 90, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalandexpressionContext, 0)

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalorexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalorexpression"):
                listener.enterLogicalorexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalorexpression"):
                listener.exitLogicalorexpression(self)

    def logicalorexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.LogicalorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 58
        self.enterRecursionRule(localctx, 58, self.RULE_logicalorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.logicalandexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 792
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 91, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.LogicalorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalorexpression)
                    self.state = 787
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 788
                    self.match(CPP14Parser.OrOr)
                    self.state = 789
                    self.logicalandexpression(0)
                self.state = 794
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 91, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TernaryconditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ternaryconditionalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTernaryconditionalexpression"):
                listener.enterTernaryconditionalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTernaryconditionalexpression"):
                listener.exitTernaryconditionalexpression(self)

    def ternaryconditionalexpression(self):

        localctx = CPP14Parser.TernaryconditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_ternaryconditionalexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.logicalorexpression(0)
            self.state = 796
            self.match(CPP14Parser.Question)
            self.state = 797
            self.expression(0)
            self.state = 798
            self.match(CPP14Parser.Colon)
            self.state = 799
            self.assignmentexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryconditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryconditionalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryconditionalexpression"):
                listener.enterUnaryconditionalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryconditionalexpression"):
                listener.exitUnaryconditionalexpression(self)

    def unaryconditionalexpression(self):

        localctx = CPP14Parser.UnaryconditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_unaryconditionalexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.logicalorexpression(0)
            self.state = 802
            self.match(CPP14Parser.Question)
            self.state = 803
            self.match(CPP14Parser.Colon)
            self.state = 804
            self.assignmentexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def assignmentoperator(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentoperatorContext, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext, 0)

        def ternaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.TernaryconditionalexpressionContext, 0)

        def unaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryconditionalexpressionContext, 0)

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentexpression"):
                listener.enterAssignmentexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentexpression"):
                listener.exitAssignmentexpression(self)

    def assignmentexpression(self):

        localctx = CPP14Parser.AssignmentexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_assignmentexpression)
        try:
            self.state = 818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 94, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 806
                self.logicalorexpression(0)
                self.state = 810
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 92, self._ctx)
                if la_ == 1:
                    self.state = 807
                    self.assignmentoperator()
                    self.state = 808
                    self.initializerclause()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 812
                self.ternaryconditionalexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 813
                self.unaryconditionalexpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 814
                self.match(CPP14Parser.Throw)
                self.state = 816
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 93, self._ctx)
                if la_ == 1:
                    self.state = 815
                    self.assignmentexpression()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rightShiftAssign(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftAssignContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentoperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentoperator"):
                listener.enterAssignmentoperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentoperator"):
                listener.exitAssignmentoperator(self)

    def assignmentoperator(self):

        localctx = CPP14Parser.AssignmentoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_assignmentoperator)
        try:
            self.state = 831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 820
                self.match(CPP14Parser.Assign)
                pass
            elif token in [CPP14Parser.StarAssign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 821
                self.match(CPP14Parser.StarAssign)
                pass
            elif token in [CPP14Parser.DivAssign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 822
                self.match(CPP14Parser.DivAssign)
                pass
            elif token in [CPP14Parser.ModAssign]:
                self.enterOuterAlt(localctx, 4)
                self.state = 823
                self.match(CPP14Parser.ModAssign)
                pass
            elif token in [CPP14Parser.PlusAssign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 824
                self.match(CPP14Parser.PlusAssign)
                pass
            elif token in [CPP14Parser.MinusAssign]:
                self.enterOuterAlt(localctx, 6)
                self.state = 825
                self.match(CPP14Parser.MinusAssign)
                pass
            elif token in [CPP14Parser.Greater]:
                self.enterOuterAlt(localctx, 7)
                self.state = 826
                self.rightShiftAssign()
                pass
            elif token in [CPP14Parser.LeftShiftAssign]:
                self.enterOuterAlt(localctx, 8)
                self.state = 827
                self.match(CPP14Parser.LeftShiftAssign)
                pass
            elif token in [CPP14Parser.AndAssign]:
                self.enterOuterAlt(localctx, 9)
                self.state = 828
                self.match(CPP14Parser.AndAssign)
                pass
            elif token in [CPP14Parser.XorAssign]:
                self.enterOuterAlt(localctx, 10)
                self.state = 829
                self.match(CPP14Parser.XorAssign)
                pass
            elif token in [CPP14Parser.OrAssign]:
                self.enterOuterAlt(localctx, 11)
                self.state = 830
                self.match(CPP14Parser.OrAssign)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

    def expression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.assignmentexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 841
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 96, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 836
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 837
                    self.match(CPP14Parser.Comma)
                    self.state = 838
                    self.assignmentexpression()
                self.state = 843
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 96, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ConstantexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def ternaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.TernaryconditionalexpressionContext, 0)

        def unaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryconditionalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_constantexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstantexpression"):
                listener.enterConstantexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstantexpression"):
                listener.exitConstantexpression(self)

    def constantexpression(self):

        localctx = CPP14Parser.ConstantexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_constantexpression)
        try:
            self.state = 847
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 97, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 844
                self.logicalorexpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 845
                self.ternaryconditionalexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 846
                self.unaryconditionalexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def casestatement(self):
            return self.getTypedRuleContext(CPP14Parser.CasestatementContext, 0)

        def defaultstatement(self):
            return self.getTypedRuleContext(CPP14Parser.DefaultstatementContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def selectionstatement(self):
            return self.getTypedRuleContext(CPP14Parser.SelectionstatementContext, 0)

        def iterationstatement(self):
            return self.getTypedRuleContext(CPP14Parser.IterationstatementContext, 0)

        def jumpstatement(self):
            return self.getTypedRuleContext(CPP14Parser.JumpstatementContext, 0)

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def tryblock(self):
            return self.getTypedRuleContext(CPP14Parser.TryblockContext, 0)

        def Asm(self):
            return self.getToken(CPP14Parser.Asm, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def enumkey(self):
            return self.getTypedRuleContext(CPP14Parser.EnumkeyContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

    def statement(self):

        localctx = CPP14Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_statement)
        self._la = 0  # Token type
        try:
            self.state = 978
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 120, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 849
                    self.attributespecifierseq(0)

                self.state = 852
                self.match(CPP14Parser.Identifier)
                self.state = 853
                self.match(CPP14Parser.Colon)
                self.state = 854
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 855
                    self.attributespecifierseq(0)

                self.state = 858
                self.casestatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 859
                    self.attributespecifierseq(0)

                self.state = 862
                self.defaultstatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 864
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 101, self._ctx)
                if la_ == 1:
                    self.state = 863
                    self.attributespecifierseq(0)

                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                    1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                    1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                        (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                        (1 << (CPP14Parser.Characterliteral - 132)) | (
                                        1 << (CPP14Parser.Floatingliteral - 132)) | (
                                    1 << (CPP14Parser.Stringliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 866
                    self.expression(0)

                self.state = 869
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 870
                    self.attributespecifierseq(0)

                self.state = 873
                self.match(CPP14Parser.LeftBrace)
                self.state = 877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                    1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (
                    1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (
                    1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (
                    1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (
                    1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (
                    1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (1 << CPP14Parser.Short) | (
                    1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static) | (
                    1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Thread_local))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Try - 64)) | (
                    1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                    1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                    1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                    1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                    1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Semi - 64)) | (
                    1 << (CPP14Parser.Ellipsis - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 874
                    self.statement()
                    self.state = 879
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 880
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 881
                    self.attributespecifierseq(0)

                self.state = 884
                self.selectionstatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 885
                    self.attributespecifierseq(0)

                self.state = 888
                self.iterationstatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 889
                    self.attributespecifierseq(0)

                self.state = 892
                self.jumpstatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 893
                    self.attributespecifierseq(0)

                self.state = 896
                self.match(CPP14Parser.Using)
                self.state = 897
                self.match(CPP14Parser.Namespace)
                self.state = 899
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 109, self._ctx)
                if la_ == 1:
                    self.state = 898
                    self.nestednamespecifier(0)

                self.state = 901
                self.match(CPP14Parser.Identifier)
                self.state = 902
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 903
                self.attributespecifierseq(0)
                self.state = 905
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 110, self._ctx)
                if la_ == 1:
                    self.state = 904
                    self.declspecifierseq()

                self.state = 907
                self.initdeclaratorlist(0)
                self.state = 908
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 910
                    self.attributespecifierseq(0)

                self.state = 913
                self.tryblock()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 915
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 112, self._ctx)
                if la_ == 1:
                    self.state = 914
                    self.declspecifierseq()

                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Operator or ((((_la - 78)) & ~0x3f) == 0 and (
                    (1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.Tilde - 78)) | (
                    1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 917
                    self.initdeclaratorlist(0)

                self.state = 920
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 921
                self.match(CPP14Parser.Asm)
                self.state = 922
                self.match(CPP14Parser.LeftParen)
                self.state = 923
                self.match(CPP14Parser.Stringliteral)
                self.state = 924
                self.match(CPP14Parser.RightParen)
                self.state = 925
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 926
                self.match(CPP14Parser.Namespace)
                self.state = 927
                self.match(CPP14Parser.Identifier)
                self.state = 928
                self.match(CPP14Parser.Assign)
                self.state = 930
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 114, self._ctx)
                if la_ == 1:
                    self.state = 929
                    self.nestednamespecifier(0)

                self.state = 932
                self.match(CPP14Parser.Identifier)
                self.state = 933
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 934
                self.match(CPP14Parser.Using)
                self.state = 935
                self.match(CPP14Parser.Doublecolon)
                self.state = 936
                self.unqualifiedid()
                self.state = 937
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 939
                self.match(CPP14Parser.Using)
                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Typename:
                    self.state = 940
                    self.match(CPP14Parser.Typename)

                self.state = 943
                self.nestednamespecifier(0)
                self.state = 944
                self.unqualifiedid()
                self.state = 945
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 947
                self.match(CPP14Parser.Using)
                self.state = 948
                self.match(CPP14Parser.Identifier)
                self.state = 950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 949
                    self.attributespecifierseq(0)

                self.state = 952
                self.match(CPP14Parser.Assign)
                self.state = 953
                self.typespecifierseq()
                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 954
                    self.abstractdeclarator()

                self.state = 957
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 959
                self.match(CPP14Parser.Static_assert)
                self.state = 960
                self.match(CPP14Parser.LeftParen)
                self.state = 961
                self.constantexpression()
                self.state = 962
                self.match(CPP14Parser.Comma)
                self.state = 963
                self.match(CPP14Parser.Stringliteral)
                self.state = 964
                self.match(CPP14Parser.RightParen)
                self.state = 965
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 967
                self.enumkey()
                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 968
                    self.attributespecifierseq(0)

                self.state = 971
                self.match(CPP14Parser.Identifier)
                self.state = 974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 972
                    self.match(CPP14Parser.Colon)
                    self.state = 973
                    self.typespecifierseq()

                self.state = 976
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CasestatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Case(self):
            return self.getToken(CPP14Parser.Case, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_casestatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCasestatement"):
                listener.enterCasestatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCasestatement"):
                listener.exitCasestatement(self)

    def casestatement(self):

        localctx = CPP14Parser.CasestatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_casestatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.match(CPP14Parser.Case)
            self.state = 981
            self.constantexpression()
            self.state = 982
            self.match(CPP14Parser.Colon)
            self.state = 983
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_defaultstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDefaultstatement"):
                listener.enterDefaultstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDefaultstatement"):
                listener.exitDefaultstatement(self)

    def defaultstatement(self):

        localctx = CPP14Parser.DefaultstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_defaultstatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.match(CPP14Parser.Default)
            self.state = 986
            self.match(CPP14Parser.Colon)
            self.state = 987
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectionstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(CPP14Parser.If, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def elsestatement(self):
            return self.getTypedRuleContext(CPP14Parser.ElsestatementContext, 0)

        def Switch(self):
            return self.getToken(CPP14Parser.Switch, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_selectionstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectionstatement"):
                listener.enterSelectionstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectionstatement"):
                listener.exitSelectionstatement(self)

    def selectionstatement(self):

        localctx = CPP14Parser.SelectionstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_selectionstatement)
        try:
            self.state = 1003
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.If]:
                self.enterOuterAlt(localctx, 1)
                self.state = 989
                self.match(CPP14Parser.If)
                self.state = 990
                self.match(CPP14Parser.LeftParen)
                self.state = 991
                self.condition()
                self.state = 992
                self.match(CPP14Parser.RightParen)
                self.state = 993
                self.statement()
                self.state = 995
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 121, self._ctx)
                if la_ == 1:
                    self.state = 994
                    self.elsestatement()

                pass
            elif token in [CPP14Parser.Switch]:
                self.enterOuterAlt(localctx, 2)
                self.state = 997
                self.match(CPP14Parser.Switch)
                self.state = 998
                self.match(CPP14Parser.LeftParen)
                self.state = 999
                self.condition()
                self.state = 1000
                self.match(CPP14Parser.RightParen)
                self.state = 1001
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElsestatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(CPP14Parser.Else, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_elsestatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElsestatement"):
                listener.enterElsestatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElsestatement"):
                listener.exitElsestatement(self)

    def elsestatement(self):

        localctx = CPP14Parser.ElsestatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_elsestatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.match(CPP14Parser.Else)
            self.state = 1006
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_condition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCondition"):
                listener.enterCondition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCondition"):
                listener.exitCondition(self)

    def condition(self):

        localctx = CPP14Parser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_condition)
        self._la = 0  # Token type
        try:
            self.state = 1019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 125, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1008
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1009
                    self.attributespecifierseq(0)

                self.state = 1012
                self.declspecifierseq()
                self.state = 1013
                self.declarator()
                self.state = 1017
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Assign]:
                    self.state = 1014
                    self.match(CPP14Parser.Assign)
                    self.state = 1015
                    self.initializerclause()
                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 1016
                    self.bracedinitlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IterationstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(CPP14Parser.While, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def Do(self):
            return self.getToken(CPP14Parser.Do, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def For(self):
            return self.getToken(CPP14Parser.For, 0)

        def forinitstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ForinitstatementContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_iterationstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIterationstatement"):
                listener.enterIterationstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIterationstatement"):
                listener.exitIterationstatement(self)

    def iterationstatement(self):

        localctx = CPP14Parser.IterationstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_iterationstatement)
        self._la = 0  # Token type
        try:
            self.state = 1063
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 130, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1021
                self.match(CPP14Parser.While)
                self.state = 1022
                self.match(CPP14Parser.LeftParen)
                self.state = 1023
                self.condition()
                self.state = 1024
                self.match(CPP14Parser.RightParen)
                self.state = 1025
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1027
                self.match(CPP14Parser.Do)
                self.state = 1028
                self.statement()
                self.state = 1029
                self.match(CPP14Parser.While)
                self.state = 1030
                self.match(CPP14Parser.LeftParen)
                self.state = 1031
                self.expression(0)
                self.state = 1032
                self.match(CPP14Parser.RightParen)
                self.state = 1033
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1035
                self.match(CPP14Parser.For)
                self.state = 1036
                self.match(CPP14Parser.LeftParen)
                self.state = 1037
                self.forinitstatement()
                self.state = 1039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                    1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (
                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                    1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (
                    1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.New) | (
                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (
                    1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                    1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((
                                                                                                                         1 << (
                                                                                                                         CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (
                    1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                    1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                    1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                    1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                    1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                        (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                        (1 << (CPP14Parser.Characterliteral - 132)) | (
                                        1 << (CPP14Parser.Floatingliteral - 132)) | (
                                    1 << (CPP14Parser.Stringliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1038
                    self.condition()

                self.state = 1041
                self.match(CPP14Parser.Semi)
                self.state = 1043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                    1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                    1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                        (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                        (1 << (CPP14Parser.Characterliteral - 132)) | (
                                        1 << (CPP14Parser.Floatingliteral - 132)) | (
                                    1 << (CPP14Parser.Stringliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1042
                    self.expression(0)

                self.state = 1045
                self.match(CPP14Parser.RightParen)
                self.state = 1046
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1048
                self.match(CPP14Parser.For)
                self.state = 1049
                self.match(CPP14Parser.LeftParen)
                self.state = 1051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1050
                    self.attributespecifierseq(0)

                self.state = 1053
                self.declspecifierseq()
                self.state = 1054
                self.declarator()
                self.state = 1055
                self.match(CPP14Parser.Colon)
                self.state = 1058
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char,
                             CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype,
                             CPP14Parser.Delete, CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.FalseToken,
                             CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New,
                             CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                             CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof,
                             CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw, CPP14Parser.TrueToken,
                             CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.Unsigned, CPP14Parser.Void,
                             CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus,
                             CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde,
                             CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                             CPP14Parser.Identifier, CPP14Parser.Integerliteral, CPP14Parser.Characterliteral,
                             CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral,
                             CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral,
                             CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                    self.state = 1056
                    self.expression(0)
                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 1057
                    self.bracedinitlist()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1060
                self.match(CPP14Parser.RightParen)
                self.state = 1061
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForinitstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_forinitstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForinitstatement"):
                listener.enterForinitstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForinitstatement"):
                listener.exitForinitstatement(self)

    def forinitstatement(self):

        localctx = CPP14Parser.ForinitstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_forinitstatement)
        self._la = 0  # Token type
        try:
            self.state = 1083
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 135, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                    1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                    1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                        (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                        (1 << (CPP14Parser.Characterliteral - 132)) | (
                                        1 << (CPP14Parser.Floatingliteral - 132)) | (
                                    1 << (CPP14Parser.Stringliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1065
                    self.expression(0)

                self.state = 1068
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1070
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 132, self._ctx)
                if la_ == 1:
                    self.state = 1069
                    self.declspecifierseq()

                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Operator or ((((_la - 78)) & ~0x3f) == 0 and (
                    (1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.Tilde - 78)) | (
                    1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1072
                    self.initdeclaratorlist(0)

                self.state = 1075
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1076
                self.attributespecifierseq(0)
                self.state = 1078
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 134, self._ctx)
                if la_ == 1:
                    self.state = 1077
                    self.declspecifierseq()

                self.state = 1080
                self.initdeclaratorlist(0)
                self.state = 1081
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JumpstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(CPP14Parser.Break, 0)

        def Continue(self):
            return self.getToken(CPP14Parser.Continue, 0)

        def Return(self):
            return self.getToken(CPP14Parser.Return, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def gotostatement(self):
            return self.getTypedRuleContext(CPP14Parser.GotostatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_jumpstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJumpstatement"):
                listener.enterJumpstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJumpstatement"):
                listener.exitJumpstatement(self)

    def jumpstatement(self):

        localctx = CPP14Parser.JumpstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_jumpstatement)
        self._la = 0  # Token type
        try:
            self.state = 1096
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Break, CPP14Parser.Continue]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1085
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Break or _la == CPP14Parser.Continue):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1086
                self.match(CPP14Parser.Semi)
                pass
            elif token in [CPP14Parser.Return]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1087
                self.match(CPP14Parser.Return)
                self.state = 1092
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char,
                             CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype,
                             CPP14Parser.Delete, CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.FalseToken,
                             CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New,
                             CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                             CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof,
                             CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw, CPP14Parser.TrueToken,
                             CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.Unsigned, CPP14Parser.Void,
                             CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus,
                             CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde,
                             CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                             CPP14Parser.Semi, CPP14Parser.Identifier, CPP14Parser.Integerliteral,
                             CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral,
                             CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral,
                             CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                    self.state = 1089
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                            (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                        1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                        1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                        1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                        1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                        1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (
                        1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (
                        1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                        1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                        1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                        1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                        (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                        1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                        self.state = 1088
                        self.expression(0)

                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 1091
                    self.bracedinitlist()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1094
                self.match(CPP14Parser.Semi)
                pass
            elif token in [CPP14Parser.Goto]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1095
                self.gotostatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GotostatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Goto(self):
            return self.getToken(CPP14Parser.Goto, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_gotostatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGotostatement"):
                listener.enterGotostatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGotostatement"):
                listener.exitGotostatement(self)

    def gotostatement(self):

        localctx = CPP14Parser.GotostatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_gotostatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.match(CPP14Parser.Goto)
            self.state = 1099
            self.match(CPP14Parser.Identifier)
            self.state = 1100
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declarationseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclarationseq"):
                listener.enterDeclarationseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclarationseq"):
                listener.exitDeclarationseq(self)

    def declarationseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.DeclarationseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 92
        self.enterRecursionRule(localctx, 92, self.RULE_declarationseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self.declaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1109
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 139, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.DeclarationseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_declarationseq)
                    self.state = 1105
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1106
                    self.declaration()
                self.state = 1111
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 139, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Asm(self):
            return self.getToken(CPP14Parser.Asm, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def enumkey(self):
            return self.getTypedRuleContext(CPP14Parser.EnumkeyContext, 0)

        def functiondefinition(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiondefinitionContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclaration"):
                listener.enterDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclaration"):
                listener.exitDeclaration(self)

    def declaration(self):

        localctx = CPP14Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_declaration)
        self._la = 0  # Token type
        try:
            self.state = 1236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 160, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1113
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 140, self._ctx)
                if la_ == 1:
                    self.state = 1112
                    self.declspecifierseq()

                self.state = 1116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Operator or ((((_la - 78)) & ~0x3f) == 0 and (
                    (1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.Tilde - 78)) | (
                    1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1115
                    self.initdeclaratorlist(0)

                self.state = 1118
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1119
                self.attributespecifierseq(0)
                self.state = 1124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (
                    1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (
                    1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (
                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (
                    1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                    1 << CPP14Parser.Static) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Thread_local))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                    1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                    1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (
                    1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (
                    1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (
                    1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                    1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1121
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 142, self._ctx)
                    if la_ == 1:
                        self.state = 1120
                        self.declspecifierseq()

                    self.state = 1123
                    self.initdeclaratorlist(0)

                self.state = 1126
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1129
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1128
                    self.attributespecifierseq(0)

                self.state = 1131
                self.match(CPP14Parser.Using)
                self.state = 1132
                self.match(CPP14Parser.Namespace)
                self.state = 1134
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 145, self._ctx)
                if la_ == 1:
                    self.state = 1133
                    self.nestednamespecifier(0)

                self.state = 1136
                self.match(CPP14Parser.Identifier)
                self.state = 1137
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1138
                self.match(CPP14Parser.Asm)
                self.state = 1139
                self.match(CPP14Parser.LeftParen)
                self.state = 1140
                self.match(CPP14Parser.Stringliteral)
                self.state = 1141
                self.match(CPP14Parser.RightParen)
                self.state = 1142
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1143
                self.match(CPP14Parser.Namespace)
                self.state = 1144
                self.match(CPP14Parser.Identifier)
                self.state = 1145
                self.match(CPP14Parser.Assign)
                self.state = 1147
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 146, self._ctx)
                if la_ == 1:
                    self.state = 1146
                    self.nestednamespecifier(0)

                self.state = 1149
                self.match(CPP14Parser.Identifier)
                self.state = 1150
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1151
                self.match(CPP14Parser.Using)
                self.state = 1152
                self.match(CPP14Parser.Doublecolon)
                self.state = 1153
                self.unqualifiedid()
                self.state = 1154
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1156
                self.match(CPP14Parser.Using)
                self.state = 1158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Typename:
                    self.state = 1157
                    self.match(CPP14Parser.Typename)

                self.state = 1160
                self.nestednamespecifier(0)
                self.state = 1161
                self.unqualifiedid()
                self.state = 1162
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1164
                self.match(CPP14Parser.Using)
                self.state = 1165
                self.match(CPP14Parser.Identifier)
                self.state = 1167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1166
                    self.attributespecifierseq(0)

                self.state = 1169
                self.match(CPP14Parser.Assign)
                self.state = 1170
                self.typespecifierseq()
                self.state = 1172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1171
                    self.abstractdeclarator()

                self.state = 1174
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1176
                self.match(CPP14Parser.Static_assert)
                self.state = 1177
                self.match(CPP14Parser.LeftParen)
                self.state = 1178
                self.constantexpression()
                self.state = 1179
                self.match(CPP14Parser.Comma)
                self.state = 1180
                self.match(CPP14Parser.Stringliteral)
                self.state = 1181
                self.match(CPP14Parser.RightParen)
                self.state = 1182
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1184
                self.enumkey()
                self.state = 1186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1185
                    self.attributespecifierseq(0)

                self.state = 1188
                self.match(CPP14Parser.Identifier)
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1189
                    self.match(CPP14Parser.Colon)
                    self.state = 1190
                    self.typespecifierseq()

                self.state = 1193
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1195
                self.functiondefinition()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1196
                self.match(CPP14Parser.Template)
                self.state = 1197
                self.match(CPP14Parser.Less)
                self.state = 1199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                    1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                    1 << CPP14Parser.Static) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (
                    1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                    (1 << (CPP14Parser.Typedef - 67)) | (
                                                    1 << (CPP14Parser.Typename - 67)) | (
                                                1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (
                                        1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                                1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                        1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1198
                    self.templateparameterlist(0)

                self.state = 1201
                self.match(CPP14Parser.Greater)
                self.state = 1202
                self.declaration()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Extern:
                    self.state = 1203
                    self.match(CPP14Parser.Extern)

                self.state = 1206
                self.match(CPP14Parser.Template)
                self.state = 1207
                self.declaration()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1208
                self.match(CPP14Parser.Extern)
                self.state = 1209
                self.match(CPP14Parser.Stringliteral)
                self.state = 1216
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.LeftBrace]:
                    self.state = 1210
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 1212
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                        1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                        1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                        1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                        1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (
                        1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                        1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                        1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                        1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                        1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                        1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                        1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                        1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                        1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 1211
                        self.declarationseq(0)

                    self.state = 1214
                    self.match(CPP14Parser.RightBrace)
                    pass
                elif token in [CPP14Parser.Alignas, CPP14Parser.Asm, CPP14Parser.Auto, CPP14Parser.Bool,
                               CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class,
                               CPP14Parser.Const, CPP14Parser.Constexpr, CPP14Parser.Decltype, CPP14Parser.Double,
                               CPP14Parser.Enum, CPP14Parser.Explicit, CPP14Parser.Extern, CPP14Parser.Float,
                               CPP14Parser.Friend, CPP14Parser.Inline, CPP14Parser.Int, CPP14Parser.Long,
                               CPP14Parser.Mutable, CPP14Parser.Namespace, CPP14Parser.Operator, CPP14Parser.Register,
                               CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Static, CPP14Parser.Static_assert,
                               CPP14Parser.Struct, CPP14Parser.Template, CPP14Parser.Thread_local, CPP14Parser.Typedef,
                               CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Using,
                               CPP14Parser.Virtual, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar,
                               CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Star, CPP14Parser.And,
                               CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Semi, CPP14Parser.Ellipsis,
                               CPP14Parser.Identifier]:
                    self.state = 1215
                    self.declaration()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Inline:
                    self.state = 1218
                    self.match(CPP14Parser.Inline)

                self.state = 1221
                self.match(CPP14Parser.Namespace)
                self.state = 1233
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Identifier]:
                    self.state = 1222
                    self.match(CPP14Parser.Identifier)
                    self.state = 1223
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 1225
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                        1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                        1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                        1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                        1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (
                        1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                        1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                        1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                        1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                        1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                        1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                        1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                        1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                        1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 1224
                        self.declarationseq(0)

                    self.state = 1227
                    self.match(CPP14Parser.RightBrace)
                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 1228
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 1230
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                        1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                        1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                        1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                        1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (
                        1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                        1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                        1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                        1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                        1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                        1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                        1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                        1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (
                        1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                        1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                        1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 1229
                        self.declarationseq(0)

                    self.state = 1232
                    self.match(CPP14Parser.RightBrace)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1235
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Register(self):
            return self.getToken(CPP14Parser.Register, 0)

        def Static(self):
            return self.getToken(CPP14Parser.Static, 0)

        def Thread_local(self):
            return self.getToken(CPP14Parser.Thread_local, 0)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def Explicit(self):
            return self.getToken(CPP14Parser.Explicit, 0)

        def Friend(self):
            return self.getToken(CPP14Parser.Friend, 0)

        def Typedef(self):
            return self.getToken(CPP14Parser.Typedef, 0)

        def Constexpr(self):
            return self.getToken(CPP14Parser.Constexpr, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclspecifier"):
                listener.enterDeclspecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclspecifier"):
                listener.exitDeclspecifier(self)

    def declspecifier(self):

        localctx = CPP14Parser.DeclspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_declspecifier)
        try:
            self.state = 1250
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Register]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1238
                self.match(CPP14Parser.Register)
                pass
            elif token in [CPP14Parser.Static]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1239
                self.match(CPP14Parser.Static)
                pass
            elif token in [CPP14Parser.Thread_local]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1240
                self.match(CPP14Parser.Thread_local)
                pass
            elif token in [CPP14Parser.Extern]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1241
                self.match(CPP14Parser.Extern)
                pass
            elif token in [CPP14Parser.Mutable]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1242
                self.match(CPP14Parser.Mutable)
                pass
            elif token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32,
                           CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Decltype, CPP14Parser.Double,
                           CPP14Parser.Enum, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Short,
                           CPP14Parser.Signed, CPP14Parser.Struct, CPP14Parser.Typename, CPP14Parser.Union,
                           CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar,
                           CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1243
                self.typespecifier()
                pass
            elif token in [CPP14Parser.Inline]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1244
                self.match(CPP14Parser.Inline)
                pass
            elif token in [CPP14Parser.Virtual]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1245
                self.match(CPP14Parser.Virtual)
                pass
            elif token in [CPP14Parser.Explicit]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1246
                self.match(CPP14Parser.Explicit)
                pass
            elif token in [CPP14Parser.Friend]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1247
                self.match(CPP14Parser.Friend)
                pass
            elif token in [CPP14Parser.Typedef]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1248
                self.match(CPP14Parser.Typedef)
                pass
            elif token in [CPP14Parser.Constexpr]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1249
                self.match(CPP14Parser.Constexpr)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclspecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclspecifierseq"):
                listener.enterDeclspecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclspecifierseq"):
                listener.exitDeclspecifierseq(self)

    def declspecifierseq(self):

        localctx = CPP14Parser.DeclspecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_declspecifierseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.declspecifier()
            self.state = 1255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 162, self._ctx)
            if la_ == 1:
                self.state = 1253
                self.attributespecifierseq(0)

            elif la_ == 2:
                self.state = 1254
                self.declspecifierseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, 0)

        def classkey(self):
            return self.getTypedRuleContext(CPP14Parser.ClasskeyContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext, 0)

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierlistContext, 0)

        def memberdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclarationContext, 0)

        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AccessspecifierContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def enumkey(self):
            return self.getTypedRuleContext(CPP14Parser.EnumkeyContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypespecifier"):
                listener.enterTypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypespecifier"):
                listener.exitTypespecifier(self)

    def typespecifier(self):

        localctx = CPP14Parser.TypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_typespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 175, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1257
                self.trailingtypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1258
                self.classkey()
                self.state = 1260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1259
                    self.attributespecifierseq(0)

                self.state = 1269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Identifier:
                    self.state = 1263
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 164, self._ctx)
                    if la_ == 1:
                        self.state = 1262
                        self.nestednamespecifier(0)

                    self.state = 1265
                    self.classname()
                    self.state = 1267
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Final:
                        self.state = 1266
                        self.match(CPP14Parser.Final)

                self.state = 1273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1271
                    self.match(CPP14Parser.Colon)
                    self.state = 1272
                    self.basespecifierlist(0)

                self.state = 1275
                self.match(CPP14Parser.LeftBrace)
                self.state = 1280
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignas, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char,
                             CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const,
                             CPP14Parser.Constexpr, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum,
                             CPP14Parser.Explicit, CPP14Parser.Extern, CPP14Parser.Float, CPP14Parser.Friend,
                             CPP14Parser.Inline, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Mutable,
                             CPP14Parser.Operator, CPP14Parser.Register, CPP14Parser.Short, CPP14Parser.Signed,
                             CPP14Parser.Static, CPP14Parser.Static_assert, CPP14Parser.Struct, CPP14Parser.Template,
                             CPP14Parser.Thread_local, CPP14Parser.Typedef, CPP14Parser.Typename, CPP14Parser.Union,
                             CPP14Parser.Unsigned, CPP14Parser.Using, CPP14Parser.Virtual, CPP14Parser.Void,
                             CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                             CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Tilde, CPP14Parser.AndAnd,
                             CPP14Parser.Colon, CPP14Parser.Semi, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                    self.state = 1276
                    self.memberdeclaration()
                    pass
                elif token in [CPP14Parser.Private, CPP14Parser.Protected, CPP14Parser.Public]:
                    self.state = 1277
                    self.accessspecifier()
                    self.state = 1278
                    self.match(CPP14Parser.Colon)
                    pass
                elif token in [CPP14Parser.RightBrace]:
                    pass
                else:
                    pass
                self.state = 1282
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1284
                self.enumkey()
                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1285
                    self.attributespecifierseq(0)

                self.state = 1292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Identifier:
                    self.state = 1289
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 170, self._ctx)
                    if la_ == 1:
                        self.state = 1288
                        self.nestednamespecifier(0)

                    self.state = 1291
                    self.match(CPP14Parser.Identifier)

                self.state = 1296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1294
                    self.match(CPP14Parser.Colon)
                    self.state = 1295
                    self.typespecifierseq()

                self.state = 1298
                self.match(CPP14Parser.LeftBrace)
                self.state = 1300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 1299
                    self.enumeratorlist(0)

                self.state = 1303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Comma:
                    self.state = 1302
                    self.match(CPP14Parser.Comma)

                self.state = 1305
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingtypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext, 0)

        def classkey(self):
            return self.getTypedRuleContext(CPP14Parser.ClasskeyContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypenamespecifierContext, 0)

        def cvqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrailingtypespecifier"):
                listener.enterTrailingtypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrailingtypespecifier"):
                listener.exitTrailingtypespecifier(self)

    def trailingtypespecifier(self):

        localctx = CPP14Parser.TrailingtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_trailingtypespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 182, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1309
                self.simpletypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1310
                self.classkey()
                self.state = 1312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1311
                    self.attributespecifierseq(0)

                self.state = 1315
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 177, self._ctx)
                if la_ == 1:
                    self.state = 1314
                    self.nestednamespecifier(0)

                self.state = 1317
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1319
                self.classkey()
                self.state = 1320
                self.match(CPP14Parser.Identifier)
                self.state = 1321
                self.match(CPP14Parser.Less)
                self.state = 1323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1322
                    self.templateargumentlist(0)

                self.state = 1325
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1327
                self.classkey()
                self.state = 1328
                self.nestednamespecifier(0)
                self.state = 1330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Template:
                    self.state = 1329
                    self.match(CPP14Parser.Template)

                self.state = 1332
                self.match(CPP14Parser.Identifier)
                self.state = 1333
                self.match(CPP14Parser.Less)
                self.state = 1335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1334
                    self.templateargumentlist(0)

                self.state = 1337
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1339
                self.match(CPP14Parser.Enum)
                self.state = 1341
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 181, self._ctx)
                if la_ == 1:
                    self.state = 1340
                    self.nestednamespecifier(0)

                self.state = 1343
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1344
                self.typenamespecifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1345
                self.cvqualifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypespecifierseq"):
                listener.enterTypespecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypespecifierseq"):
                listener.exitTypespecifierseq(self)

    def typespecifierseq(self):

        localctx = CPP14Parser.TypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_typespecifierseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1348
            self.typespecifier()
            self.state = 1351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 183, self._ctx)
            if la_ == 1:
                self.state = 1349
                self.attributespecifierseq(0)

            elif la_ == 2:
                self.state = 1350
                self.typespecifierseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingtypespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrailingtypespecifierseq"):
                listener.enterTrailingtypespecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrailingtypespecifierseq"):
                listener.exitTrailingtypespecifierseq(self)

    def trailingtypespecifierseq(self):

        localctx = CPP14Parser.TrailingtypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_trailingtypespecifierseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1353
            self.trailingtypespecifier()
            self.state = 1356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 184, self._ctx)
            if la_ == 1:
                self.state = 1354
                self.attributespecifierseq(0)

            elif la_ == 2:
                self.state = 1355
                self.trailingtypespecifierseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpletypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypenameContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def Char(self):
            return self.getToken(CPP14Parser.Char, 0)

        def Char16(self):
            return self.getToken(CPP14Parser.Char16, 0)

        def Char32(self):
            return self.getToken(CPP14Parser.Char32, 0)

        def Wchar(self):
            return self.getToken(CPP14Parser.Wchar, 0)

        def Bool(self):
            return self.getToken(CPP14Parser.Bool, 0)

        def Short(self):
            return self.getToken(CPP14Parser.Short, 0)

        def Int(self):
            return self.getToken(CPP14Parser.Int, 0)

        def Long(self):
            return self.getToken(CPP14Parser.Long, 0)

        def Signed(self):
            return self.getToken(CPP14Parser.Signed, 0)

        def Unsigned(self):
            return self.getToken(CPP14Parser.Unsigned, 0)

        def Float(self):
            return self.getToken(CPP14Parser.Float, 0)

        def Double(self):
            return self.getToken(CPP14Parser.Double, 0)

        def Void(self):
            return self.getToken(CPP14Parser.Void, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_simpletypespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpletypespecifier"):
                listener.enterSimpletypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpletypespecifier"):
                listener.exitSimpletypespecifier(self)

    def simpletypespecifier(self):

        localctx = CPP14Parser.SimpletypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_simpletypespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1386
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 187, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1359
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 185, self._ctx)
                if la_ == 1:
                    self.state = 1358
                    self.nestednamespecifier(0)

                self.state = 1361
                self.thetypename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1362
                self.nestednamespecifier(0)
                self.state = 1363
                self.match(CPP14Parser.Template)
                self.state = 1364
                self.match(CPP14Parser.Identifier)
                self.state = 1365
                self.match(CPP14Parser.Less)
                self.state = 1367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1366
                    self.templateargumentlist(0)

                self.state = 1369
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1371
                self.match(CPP14Parser.Char)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1372
                self.match(CPP14Parser.Char16)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1373
                self.match(CPP14Parser.Char32)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1374
                self.match(CPP14Parser.Wchar)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1375
                self.match(CPP14Parser.Bool)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1376
                self.match(CPP14Parser.Short)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1377
                self.match(CPP14Parser.Int)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1378
                self.match(CPP14Parser.Long)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1379
                self.match(CPP14Parser.Signed)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1380
                self.match(CPP14Parser.Unsigned)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1381
                self.match(CPP14Parser.Float)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1382
                self.match(CPP14Parser.Double)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1383
                self.match(CPP14Parser.Void)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1384
                self.match(CPP14Parser.Auto)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1385
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThetypenameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_thetypename

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterThetypename"):
                listener.enterThetypename(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitThetypename"):
                listener.exitThetypename(self)

    def thetypename(self):

        localctx = CPP14Parser.ThetypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_thetypename)
        self._la = 0  # Token type
        try:
            self.state = 1397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 190, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1388
                self.classname()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1389
                self.match(CPP14Parser.Identifier)
                self.state = 1395
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 189, self._ctx)
                if la_ == 1:
                    self.state = 1390
                    self.match(CPP14Parser.Less)
                    self.state = 1392
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                        1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                        1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                        1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                        CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                        1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                        1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                        1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                        1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                        1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                        1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (
                        1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                        1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                        1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                        1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                        (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                        1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                        self.state = 1391
                        self.templateargumentlist(0)

                    self.state = 1394
                    self.match(CPP14Parser.Greater)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecltypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_decltypespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDecltypespecifier"):
                listener.enterDecltypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDecltypespecifier"):
                listener.exitDecltypespecifier(self)

    def decltypespecifier(self):

        localctx = CPP14Parser.DecltypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_decltypespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1399
            self.match(CPP14Parser.Decltype)
            self.state = 1400
            self.match(CPP14Parser.LeftParen)
            self.state = 1403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 191, self._ctx)
            if la_ == 1:
                self.state = 1401
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 1402
                self.match(CPP14Parser.Auto)
                pass

            self.state = 1405
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumkeyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumkey

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumkey"):
                listener.enterEnumkey(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumkey"):
                listener.exitEnumkey(self)

    def enumkey(self):

        localctx = CPP14Parser.EnumkeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_enumkey)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1407
            self.match(CPP14Parser.Enum)
            self.state = 1409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Class or _la == CPP14Parser.Struct:
                self.state = 1408
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Class or _la == CPP14Parser.Struct):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumeratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumeratorlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumeratorlist"):
                listener.enterEnumeratorlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumeratorlist"):
                listener.exitEnumeratorlist(self)

    def enumeratorlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EnumeratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 116
        self.enterRecursionRule(localctx, 116, self.RULE_enumeratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1412
            self.match(CPP14Parser.Identifier)
            self.state = 1415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 193, self._ctx)
            if la_ == 1:
                self.state = 1413
                self.match(CPP14Parser.Assign)
                self.state = 1414
                self.constantexpression()

            self._ctx.stop = self._input.LT(-1)
            self.state = 1426
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 195, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.EnumeratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_enumeratorlist)
                    self.state = 1417
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1418
                    self.match(CPP14Parser.Comma)
                    self.state = 1419
                    self.match(CPP14Parser.Identifier)
                    self.state = 1422
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 194, self._ctx)
                    if la_ == 1:
                        self.state = 1420
                        self.match(CPP14Parser.Assign)
                        self.state = 1421
                        self.constantexpression()

                self.state = 1428
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 195, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AttributespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributespecifierseq"):
                listener.enterAttributespecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributespecifierseq"):
                listener.exitAttributespecifierseq(self)

    def attributespecifierseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AttributespecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 118
        self.enterRecursionRule(localctx, 118, self.RULE_attributespecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self.attributespecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1436
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 196, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AttributespecifierseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_attributespecifierseq)
                    self.state = 1432
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1433
                    self.attributespecifier()
                self.state = 1438
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 196, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AttributespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributelist(self):
            return self.getTypedRuleContext(CPP14Parser.AttributelistContext, 0)

        def Alignas(self):
            return self.getToken(CPP14Parser.Alignas, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributespecifier"):
                listener.enterAttributespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributespecifier"):
                listener.exitAttributespecifier(self)

    def attributespecifier(self):

        localctx = CPP14Parser.AttributespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_attributespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 200, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1439
                self.match(CPP14Parser.LeftBracket)
                self.state = 1440
                self.match(CPP14Parser.LeftBracket)
                self.state = 1441
                self.attributelist(0)
                self.state = 1442
                self.match(CPP14Parser.RightBracket)
                self.state = 1443
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1445
                self.match(CPP14Parser.Alignas)
                self.state = 1446
                self.match(CPP14Parser.LeftParen)
                self.state = 1447
                self.typespecifierseq()
                self.state = 1449
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 197, self._ctx)
                if la_ == 1:
                    self.state = 1448
                    self.abstractdeclarator()

                self.state = 1452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1451
                    self.match(CPP14Parser.Ellipsis)

                self.state = 1454
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1456
                self.match(CPP14Parser.Alignas)
                self.state = 1457
                self.match(CPP14Parser.LeftParen)
                self.state = 1458
                self.constantexpression()
                self.state = 1460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1459
                    self.match(CPP14Parser.Ellipsis)

                self.state = 1462
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributelistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeContext, 0)

        def attributelist(self):
            return self.getTypedRuleContext(CPP14Parser.AttributelistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributelist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributelist"):
                listener.enterAttributelist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributelist"):
                listener.exitAttributelist(self)

    def attributelist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AttributelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 122
        self.enterRecursionRule(localctx, 122, self.RULE_attributelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 202, self._ctx)
            if la_ == 1:
                self.state = 1467
                self.attribute()
                self.state = 1469
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 201, self._ctx)
                if la_ == 1:
                    self.state = 1468
                    self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1483
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 205, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AttributelistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                    self.state = 1473
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1474
                    self.match(CPP14Parser.Comma)
                    self.state = 1479
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 204, self._ctx)
                    if la_ == 1:
                        self.state = 1475
                        self.attribute()
                        self.state = 1477
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 203, self._ctx)
                        if la_ == 1:
                            self.state = 1476
                            self.match(CPP14Parser.Ellipsis)

                self.state = 1485
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 205, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AttributeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attribute

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttribute"):
                listener.enterAttribute(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttribute"):
                listener.exitAttribute(self)

    def attribute(self):

        localctx = CPP14Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1486
            self.match(CPP14Parser.Identifier)
            self.state = 1489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 206, self._ctx)
            if la_ == 1:
                self.state = 1487
                self.match(CPP14Parser.Doublecolon)
                self.state = 1488
                self.match(CPP14Parser.Identifier)

            self.state = 1495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 207, self._ctx)
            if la_ == 1:
                self.state = 1491
                self.match(CPP14Parser.LeftParen)
                self.state = 1492
                self.balancedtokenseq(0)
                self.state = 1493
                self.match(CPP14Parser.RightParen)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BalancedtokenseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtoken(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenContext, 0)

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtokenseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBalancedtokenseq"):
                listener.enterBalancedtokenseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBalancedtokenseq"):
                listener.exitBalancedtokenseq(self)

    def balancedtokenseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.BalancedtokenseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_balancedtokenseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1499
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 208, self._ctx)
            if la_ == 1:
                self.state = 1498
                self.balancedtoken()

            self._ctx.stop = self._input.LT(-1)
            self.state = 1505
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 209, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.BalancedtokenseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_balancedtokenseq)
                    self.state = 1501
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1502
                    self.balancedtoken()
                self.state = 1507
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 209, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BalancedtokenContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtoken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBalancedtoken"):
                listener.enterBalancedtoken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBalancedtoken"):
                listener.exitBalancedtoken(self)

    def balancedtoken(self):

        localctx = CPP14Parser.BalancedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_balancedtoken)
        try:
            self.state = 1520
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1508
                self.match(CPP14Parser.LeftParen)
                self.state = 1509
                self.balancedtokenseq(0)
                self.state = 1510
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1512
                self.match(CPP14Parser.LeftBracket)
                self.state = 1513
                self.balancedtokenseq(0)
                self.state = 1514
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1516
                self.match(CPP14Parser.LeftBrace)
                self.state = 1517
                self.balancedtokenseq(0)
                self.state = 1518
                self.match(CPP14Parser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitdeclaratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def initializer(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerContext, 0)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initdeclaratorlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitdeclaratorlist"):
                listener.enterInitdeclaratorlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitdeclaratorlist"):
                listener.exitInitdeclaratorlist(self)

    def initdeclaratorlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InitdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 130
        self.enterRecursionRule(localctx, 130, self.RULE_initdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1523
            self.declarator()
            self.state = 1525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 211, self._ctx)
            if la_ == 1:
                self.state = 1524
                self.initializer()

            self._ctx.stop = self._input.LT(-1)
            self.state = 1535
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 213, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InitdeclaratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initdeclaratorlist)
                    self.state = 1527
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1528
                    self.match(CPP14Parser.Comma)
                    self.state = 1529
                    self.declarator()
                    self.state = 1531
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 212, self._ctx)
                    if la_ == 1:
                        self.state = 1530
                        self.initializer()

                self.state = 1537
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 213, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext, 0)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclarator"):
                listener.enterDeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclarator"):
                listener.exitDeclarator(self)

    def declarator(self):

        localctx = CPP14Parser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_declarator)
        try:
            self.state = 1546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 215, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1538
                self.ptrdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1539
                self.noptrdeclarator(0)
                self.state = 1540
                self.parametersandqualifiers()
                self.state = 1541
                self.match(CPP14Parser.Arrow)
                self.state = 1542
                self.trailingtypespecifierseq()
                self.state = 1544
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 214, self._ctx)
                if la_ == 1:
                    self.state = 1543
                    self.abstractdeclarator()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtrdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext, 0)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPtrdeclarator"):
                listener.enterPtrdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPtrdeclarator"):
                listener.exitPtrdeclarator(self)

    def ptrdeclarator(self):

        localctx = CPP14Parser.PtrdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_ptrdeclarator)
        try:
            self.state = 1552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 216, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1548
                self.noptrdeclarator(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1549
                self.ptroperator()
                self.state = 1550
                self.ptrdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext, 0)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrdeclarator"):
                listener.enterNoptrdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrdeclarator"):
                listener.exitNoptrdeclarator(self)

    def noptrdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 136
        self.enterRecursionRule(localctx, 136, self.RULE_noptrdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Operator, CPP14Parser.Tilde, CPP14Parser.Ellipsis,
                         CPP14Parser.Identifier]:
                self.state = 1556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1555
                    self.match(CPP14Parser.Ellipsis)

                self.state = 1558
                self.idexpression()
                self.state = 1560
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 218, self._ctx)
                if la_ == 1:
                    self.state = 1559
                    self.attributespecifierseq(0)

                pass
            elif token in [CPP14Parser.LeftParen]:
                self.state = 1562
                self.match(CPP14Parser.LeftParen)
                self.state = 1563
                self.ptrdeclarator()
                self.state = 1564
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1581
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 223, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1579
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 222, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1568
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1569
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1570
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1571
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1573
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                            1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                            1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                            1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                                (1 << (CPP14Parser.Characterliteral - 132)) | (
                                                1 << (CPP14Parser.Floatingliteral - 132)) | (
                                            1 << (CPP14Parser.Stringliteral - 132)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 1572
                            self.constantexpression()

                        self.state = 1575
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1577
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 221, self._ctx)
                        if la_ == 1:
                            self.state = 1576
                            self.attributespecifierseq(0)

                        pass

                self.state = 1583
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 223, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParametersandqualifiersContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationclauseContext, 0)

        def cvqualifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.CvqualifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.CvqualifierContext, i)

        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionspecificationContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parametersandqualifiers

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParametersandqualifiers"):
                listener.enterParametersandqualifiers(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParametersandqualifiers"):
                listener.exitParametersandqualifiers(self)

    def parametersandqualifiers(self):

        localctx = CPP14Parser.ParametersandqualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_parametersandqualifiers)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1584
            self.match(CPP14Parser.LeftParen)
            self.state = 1585
            self.parameterdeclarationclause()
            self.state = 1586
            self.match(CPP14Parser.RightParen)
            self.state = 1590
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 224, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1587
                    self.cvqualifier()
                self.state = 1592
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 224, self._ctx)

            self.state = 1594
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 225, self._ctx)
            if la_ == 1:
                self.state = 1593
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 1597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 226, self._ctx)
            if la_ == 1:
                self.state = 1596
                self.exceptionspecification()

            self.state = 1600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 227, self._ctx)
            if la_ == 1:
                self.state = 1599
                self.attributespecifierseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtroperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def cvqualifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.CvqualifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.CvqualifierContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptroperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPtroperator"):
                listener.enterPtroperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPtroperator"):
                listener.exitPtroperator(self)

    def ptroperator(self):

        localctx = CPP14Parser.PtroperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_ptroperator)
        self._la = 0  # Token type
        try:
            self.state = 1619
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Identifier:
                    self.state = 1602
                    self.nestednamespecifier(0)

                self.state = 1605
                self.match(CPP14Parser.Star)
                self.state = 1607
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 229, self._ctx)
                if la_ == 1:
                    self.state = 1606
                    self.attributespecifierseq(0)

                self.state = 1612
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 230, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1609
                        self.cvqualifier()
                    self.state = 1614
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 230, self._ctx)

                pass
            elif token in [CPP14Parser.And, CPP14Parser.AndAnd]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1615
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1617
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 231, self._ctx)
                if la_ == 1:
                    self.state = 1616
                    self.attributespecifierseq(0)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CvqualifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(CPP14Parser.Const, 0)

        def Volatile(self):
            return self.getToken(CPP14Parser.Volatile, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_cvqualifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCvqualifier"):
                listener.enterCvqualifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCvqualifier"):
                listener.exitCvqualifier(self)

    def cvqualifier(self):

        localctx = CPP14Parser.CvqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_cvqualifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1621
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.Const or _la == CPP14Parser.Volatile):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext, 0)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractpackdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbstractdeclarator"):
                listener.enterAbstractdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbstractdeclarator"):
                listener.exitAbstractdeclarator(self)

    def abstractdeclarator(self):

        localctx = CPP14Parser.AbstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_abstractdeclarator)
        try:
            self.state = 1634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 235, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1623
                self.ptrabstractdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1625
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 233, self._ctx)
                if la_ == 1:
                    self.state = 1624
                    self.noptrabstractdeclarator(0)

                self.state = 1627
                self.parametersandqualifiers()
                self.state = 1628
                self.match(CPP14Parser.Arrow)
                self.state = 1629
                self.trailingtypespecifierseq()
                self.state = 1631
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 234, self._ctx)
                if la_ == 1:
                    self.state = 1630
                    self.abstractdeclarator()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1633
                self.abstractpackdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrabstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPtrabstractdeclarator"):
                listener.enterPtrabstractdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPtrabstractdeclarator"):
                listener.exitPtrabstractdeclarator(self)

    def ptrabstractdeclarator(self):

        localctx = CPP14Parser.PtrabstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_ptrabstractdeclarator)
        try:
            self.state = 1641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1636
                self.noptrabstractdeclarator(0)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                           CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1637
                self.ptroperator()
                self.state = 1639
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 236, self._ctx)
                if la_ == 1:
                    self.state = 1638
                    self.ptrabstractdeclarator()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrabstractdeclarator"):
                listener.enterNoptrabstractdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrabstractdeclarator"):
                listener.exitNoptrabstractdeclarator(self)

    def noptrabstractdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 148
        self.enterRecursionRule(localctx, 148, self.RULE_noptrabstractdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1657
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 240, self._ctx)
            if la_ == 1:
                self.state = 1644
                self.parametersandqualifiers()
                pass

            elif la_ == 2:
                self.state = 1645
                self.match(CPP14Parser.LeftBracket)
                self.state = 1647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1646
                    self.constantexpression()

                self.state = 1649
                self.match(CPP14Parser.RightBracket)
                self.state = 1651
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 239, self._ctx)
                if la_ == 1:
                    self.state = 1650
                    self.attributespecifierseq(0)

                pass

            elif la_ == 3:
                self.state = 1653
                self.match(CPP14Parser.LeftParen)
                self.state = 1654
                self.ptrabstractdeclarator()
                self.state = 1655
                self.match(CPP14Parser.RightParen)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 1672
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 244, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1670
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 243, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1659
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1660
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1661
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1662
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1664
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                            1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                            1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                            1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                                (1 << (CPP14Parser.Characterliteral - 132)) | (
                                                1 << (CPP14Parser.Floatingliteral - 132)) | (
                                            1 << (CPP14Parser.Stringliteral - 132)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 1663
                            self.constantexpression()

                        self.state = 1666
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1668
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 242, self._ctx)
                        if la_ == 1:
                            self.state = 1667
                            self.attributespecifierseq(0)

                        pass

                self.state = 1674
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 244, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AbstractpackdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractpackdeclaratorContext, 0)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractpackdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractpackdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbstractpackdeclarator"):
                listener.enterAbstractpackdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbstractpackdeclarator"):
                listener.exitAbstractpackdeclarator(self)

    def abstractpackdeclarator(self):

        localctx = CPP14Parser.AbstractpackdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_abstractpackdeclarator)
        try:
            self.state = 1679
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Ellipsis]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1675
                self.noptrabstractpackdeclarator(0)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                           CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1676
                self.ptroperator()
                self.state = 1677
                self.abstractpackdeclarator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrabstractpackdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractpackdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractpackdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrabstractpackdeclarator"):
                listener.enterNoptrabstractpackdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrabstractpackdeclarator"):
                listener.exitNoptrabstractpackdeclarator(self)

    def noptrabstractpackdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 152
        self.enterRecursionRule(localctx, 152, self.RULE_noptrabstractpackdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1682
            self.match(CPP14Parser.Ellipsis)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1697
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 249, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1695
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 248, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1684
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1685
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1686
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1687
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1689
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                            1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                            1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                            1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                                (1 << (CPP14Parser.Characterliteral - 132)) | (
                                                1 << (CPP14Parser.Floatingliteral - 132)) | (
                                            1 << (CPP14Parser.Stringliteral - 132)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 1688
                            self.constantexpression()

                        self.state = 1691
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1693
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 247, self._ctx)
                        if la_ == 1:
                            self.state = 1692
                            self.attributespecifierseq(0)

                        pass

                self.state = 1699
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 249, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParameterdeclarationclauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclarationclause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterdeclarationclause"):
                listener.enterParameterdeclarationclause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterdeclarationclause"):
                listener.exitParameterdeclarationclause(self)

    def parameterdeclarationclause(self):

        localctx = CPP14Parser.ParameterdeclarationclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_parameterdeclarationclause)
        self._la = 0  # Token type
        try:
            self.state = 1710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 252, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                    1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                    1 << CPP14Parser.Static) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Thread_local))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                    1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                    1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (
                    1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (
                    1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1700
                    self.parameterdeclarationlist(0)

                self.state = 1704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1703
                    self.match(CPP14Parser.Ellipsis)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1706
                self.parameterdeclarationlist(0)
                self.state = 1707
                self.match(CPP14Parser.Comma)
                self.state = 1708
                self.match(CPP14Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterdeclarationlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, 0)

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclarationlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterdeclarationlist"):
                listener.enterParameterdeclarationlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterdeclarationlist"):
                listener.exitParameterdeclarationlist(self)

    def parameterdeclarationlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ParameterdeclarationlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 156
        self.enterRecursionRule(localctx, 156, self.RULE_parameterdeclarationlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1713
            self.parameterdeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1720
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 253, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ParameterdeclarationlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_parameterdeclarationlist)
                    self.state = 1715
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1716
                    self.match(CPP14Parser.Comma)
                    self.state = 1717
                    self.parameterdeclaration()
                self.state = 1722
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 253, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParameterdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterdeclaration"):
                listener.enterParameterdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterdeclaration"):
                listener.exitParameterdeclaration(self)

    def parameterdeclaration(self):

        localctx = CPP14Parser.ParameterdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_parameterdeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 1723
                self.attributespecifierseq(0)

            self.state = 1726
            self.declspecifierseq()
            self.state = 1729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 255, self._ctx)
            if la_ == 1:
                self.state = 1727
                self.declarator()
                pass

            elif la_ == 2:
                self.state = 1728
                self.abstractdeclarator()
                pass

            self.state = 1733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 256, self._ctx)
            if la_ == 1:
                self.state = 1731
                self.match(CPP14Parser.Assign)
                self.state = 1732
                self.initializerclause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctiondefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def functionbody(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionbodyContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functiondefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctiondefinition"):
                listener.enterFunctiondefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctiondefinition"):
                listener.exitFunctiondefinition(self)

    def functiondefinition(self):

        localctx = CPP14Parser.FunctiondefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_functiondefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 1735
                self.attributespecifierseq(0)

            self.state = 1739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 258, self._ctx)
            if la_ == 1:
                self.state = 1738
                self.declspecifierseq()

            self.state = 1741
            self.declarator()
            self.state = 1743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Final or _la == CPP14Parser.Override:
                self.state = 1742
                self.virtspecifierseq(0)

            self.state = 1745
            self.functionbody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionbodyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def handler(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.HandlerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.HandlerContext, i)

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functionbody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionbody"):
                listener.enterFunctionbody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionbody"):
                listener.exitFunctionbody(self)

    def functionbody(self):

        localctx = CPP14Parser.FunctionbodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_functionbody)
        self._la = 0  # Token type
        try:
            self.state = 1780
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBrace, CPP14Parser.Colon]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1747
                    self.match(CPP14Parser.Colon)
                    self.state = 1748
                    self.meminitializerlist()

                self.state = 1751
                self.match(CPP14Parser.LeftBrace)
                self.state = 1755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                    1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (
                    1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (
                    1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (
                    1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (
                    1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (
                    1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (1 << CPP14Parser.Short) | (
                    1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static) | (
                    1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Thread_local))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Try - 64)) | (
                    1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                    1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                    1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                    1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                    1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Semi - 64)) | (
                    1 << (CPP14Parser.Ellipsis - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1752
                    self.statement()
                    self.state = 1757
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1758
                self.match(CPP14Parser.RightBrace)
                pass
            elif token in [CPP14Parser.Try]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1759
                self.match(CPP14Parser.Try)
                self.state = 1762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1760
                    self.match(CPP14Parser.Colon)
                    self.state = 1761
                    self.meminitializerlist()

                self.state = 1764
                self.match(CPP14Parser.LeftBrace)
                self.state = 1768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                    1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (
                    1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (
                    1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (
                    1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (
                    1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (
                    1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (1 << CPP14Parser.Short) | (
                    1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static) | (
                    1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Thread_local))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Try - 64)) | (
                    1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                    1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                    1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                    1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                    1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Semi - 64)) | (
                    1 << (CPP14Parser.Ellipsis - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1765
                    self.statement()
                    self.state = 1770
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1771
                self.match(CPP14Parser.RightBrace)
                self.state = 1773
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1772
                        self.handler()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1775
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 264, self._ctx)

                pass
            elif token in [CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1777
                self.match(CPP14Parser.Assign)
                self.state = 1778
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Default or _la == CPP14Parser.Delete):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1779
                self.match(CPP14Parser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def braceorequalinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.BraceorequalinitializerContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitializer"):
                listener.enterInitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitializer"):
                listener.exitInitializer(self)

    def initializer(self):

        localctx = CPP14Parser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_initializer)
        try:
            self.state = 1787
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBrace, CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1782
                self.braceorequalinitializer()
                pass
            elif token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1783
                self.match(CPP14Parser.LeftParen)
                self.state = 1784
                self.initializerlist(0)
                self.state = 1785
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BraceorequalinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_braceorequalinitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBraceorequalinitializer"):
                listener.enterBraceorequalinitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBraceorequalinitializer"):
                listener.exitBraceorequalinitializer(self)

    def braceorequalinitializer(self):

        localctx = CPP14Parser.BraceorequalinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_braceorequalinitializer)
        try:
            self.state = 1792
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1789
                self.match(CPP14Parser.Assign)
                self.state = 1790
                self.initializerclause()
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1791
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerclauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerclause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitializerclause"):
                listener.enterInitializerclause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitializerclause"):
                listener.exitInitializerclause(self)

    def initializerclause(self):

        localctx = CPP14Parser.InitializerclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_initializerclause)
        try:
            self.state = 1796
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16,
                         CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype, CPP14Parser.Delete,
                         CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.FalseToken, CPP14Parser.Float,
                         CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Nullptr,
                         CPP14Parser.Operator, CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed,
                         CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw,
                         CPP14Parser.TrueToken, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.Unsigned,
                         CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                         CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                         CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                         CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Integerliteral,
                         CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral,
                         CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral,
                         CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1794
                self.assignmentexpression()
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1795
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitializerlist"):
                listener.enterInitializerlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitializerlist"):
                listener.exitInitializerlist(self)

    def initializerlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InitializerlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 170
        self.enterRecursionRule(localctx, 170, self.RULE_initializerlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1799
            self.initializerclause()
            self.state = 1801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 269, self._ctx)
            if la_ == 1:
                self.state = 1800
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1811
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 271, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InitializerlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initializerlist)
                    self.state = 1803
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1804
                    self.match(CPP14Parser.Comma)
                    self.state = 1805
                    self.initializerclause()
                    self.state = 1807
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 270, self._ctx)
                    if la_ == 1:
                        self.state = 1806
                        self.match(CPP14Parser.Ellipsis)

                self.state = 1813
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 271, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BracedinitlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_bracedinitlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBracedinitlist"):
                listener.enterBracedinitlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBracedinitlist"):
                listener.exitBracedinitlist(self)

    def bracedinitlist(self):

        localctx = CPP14Parser.BracedinitlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_bracedinitlist)
        self._la = 0  # Token type
        try:
            self.state = 1823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 273, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1814
                self.match(CPP14Parser.LeftBrace)
                self.state = 1815
                self.initializerlist(0)
                self.state = 1817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Comma:
                    self.state = 1816
                    self.match(CPP14Parser.Comma)

                self.state = 1819
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1821
                self.match(CPP14Parser.LeftBrace)
                self.state = 1822
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassnameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classname

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassname"):
                listener.enterClassname(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassname"):
                listener.exitClassname(self)

    def classname(self):

        localctx = CPP14Parser.ClassnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_classname)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1825
            self.match(CPP14Parser.Identifier)
            self.state = 1831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 275, self._ctx)
            if la_ == 1:
                self.state = 1826
                self.match(CPP14Parser.Less)
                self.state = 1828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1827
                    self.templateargumentlist(0)

                self.state = 1830
                self.match(CPP14Parser.Greater)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClasskeyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def Union(self):
            return self.getToken(CPP14Parser.Union, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classkey

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClasskey"):
                listener.enterClasskey(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClasskey"):
                listener.exitClasskey(self)

    def classkey(self):

        localctx = CPP14Parser.ClasskeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_classkey)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1833
            _la = self._input.LA(1)
            if not (((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & (
                    (1 << (CPP14Parser.Class - 14)) | (1 << (CPP14Parser.Struct - 14)) | (
                1 << (CPP14Parser.Union - 14)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorlistContext, 0)

        def functiondefinition(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiondefinitionContext, 0)

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberdeclaration"):
                listener.enterMemberdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberdeclaration"):
                listener.exitMemberdeclaration(self)

    def memberdeclaration(self):

        localctx = CPP14Parser.MemberdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_memberdeclaration)
        self._la = 0  # Token type
        try:
            self.state = 1884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 283, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1836
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 276, self._ctx)
                if la_ == 1:
                    self.state = 1835
                    self.attributespecifierseq(0)

                self.state = 1839
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 277, self._ctx)
                if la_ == 1:
                    self.state = 1838
                    self.declspecifierseq()

                self.state = 1842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Operator))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                                (1 << (CPP14Parser.LeftParen - 78)) | (
                                                1 << (CPP14Parser.LeftBracket - 78)) | (
                                            1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                                    1 << (CPP14Parser.Tilde - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Colon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1841
                    self.memberdeclaratorlist(0)

                self.state = 1844
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1845
                self.functiondefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1846
                self.match(CPP14Parser.Using)
                self.state = 1852
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Decltype, CPP14Parser.Typename, CPP14Parser.Identifier]:
                    self.state = 1848
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Typename:
                        self.state = 1847
                        self.match(CPP14Parser.Typename)

                    self.state = 1850
                    self.nestednamespecifier(0)
                    pass
                elif token in [CPP14Parser.Doublecolon]:
                    self.state = 1851
                    self.match(CPP14Parser.Doublecolon)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1854
                self.unqualifiedid()
                self.state = 1855
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1857
                self.match(CPP14Parser.Static_assert)
                self.state = 1858
                self.match(CPP14Parser.LeftParen)
                self.state = 1859
                self.constantexpression()
                self.state = 1860
                self.match(CPP14Parser.Comma)
                self.state = 1861
                self.match(CPP14Parser.Stringliteral)
                self.state = 1862
                self.match(CPP14Parser.RightParen)
                self.state = 1863
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1865
                self.match(CPP14Parser.Template)
                self.state = 1866
                self.match(CPP14Parser.Less)
                self.state = 1867
                self.templateparameterlist(0)
                self.state = 1868
                self.match(CPP14Parser.Greater)
                self.state = 1869
                self.declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1871
                self.match(CPP14Parser.Using)
                self.state = 1872
                self.match(CPP14Parser.Identifier)
                self.state = 1874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1873
                    self.attributespecifierseq(0)

                self.state = 1876
                self.match(CPP14Parser.Assign)
                self.state = 1877
                self.typespecifierseq()
                self.state = 1879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1878
                    self.abstractdeclarator()

                self.state = 1881
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1883
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberdeclaratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorContext, 0)

        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaratorlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberdeclaratorlist"):
                listener.enterMemberdeclaratorlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberdeclaratorlist"):
                listener.exitMemberdeclaratorlist(self)

    def memberdeclaratorlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.MemberdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 180
        self.enterRecursionRule(localctx, 180, self.RULE_memberdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1887
            self.memberdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1894
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 284, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.MemberdeclaratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_memberdeclaratorlist)
                    self.state = 1889
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1890
                    self.match(CPP14Parser.Comma)
                    self.state = 1891
                    self.memberdeclarator()
                self.state = 1896
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 284, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class MemberdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext, 0)

        def purespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.PurespecifierContext, 0)

        def braceorequalinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.BraceorequalinitializerContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberdeclarator"):
                listener.enterMemberdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberdeclarator"):
                listener.exitMemberdeclarator(self)

    def memberdeclarator(self):

        localctx = CPP14Parser.MemberdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_memberdeclarator)
        self._la = 0  # Token type
        try:
            self.state = 1917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 291, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1897
                self.declarator()
                self.state = 1907
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 288, self._ctx)
                if la_ == 1:
                    self.state = 1899
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 285, self._ctx)
                    if la_ == 1:
                        self.state = 1898
                        self.virtspecifierseq(0)

                    self.state = 1902
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 286, self._ctx)
                    if la_ == 1:
                        self.state = 1901
                        self.purespecifier()

                    pass

                elif la_ == 2:
                    self.state = 1905
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 287, self._ctx)
                    if la_ == 1:
                        self.state = 1904
                        self.braceorequalinitializer()

                    pass

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 1909
                    self.match(CPP14Parser.Identifier)

                self.state = 1913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1912
                    self.attributespecifierseq(0)

                self.state = 1915
                self.match(CPP14Parser.Colon)
                self.state = 1916
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VirtspecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Override(self):
            return self.getToken(CPP14Parser.Override, 0)

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_virtspecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVirtspecifierseq"):
                listener.enterVirtspecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVirtspecifierseq"):
                listener.exitVirtspecifierseq(self)

    def virtspecifierseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.VirtspecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 184
        self.enterRecursionRule(localctx, 184, self.RULE_virtspecifierseq, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1920
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.Final or _la == CPP14Parser.Override):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1926
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 292, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.VirtspecifierseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_virtspecifierseq)
                    self.state = 1922
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1923
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Final or _la == CPP14Parser.Override):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                self.state = 1928
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 292, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PurespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None  # Token

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Octalliteral(self):
            return self.getToken(CPP14Parser.Octalliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_purespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPurespecifier"):
                listener.enterPurespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPurespecifier"):
                listener.exitPurespecifier(self)

    def purespecifier(self):

        localctx = CPP14Parser.PurespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_purespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1929
            self.match(CPP14Parser.Assign)
            self.state = 1930
            localctx.val = self.match(CPP14Parser.Octalliteral)
            if (None if localctx.val is None else localctx.val.text).compareTo("0") != 0:
                raise InputMismatchException(self)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BasespecifierlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierContext, 0)

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifierlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBasespecifierlist"):
                listener.enterBasespecifierlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBasespecifierlist"):
                listener.exitBasespecifierlist(self)

    def basespecifierlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.BasespecifierlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 188
        self.enterRecursionRule(localctx, 188, self.RULE_basespecifierlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1934
            self.basespecifier()
            self.state = 1936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 293, self._ctx)
            if la_ == 1:
                self.state = 1935
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1946
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 295, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.BasespecifierlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_basespecifierlist)
                    self.state = 1938
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1939
                    self.match(CPP14Parser.Comma)
                    self.state = 1940
                    self.basespecifier()
                    self.state = 1942
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 294, self._ctx)
                    if la_ == 1:
                        self.state = 1941
                        self.match(CPP14Parser.Ellipsis)

                self.state = 1948
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 295, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BasespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AccessspecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBasespecifier"):
                listener.enterBasespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBasespecifier"):
                listener.exitBasespecifier(self)

    def basespecifier(self):

        localctx = CPP14Parser.BasespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_basespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 301, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1949
                    self.attributespecifierseq(0)

                self.state = 1952
                self.classordecltype()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1953
                    self.attributespecifierseq(0)

                self.state = 1956
                self.match(CPP14Parser.Virtual)
                self.state = 1958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public))) != 0):
                    self.state = 1957
                    self.accessspecifier()

                self.state = 1960
                self.classordecltype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1961
                    self.attributespecifierseq(0)

                self.state = 1964
                self.accessspecifier()
                self.state = 1966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Virtual:
                    self.state = 1965
                    self.match(CPP14Parser.Virtual)

                self.state = 1968
                self.classordecltype()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassordecltypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classordecltype

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassordecltype"):
                listener.enterClassordecltype(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassordecltype"):
                listener.exitClassordecltype(self)

    def classordecltype(self):

        localctx = CPP14Parser.ClassordecltypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_classordecltype)
        try:
            self.state = 1977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 303, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1973
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 302, self._ctx)
                if la_ == 1:
                    self.state = 1972
                    self.nestednamespecifier(0)

                self.state = 1975
                self.classname()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1976
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AccessspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Private(self):
            return self.getToken(CPP14Parser.Private, 0)

        def Protected(self):
            return self.getToken(CPP14Parser.Protected, 0)

        def Public(self):
            return self.getToken(CPP14Parser.Public, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_accessspecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAccessspecifier"):
                listener.enterAccessspecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAccessspecifier"):
                listener.exitAccessspecifier(self)

    def accessspecifier(self):

        localctx = CPP14Parser.AccessspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_accessspecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1979
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeminitializerlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializerlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeminitializerlist"):
                listener.enterMeminitializerlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeminitializerlist"):
                listener.exitMeminitializerlist(self)

    def meminitializerlist(self):

        localctx = CPP14Parser.MeminitializerlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_meminitializerlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 304, self._ctx)
            if la_ == 1:
                self.state = 1981
                self.classordecltype()
                pass

            elif la_ == 2:
                self.state = 1982
                self.match(CPP14Parser.Identifier)
                pass

            self.state = 1991
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.state = 1985
                self.match(CPP14Parser.LeftParen)
                self.state = 1987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                    1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                    1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1986
                    self.initializerlist(0)

                self.state = 1989
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.state = 1990
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Ellipsis:
                self.state = 1993
                self.match(CPP14Parser.Ellipsis)

            self.state = 1998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Comma:
                self.state = 1996
                self.match(CPP14Parser.Comma)
                self.state = 1997
                self.meminitializerlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateparameterlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateparameter(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterContext, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameterlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateparameterlist"):
                listener.enterTemplateparameterlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateparameterlist"):
                listener.exitTemplateparameterlist(self)

    def templateparameterlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TemplateparameterlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 198
        self.enterRecursionRule(localctx, 198, self.RULE_templateparameterlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2001
            self.templateparameter()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2008
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 309, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TemplateparameterlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateparameterlist)
                    self.state = 2003
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2004
                    self.match(CPP14Parser.Comma)
                    self.state = 2005
                    self.templateparameter()
                self.state = 2010
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 309, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TemplateparameterContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateparameter"):
                listener.enterTemplateparameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateparameter"):
                listener.exitTemplateparameter(self)

    def templateparameter(self):

        localctx = CPP14Parser.TemplateparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_templateparameter)
        self._la = 0  # Token type
        try:
            self.state = 2064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 324, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2011
                self.match(CPP14Parser.Class)
                self.state = 2026
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 314, self._ctx)
                if la_ == 1:
                    self.state = 2013
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 310, self._ctx)
                    if la_ == 1:
                        self.state = 2012
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2016
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 311, self._ctx)
                    if la_ == 1:
                        self.state = 2015
                        self.match(CPP14Parser.Identifier)

                    pass

                elif la_ == 2:
                    self.state = 2019
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2018
                        self.match(CPP14Parser.Identifier)

                    self.state = 2021
                    self.match(CPP14Parser.Assign)
                    self.state = 2022
                    self.typespecifierseq()
                    self.state = 2024
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 313, self._ctx)
                    if la_ == 1:
                        self.state = 2023
                        self.abstractdeclarator()

                    pass

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2028
                self.match(CPP14Parser.Typename)
                self.state = 2043
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 319, self._ctx)
                if la_ == 1:
                    self.state = 2030
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 315, self._ctx)
                    if la_ == 1:
                        self.state = 2029
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2033
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 316, self._ctx)
                    if la_ == 1:
                        self.state = 2032
                        self.match(CPP14Parser.Identifier)

                    pass

                elif la_ == 2:
                    self.state = 2036
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2035
                        self.match(CPP14Parser.Identifier)

                    self.state = 2038
                    self.match(CPP14Parser.Assign)
                    self.state = 2039
                    self.typespecifierseq()
                    self.state = 2041
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 318, self._ctx)
                    if la_ == 1:
                        self.state = 2040
                        self.abstractdeclarator()

                    pass

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2045
                self.match(CPP14Parser.Template)
                self.state = 2046
                self.match(CPP14Parser.Less)
                self.state = 2047
                self.templateparameterlist(0)
                self.state = 2048
                self.match(CPP14Parser.Greater)
                self.state = 2049
                self.match(CPP14Parser.Class)
                self.state = 2061
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 323, self._ctx)
                if la_ == 1:
                    self.state = 2051
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 320, self._ctx)
                    if la_ == 1:
                        self.state = 2050
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2054
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 321, self._ctx)
                    if la_ == 1:
                        self.state = 2053
                        self.match(CPP14Parser.Identifier)

                    pass

                elif la_ == 2:
                    self.state = 2057
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2056
                        self.match(CPP14Parser.Identifier)

                    self.state = 2059
                    self.match(CPP14Parser.Assign)
                    self.state = 2060
                    self.idexpression()
                    pass

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2063
                self.parameterdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateargumentlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateargument(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargumentlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateargumentlist"):
                listener.enterTemplateargumentlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateargumentlist"):
                listener.exitTemplateargumentlist(self)

    def templateargumentlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TemplateargumentlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 202
        self.enterRecursionRule(localctx, 202, self.RULE_templateargumentlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2067
            self.templateargument()
            self.state = 2069
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 325, self._ctx)
            if la_ == 1:
                self.state = 2068
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2079
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 327, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TemplateargumentlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateargumentlist)
                    self.state = 2071
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2072
                    self.match(CPP14Parser.Comma)
                    self.state = 2073
                    self.templateargument()
                    self.state = 2075
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 326, self._ctx)
                    if la_ == 1:
                        self.state = 2074
                        self.match(CPP14Parser.Ellipsis)

                self.state = 2081
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 327, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TemplateargumentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateargument"):
                listener.enterTemplateargument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateargument"):
                listener.exitTemplateargument(self)

    def templateargument(self):

        localctx = CPP14Parser.TemplateargumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_templateargument)
        try:
            self.state = 2088
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 329, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2082
                self.typespecifierseq()
                self.state = 2084
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 328, self._ctx)
                if la_ == 1:
                    self.state = 2083
                    self.abstractdeclarator()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2086
                self.constantexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2087
                self.idexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypenamespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typenamespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypenamespecifier"):
                listener.enterTypenamespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypenamespecifier"):
                listener.exitTypenamespecifier(self)

    def typenamespecifier(self):

        localctx = CPP14Parser.TypenamespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_typenamespecifier)
        self._la = 0  # Token type
        try:
            self.state = 2106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 332, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2090
                self.match(CPP14Parser.Typename)
                self.state = 2091
                self.nestednamespecifier(0)
                self.state = 2092
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2094
                self.match(CPP14Parser.Typename)
                self.state = 2095
                self.nestednamespecifier(0)
                self.state = 2097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Template:
                    self.state = 2096
                    self.match(CPP14Parser.Template)

                self.state = 2099
                self.match(CPP14Parser.Identifier)
                self.state = 2100
                self.match(CPP14Parser.Less)
                self.state = 2102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 2101
                    self.templateargumentlist(0)

                self.state = 2104
                self.match(CPP14Parser.Greater)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryblockContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def handler(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.HandlerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.HandlerContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_tryblock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTryblock"):
                listener.enterTryblock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTryblock"):
                listener.exitTryblock(self)

    def tryblock(self):

        localctx = CPP14Parser.TryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_tryblock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2108
            self.match(CPP14Parser.Try)
            self.state = 2109
            self.match(CPP14Parser.LeftBrace)
            self.state = 2113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (
                1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (
                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (
                1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (
                1 << CPP14Parser.Friend) | (1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (
                1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (
                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (
                1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Static_cast) | (
                1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (
                1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Try - 64)) | (
                1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                1 << (CPP14Parser.Semi - 64)) | (1 << (CPP14Parser.Ellipsis - 64)) | (
                1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                    (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                    (1 << (CPP14Parser.Characterliteral - 132)) | (
                                    1 << (CPP14Parser.Floatingliteral - 132)) | (
                                1 << (CPP14Parser.Stringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                self.state = 2110
                self.statement()
                self.state = 2115
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2116
            self.match(CPP14Parser.RightBrace)
            self.state = 2118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2117
                self.handler()
                self.state = 2120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Catch):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(CPP14Parser.Catch, 0)

        def exceptiondeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptiondeclarationContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_handler

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHandler"):
                listener.enterHandler(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHandler"):
                listener.exitHandler(self)

    def handler(self):

        localctx = CPP14Parser.HandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_handler)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2122
            self.match(CPP14Parser.Catch)
            self.state = 2123
            self.match(CPP14Parser.LeftParen)
            self.state = 2124
            self.exceptiondeclaration()
            self.state = 2125
            self.match(CPP14Parser.RightParen)
            self.state = 2126
            self.match(CPP14Parser.LeftBrace)
            self.state = 2130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (
                1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (
                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (
                1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (
                1 << CPP14Parser.Friend) | (1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (
                1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (
                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (
                1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Static_cast) | (
                1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (
                1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Try - 64)) | (
                1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                1 << (CPP14Parser.Semi - 64)) | (1 << (CPP14Parser.Ellipsis - 64)) | (
                1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                    (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                    (1 << (CPP14Parser.Characterliteral - 132)) | (
                                    1 << (CPP14Parser.Floatingliteral - 132)) | (
                                1 << (CPP14Parser.Stringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                self.state = 2127
                self.statement()
                self.state = 2132
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2133
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExceptiondeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exceptiondeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExceptiondeclaration"):
                listener.enterExceptiondeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExceptiondeclaration"):
                listener.exitExceptiondeclaration(self)

    def exceptiondeclaration(self):

        localctx = CPP14Parser.ExceptiondeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_exceptiondeclaration)
        self._la = 0  # Token type
        try:
            self.state = 2149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 339, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2135
                    self.attributespecifierseq(0)

                self.state = 2138
                self.typespecifierseq()
                self.state = 2139
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2141
                    self.attributespecifierseq(0)

                self.state = 2144
                self.typespecifierseq()
                self.state = 2146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                        (1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (
                                    1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                            1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 2145
                    self.abstractdeclarator()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2148
                self.match(CPP14Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExceptionspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidlistContext, 0)

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exceptionspecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExceptionspecification"):
                listener.enterExceptionspecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExceptionspecification"):
                listener.exitExceptionspecification(self)

    def exceptionspecification(self):

        localctx = CPP14Parser.ExceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_exceptionspecification)
        self._la = 0  # Token type
        try:
            self.state = 2164
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Throw]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2151
                self.match(CPP14Parser.Throw)
                self.state = 2152
                self.match(CPP14Parser.LeftParen)
                self.state = 2154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (
                    1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (
                    1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Float) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Short) | (
                    1 << CPP14Parser.Signed) | (1 << CPP14Parser.Struct))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and (
                    (1 << (_la - 69)) & ((1 << (CPP14Parser.Typename - 69)) | (1 << (CPP14Parser.Union - 69)) | (
                    1 << (CPP14Parser.Unsigned - 69)) | (1 << (CPP14Parser.Void - 69)) | (
                    1 << (CPP14Parser.Volatile - 69)) | (1 << (CPP14Parser.Wchar - 69)) | (
                    1 << (CPP14Parser.Identifier - 69)))) != 0):
                    self.state = 2153
                    self.typeidlist(0)

                self.state = 2156
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.Noexcept]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2157
                self.match(CPP14Parser.Noexcept)
                self.state = 2162
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 341, self._ctx)
                if la_ == 1:
                    self.state = 2158
                    self.match(CPP14Parser.LeftParen)
                    self.state = 2159
                    self.constantexpression()
                    self.state = 2160
                    self.match(CPP14Parser.RightParen)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeidlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typeidlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeidlist"):
                listener.enterTypeidlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeidlist"):
                listener.exitTypeidlist(self)

    def typeidlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TypeidlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 216
        self.enterRecursionRule(localctx, 216, self.RULE_typeidlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2167
            self.typespecifierseq()
            self.state = 2169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 343, self._ctx)
            if la_ == 1:
                self.state = 2168
                self.abstractdeclarator()

            self.state = 2172
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 344, self._ctx)
            if la_ == 1:
                self.state = 2171
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2185
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 347, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TypeidlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeidlist)
                    self.state = 2174
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2175
                    self.match(CPP14Parser.Comma)
                    self.state = 2176
                    self.typespecifierseq()
                    self.state = 2178
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 345, self._ctx)
                    if la_ == 1:
                        self.state = 2177
                        self.abstractdeclarator()

                    self.state = 2181
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 346, self._ctx)
                    if la_ == 1:
                        self.state = 2180
                        self.match(CPP14Parser.Ellipsis)

                self.state = 2187
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 347, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class RightShiftContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_rightShift

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRightShift"):
                listener.enterRightShift(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRightShift"):
                listener.exitRightShift(self)

    def rightShift(self):

        localctx = CPP14Parser.RightShiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_rightShift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2188
            self.match(CPP14Parser.Greater)
            self.state = 2189
            self.match(CPP14Parser.Greater)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RightShiftAssignContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_rightShiftAssign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRightShiftAssign"):
                listener.enterRightShiftAssign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRightShiftAssign"):
                listener.exitRightShiftAssign(self)

    def rightShiftAssign(self):

        localctx = CPP14Parser.RightShiftAssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_rightShiftAssign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2191
            self.match(CPP14Parser.Greater)
            self.state = 2192
            self.match(CPP14Parser.Greater)
            self.state = 2193
            self.match(CPP14Parser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TheoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def rightShift(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftContext, 0)

        def rightShiftAssign(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftAssignContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_theoperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTheoperator"):
                listener.enterTheoperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTheoperator"):
                listener.exitTheoperator(self)

    def theoperator(self):

        localctx = CPP14Parser.TheoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_theoperator)
        try:
            self.state = 2243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 348, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2195
                self.match(CPP14Parser.New)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2196
                self.match(CPP14Parser.Delete)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2197
                self.match(CPP14Parser.New)
                self.state = 2198
                self.match(CPP14Parser.LeftBracket)
                self.state = 2199
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2200
                self.match(CPP14Parser.Delete)
                self.state = 2201
                self.match(CPP14Parser.LeftBracket)
                self.state = 2202
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2203
                self.match(CPP14Parser.Plus)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2204
                self.match(CPP14Parser.Minus)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2205
                self.match(CPP14Parser.Star)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2206
                self.match(CPP14Parser.Div)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2207
                self.match(CPP14Parser.Mod)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2208
                self.match(CPP14Parser.Caret)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2209
                self.match(CPP14Parser.And)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2210
                self.match(CPP14Parser.Or)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2211
                self.match(CPP14Parser.Tilde)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2212
                self.match(CPP14Parser.Not)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2213
                self.match(CPP14Parser.Assign)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2214
                self.match(CPP14Parser.Less)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2215
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2216
                self.match(CPP14Parser.PlusAssign)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2217
                self.match(CPP14Parser.MinusAssign)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2218
                self.match(CPP14Parser.StarAssign)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2219
                self.match(CPP14Parser.DivAssign)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2220
                self.match(CPP14Parser.ModAssign)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2221
                self.match(CPP14Parser.XorAssign)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2222
                self.match(CPP14Parser.AndAssign)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2223
                self.match(CPP14Parser.OrAssign)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2224
                self.match(CPP14Parser.LeftShift)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2225
                self.rightShift()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2226
                self.rightShiftAssign()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2227
                self.match(CPP14Parser.LeftShiftAssign)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2228
                self.match(CPP14Parser.Equal)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2229
                self.match(CPP14Parser.NotEqual)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2230
                self.match(CPP14Parser.LessEqual)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2231
                self.match(CPP14Parser.GreaterEqual)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 2232
                self.match(CPP14Parser.AndAnd)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 2233
                self.match(CPP14Parser.OrOr)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 2234
                self.match(CPP14Parser.PlusPlus)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 2235
                self.match(CPP14Parser.MinusMinus)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2236
                self.match(CPP14Parser.Comma)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2237
                self.match(CPP14Parser.ArrowStar)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2238
                self.match(CPP14Parser.Arrow)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2239
                self.match(CPP14Parser.LeftParen)
                self.state = 2240
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 2241
                self.match(CPP14Parser.LeftBracket)
                self.state = 2242
                self.match(CPP14Parser.RightBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[4] = self.nestednamespecifier_sempred
        self._predicates[5] = self.capturelist_sempred
        self._predicates[8] = self.postfixexpression_sempred
        self._predicates[15] = self.noptrnewdeclarator_sempred
        self._predicates[19] = self.pmexpression_sempred
        self._predicates[20] = self.multiplicativeexpression_sempred
        self._predicates[21] = self.additiveexpression_sempred
        self._predicates[22] = self.shiftexpression_sempred
        self._predicates[23] = self.relationalexpression_sempred
        self._predicates[24] = self.equalityexpression_sempred
        self._predicates[25] = self.andexpression_sempred
        self._predicates[26] = self.exclusiveorexpression_sempred
        self._predicates[27] = self.inclusiveorexpression_sempred
        self._predicates[28] = self.logicalandexpression_sempred
        self._predicates[29] = self.logicalorexpression_sempred
        self._predicates[34] = self.expression_sempred
        self._predicates[46] = self.declarationseq_sempred
        self._predicates[58] = self.enumeratorlist_sempred
        self._predicates[59] = self.attributespecifierseq_sempred
        self._predicates[61] = self.attributelist_sempred
        self._predicates[63] = self.balancedtokenseq_sempred
        self._predicates[65] = self.initdeclaratorlist_sempred
        self._predicates[68] = self.noptrdeclarator_sempred
        self._predicates[74] = self.noptrabstractdeclarator_sempred
        self._predicates[76] = self.noptrabstractpackdeclarator_sempred
        self._predicates[78] = self.parameterdeclarationlist_sempred
        self._predicates[85] = self.initializerlist_sempred
        self._predicates[90] = self.memberdeclaratorlist_sempred
        self._predicates[92] = self.virtspecifierseq_sempred
        self._predicates[94] = self.basespecifierlist_sempred
        self._predicates[99] = self.templateparameterlist_sempred
        self._predicates[101] = self.templateargumentlist_sempred
        self._predicates[108] = self.typeidlist_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def nestednamespecifier_sempred(self, localctx: NestednamespecifierContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 1)

    def capturelist_sempred(self, localctx: CapturelistContext, predIndex: int):
        if predIndex == 1:
            return self.precpred(self._ctx, 1)

    def postfixexpression_sempred(self, localctx: PostfixexpressionContext, predIndex: int):
        if predIndex == 2:
            return self.precpred(self._ctx, 8)

        if predIndex == 3:
            return self.precpred(self._ctx, 7)

        if predIndex == 4:
            return self.precpred(self._ctx, 6)

    def noptrnewdeclarator_sempred(self, localctx: NoptrnewdeclaratorContext, predIndex: int):
        if predIndex == 5:
            return self.precpred(self._ctx, 1)

    def pmexpression_sempred(self, localctx: PmexpressionContext, predIndex: int):
        if predIndex == 6:
            return self.precpred(self._ctx, 1)

    def multiplicativeexpression_sempred(self, localctx: MultiplicativeexpressionContext, predIndex: int):
        if predIndex == 7:
            return self.precpred(self._ctx, 1)

    def additiveexpression_sempred(self, localctx: AdditiveexpressionContext, predIndex: int):
        if predIndex == 8:
            return self.precpred(self._ctx, 1)

    def shiftexpression_sempred(self, localctx: ShiftexpressionContext, predIndex: int):
        if predIndex == 9:
            return self.precpred(self._ctx, 1)

    def relationalexpression_sempred(self, localctx: RelationalexpressionContext, predIndex: int):
        if predIndex == 10:
            return self.precpred(self._ctx, 1)

    def equalityexpression_sempred(self, localctx: EqualityexpressionContext, predIndex: int):
        if predIndex == 11:
            return self.precpred(self._ctx, 1)

    def andexpression_sempred(self, localctx: AndexpressionContext, predIndex: int):
        if predIndex == 12:
            return self.precpred(self._ctx, 1)

    def exclusiveorexpression_sempred(self, localctx: ExclusiveorexpressionContext, predIndex: int):
        if predIndex == 13:
            return self.precpred(self._ctx, 1)

    def inclusiveorexpression_sempred(self, localctx: InclusiveorexpressionContext, predIndex: int):
        if predIndex == 14:
            return self.precpred(self._ctx, 1)

    def logicalandexpression_sempred(self, localctx: LogicalandexpressionContext, predIndex: int):
        if predIndex == 15:
            return self.precpred(self._ctx, 1)

    def logicalorexpression_sempred(self, localctx: LogicalorexpressionContext, predIndex: int):
        if predIndex == 16:
            return self.precpred(self._ctx, 1)

    def expression_sempred(self, localctx: ExpressionContext, predIndex: int):
        if predIndex == 17:
            return self.precpred(self._ctx, 1)

    def declarationseq_sempred(self, localctx: DeclarationseqContext, predIndex: int):
        if predIndex == 18:
            return self.precpred(self._ctx, 1)

    def enumeratorlist_sempred(self, localctx: EnumeratorlistContext, predIndex: int):
        if predIndex == 19:
            return self.precpred(self._ctx, 1)

    def attributespecifierseq_sempred(self, localctx: AttributespecifierseqContext, predIndex: int):
        if predIndex == 20:
            return self.precpred(self._ctx, 1)

    def attributelist_sempred(self, localctx: AttributelistContext, predIndex: int):
        if predIndex == 21:
            return self.precpred(self._ctx, 1)

    def balancedtokenseq_sempred(self, localctx: BalancedtokenseqContext, predIndex: int):
        if predIndex == 22:
            return self.precpred(self._ctx, 1)

    def initdeclaratorlist_sempred(self, localctx: InitdeclaratorlistContext, predIndex: int):
        if predIndex == 23:
            return self.precpred(self._ctx, 1)

    def noptrdeclarator_sempred(self, localctx: NoptrdeclaratorContext, predIndex: int):
        if predIndex == 24:
            return self.precpred(self._ctx, 3)

        if predIndex == 25:
            return self.precpred(self._ctx, 2)

    def noptrabstractdeclarator_sempred(self, localctx: NoptrabstractdeclaratorContext, predIndex: int):
        if predIndex == 26:
            return self.precpred(self._ctx, 5)

        if predIndex == 27:
            return self.precpred(self._ctx, 3)

    def noptrabstractpackdeclarator_sempred(self, localctx: NoptrabstractpackdeclaratorContext, predIndex: int):
        if predIndex == 28:
            return self.precpred(self._ctx, 3)

        if predIndex == 29:
            return self.precpred(self._ctx, 2)

    def parameterdeclarationlist_sempred(self, localctx: ParameterdeclarationlistContext, predIndex: int):
        if predIndex == 30:
            return self.precpred(self._ctx, 1)

    def initializerlist_sempred(self, localctx: InitializerlistContext, predIndex: int):
        if predIndex == 31:
            return self.precpred(self._ctx, 1)

    def memberdeclaratorlist_sempred(self, localctx: MemberdeclaratorlistContext, predIndex: int):
        if predIndex == 32:
            return self.precpred(self._ctx, 1)

    def virtspecifierseq_sempred(self, localctx: VirtspecifierseqContext, predIndex: int):
        if predIndex == 33:
            return self.precpred(self._ctx, 1)

    def basespecifierlist_sempred(self, localctx: BasespecifierlistContext, predIndex: int):
        if predIndex == 34:
            return self.precpred(self._ctx, 1)

    def templateparameterlist_sempred(self, localctx: TemplateparameterlistContext, predIndex: int):
        if predIndex == 35:
            return self.precpred(self._ctx, 1)

    def templateargumentlist_sempred(self, localctx: TemplateargumentlistContext, predIndex: int):
        if predIndex == 36:
            return self.precpred(self._ctx, 1)

    def typeidlist_sempred(self, localctx: TypeidlistContext, predIndex: int):
        if predIndex == 37:
            return self.precpred(self._ctx, 1)
