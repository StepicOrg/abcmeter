# Generated from /home/meanmail/MyProjects/antlr/cpp/grammars/CPP14.g4 by ANTLR 4.7
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *
from antlr4.error.Errors import InputMismatchException
from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0090")
        buf.write("\u0989\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\3\2\5\2\u0104\n\2\3\2\3\2\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\5\3\u010e\n\3\3\4\3\4\3\4\5\4\u0113\n\4\3")
        buf.write("\4\3\4\5\4\u0117\n\4\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u011f")
        buf.write("\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0129\n\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\5\5\u0130\n\5\3\5\3\5\3\5\3\5\3\5\5\5")
        buf.write("\u0137\n\5\3\5\3\5\5\5\u013b\n\5\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\5\6\u0147\n\6\3\6\3\6\3\6\3\6\3\6\5")
        buf.write("\6\u014e\n\6\3\6\3\6\3\6\5\6\u0153\n\6\3\6\3\6\7\6\u0157")
        buf.write("\n\6\f\6\16\6\u015a\13\6\3\7\3\7\3\b\3\b\3\b\5\b\u0161")
        buf.write("\n\b\3\b\3\b\3\b\3\b\5\b\u0167\n\b\7\b\u0169\n\b\f\b\16")
        buf.write("\b\u016c\13\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t")
        buf.write("\u0177\n\t\3\n\3\n\3\n\3\n\5\n\u017d\n\n\3\n\5\n\u0180")
        buf.write("\n\n\3\n\5\n\u0183\n\n\3\n\3\n\3\n\5\n\u0188\n\n\5\n\u018a")
        buf.write("\n\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13")
        buf.write("\u01a0\n\13\3\13\3\13\5\13\u01a4\n\13\3\13\3\13\5\13\u01a8")
        buf.write("\n\13\3\13\3\13\3\13\3\13\5\13\u01ae\n\13\3\13\3\13\3")
        buf.write("\13\3\13\3\13\5\13\u01b5\n\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u01c3\n\13\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u01ce")
        buf.write("\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13")
        buf.write("\u01d9\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\5\13\u01e4\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u01f4\n\13\3")
        buf.write("\13\3\13\5\13\u01f8\n\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u0207\n\13\3")
        buf.write("\13\3\13\3\13\3\13\5\13\u020d\n\13\3\13\3\13\3\13\3\13")
        buf.write("\5\13\u0213\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\13\3\13\3\13\7\13\u0220\n\13\f\13\16\13\u0223\13")
        buf.write("\13\3\f\5\f\u0226\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\5\f\u0232\n\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u023a")
        buf.write("\n\f\3\f\3\f\3\f\3\f\5\f\u0240\n\f\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u024d\n\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u025a\n\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0265\n\r\3\16\3\16\3\16")
        buf.write("\3\16\5\16\u026b\n\16\3\17\3\17\3\20\5\20\u0270\n\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\5\20\u0277\n\20\3\20\3\20\5\20")
        buf.write("\u027b\n\20\3\20\5\20\u027e\n\20\3\20\5\20\u0281\n\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\5\20\u0288\n\20\3\20\3\20\3")
        buf.write("\20\5\20\u028d\n\20\3\20\3\20\5\20\u0291\n\20\5\20\u0293")
        buf.write("\n\20\3\21\3\21\5\21\u0297\n\21\3\21\5\21\u029a\n\21\3")
        buf.write("\22\3\22\3\22\3\22\3\22\5\22\u02a1\n\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\5\22\u02a8\n\22\7\22\u02aa\n\22\f\22\16\22")
        buf.write("\u02ad\13\22\3\23\3\23\5\23\u02b1\n\23\3\23\3\23\5\23")
        buf.write("\u02b5\n\23\3\24\5\24\u02b8\n\24\3\24\3\24\3\24\5\24\u02bd")
        buf.write("\n\24\3\24\3\24\3\24\3\24\5\24\u02c3\n\24\3\25\3\25\3")
        buf.write("\25\3\25\5\25\u02c9\n\25\3\25\3\25\3\25\5\25\u02ce\n\25")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u02d9")
        buf.write("\n\26\f\26\16\26\u02dc\13\26\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\7\27\u02ea\n\27\f")
        buf.write("\27\16\27\u02ed\13\27\3\30\3\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\7\30\u02f8\n\30\f\30\16\30\u02fb\13\30\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\7\31")
        buf.write("\u0307\n\31\f\31\16\31\u030a\13\31\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\7\32\u031b\n\32\f\32\16\32\u031e\13\32\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\7\33\u0329\n\33\f\33\16")
        buf.write("\33\u032c\13\33\3\34\3\34\3\34\3\34\3\34\3\34\7\34\u0334")
        buf.write("\n\34\f\34\16\34\u0337\13\34\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\7\35\u033f\n\35\f\35\16\35\u0342\13\35\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\7\36\u034a\n\36\f\36\16\36\u034d")
        buf.write("\13\36\3\37\3\37\3\37\3\37\3\37\3\37\7\37\u0355\n\37\f")
        buf.write("\37\16\37\u0358\13\37\3 \3 \3 \3 \3 \3 \7 \u0360\n \f")
        buf.write(" \16 \u0363\13 \3!\3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u0379\n#\5#\u037b\n#\3")
        buf.write("$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u0388\n$\3%\3%\3%\3")
        buf.write("%\3%\3%\7%\u0390\n%\f%\16%\u0393\13%\3&\3&\3&\5&\u0398")
        buf.write("\n&\3\'\5\'\u039b\n\'\3\'\3\'\3\'\3\'\5\'\u03a1\n\'\3")
        buf.write("\'\3\'\5\'\u03a5\n\'\3\'\3\'\5\'\u03a9\n\'\3\'\5\'\u03ac")
        buf.write("\n\'\3\'\3\'\5\'\u03b0\n\'\3\'\3\'\5\'\u03b4\n\'\3\'\3")
        buf.write("\'\5\'\u03b8\n\'\3\'\3\'\5\'\u03bc\n\'\3\'\3\'\5\'\u03c0")
        buf.write("\n\'\3\'\3\'\5\'\u03c4\n\'\3\'\3\'\3\'\5\'\u03c9\n\'\3")
        buf.write("\'\3\'\3\'\3\'\5\'\u03cf\n\'\3\'\3\'\3\'\3\'\5\'\u03d5")
        buf.write("\n\'\3\'\3\'\5\'\u03d9\n\'\3\'\5\'\u03dc\n\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u03e8\n\'\3\'\3\'\3")
        buf.write("\'\3\'\5\'\u03ee\n\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3\'\5\'\u03fc\n\'\3\'\3\'\3\'\5\'\u0401\n\'")
        buf.write("\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u040f")
        buf.write("\n\'\3\'\3\'\3\'\5\'\u0414\n\'\3\'\3\'\5\'\u0418\n\'\3")
        buf.write("(\3(\3(\3(\3(\3)\3)\3)\3)\3*\3*\3*\3*\3*\7*\u0428\n*\f")
        buf.write("*\16*\u042b\13*\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3")
        buf.write("+\3+\3+\3+\3+\3+\3+\5+\u0440\n+\3,\3,\3,\3-\3-\5-\u0447")
        buf.write("\n-\3-\3-\3-\3-\3-\3-\5-\u044f\n-\3-\3-\3-\3-\5-\u0455")
        buf.write("\n-\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\5.\u0469\n.\3.\3.\5.\u046d\n.\3.\3.\3.\3.\3.\3.\5")
        buf.write(".\u0475\n.\3.\3.\3.\3.\3.\3.\3.\5.\u047e\n.\3/\5/\u0481")
        buf.write("\n/\3/\3/\5/\u0485\n/\3/\5/\u0488\n/\3/\3/\3/\5/\u048d")
        buf.write("\n/\3/\3/\3/\5/\u0492\n/\3\60\3\60\5\60\u0496\n\60\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\5\61\u049e\n\61\3\61\3\61\3")
        buf.write("\61\3\61\3\61\3\61\5\61\u04a6\n\61\3\62\3\62\3\62\3\62")
        buf.write("\3\63\3\63\3\63\3\63\3\63\7\63\u04b1\n\63\f\63\16\63\u04b4")
        buf.write("\13\63\3\64\5\64\u04b7\n\64\3\64\5\64\u04ba\n\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\5\64\u04c2\n\64\3\64\3\64\3")
        buf.write("\64\3\64\5\64\u04c8\n\64\3\64\3\64\3\64\5\64\u04cd\n\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\5\64\u04da\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3")
        buf.write("\64\3\64\5\64\u04e5\n\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\5\64\u04ee\n\64\3\64\3\64\3\64\5\64\u04f3\n\64\3")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\5\64\u0501\n\64\3\64\3\64\3\64\5\64\u0506\n\64\3")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64")
        buf.write("\u0512\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3")
        buf.write("\64\3\64\5\64\u051e\n\64\3\64\3\64\3\64\3\64\3\64\5\64")
        buf.write("\u0525\n\64\3\64\3\64\3\64\3\64\5\64\u052b\n\64\3\64\3")
        buf.write("\64\5\64\u052f\n\64\3\64\3\64\3\64\5\64\u0534\n\64\3\64")
        buf.write("\3\64\5\64\u0538\n\64\3\65\3\65\3\65\3\65\3\65\3\65\3")
        buf.write("\65\3\65\3\65\3\65\3\65\3\65\5\65\u0546\n\65\3\66\3\66")
        buf.write("\5\66\u054a\n\66\3\66\3\66\3\66\5\66\u054f\n\66\3\67\3")
        buf.write("\67\3\67\3\67\5\67\u0555\n\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\5\67\u055c\n\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3")
        buf.write("\67\5\67\u0566\n\67\38\38\38\58\u056b\n8\38\58\u056e\n")
        buf.write("8\38\38\38\38\38\38\58\u0576\n8\38\38\38\38\38\58\u057d")
        buf.write("\n8\38\38\38\58\u0582\n8\38\38\38\38\58\u0588\n8\38\3")
        buf.write("8\38\58\u058d\n8\39\39\59\u0591\n9\39\39\39\59\u0596\n")
        buf.write("9\3:\3:\5:\u059a\n:\3:\3:\3:\5:\u059f\n:\3;\5;\u05a2\n")
        buf.write(";\3;\3;\3;\3;\3;\3;\5;\u05aa\n;\3;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\3;\3;\3;\3;\3;\5;\u05bd\n;\3<\3<\3<\3<\3")
        buf.write("<\5<\u05c4\n<\3<\5<\u05c7\n<\3=\3=\3=\3=\3=\3=\3=\3=\3")
        buf.write("=\5=\u05d2\n=\3>\3>\5>\u05d6\n>\3>\5>\u05d9\n>\3>\3>\5")
        buf.write(">\u05dd\n>\3>\3>\5>\u05e1\n>\3>\3>\3>\3>\5>\u05e7\n>\5")
        buf.write(">\u05e9\n>\3?\3?\3?\3?\3?\5?\u05f0\n?\3@\3@\3@\3@\3@\3")
        buf.write("@\7@\u05f8\n@\f@\16@\u05fb\13@\3A\3A\3A\3A\5A\u0601\n")
        buf.write("A\3B\3B\3B\3B\3B\7B\u0608\nB\fB\16B\u060b\13B\3C\3C\3")
        buf.write("C\3C\3C\3C\3C\3C\3C\3C\5C\u0617\nC\3C\5C\u061a\nC\3C\3")
        buf.write("C\3C\3C\3C\3C\5C\u0622\nC\3C\3C\5C\u0626\nC\3D\3D\5D\u062a")
        buf.write("\nD\3D\3D\3D\5D\u062f\nD\3D\3D\3D\5D\u0634\nD\3D\3D\3")
        buf.write("D\3D\3D\7D\u063b\nD\fD\16D\u063e\13D\3E\3E\3E\3E\3E\5")
        buf.write("E\u0645\nE\3F\3F\3F\3F\5F\u064b\nF\3G\3G\5G\u064f\nG\3")
        buf.write("G\3G\7G\u0653\nG\fG\16G\u0656\13G\3H\3H\3H\3H\3H\3H\3")
        buf.write("H\3H\3H\3H\3H\3H\5H\u0664\nH\3I\3I\3I\5I\u0669\nI\3I\3")
        buf.write("I\3I\3I\5I\u066f\nI\7I\u0671\nI\fI\16I\u0674\13I\3J\3")
        buf.write("J\3J\3J\3J\3J\5J\u067c\nJ\5J\u067e\nJ\3K\3K\3K\3K\5K\u0684")
        buf.write("\nK\3L\3L\5L\u0688\nL\3L\3L\5L\u068c\nL\3L\3L\3L\3L\5")
        buf.write("L\u0692\nL\3L\3L\3L\3L\3L\5L\u0699\nL\3L\3L\5L\u069d\n")
        buf.write("L\7L\u069f\nL\fL\16L\u06a2\13L\3M\3M\3M\3M\5M\u06a8\n")
        buf.write("M\3M\5M\u06ab\nM\3M\5M\u06ae\nM\3M\5M\u06b1\nM\3N\3N\5")
        buf.write("N\u06b5\nN\3N\5N\u06b8\nN\3N\3N\5N\u06bc\nN\3N\3N\5N\u06c0")
        buf.write("\nN\3N\3N\3N\5N\u06c5\nN\3N\5N\u06c8\nN\5N\u06ca\nN\3")
        buf.write("O\3O\5O\u06ce\nO\3P\3P\3Q\3Q\3R\3R\5R\u06d6\nR\3R\3R\3")
        buf.write("R\3R\5R\u06dc\nR\3R\5R\u06df\nR\3S\3S\3S\5S\u06e4\nS\5")
        buf.write("S\u06e6\nS\3T\3T\3T\3T\5T\u06ec\nT\3T\3T\5T\u06f0\nT\3")
        buf.write("T\3T\3T\3T\5T\u06f6\nT\3T\3T\3T\3T\3T\5T\u06fd\nT\3T\3")
        buf.write("T\5T\u0701\nT\7T\u0703\nT\fT\16T\u0706\13T\3U\3U\3U\3")
        buf.write("U\5U\u070c\nU\3V\3V\3V\3V\3V\3V\3V\3V\5V\u0716\nV\3V\3")
        buf.write("V\5V\u071a\nV\7V\u071c\nV\fV\16V\u071f\13V\3W\5W\u0722")
        buf.write("\nW\3W\5W\u0725\nW\3W\3W\3W\3W\5W\u072b\nW\3X\3X\3X\3")
        buf.write("X\3X\3X\7X\u0733\nX\fX\16X\u0736\13X\3Y\5Y\u0739\nY\3")
        buf.write("Y\3Y\3Y\3Y\5Y\u073f\nY\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0747\nY\3")
        buf.write("Y\3Y\5Y\u074b\nY\3Y\5Y\u074e\nY\3Y\3Y\5Y\u0752\nY\3Y\3")
        buf.write("Y\3Y\5Y\u0757\nY\3Z\5Z\u075a\nZ\3Z\5Z\u075d\nZ\3Z\3Z\5")
        buf.write("Z\u0761\nZ\3Z\3Z\3[\3[\5[\u0767\n[\3[\3[\5[\u076b\n[\3")
        buf.write("[\3[\3[\3[\5[\u0771\n[\3[\3[\5[\u0775\n[\3[\3[\3[\3[\3")
        buf.write("[\3[\3[\3[\5[\u077f\n[\3\\\3\\\3\\\3\\\3\\\5\\\u0786\n")
        buf.write("\\\3]\3]\3]\5]\u078b\n]\3^\3^\5^\u078f\n^\3_\3_\3_\5_")
        buf.write("\u0794\n_\3_\3_\3_\3_\5_\u079a\n_\7_\u079c\n_\f_\16_\u079f")
        buf.write("\13_\3`\3`\3`\5`\u07a4\n`\3`\3`\3`\3`\5`\u07aa\n`\3a\3")
        buf.write("a\3a\3a\5a\u07b0\na\3a\5a\u07b3\na\3b\3b\5b\u07b7\nb\3")
        buf.write("b\5b\u07ba\nb\3b\3b\5b\u07be\nb\3b\3b\5b\u07c2\nb\3b\3")
        buf.write("b\5b\u07c6\nb\3b\3b\5b\u07ca\nb\5b\u07cc\nb\3c\3c\3d\3")
        buf.write("d\5d\u07d2\nd\3d\3d\3d\5d\u07d7\nd\5d\u07d9\nd\3e\5e\u07dc")
        buf.write("\ne\3e\5e\u07df\ne\3e\5e\u07e2\ne\3e\3e\3e\3e\5e\u07e8")
        buf.write("\ne\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3")
        buf.write("e\3e\3e\3e\3e\3e\3e\3e\3e\3e\5e\u0804\ne\3e\3e\3e\5e\u0809")
        buf.write("\ne\3e\3e\3e\5e\u080e\ne\3f\3f\3f\3f\3f\3f\7f\u0816\n")
        buf.write("f\ff\16f\u0819\13f\3g\3g\5g\u081d\ng\3g\5g\u0820\ng\3")
        buf.write("g\3g\5g\u0824\ng\3g\5g\u0827\ng\3g\5g\u082a\ng\3g\3g\5")
        buf.write("g\u082e\ng\3h\3h\3h\3h\3h\7h\u0835\nh\fh\16h\u0838\13")
        buf.write("h\3i\3i\3j\3j\3j\3j\3k\3k\3k\5k\u0843\nk\3k\3k\3k\3k\5")
        buf.write("k\u0849\nk\7k\u084b\nk\fk\16k\u084e\13k\3l\5l\u0851\n")
        buf.write("l\3l\3l\5l\u0855\nl\3l\3l\5l\u0859\nl\3l\3l\5l\u085d\n")
        buf.write("l\3l\3l\5l\u0861\nl\3l\3l\5l\u0865\nl\3m\5m\u0868\nm\3")
        buf.write("m\3m\5m\u086c\nm\3n\3n\3o\3o\5o\u0872\no\3p\3p\5p\u0876")
        buf.write("\np\3p\3p\5p\u087a\np\3p\3p\3p\5p\u087f\np\3q\3q\3q\5")
        buf.write("q\u0884\nq\3q\3q\3q\3q\3q\5q\u088b\nq\3r\3r\5r\u088f\n")
        buf.write("r\3s\3s\3s\3s\3s\5s\u0896\ns\3t\3t\3t\3t\3t\3t\7t\u089e")
        buf.write("\nt\ft\16t\u08a1\13t\3u\3u\5u\u08a5\nu\3u\5u\u08a8\nu")
        buf.write("\3u\3u\5u\u08ac\nu\3u\3u\3u\5u\u08b1\nu\3u\3u\5u\u08b5")
        buf.write("\nu\3u\5u\u08b8\nu\3u\3u\5u\u08bc\nu\3u\3u\3u\5u\u08c1")
        buf.write("\nu\3u\3u\3u\3u\3u\3u\5u\u08c9\nu\3u\5u\u08cc\nu\3u\3")
        buf.write("u\3u\3u\3u\3u\5u\u08d4\nu\3u\3u\3u\3u\5u\u08da\nu\3v\3")
        buf.write("v\3v\5v\u08df\nv\3v\3v\3v\3v\5v\u08e5\nv\7v\u08e7\nv\f")
        buf.write("v\16v\u08ea\13v\3w\3w\5w\u08ee\nw\3w\3w\5w\u08f2\nw\3")
        buf.write("x\3x\3x\3x\3x\3x\3x\5x\u08fb\nx\3x\3x\3x\5x\u0900\nx\3")
        buf.write("x\3x\5x\u0904\nx\3y\3y\3y\5y\u0909\ny\3y\3y\3y\3z\3z\5")
        buf.write("z\u0910\nz\3{\3{\3{\3{\3{\3{\5{\u0918\n{\3{\3{\3|\5|\u091d")
        buf.write("\n|\3|\3|\3|\3|\5|\u0923\n|\3|\3|\5|\u0927\n|\3|\5|\u092a")
        buf.write("\n|\3}\3}\3}\5}\u092f\n}\3}\3}\3}\3}\3}\3}\3}\5}\u0938")
        buf.write("\n}\3~\3~\3~\5~\u093d\n~\3~\5~\u0940\n~\3~\3~\3~\3~\5")
        buf.write("~\u0946\n~\3~\5~\u0949\n~\7~\u094b\n~\f~\16~\u094e\13")
        buf.write("~\3\177\3\177\3\177\3\u0080\3\u0080\3\u0080\3\u0080\3")
        buf.write("\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081")
        buf.write("\u0987\n\u0081\3\u0081\2$\n\16\24\"*,.\60\62\64\668:<")
        buf.write(">HRd~\u0082\u0086\u008c\u0090\u0096\u00a6\u00aa\u00ae")
        buf.write("\u00bc\u00ca\u00ce\u00d4\u00e6\u00ea\u00fa\u0082\2\4\6")
        buf.write("\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\66")
        buf.write("8:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de")
        buf.write("\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0")
        buf.write("\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\2\t\4")
        buf.write("\2\\\\``\4\2VX\\_\4\2\21\21MM\4\2\\\\qq\5\2\20\20==HH")
        buf.write("\4\2!!\60\60\3\2\61\63\2\u0b37\2\u0103\3\2\2\2\4\u010d")
        buf.write("\3\2\2\2\6\u0116\3\2\2\2\b\u013a\3\2\2\2\n\u0146\3\2\2")
        buf.write("\2\f\u015b\3\2\2\2\16\u015d\3\2\2\2\20\u0176\3\2\2\2\22")
        buf.write("\u0178\3\2\2\2\24\u01f7\3\2\2\2\26\u023f\3\2\2\2\30\u0264")
        buf.write("\3\2\2\2\32\u026a\3\2\2\2\34\u026c\3\2\2\2\36\u0292\3")
        buf.write("\2\2\2 \u0299\3\2\2\2\"\u029b\3\2\2\2$\u02b4\3\2\2\2&")
        buf.write("\u02c2\3\2\2\2(\u02cd\3\2\2\2*\u02cf\3\2\2\2,\u02dd\3")
        buf.write("\2\2\2.\u02ee\3\2\2\2\60\u02fc\3\2\2\2\62\u030b\3\2\2")
        buf.write("\2\64\u031f\3\2\2\2\66\u032d\3\2\2\28\u0338\3\2\2\2:\u0343")
        buf.write("\3\2\2\2<\u034e\3\2\2\2>\u0359\3\2\2\2@\u0364\3\2\2\2")
        buf.write("B\u036a\3\2\2\2D\u037a\3\2\2\2F\u0387\3\2\2\2H\u0389\3")
        buf.write("\2\2\2J\u0397\3\2\2\2L\u0417\3\2\2\2N\u0419\3\2\2\2P\u041e")
        buf.write("\3\2\2\2R\u0422\3\2\2\2T\u043f\3\2\2\2V\u0441\3\2\2\2")
        buf.write("X\u0454\3\2\2\2Z\u047d\3\2\2\2\\\u0491\3\2\2\2^\u0495")
        buf.write("\3\2\2\2`\u04a5\3\2\2\2b\u04a7\3\2\2\2d\u04ab\3\2\2\2")
        buf.write("f\u0537\3\2\2\2h\u0545\3\2\2\2j\u054e\3\2\2\2l\u0565\3")
        buf.write("\2\2\2n\u058c\3\2\2\2p\u0595\3\2\2\2r\u059e\3\2\2\2t\u05bc")
        buf.write("\3\2\2\2v\u05c6\3\2\2\2x\u05d1\3\2\2\2z\u05e8\3\2\2\2")
        buf.write("|\u05ef\3\2\2\2~\u05f1\3\2\2\2\u0080\u0600\3\2\2\2\u0082")
        buf.write("\u0602\3\2\2\2\u0084\u0625\3\2\2\2\u0086\u062e\3\2\2\2")
        buf.write("\u0088\u063f\3\2\2\2\u008a\u064a\3\2\2\2\u008c\u064c\3")
        buf.write("\2\2\2\u008e\u0663\3\2\2\2\u0090\u0665\3\2\2\2\u0092\u067d")
        buf.write("\3\2\2\2\u0094\u0683\3\2\2\2\u0096\u0691\3\2\2\2\u0098")
        buf.write("\u06a3\3\2\2\2\u009a\u06c9\3\2\2\2\u009c\u06cb\3\2\2\2")
        buf.write("\u009e\u06cf\3\2\2\2\u00a0\u06d1\3\2\2\2\u00a2\u06de\3")
        buf.write("\2\2\2\u00a4\u06e5\3\2\2\2\u00a6\u06f5\3\2\2\2\u00a8\u070b")
        buf.write("\3\2\2\2\u00aa\u070d\3\2\2\2\u00ac\u072a\3\2\2\2\u00ae")
        buf.write("\u072c\3\2\2\2\u00b0\u0756\3\2\2\2\u00b2\u0759\3\2\2\2")
        buf.write("\u00b4\u077e\3\2\2\2\u00b6\u0785\3\2\2\2\u00b8\u078a\3")
        buf.write("\2\2\2\u00ba\u078e\3\2\2\2\u00bc\u0790\3\2\2\2\u00be\u07a9")
        buf.write("\3\2\2\2\u00c0\u07b2\3\2\2\2\u00c2\u07cb\3\2\2\2\u00c4")
        buf.write("\u07cd\3\2\2\2\u00c6\u07d8\3\2\2\2\u00c8\u080d\3\2\2\2")
        buf.write("\u00ca\u080f\3\2\2\2\u00cc\u082d\3\2\2\2\u00ce\u082f\3")
        buf.write("\2\2\2\u00d0\u0839\3\2\2\2\u00d2\u083b\3\2\2\2\u00d4\u083f")
        buf.write("\3\2\2\2\u00d6\u0864\3\2\2\2\u00d8\u086b\3\2\2\2\u00da")
        buf.write("\u086d\3\2\2\2\u00dc\u086f\3\2\2\2\u00de\u087e\3\2\2\2")
        buf.write("\u00e0\u088a\3\2\2\2\u00e2\u088e\3\2\2\2\u00e4\u0895\3")
        buf.write("\2\2\2\u00e6\u0897\3\2\2\2\u00e8\u08d9\3\2\2\2\u00ea\u08db")
        buf.write("\3\2\2\2\u00ec\u08f1\3\2\2\2\u00ee\u0903\3\2\2\2\u00f0")
        buf.write("\u0905\3\2\2\2\u00f2\u090d\3\2\2\2\u00f4\u0911\3\2\2\2")
        buf.write("\u00f6\u0929\3\2\2\2\u00f8\u0937\3\2\2\2\u00fa\u0939\3")
        buf.write("\2\2\2\u00fc\u094f\3\2\2\2\u00fe\u0952\3\2\2\2\u0100\u0986")
        buf.write("\3\2\2\2\u0102\u0104\5d\63\2\u0103\u0102\3\2\2\2\u0103")
        buf.write("\u0104\3\2\2\2\u0104\u0105\3\2\2\2\u0105\u0106\7\2\2\3")
        buf.write("\u0106\3\3\2\2\2\u0107\u010e\5\f\7\2\u0108\u010e\5\16")
        buf.write("\b\2\u0109\u010a\5\f\7\2\u010a\u010b\7u\2\2\u010b\u010c")
        buf.write("\5\16\b\2\u010c\u010e\3\2\2\2\u010d\u0107\3\2\2\2\u010d")
        buf.write("\u0108\3\2\2\2\u010d\u0109\3\2\2\2\u010e\5\3\2\2\2\u010f")
        buf.write("\u0117\5\b\5\2\u0110\u0112\5\n\6\2\u0111\u0113\7?\2\2")
        buf.write("\u0112\u0111\3\2\2\2\u0112\u0113\3\2\2\2\u0113\u0114\3")
        buf.write("\2\2\2\u0114\u0115\5\b\5\2\u0115\u0117\3\2\2\2\u0116\u010f")
        buf.write("\3\2\2\2\u0116\u0110\3\2\2\2\u0117\7\3\2\2\2\u0118\u013b")
        buf.write("\7\177\2\2\u0119\u011a\7/\2\2\u011a\u013b\5\u0100\u0081")
        buf.write("\2\u011b\u011c\7/\2\2\u011c\u011e\5p9\2\u011d\u011f\5")
        buf.write("\u00dco\2\u011e\u011d\3\2\2\2\u011e\u011f\3\2\2\2\u011f")
        buf.write("\u013b\3\2\2\2\u0120\u013b\5\u00e4s\2\u0121\u0122\7^\2")
        buf.write("\2\u0122\u013b\5\u00c0a\2\u0123\u0124\7^\2\2\u0124\u013b")
        buf.write("\5x=\2\u0125\u0126\7\177\2\2\u0126\u0128\7a\2\2\u0127")
        buf.write("\u0129\5\u00eav\2\u0128\u0127\3\2\2\2\u0128\u0129\3\2")
        buf.write("\2\2\u0129\u012a\3\2\2\2\u012a\u013b\7b\2\2\u012b\u012c")
        buf.write("\7/\2\2\u012c\u012d\5\u0100\u0081\2\u012d\u012f\7a\2\2")
        buf.write("\u012e\u0130\5\u00eav\2\u012f\u012e\3\2\2\2\u012f\u0130")
        buf.write("\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0132\7b\2\2\u0132")
        buf.write("\u013b\3\2\2\2\u0133\u0134\5\u00e4s\2\u0134\u0136\7a\2")
        buf.write("\2\u0135\u0137\5\u00eav\2\u0136\u0135\3\2\2\2\u0136\u0137")
        buf.write("\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u0139\7b\2\2\u0139")
        buf.write("\u013b\3\2\2\2\u013a\u0118\3\2\2\2\u013a\u0119\3\2\2\2")
        buf.write("\u013a\u011b\3\2\2\2\u013a\u0120\3\2\2\2\u013a\u0121\3")
        buf.write("\2\2\2\u013a\u0123\3\2\2\2\u013a\u0125\3\2\2\2\u013a\u012b")
        buf.write("\3\2\2\2\u013a\u0133\3\2\2\2\u013b\t\3\2\2\2\u013c\u013d")
        buf.write("\b\6\1\2\u013d\u0147\7z\2\2\u013e\u013f\5v<\2\u013f\u0140")
        buf.write("\7z\2\2\u0140\u0147\3\2\2\2\u0141\u0142\7\177\2\2\u0142")
        buf.write("\u0147\7z\2\2\u0143\u0144\5x=\2\u0144\u0145\7z\2\2\u0145")
        buf.write("\u0147\3\2\2\2\u0146\u013c\3\2\2\2\u0146\u013e\3\2\2\2")
        buf.write("\u0146\u0141\3\2\2\2\u0146\u0143\3\2\2\2\u0147\u0158\3")
        buf.write("\2\2\2\u0148\u0149\f\4\2\2\u0149\u014a\7\177\2\2\u014a")
        buf.write("\u0157\7z\2\2\u014b\u014d\f\3\2\2\u014c\u014e\7?\2\2\u014d")
        buf.write("\u014c\3\2\2\2\u014d\u014e\3\2\2\2\u014e\u014f\3\2\2\2")
        buf.write("\u014f\u0150\7\177\2\2\u0150\u0152\7a\2\2\u0151\u0153")
        buf.write("\5\u00eav\2\u0152\u0151\3\2\2\2\u0152\u0153\3\2\2\2\u0153")
        buf.write("\u0154\3\2\2\2\u0154\u0155\7b\2\2\u0155\u0157\7z\2\2\u0156")
        buf.write("\u0148\3\2\2\2\u0156\u014b\3\2\2\2\u0157\u015a\3\2\2\2")
        buf.write("\u0158\u0156\3\2\2\2\u0158\u0159\3\2\2\2\u0159\13\3\2")
        buf.write("\2\2\u015a\u0158\3\2\2\2\u015b\u015c\t\2\2\2\u015c\r\3")
        buf.write("\2\2\2\u015d\u015e\b\b\1\2\u015e\u0160\5\20\t\2\u015f")
        buf.write("\u0161\7~\2\2\u0160\u015f\3\2\2\2\u0160\u0161\3\2\2\2")
        buf.write("\u0161\u016a\3\2\2\2\u0162\u0163\f\3\2\2\u0163\u0164\7")
        buf.write("u\2\2\u0164\u0166\5\20\t\2\u0165\u0167\7~\2\2\u0166\u0165")
        buf.write("\3\2\2\2\u0166\u0167\3\2\2\2\u0167\u0169\3\2\2\2\u0168")
        buf.write("\u0162\3\2\2\2\u0169\u016c\3\2\2\2\u016a\u0168\3\2\2\2")
        buf.write("\u016a\u016b\3\2\2\2\u016b\17\3\2\2\2\u016c\u016a\3\2")
        buf.write("\2\2\u016d\u0177\7\177\2\2\u016e\u016f\7\\\2\2\u016f\u0177")
        buf.write("\7\177\2\2\u0170\u0177\7@\2\2\u0171\u0172\7\177\2\2\u0172")
        buf.write("\u0177\5\u00b6\\\2\u0173\u0174\7\\\2\2\u0174\u0175\7\177")
        buf.write("\2\2\u0175\u0177\5\u00b6\\\2\u0176\u016d\3\2\2\2\u0176")
        buf.write("\u016e\3\2\2\2\u0176\u0170\3\2\2\2\u0176\u0171\3\2\2\2")
        buf.write("\u0176\u0173\3\2\2\2\u0177\21\3\2\2\2\u0178\u0179\7P\2")
        buf.write("\2\u0179\u017a\5\u00acW\2\u017a\u017c\7Q\2\2\u017b\u017d")
        buf.write("\7*\2\2\u017c\u017b\3\2\2\2\u017c\u017d\3\2\2\2\u017d")
        buf.write("\u017f\3\2\2\2\u017e\u0180\5\u00f8}\2\u017f\u017e\3\2")
        buf.write("\2\2\u017f\u0180\3\2\2\2\u0180\u0182\3\2\2\2\u0181\u0183")
        buf.write("\5\u0082B\2\u0182\u0181\3\2\2\2\u0182\u0183\3\2\2\2\u0183")
        buf.write("\u0189\3\2\2\2\u0184\u0185\7w\2\2\u0185\u0187\5r:\2\u0186")
        buf.write("\u0188\5\u00a2R\2\u0187\u0186\3\2\2\2\u0187\u0188\3\2")
        buf.write("\2\2\u0188\u018a\3\2\2\2\u0189\u0184\3\2\2\2\u0189\u018a")
        buf.write("\3\2\2\2\u018a\23\3\2\2\2\u018b\u018c\b\13\1\2\u018c\u01f8")
        buf.write("\7\u0080\2\2\u018d\u01f8\7\u0086\2\2\u018e\u01f8\7\u0087")
        buf.write("\2\2\u018f\u01f8\7\u0088\2\2\u0190\u01f8\7 \2\2\u0191")
        buf.write("\u01f8\7C\2\2\u0192\u01f8\7.\2\2\u0193\u01f8\7\u0089\2")
        buf.write("\2\u0194\u01f8\7\u008a\2\2\u0195\u01f8\7\u008b\2\2\u0196")
        buf.write("\u01f8\7\u008c\2\2\u0197\u01f8\7@\2\2\u0198\u0199\7P\2")
        buf.write("\2\u0199\u019a\5H%\2\u019a\u019b\7Q\2\2\u019b\u01f8\3")
        buf.write("\2\2\2\u019c\u01f8\5\6\4\2\u019d\u019f\7R\2\2\u019e\u01a0")
        buf.write("\5\4\3\2\u019f\u019e\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0")
        buf.write("\u01a1\3\2\2\2\u01a1\u01a3\7S\2\2\u01a2\u01a4\5\22\n\2")
        buf.write("\u01a3\u01a2\3\2\2\2\u01a3\u01a4\3\2\2\2\u01a4\u01a5\3")
        buf.write("\2\2\2\u01a5\u01a7\7T\2\2\u01a6\u01a8\5R*\2\u01a7\u01a6")
        buf.write("\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8\u01a9\3\2\2\2\u01a9")
        buf.write("\u01f8\7U\2\2\u01aa\u01ab\5t;\2\u01ab\u01ad\7P\2\2\u01ac")
        buf.write("\u01ae\5\u00bc_\2\u01ad\u01ac\3\2\2\2\u01ad\u01ae\3\2")
        buf.write("\2\2\u01ae\u01af\3\2\2\2\u01af\u01b0\7Q\2\2\u01b0\u01f8")
        buf.write("\3\2\2\2\u01b1\u01b2\5\u00eex\2\u01b2\u01b4\7P\2\2\u01b3")
        buf.write("\u01b5\5\u00bc_\2\u01b4\u01b3\3\2\2\2\u01b4\u01b5\3\2")
        buf.write("\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01b7\7Q\2\2\u01b7\u01f8")
        buf.write("\3\2\2\2\u01b8\u01b9\5t;\2\u01b9\u01ba\5\u00be`\2\u01ba")
        buf.write("\u01f8\3\2\2\2\u01bb\u01bc\5\u00eex\2\u01bc\u01bd\5\u00be")
        buf.write("`\2\u01bd\u01f8\3\2\2\2\u01be\u01bf\7\32\2\2\u01bf\u01c0")
        buf.write("\7a\2\2\u01c0\u01c2\5p9\2\u01c1\u01c3\5\u00a2R\2\u01c2")
        buf.write("\u01c1\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c4\3\2\2\2")
        buf.write("\u01c4\u01c5\7b\2\2\u01c5\u01c6\7P\2\2\u01c6\u01c7\5H")
        buf.write("%\2\u01c7\u01c8\7Q\2\2\u01c8\u01f8\3\2\2\2\u01c9\u01ca")
        buf.write("\7<\2\2\u01ca\u01cb\7a\2\2\u01cb\u01cd\5p9\2\u01cc\u01ce")
        buf.write("\5\u00a2R\2\u01cd\u01cc\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce")
        buf.write("\u01cf\3\2\2\2\u01cf\u01d0\7b\2\2\u01d0\u01d1\7P\2\2\u01d1")
        buf.write("\u01d2\5H%\2\u01d2\u01d3\7Q\2\2\u01d3\u01f8\3\2\2\2\u01d4")
        buf.write("\u01d5\7\65\2\2\u01d5\u01d6\7a\2\2\u01d6\u01d8\5p9\2\u01d7")
        buf.write("\u01d9\5\u00a2R\2\u01d8\u01d7\3\2\2\2\u01d8\u01d9\3\2")
        buf.write("\2\2\u01d9\u01da\3\2\2\2\u01da\u01db\7b\2\2\u01db\u01dc")
        buf.write("\7P\2\2\u01dc\u01dd\5H%\2\u01dd\u01de\7Q\2\2\u01de\u01f8")
        buf.write("\3\2\2\2\u01df\u01e0\7\23\2\2\u01e0\u01e1\7a\2\2\u01e1")
        buf.write("\u01e3\5p9\2\u01e2\u01e4\5\u00a2R\2\u01e3\u01e2\3\2\2")
        buf.write("\2\u01e3\u01e4\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5\u01e6")
        buf.write("\7b\2\2\u01e6\u01e7\7P\2\2\u01e7\u01e8\5H%\2\u01e8\u01e9")
        buf.write("\7Q\2\2\u01e9\u01f8\3\2\2\2\u01ea\u01eb\7F\2\2\u01eb\u01ec")
        buf.write("\7P\2\2\u01ec\u01ed\5H%\2\u01ed\u01ee\7Q\2\2\u01ee\u01f8")
        buf.write("\3\2\2\2\u01ef\u01f0\7F\2\2\u01f0\u01f1\7P\2\2\u01f1\u01f3")
        buf.write("\5p9\2\u01f2\u01f4\5\u00a2R\2\u01f3\u01f2\3\2\2\2\u01f3")
        buf.write("\u01f4\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f6\7Q\2\2")
        buf.write("\u01f6\u01f8\3\2\2\2\u01f7\u018b\3\2\2\2\u01f7\u018d\3")
        buf.write("\2\2\2\u01f7\u018e\3\2\2\2\u01f7\u018f\3\2\2\2\u01f7\u0190")
        buf.write("\3\2\2\2\u01f7\u0191\3\2\2\2\u01f7\u0192\3\2\2\2\u01f7")
        buf.write("\u0193\3\2\2\2\u01f7\u0194\3\2\2\2\u01f7\u0195\3\2\2\2")
        buf.write("\u01f7\u0196\3\2\2\2\u01f7\u0197\3\2\2\2\u01f7\u0198\3")
        buf.write("\2\2\2\u01f7\u019c\3\2\2\2\u01f7\u019d\3\2\2\2\u01f7\u01aa")
        buf.write("\3\2\2\2\u01f7\u01b1\3\2\2\2\u01f7\u01b8\3\2\2\2\u01f7")
        buf.write("\u01bb\3\2\2\2\u01f7\u01be\3\2\2\2\u01f7\u01c9\3\2\2\2")
        buf.write("\u01f7\u01d4\3\2\2\2\u01f7\u01df\3\2\2\2\u01f7\u01ea\3")
        buf.write("\2\2\2\u01f7\u01ef\3\2\2\2\u01f8\u0221\3\2\2\2\u01f9\u01fa")
        buf.write("\f\25\2\2\u01fa\u01fb\7R\2\2\u01fb\u01fc\5H%\2\u01fc\u01fd")
        buf.write("\7S\2\2\u01fd\u0220\3\2\2\2\u01fe\u01ff\f\24\2\2\u01ff")
        buf.write("\u0200\7R\2\2\u0200\u0201\5\u00be`\2\u0201\u0202\7S\2")
        buf.write("\2\u0202\u0220\3\2\2\2\u0203\u0204\f\23\2\2\u0204\u0206")
        buf.write("\7P\2\2\u0205\u0207\5\u00bc_\2\u0206\u0205\3\2\2\2\u0206")
        buf.write("\u0207\3\2\2\2\u0207\u0208\3\2\2\2\u0208\u0220\7Q\2\2")
        buf.write("\u0209\u020a\f\16\2\2\u020a\u020c\7|\2\2\u020b\u020d\7")
        buf.write("?\2\2\u020c\u020b\3\2\2\2\u020c\u020d\3\2\2\2\u020d\u020e")
        buf.write("\3\2\2\2\u020e\u0220\5\6\4\2\u020f\u0210\f\r\2\2\u0210")
        buf.write("\u0212\7w\2\2\u0211\u0213\7?\2\2\u0212\u0211\3\2\2\2\u0212")
        buf.write("\u0213\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0220\5\6\4\2")
        buf.write("\u0215\u0216\f\f\2\2\u0216\u0217\7|\2\2\u0217\u0220\5")
        buf.write("\26\f\2\u0218\u0219\f\13\2\2\u0219\u021a\7w\2\2\u021a")
        buf.write("\u0220\5\26\f\2\u021b\u021c\f\n\2\2\u021c\u0220\7s\2\2")
        buf.write("\u021d\u021e\f\t\2\2\u021e\u0220\7t\2\2\u021f\u01f9\3")
        buf.write("\2\2\2\u021f\u01fe\3\2\2\2\u021f\u0203\3\2\2\2\u021f\u0209")
        buf.write("\3\2\2\2\u021f\u020f\3\2\2\2\u021f\u0215\3\2\2\2\u021f")
        buf.write("\u0218\3\2\2\2\u021f\u021b\3\2\2\2\u021f\u021d\3\2\2\2")
        buf.write("\u0220\u0223\3\2\2\2\u0221\u021f\3\2\2\2\u0221\u0222\3")
        buf.write("\2\2\2\u0222\25\3\2\2\2\u0223\u0221\3\2\2\2\u0224\u0226")
        buf.write("\5\n\6\2\u0225\u0224\3\2\2\2\u0225\u0226\3\2\2\2\u0226")
        buf.write("\u0227\3\2\2\2\u0227\u0228\5v<\2\u0228\u0229\7z\2\2\u0229")
        buf.write("\u022a\7^\2\2\u022a\u022b\5v<\2\u022b\u0240\3\2\2\2\u022c")
        buf.write("\u022d\5\n\6\2\u022d\u022e\7?\2\2\u022e\u022f\7\177\2")
        buf.write("\2\u022f\u0231\7a\2\2\u0230\u0232\5\u00eav\2\u0231\u0230")
        buf.write("\3\2\2\2\u0231\u0232\3\2\2\2\u0232\u0233\3\2\2\2\u0233")
        buf.write("\u0234\7b\2\2\u0234\u0235\7z\2\2\u0235\u0236\7^\2\2\u0236")
        buf.write("\u0237\5v<\2\u0237\u0240\3\2\2\2\u0238\u023a\5\n\6\2\u0239")
        buf.write("\u0238\3\2\2\2\u0239\u023a\3\2\2\2\u023a\u023b\3\2\2\2")
        buf.write("\u023b\u023c\7^\2\2\u023c\u0240\5v<\2\u023d\u023e\7^\2")
        buf.write("\2\u023e\u0240\5x=\2\u023f\u0225\3\2\2\2\u023f\u022c\3")
        buf.write("\2\2\2\u023f\u0239\3\2\2\2\u023f\u023d\3\2\2\2\u0240\27")
        buf.write("\3\2\2\2\u0241\u0265\5\24\13\2\u0242\u0265\5\32\16\2\u0243")
        buf.write("\u0244\5\34\17\2\u0244\u0245\5(\25\2\u0245\u0265\3\2\2")
        buf.write("\2\u0246\u0247\79\2\2\u0247\u0265\5\30\r\2\u0248\u0249")
        buf.write("\79\2\2\u0249\u024a\7P\2\2\u024a\u024c\5p9\2\u024b\u024d")
        buf.write("\5\u00a2R\2\u024c\u024b\3\2\2\2\u024c\u024d\3\2\2\2\u024d")
        buf.write("\u024e\3\2\2\2\u024e\u024f\7Q\2\2\u024f\u0265\3\2\2\2")
        buf.write("\u0250\u0251\79\2\2\u0251\u0252\7~\2\2\u0252\u0253\7P")
        buf.write("\2\2\u0253\u0254\7\177\2\2\u0254\u0265\7Q\2\2\u0255\u0256")
        buf.write("\7\6\2\2\u0256\u0257\7P\2\2\u0257\u0259\5p9\2\u0258\u025a")
        buf.write("\5\u00a2R\2\u0259\u0258\3\2\2\2\u0259\u025a\3\2\2\2\u025a")
        buf.write("\u025b\3\2\2\2\u025b\u025c\7Q\2\2\u025c\u0265\3\2\2\2")
        buf.write("\u025d\u025e\7-\2\2\u025e\u025f\7P\2\2\u025f\u0260\5H")
        buf.write("%\2\u0260\u0261\7Q\2\2\u0261\u0265\3\2\2\2\u0262\u0265")
        buf.write("\5\36\20\2\u0263\u0265\5&\24\2\u0264\u0241\3\2\2\2\u0264")
        buf.write("\u0242\3\2\2\2\u0264\u0243\3\2\2\2\u0264\u0246\3\2\2\2")
        buf.write("\u0264\u0248\3\2\2\2\u0264\u0250\3\2\2\2\u0264\u0255\3")
        buf.write("\2\2\2\u0264\u025d\3\2\2\2\u0264\u0262\3\2\2\2\u0264\u0263")
        buf.write("\3\2\2\2\u0265\31\3\2\2\2\u0266\u0267\7s\2\2\u0267\u026b")
        buf.write("\5(\25\2\u0268\u0269\7t\2\2\u0269\u026b\5(\25\2\u026a")
        buf.write("\u0266\3\2\2\2\u026a\u0268\3\2\2\2\u026b\33\3\2\2\2\u026c")
        buf.write("\u026d\t\3\2\2\u026d\35\3\2\2\2\u026e\u0270\7z\2\2\u026f")
        buf.write("\u026e\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u0271\3\2\2\2")
        buf.write("\u0271\u0276\7,\2\2\u0272\u0273\7P\2\2\u0273\u0274\5\u00bc")
        buf.write("_\2\u0274\u0275\7Q\2\2\u0275\u0277\3\2\2\2\u0276\u0272")
        buf.write("\3\2\2\2\u0276\u0277\3\2\2\2\u0277\u0278\3\2\2\2\u0278")
        buf.write("\u027a\5p9\2\u0279\u027b\5 \21\2\u027a\u0279\3\2\2\2\u027a")
        buf.write("\u027b\3\2\2\2\u027b\u027d\3\2\2\2\u027c\u027e\5$\23\2")
        buf.write("\u027d\u027c\3\2\2\2\u027d\u027e\3\2\2\2\u027e\u0293\3")
        buf.write("\2\2\2\u027f\u0281\7z\2\2\u0280\u027f\3\2\2\2\u0280\u0281")
        buf.write("\3\2\2\2\u0281\u0282\3\2\2\2\u0282\u0287\7,\2\2\u0283")
        buf.write("\u0284\7P\2\2\u0284\u0285\5\u00bc_\2\u0285\u0286\7Q\2")
        buf.write("\2\u0286\u0288\3\2\2\2\u0287\u0283\3\2\2\2\u0287\u0288")
        buf.write("\3\2\2\2\u0288\u0289\3\2\2\2\u0289\u028a\7P\2\2\u028a")
        buf.write("\u028c\5p9\2\u028b\u028d\5\u00a2R\2\u028c\u028b\3\2\2")
        buf.write("\2\u028c\u028d\3\2\2\2\u028d\u028e\3\2\2\2\u028e\u0290")
        buf.write("\7Q\2\2\u028f\u0291\5$\23\2\u0290\u028f\3\2\2\2\u0290")
        buf.write("\u0291\3\2\2\2\u0291\u0293\3\2\2\2\u0292\u026f\3\2\2\2")
        buf.write("\u0292\u0280\3\2\2\2\u0293\37\3\2\2\2\u0294\u0296\5\u009a")
        buf.write("N\2\u0295\u0297\5 \21\2\u0296\u0295\3\2\2\2\u0296\u0297")
        buf.write("\3\2\2\2\u0297\u029a\3\2\2\2\u0298\u029a\5\"\22\2\u0299")
        buf.write("\u0294\3\2\2\2\u0299\u0298\3\2\2\2\u029a!\3\2\2\2\u029b")
        buf.write("\u029c\b\22\1\2\u029c\u029d\7R\2\2\u029d\u029e\5H%\2\u029e")
        buf.write("\u02a0\7S\2\2\u029f\u02a1\5\u0082B\2\u02a0\u029f\3\2\2")
        buf.write("\2\u02a0\u02a1\3\2\2\2\u02a1\u02ab\3\2\2\2\u02a2\u02a3")
        buf.write("\f\3\2\2\u02a3\u02a4\7R\2\2\u02a4\u02a5\5J&\2\u02a5\u02a7")
        buf.write("\7S\2\2\u02a6\u02a8\5\u0082B\2\u02a7\u02a6\3\2\2\2\u02a7")
        buf.write("\u02a8\3\2\2\2\u02a8\u02aa\3\2\2\2\u02a9\u02a2\3\2\2\2")
        buf.write("\u02aa\u02ad\3\2\2\2\u02ab\u02a9\3\2\2\2\u02ab\u02ac\3")
        buf.write("\2\2\2\u02ac#\3\2\2\2\u02ad\u02ab\3\2\2\2\u02ae\u02b0")
        buf.write("\7P\2\2\u02af\u02b1\5\u00bc_\2\u02b0\u02af\3\2\2\2\u02b0")
        buf.write("\u02b1\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b5\7Q\2\2")
        buf.write("\u02b3\u02b5\5\u00be`\2\u02b4\u02ae\3\2\2\2\u02b4\u02b3")
        buf.write("\3\2\2\2\u02b5%\3\2\2\2\u02b6\u02b8\7z\2\2\u02b7\u02b6")
        buf.write("\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9")
        buf.write("\u02ba\7\27\2\2\u02ba\u02c3\5(\25\2\u02bb\u02bd\7z\2\2")
        buf.write("\u02bc\u02bb\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd\u02be\3")
        buf.write("\2\2\2\u02be\u02bf\7\27\2\2\u02bf\u02c0\7R\2\2\u02c0\u02c1")
        buf.write("\7S\2\2\u02c1\u02c3\5(\25\2\u02c2\u02b7\3\2\2\2\u02c2")
        buf.write("\u02bc\3\2\2\2\u02c3\'\3\2\2\2\u02c4\u02ce\5\30\r\2\u02c5")
        buf.write("\u02c6\7P\2\2\u02c6\u02c8\5p9\2\u02c7\u02c9\5\u00a2R\2")
        buf.write("\u02c8\u02c7\3\2\2\2\u02c8\u02c9\3\2\2\2\u02c9\u02ca\3")
        buf.write("\2\2\2\u02ca\u02cb\7Q\2\2\u02cb\u02cc\5(\25\2\u02cc\u02ce")
        buf.write("\3\2\2\2\u02cd\u02c4\3\2\2\2\u02cd\u02c5\3\2\2\2\u02ce")
        buf.write(")\3\2\2\2\u02cf\u02d0\b\26\1\2\u02d0\u02d1\5(\25\2\u02d1")
        buf.write("\u02da\3\2\2\2\u02d2\u02d3\f\4\2\2\u02d3\u02d4\7}\2\2")
        buf.write("\u02d4\u02d9\5(\25\2\u02d5\u02d6\f\3\2\2\u02d6\u02d7\7")
        buf.write("v\2\2\u02d7\u02d9\5(\25\2\u02d8\u02d2\3\2\2\2\u02d8\u02d5")
        buf.write("\3\2\2\2\u02d9\u02dc\3\2\2\2\u02da\u02d8\3\2\2\2\u02da")
        buf.write("\u02db\3\2\2\2\u02db+\3\2\2\2\u02dc\u02da\3\2\2\2\u02dd")
        buf.write("\u02de\b\27\1\2\u02de\u02df\5*\26\2\u02df\u02eb\3\2\2")
        buf.write("\2\u02e0\u02e1\f\5\2\2\u02e1\u02e2\7X\2\2\u02e2\u02ea")
        buf.write("\5*\26\2\u02e3\u02e4\f\4\2\2\u02e4\u02e5\7Y\2\2\u02e5")
        buf.write("\u02ea\5*\26\2\u02e6\u02e7\f\3\2\2\u02e7\u02e8\7Z\2\2")
        buf.write("\u02e8\u02ea\5*\26\2\u02e9\u02e0\3\2\2\2\u02e9\u02e3\3")
        buf.write("\2\2\2\u02e9\u02e6\3\2\2\2\u02ea\u02ed\3\2\2\2\u02eb\u02e9")
        buf.write("\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec-\3\2\2\2\u02ed\u02eb")
        buf.write("\3\2\2\2\u02ee\u02ef\b\30\1\2\u02ef\u02f0\5,\27\2\u02f0")
        buf.write("\u02f9\3\2\2\2\u02f1\u02f2\f\4\2\2\u02f2\u02f3\7V\2\2")
        buf.write("\u02f3\u02f8\5,\27\2\u02f4\u02f5\f\3\2\2\u02f5\u02f6\7")
        buf.write("W\2\2\u02f6\u02f8\5,\27\2\u02f7\u02f1\3\2\2\2\u02f7\u02f4")
        buf.write("\3\2\2\2\u02f8\u02fb\3\2\2\2\u02f9\u02f7\3\2\2\2\u02f9")
        buf.write("\u02fa\3\2\2\2\u02fa/\3\2\2\2\u02fb\u02f9\3\2\2\2\u02fc")
        buf.write("\u02fd\b\31\1\2\u02fd\u02fe\5.\30\2\u02fe\u0308\3\2\2")
        buf.write("\2\u02ff\u0300\f\4\2\2\u0300\u0301\7k\2\2\u0301\u0307")
        buf.write("\5.\30\2\u0302\u0303\f\3\2\2\u0303\u0304\5\u00fc\177\2")
        buf.write("\u0304\u0305\5.\30\2\u0305\u0307\3\2\2\2\u0306\u02ff\3")
        buf.write("\2\2\2\u0306\u0302\3\2\2\2\u0307\u030a\3\2\2\2\u0308\u0306")
        buf.write("\3\2\2\2\u0308\u0309\3\2\2\2\u0309\61\3\2\2\2\u030a\u0308")
        buf.write("\3\2\2\2\u030b\u030c\b\32\1\2\u030c\u030d\5\60\31\2\u030d")
        buf.write("\u031c\3\2\2\2\u030e\u030f\f\6\2\2\u030f\u0310\7a\2\2")
        buf.write("\u0310\u031b\5\60\31\2\u0311\u0312\f\5\2\2\u0312\u0313")
        buf.write("\7b\2\2\u0313\u031b\5\60\31\2\u0314\u0315\f\4\2\2\u0315")
        buf.write("\u0316\7o\2\2\u0316\u031b\5\60\31\2\u0317\u0318\f\3\2")
        buf.write("\2\u0318\u0319\7p\2\2\u0319\u031b\5\60\31\2\u031a\u030e")
        buf.write("\3\2\2\2\u031a\u0311\3\2\2\2\u031a\u0314\3\2\2\2\u031a")
        buf.write("\u0317\3\2\2\2\u031b\u031e\3\2\2\2\u031c\u031a\3\2\2\2")
        buf.write("\u031c\u031d\3\2\2\2\u031d\63\3\2\2\2\u031e\u031c\3\2")
        buf.write("\2\2\u031f\u0320\b\33\1\2\u0320\u0321\5\62\32\2\u0321")
        buf.write("\u032a\3\2\2\2\u0322\u0323\f\4\2\2\u0323\u0324\7m\2\2")
        buf.write("\u0324\u0329\5\62\32\2\u0325\u0326\f\3\2\2\u0326\u0327")
        buf.write("\7n\2\2\u0327\u0329\5\62\32\2\u0328\u0322\3\2\2\2\u0328")
        buf.write("\u0325\3\2\2\2\u0329\u032c\3\2\2\2\u032a\u0328\3\2\2\2")
        buf.write("\u032a\u032b\3\2\2\2\u032b\65\3\2\2\2\u032c\u032a\3\2")
        buf.write("\2\2\u032d\u032e\b\34\1\2\u032e\u032f\5\64\33\2\u032f")
        buf.write("\u0335\3\2\2\2\u0330\u0331\f\3\2\2\u0331\u0332\7\\\2\2")
        buf.write("\u0332\u0334\5\64\33\2\u0333\u0330\3\2\2\2\u0334\u0337")
        buf.write("\3\2\2\2\u0335\u0333\3\2\2\2\u0335\u0336\3\2\2\2\u0336")
        buf.write("\67\3\2\2\2\u0337\u0335\3\2\2\2\u0338\u0339\b\35\1\2\u0339")
        buf.write("\u033a\5\66\34\2\u033a\u0340\3\2\2\2\u033b\u033c\f\3\2")
        buf.write("\2\u033c\u033d\7[\2\2\u033d\u033f\5\66\34\2\u033e\u033b")
        buf.write("\3\2\2\2\u033f\u0342\3\2\2\2\u0340\u033e\3\2\2\2\u0340")
        buf.write("\u0341\3\2\2\2\u03419\3\2\2\2\u0342\u0340\3\2\2\2\u0343")
        buf.write("\u0344\b\36\1\2\u0344\u0345\58\35\2\u0345\u034b\3\2\2")
        buf.write("\2\u0346\u0347\f\3\2\2\u0347\u0348\7]\2\2\u0348\u034a")
        buf.write("\58\35\2\u0349\u0346\3\2\2\2\u034a\u034d\3\2\2\2\u034b")
        buf.write("\u0349\3\2\2\2\u034b\u034c\3\2\2\2\u034c;\3\2\2\2\u034d")
        buf.write("\u034b\3\2\2\2\u034e\u034f\b\37\1\2\u034f\u0350\5:\36")
        buf.write("\2\u0350\u0356\3\2\2\2\u0351\u0352\f\3\2\2\u0352\u0353")
        buf.write("\7q\2\2\u0353\u0355\5:\36\2\u0354\u0351\3\2\2\2\u0355")
        buf.write("\u0358\3\2\2\2\u0356\u0354\3\2\2\2\u0356\u0357\3\2\2\2")
        buf.write("\u0357=\3\2\2\2\u0358\u0356\3\2\2\2\u0359\u035a\b \1\2")
        buf.write("\u035a\u035b\5<\37\2\u035b\u0361\3\2\2\2\u035c\u035d\f")
        buf.write("\3\2\2\u035d\u035e\7r\2\2\u035e\u0360\5<\37\2\u035f\u035c")
        buf.write("\3\2\2\2\u0360\u0363\3\2\2\2\u0361\u035f\3\2\2\2\u0361")
        buf.write("\u0362\3\2\2\2\u0362?\3\2\2\2\u0363\u0361\3\2\2\2\u0364")
        buf.write("\u0365\5> \2\u0365\u0366\7x\2\2\u0366\u0367\5H%\2\u0367")
        buf.write("\u0368\7y\2\2\u0368\u0369\5D#\2\u0369A\3\2\2\2\u036a\u036b")
        buf.write("\5> \2\u036b\u036c\7x\2\2\u036c\u036d\7y\2\2\u036d\u036e")
        buf.write("\5D#\2\u036eC\3\2\2\2\u036f\u037b\5> \2\u0370\u037b\5")
        buf.write("@!\2\u0371\u037b\5B\"\2\u0372\u0373\5> \2\u0373\u0374")
        buf.write("\5F$\2\u0374\u0375\5\u00ba^\2\u0375\u037b\3\2\2\2\u0376")
        buf.write("\u0378\7B\2\2\u0377\u0379\5D#\2\u0378\u0377\3\2\2\2\u0378")
        buf.write("\u0379\3\2\2\2\u0379\u037b\3\2\2\2\u037a\u036f\3\2\2\2")
        buf.write("\u037a\u0370\3\2\2\2\u037a\u0371\3\2\2\2\u037a\u0372\3")
        buf.write("\2\2\2\u037a\u0376\3\2\2\2\u037bE\3\2\2\2\u037c\u0388")
        buf.write("\7`\2\2\u037d\u0388\7e\2\2\u037e\u0388\7f\2\2\u037f\u0388")
        buf.write("\7g\2\2\u0380\u0388\7c\2\2\u0381\u0388\7d\2\2\u0382\u0388")
        buf.write("\5\u00fe\u0080\2\u0383\u0388\7l\2\2\u0384\u0388\7i\2\2")
        buf.write("\u0385\u0388\7h\2\2\u0386\u0388\7j\2\2\u0387\u037c\3\2")
        buf.write("\2\2\u0387\u037d\3\2\2\2\u0387\u037e\3\2\2\2\u0387\u037f")
        buf.write("\3\2\2\2\u0387\u0380\3\2\2\2\u0387\u0381\3\2\2\2\u0387")
        buf.write("\u0382\3\2\2\2\u0387\u0383\3\2\2\2\u0387\u0384\3\2\2\2")
        buf.write("\u0387\u0385\3\2\2\2\u0387\u0386\3\2\2\2\u0388G\3\2\2")
        buf.write("\2\u0389\u038a\b%\1\2\u038a\u038b\5D#\2\u038b\u0391\3")
        buf.write("\2\2\2\u038c\u038d\f\3\2\2\u038d\u038e\7u\2\2\u038e\u0390")
        buf.write("\5D#\2\u038f\u038c\3\2\2\2\u0390\u0393\3\2\2\2\u0391\u038f")
        buf.write("\3\2\2\2\u0391\u0392\3\2\2\2\u0392I\3\2\2\2\u0393\u0391")
        buf.write("\3\2\2\2\u0394\u0398\5> \2\u0395\u0398\5@!\2\u0396\u0398")
        buf.write("\5B\"\2\u0397\u0394\3\2\2\2\u0397\u0395\3\2\2\2\u0397")
        buf.write("\u0396\3\2\2\2\u0398K\3\2\2\2\u0399\u039b\5\u0082B\2\u039a")
        buf.write("\u0399\3\2\2\2\u039a\u039b\3\2\2\2\u039b\u039c\3\2\2\2")
        buf.write("\u039c\u039d\7\177\2\2\u039d\u039e\7y\2\2\u039e\u0418")
        buf.write("\5L\'\2\u039f\u03a1\5\u0082B\2\u03a0\u039f\3\2\2\2\u03a0")
        buf.write("\u03a1\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u0418\5N(\2\u03a3")
        buf.write("\u03a5\5\u0082B\2\u03a4\u03a3\3\2\2\2\u03a4\u03a5\3\2")
        buf.write("\2\2\u03a5\u03a6\3\2\2\2\u03a6\u0418\5P)\2\u03a7\u03a9")
        buf.write("\5\u0082B\2\u03a8\u03a7\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9")
        buf.write("\u03ab\3\2\2\2\u03aa\u03ac\5H%\2\u03ab\u03aa\3\2\2\2\u03ab")
        buf.write("\u03ac\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\u0418\7{\2\2")
        buf.write("\u03ae\u03b0\5\u0082B\2\u03af\u03ae\3\2\2\2\u03af\u03b0")
        buf.write("\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03b3\7T\2\2\u03b2")
        buf.write("\u03b4\5R*\2\u03b3\u03b2\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4")
        buf.write("\u03b5\3\2\2\2\u03b5\u0418\7U\2\2\u03b6\u03b8\5\u0082")
        buf.write("B\2\u03b7\u03b6\3\2\2\2\u03b7\u03b8\3\2\2\2\u03b8\u03b9")
        buf.write("\3\2\2\2\u03b9\u0418\5T+\2\u03ba\u03bc\5\u0082B\2\u03bb")
        buf.write("\u03ba\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03bd\3\2\2\2")
        buf.write("\u03bd\u0418\5Z.\2\u03be\u03c0\5\u0082B\2\u03bf\u03be")
        buf.write("\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1")
        buf.write("\u0418\5`\61\2\u03c2\u03c4\5\u0082B\2\u03c3\u03c2\3\2")
        buf.write("\2\2\u03c3\u03c4\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03c6")
        buf.write("\7J\2\2\u03c6\u03c8\7+\2\2\u03c7\u03c9\5\n\6\2\u03c8\u03c7")
        buf.write("\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03ca\3\2\2\2\u03ca")
        buf.write("\u03cb\7\177\2\2\u03cb\u0418\7{\2\2\u03cc\u03ce\5\u0082")
        buf.write("B\2\u03cd\u03cf\5j\66\2\u03ce\u03cd\3\2\2\2\u03ce\u03cf")
        buf.write("\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0\u03d1\5\u0090I\2\u03d1")
        buf.write("\u03d2\7{\2\2\u03d2\u0418\3\2\2\2\u03d3\u03d5\5\u0082")
        buf.write("B\2\u03d4\u03d3\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d6")
        buf.write("\3\2\2\2\u03d6\u0418\5\u00f0y\2\u03d7\u03d9\5j\66\2\u03d8")
        buf.write("\u03d7\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03db\3\2\2\2")
        buf.write("\u03da\u03dc\5\u0090I\2\u03db\u03da\3\2\2\2\u03db\u03dc")
        buf.write("\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd\u0418\7{\2\2\u03de")
        buf.write("\u03df\7\7\2\2\u03df\u03e0\7P\2\2\u03e0\u03e1\7\u0088")
        buf.write("\2\2\u03e1\u03e2\7Q\2\2\u03e2\u0418\7{\2\2\u03e3\u03e4")
        buf.write("\7+\2\2\u03e4\u03e5\7\177\2\2\u03e5\u03e7\7`\2\2\u03e6")
        buf.write("\u03e8\5\n\6\2\u03e7\u03e6\3\2\2\2\u03e7\u03e8\3\2\2\2")
        buf.write("\u03e8\u03e9\3\2\2\2\u03e9\u03ea\7\177\2\2\u03ea\u0418")
        buf.write("\7{\2\2\u03eb\u03ed\7J\2\2\u03ec\u03ee\7G\2\2\u03ed\u03ec")
        buf.write("\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef")
        buf.write("\u03f0\5\n\6\2\u03f0\u03f1\5\b\5\2\u03f1\u03f2\7{\2\2")
        buf.write("\u03f2\u0418\3\2\2\2\u03f3\u03f4\7J\2\2\u03f4\u03f5\7")
        buf.write("z\2\2\u03f5\u03f6\5\b\5\2\u03f6\u03f7\7{\2\2\u03f7\u0418")
        buf.write("\3\2\2\2\u03f8\u03f9\7J\2\2\u03f9\u03fb\7\177\2\2\u03fa")
        buf.write("\u03fc\5\u0082B\2\u03fb\u03fa\3\2\2\2\u03fb\u03fc\3\2")
        buf.write("\2\2\u03fc\u03fd\3\2\2\2\u03fd\u03fe\7`\2\2\u03fe\u0400")
        buf.write("\5p9\2\u03ff\u0401\5\u00a2R\2\u0400\u03ff\3\2\2\2\u0400")
        buf.write("\u0401\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u0403\7{\2\2")
        buf.write("\u0403\u0418\3\2\2\2\u0404\u0405\7;\2\2\u0405\u0406\7")
        buf.write("P\2\2\u0406\u0407\5J&\2\u0407\u0408\7u\2\2\u0408\u0409")
        buf.write("\7\u0088\2\2\u0409\u040a\7Q\2\2\u040a\u040b\7{\2\2\u040b")
        buf.write("\u0418\3\2\2\2\u040c\u040e\5|?\2\u040d\u040f\5\u0082B")
        buf.write("\2\u040e\u040d\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u0410")
        buf.write("\3\2\2\2\u0410\u0413\7\177\2\2\u0411\u0412\7y\2\2\u0412")
        buf.write("\u0414\5p9\2\u0413\u0411\3\2\2\2\u0413\u0414\3\2\2\2\u0414")
        buf.write("\u0415\3\2\2\2\u0415\u0416\7{\2\2\u0416\u0418\3\2\2\2")
        buf.write("\u0417\u039a\3\2\2\2\u0417\u03a0\3\2\2\2\u0417\u03a4\3")
        buf.write("\2\2\2\u0417\u03a8\3\2\2\2\u0417\u03af\3\2\2\2\u0417\u03b7")
        buf.write("\3\2\2\2\u0417\u03bb\3\2\2\2\u0417\u03bf\3\2\2\2\u0417")
        buf.write("\u03c3\3\2\2\2\u0417\u03cc\3\2\2\2\u0417\u03d4\3\2\2\2")
        buf.write("\u0417\u03d8\3\2\2\2\u0417\u03de\3\2\2\2\u0417\u03e3\3")
        buf.write("\2\2\2\u0417\u03eb\3\2\2\2\u0417\u03f3\3\2\2\2\u0417\u03f8")
        buf.write("\3\2\2\2\u0417\u0404\3\2\2\2\u0417\u040c\3\2\2\2\u0418")
        buf.write("M\3\2\2\2\u0419\u041a\7\13\2\2\u041a\u041b\5J&\2\u041b")
        buf.write("\u041c\7y\2\2\u041c\u041d\5L\'\2\u041dO\3\2\2\2\u041e")
        buf.write("\u041f\7\26\2\2\u041f\u0420\7y\2\2\u0420\u0421\5L\'\2")
        buf.write("\u0421Q\3\2\2\2\u0422\u0423\b*\1\2\u0423\u0424\5L\'\2")
        buf.write("\u0424\u0429\3\2\2\2\u0425\u0426\f\3\2\2\u0426\u0428\5")
        buf.write("L\'\2\u0427\u0425\3\2\2\2\u0428\u042b\3\2\2\2\u0429\u0427")
        buf.write("\3\2\2\2\u0429\u042a\3\2\2\2\u042aS\3\2\2\2\u042b\u0429")
        buf.write("\3\2\2\2\u042c\u042d\7&\2\2\u042d\u042e\7P\2\2\u042e\u042f")
        buf.write("\5X-\2\u042f\u0430\7Q\2\2\u0430\u0431\5L\'\2\u0431\u0440")
        buf.write("\3\2\2\2\u0432\u0433\7&\2\2\u0433\u0434\7P\2\2\u0434\u0435")
        buf.write("\5X-\2\u0435\u0436\7Q\2\2\u0436\u0437\5L\'\2\u0437\u0438")
        buf.write("\5V,\2\u0438\u0440\3\2\2\2\u0439\u043a\7>\2\2\u043a\u043b")
        buf.write("\7P\2\2\u043b\u043c\5X-\2\u043c\u043d\7Q\2\2\u043d\u043e")
        buf.write("\5L\'\2\u043e\u0440\3\2\2\2\u043f\u042c\3\2\2\2\u043f")
        buf.write("\u0432\3\2\2\2\u043f\u0439\3\2\2\2\u0440U\3\2\2\2\u0441")
        buf.write("\u0442\7\33\2\2\u0442\u0443\5L\'\2\u0443W\3\2\2\2\u0444")
        buf.write("\u0455\5H%\2\u0445\u0447\5\u0082B\2\u0446\u0445\3\2\2")
        buf.write("\2\u0446\u0447\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u0449")
        buf.write("\5j\66\2\u0449\u044a\5\u0092J\2\u044a\u044b\7`\2\2\u044b")
        buf.write("\u044c\5\u00ba^\2\u044c\u0455\3\2\2\2\u044d\u044f\5\u0082")
        buf.write("B\2\u044e\u044d\3\2\2\2\u044e\u044f\3\2\2\2\u044f\u0450")
        buf.write("\3\2\2\2\u0450\u0451\5j\66\2\u0451\u0452\5\u0092J\2\u0452")
        buf.write("\u0453\5\u00be`\2\u0453\u0455\3\2\2\2\u0454\u0444\3\2")
        buf.write("\2\2\u0454\u0446\3\2\2\2\u0454\u044e\3\2\2\2\u0455Y\3")
        buf.write("\2\2\2\u0456\u0457\7O\2\2\u0457\u0458\7P\2\2\u0458\u0459")
        buf.write("\5X-\2\u0459\u045a\7Q\2\2\u045a\u045b\5L\'\2\u045b\u047e")
        buf.write("\3\2\2\2\u045c\u045d\7\30\2\2\u045d\u045e\5L\'\2\u045e")
        buf.write("\u045f\7O\2\2\u045f\u0460\7P\2\2\u0460\u0461\5H%\2\u0461")
        buf.write("\u0462\7Q\2\2\u0462\u0463\7{\2\2\u0463\u047e\3\2\2\2\u0464")
        buf.write("\u0465\7#\2\2\u0465\u0466\7P\2\2\u0466\u0468\5\\/\2\u0467")
        buf.write("\u0469\5X-\2\u0468\u0467\3\2\2\2\u0468\u0469\3\2\2\2\u0469")
        buf.write("\u046a\3\2\2\2\u046a\u046c\7{\2\2\u046b\u046d\5H%\2\u046c")
        buf.write("\u046b\3\2\2\2\u046c\u046d\3\2\2\2\u046d\u046e\3\2\2\2")
        buf.write("\u046e\u046f\7Q\2\2\u046f\u0470\5L\'\2\u0470\u047e\3\2")
        buf.write("\2\2\u0471\u0472\7#\2\2\u0472\u0474\7P\2\2\u0473\u0475")
        buf.write("\5\u0082B\2\u0474\u0473\3\2\2\2\u0474\u0475\3\2\2\2\u0475")
        buf.write("\u0476\3\2\2\2\u0476\u0477\5j\66\2\u0477\u0478\5\u0092")
        buf.write("J\2\u0478\u0479\7y\2\2\u0479\u047a\5^\60\2\u047a\u047b")
        buf.write("\7Q\2\2\u047b\u047c\5L\'\2\u047c\u047e\3\2\2\2\u047d\u0456")
        buf.write("\3\2\2\2\u047d\u045c\3\2\2\2\u047d\u0464\3\2\2\2\u047d")
        buf.write("\u0471\3\2\2\2\u047e[\3\2\2\2\u047f\u0481\5H%\2\u0480")
        buf.write("\u047f\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u0482\3\2\2\2")
        buf.write("\u0482\u0492\7{\2\2\u0483\u0485\5j\66\2\u0484\u0483\3")
        buf.write("\2\2\2\u0484\u0485\3\2\2\2\u0485\u0487\3\2\2\2\u0486\u0488")
        buf.write("\5\u0090I\2\u0487\u0486\3\2\2\2\u0487\u0488\3\2\2\2\u0488")
        buf.write("\u0489\3\2\2\2\u0489\u0492\7{\2\2\u048a\u048c\5\u0082")
        buf.write("B\2\u048b\u048d\5j\66\2\u048c\u048b\3\2\2\2\u048c\u048d")
        buf.write("\3\2\2\2\u048d\u048e\3\2\2\2\u048e\u048f\5\u0090I\2\u048f")
        buf.write("\u0490\7{\2\2\u0490\u0492\3\2\2\2\u0491\u0480\3\2\2\2")
        buf.write("\u0491\u0484\3\2\2\2\u0491\u048a\3\2\2\2\u0492]\3\2\2")
        buf.write("\2\u0493\u0496\5H%\2\u0494\u0496\5\u00be`\2\u0495\u0493")
        buf.write("\3\2\2\2\u0495\u0494\3\2\2\2\u0496_\3\2\2\2\u0497\u0498")
        buf.write("\7\n\2\2\u0498\u04a6\7{\2\2\u0499\u049a\7\24\2\2\u049a")
        buf.write("\u04a6\7{\2\2\u049b\u049d\7\66\2\2\u049c\u049e\5H%\2\u049d")
        buf.write("\u049c\3\2\2\2\u049d\u049e\3\2\2\2\u049e\u049f\3\2\2\2")
        buf.write("\u049f\u04a6\7{\2\2\u04a0\u04a1\7\66\2\2\u04a1\u04a2\5")
        buf.write("\u00be`\2\u04a2\u04a3\7{\2\2\u04a3\u04a6\3\2\2\2\u04a4")
        buf.write("\u04a6\5b\62\2\u04a5\u0497\3\2\2\2\u04a5\u0499\3\2\2\2")
        buf.write("\u04a5\u049b\3\2\2\2\u04a5\u04a0\3\2\2\2\u04a5\u04a4\3")
        buf.write("\2\2\2\u04a6a\3\2\2\2\u04a7\u04a8\7%\2\2\u04a8\u04a9\7")
        buf.write("\177\2\2\u04a9\u04aa\7{\2\2\u04aac\3\2\2\2\u04ab\u04ac")
        buf.write("\b\63\1\2\u04ac\u04ad\5f\64\2\u04ad\u04b2\3\2\2\2\u04ae")
        buf.write("\u04af\f\3\2\2\u04af\u04b1\5f\64\2\u04b0\u04ae\3\2\2\2")
        buf.write("\u04b1\u04b4\3\2\2\2\u04b2\u04b0\3\2\2\2\u04b2\u04b3\3")
        buf.write("\2\2\2\u04b3e\3\2\2\2\u04b4\u04b2\3\2\2\2\u04b5\u04b7")
        buf.write("\5j\66\2\u04b6\u04b5\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7")
        buf.write("\u04b9\3\2\2\2\u04b8\u04ba\5\u0090I\2\u04b9\u04b8\3\2")
        buf.write("\2\2\u04b9\u04ba\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb\u0538")
        buf.write("\7{\2\2\u04bc\u04bd\5\u0082B\2\u04bd\u04be\7{\2\2\u04be")
        buf.write("\u0538\3\2\2\2\u04bf\u04c1\5\u0082B\2\u04c0\u04c2\5j\66")
        buf.write("\2\u04c1\u04c0\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2\u04c3")
        buf.write("\3\2\2\2\u04c3\u04c4\5\u0090I\2\u04c4\u04c5\7{\2\2\u04c5")
        buf.write("\u0538\3\2\2\2\u04c6\u04c8\5\u0082B\2\u04c7\u04c6\3\2")
        buf.write("\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04c9\3\2\2\2\u04c9\u04ca")
        buf.write("\7J\2\2\u04ca\u04cc\7+\2\2\u04cb\u04cd\5\n\6\2\u04cc\u04cb")
        buf.write("\3\2\2\2\u04cc\u04cd\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce")
        buf.write("\u04cf\7\177\2\2\u04cf\u0538\7{\2\2\u04d0\u04d1\7\7\2")
        buf.write("\2\u04d1\u04d2\7P\2\2\u04d2\u04d3\7\u0088\2\2\u04d3\u04d4")
        buf.write("\7Q\2\2\u04d4\u0538\7{\2\2\u04d5\u04d6\7+\2\2\u04d6\u04d7")
        buf.write("\7\177\2\2\u04d7\u04d9\7`\2\2\u04d8\u04da\5\n\6\2\u04d9")
        buf.write("\u04d8\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04db\3\2\2\2")
        buf.write("\u04db\u04dc\7\177\2\2\u04dc\u0538\7{\2\2\u04dd\u04de")
        buf.write("\7J\2\2\u04de\u04df\7z\2\2\u04df\u04e0\5\b\5\2\u04e0\u04e1")
        buf.write("\7{\2\2\u04e1\u0538\3\2\2\2\u04e2\u04e4\7J\2\2\u04e3\u04e5")
        buf.write("\7G\2\2\u04e4\u04e3\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5")
        buf.write("\u04e6\3\2\2\2\u04e6\u04e7\5\n\6\2\u04e7\u04e8\5\b\5\2")
        buf.write("\u04e8\u04e9\7{\2\2\u04e9\u0538\3\2\2\2\u04ea\u04eb\7")
        buf.write("J\2\2\u04eb\u04ed\7\177\2\2\u04ec\u04ee\5\u0082B\2\u04ed")
        buf.write("\u04ec\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee\u04ef\3\2\2\2")
        buf.write("\u04ef\u04f0\7`\2\2\u04f0\u04f2\5p9\2\u04f1\u04f3\5\u00a2")
        buf.write("R\2\u04f2\u04f1\3\2\2\2\u04f2\u04f3\3\2\2\2\u04f3\u04f4")
        buf.write("\3\2\2\2\u04f4\u04f5\7{\2\2\u04f5\u0538\3\2\2\2\u04f6")
        buf.write("\u04f7\7;\2\2\u04f7\u04f8\7P\2\2\u04f8\u04f9\5J&\2\u04f9")
        buf.write("\u04fa\7u\2\2\u04fa\u04fb\7\u0088\2\2\u04fb\u04fc\7Q\2")
        buf.write("\2\u04fc\u04fd\7{\2\2\u04fd\u0538\3\2\2\2\u04fe\u0500")
        buf.write("\5|?\2\u04ff\u0501\5\u0082B\2\u0500\u04ff\3\2\2\2\u0500")
        buf.write("\u0501\3\2\2\2\u0501\u0502\3\2\2\2\u0502\u0505\7\177\2")
        buf.write("\2\u0503\u0504\7y\2\2\u0504\u0506\5p9\2\u0505\u0503\3")
        buf.write("\2\2\2\u0505\u0506\3\2\2\2\u0506\u0507\3\2\2\2\u0507\u0508")
        buf.write("\7{\2\2\u0508\u0538\3\2\2\2\u0509\u0538\5\u00b2Z\2\u050a")
        buf.write("\u050b\7?\2\2\u050b\u050c\7a\2\2\u050c\u050d\5\u00e6t")
        buf.write("\2\u050d\u050e\7b\2\2\u050e\u050f\5f\64\2\u050f\u0538")
        buf.write("\3\2\2\2\u0510\u0512\7\37\2\2\u0511\u0510\3\2\2\2\u0511")
        buf.write("\u0512\3\2\2\2\u0512\u0513\3\2\2\2\u0513\u0514\7?\2\2")
        buf.write("\u0514\u0538\5f\64\2\u0515\u0516\7?\2\2\u0516\u0517\7")
        buf.write("a\2\2\u0517\u0518\7b\2\2\u0518\u0538\5f\64\2\u0519\u051a")
        buf.write("\7\37\2\2\u051a\u051b\7\u0088\2\2\u051b\u051d\7T\2\2\u051c")
        buf.write("\u051e\5d\63\2\u051d\u051c\3\2\2\2\u051d\u051e\3\2\2\2")
        buf.write("\u051e\u051f\3\2\2\2\u051f\u0538\7U\2\2\u0520\u0521\7")
        buf.write("\37\2\2\u0521\u0522\7\u0088\2\2\u0522\u0538\5f\64\2\u0523")
        buf.write("\u0525\7\'\2\2\u0524\u0523\3\2\2\2\u0524\u0525\3\2\2\2")
        buf.write("\u0525\u0526\3\2\2\2\u0526\u0527\7+\2\2\u0527\u0528\7")
        buf.write("\177\2\2\u0528\u052a\7T\2\2\u0529\u052b\5d\63\2\u052a")
        buf.write("\u0529\3\2\2\2\u052a\u052b\3\2\2\2\u052b\u052c\3\2\2\2")
        buf.write("\u052c\u0538\7U\2\2\u052d\u052f\7\'\2\2\u052e\u052d\3")
        buf.write("\2\2\2\u052e\u052f\3\2\2\2\u052f\u0530\3\2\2\2\u0530\u0531")
        buf.write("\7+\2\2\u0531\u0533\7T\2\2\u0532\u0534\5d\63\2\u0533\u0532")
        buf.write("\3\2\2\2\u0533\u0534\3\2\2\2\u0534\u0535\3\2\2\2\u0535")
        buf.write("\u0538\7U\2\2\u0536\u0538\7{\2\2\u0537\u04b6\3\2\2\2\u0537")
        buf.write("\u04bc\3\2\2\2\u0537\u04bf\3\2\2\2\u0537\u04c7\3\2\2\2")
        buf.write("\u0537\u04d0\3\2\2\2\u0537\u04d5\3\2\2\2\u0537\u04dd\3")
        buf.write("\2\2\2\u0537\u04e2\3\2\2\2\u0537\u04ea\3\2\2\2\u0537\u04f6")
        buf.write("\3\2\2\2\u0537\u04fe\3\2\2\2\u0537\u0509\3\2\2\2\u0537")
        buf.write("\u050a\3\2\2\2\u0537\u0511\3\2\2\2\u0537\u0515\3\2\2\2")
        buf.write("\u0537\u0519\3\2\2\2\u0537\u0520\3\2\2\2\u0537\u0524\3")
        buf.write("\2\2\2\u0537\u052e\3\2\2\2\u0537\u0536\3\2\2\2\u0538g")
        buf.write("\3\2\2\2\u0539\u0546\7\64\2\2\u053a\u0546\7:\2\2\u053b")
        buf.write("\u0546\7A\2\2\u053c\u0546\7\37\2\2\u053d\u0546\7*\2\2")
        buf.write("\u053e\u0546\5l\67\2\u053f\u0546\7\'\2\2\u0540\u0546\7")
        buf.write("K\2\2\u0541\u0546\7\35\2\2\u0542\u0546\7$\2\2\u0543\u0546")
        buf.write("\7E\2\2\u0544\u0546\7\22\2\2\u0545\u0539\3\2\2\2\u0545")
        buf.write("\u053a\3\2\2\2\u0545\u053b\3\2\2\2\u0545\u053c\3\2\2\2")
        buf.write("\u0545\u053d\3\2\2\2\u0545\u053e\3\2\2\2\u0545\u053f\3")
        buf.write("\2\2\2\u0545\u0540\3\2\2\2\u0545\u0541\3\2\2\2\u0545\u0542")
        buf.write("\3\2\2\2\u0545\u0543\3\2\2\2\u0545\u0544\3\2\2\2\u0546")
        buf.write("i\3\2\2\2\u0547\u0549\5h\65\2\u0548\u054a\5\u0082B\2\u0549")
        buf.write("\u0548\3\2\2\2\u0549\u054a\3\2\2\2\u054a\u054f\3\2\2\2")
        buf.write("\u054b\u054c\5h\65\2\u054c\u054d\5j\66\2\u054d\u054f\3")
        buf.write("\2\2\2\u054e\u0547\3\2\2\2\u054e\u054b\3\2\2\2\u054fk")
        buf.write("\3\2\2\2\u0550\u0566\5n8\2\u0551\u0552\5\u00c2b\2\u0552")
        buf.write("\u0554\7T\2\2\u0553\u0555\5\u00c6d\2\u0554\u0553\3\2\2")
        buf.write("\2\u0554\u0555\3\2\2\2\u0555\u0556\3\2\2\2\u0556\u0557")
        buf.write("\7U\2\2\u0557\u0566\3\2\2\2\u0558\u0559\5z>\2\u0559\u055b")
        buf.write("\7T\2\2\u055a\u055c\5~@\2\u055b\u055a\3\2\2\2\u055b\u055c")
        buf.write("\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u055e\7U\2\2\u055e")
        buf.write("\u0566\3\2\2\2\u055f\u0560\5z>\2\u0560\u0561\7T\2\2\u0561")
        buf.write("\u0562\5~@\2\u0562\u0563\7u\2\2\u0563\u0564\7U\2\2\u0564")
        buf.write("\u0566\3\2\2\2\u0565\u0550\3\2\2\2\u0565\u0551\3\2\2\2")
        buf.write("\u0565\u0558\3\2\2\2\u0565\u055f\3\2\2\2\u0566m\3\2\2")
        buf.write("\2\u0567\u058d\5t;\2\u0568\u056a\5\u00c4c\2\u0569\u056b")
        buf.write("\5\u0082B\2\u056a\u0569\3\2\2\2\u056a\u056b\3\2\2\2\u056b")
        buf.write("\u056d\3\2\2\2\u056c\u056e\5\n\6\2\u056d\u056c\3\2\2\2")
        buf.write("\u056d\u056e\3\2\2\2\u056e\u056f\3\2\2\2\u056f\u0570\7")
        buf.write("\177\2\2\u0570\u058d\3\2\2\2\u0571\u0572\5\u00c4c\2\u0572")
        buf.write("\u0573\7\177\2\2\u0573\u0575\7a\2\2\u0574\u0576\5\u00ea")
        buf.write("v\2\u0575\u0574\3\2\2\2\u0575\u0576\3\2\2\2\u0576\u0577")
        buf.write("\3\2\2\2\u0577\u0578\7b\2\2\u0578\u058d\3\2\2\2\u0579")
        buf.write("\u057a\5\u00c4c\2\u057a\u057c\5\n\6\2\u057b\u057d\7?\2")
        buf.write("\2\u057c\u057b\3\2\2\2\u057c\u057d\3\2\2\2\u057d\u057e")
        buf.write("\3\2\2\2\u057e\u057f\7\177\2\2\u057f\u0581\7a\2\2\u0580")
        buf.write("\u0582\5\u00eav\2\u0581\u0580\3\2\2\2\u0581\u0582\3\2")
        buf.write("\2\2\u0582\u0583\3\2\2\2\u0583\u0584\7b\2\2\u0584\u058d")
        buf.write("\3\2\2\2\u0585\u0587\7\34\2\2\u0586\u0588\5\n\6\2\u0587")
        buf.write("\u0586\3\2\2\2\u0587\u0588\3\2\2\2\u0588\u0589\3\2\2\2")
        buf.write("\u0589\u058d\7\177\2\2\u058a\u058d\5\u00eex\2\u058b\u058d")
        buf.write("\5\u009eP\2\u058c\u0567\3\2\2\2\u058c\u0568\3\2\2\2\u058c")
        buf.write("\u0571\3\2\2\2\u058c\u0579\3\2\2\2\u058c\u0585\3\2\2\2")
        buf.write("\u058c\u058a\3\2\2\2\u058c\u058b\3\2\2\2\u058do\3\2\2")
        buf.write("\2\u058e\u0590\5l\67\2\u058f\u0591\5\u0082B\2\u0590\u058f")
        buf.write("\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0596\3\2\2\2\u0592")
        buf.write("\u0593\5l\67\2\u0593\u0594\5p9\2\u0594\u0596\3\2\2\2\u0595")
        buf.write("\u058e\3\2\2\2\u0595\u0592\3\2\2\2\u0596q\3\2\2\2\u0597")
        buf.write("\u0599\5n8\2\u0598\u059a\5\u0082B\2\u0599\u0598\3\2\2")
        buf.write("\2\u0599\u059a\3\2\2\2\u059a\u059f\3\2\2\2\u059b\u059c")
        buf.write("\5n8\2\u059c\u059d\5r:\2\u059d\u059f\3\2\2\2\u059e\u0597")
        buf.write("\3\2\2\2\u059e\u059b\3\2\2\2\u059fs\3\2\2\2\u05a0\u05a2")
        buf.write("\5\n\6\2\u05a1\u05a0\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2")
        buf.write("\u05a3\3\2\2\2\u05a3\u05bd\5v<\2\u05a4\u05a5\5\n\6\2\u05a5")
        buf.write("\u05a6\7?\2\2\u05a6\u05a7\7\177\2\2\u05a7\u05a9\7a\2\2")
        buf.write("\u05a8\u05aa\5\u00eav\2\u05a9\u05a8\3\2\2\2\u05a9\u05aa")
        buf.write("\3\2\2\2\u05aa\u05ab\3\2\2\2\u05ab\u05ac\7b\2\2\u05ac")
        buf.write("\u05bd\3\2\2\2\u05ad\u05bd\7\r\2\2\u05ae\u05bd\7\16\2")
        buf.write("\2\u05af\u05bd\7\17\2\2\u05b0\u05bd\7N\2\2\u05b1\u05bd")
        buf.write("\7\t\2\2\u05b2\u05bd\7\67\2\2\u05b3\u05bd\7(\2\2\u05b4")
        buf.write("\u05bd\7)\2\2\u05b5\u05bd\78\2\2\u05b6\u05bd\7I\2\2\u05b7")
        buf.write("\u05bd\7\"\2\2\u05b8\u05bd\7\31\2\2\u05b9\u05bd\7L\2\2")
        buf.write("\u05ba\u05bd\7\b\2\2\u05bb\u05bd\5x=\2\u05bc\u05a1\3\2")
        buf.write("\2\2\u05bc\u05a4\3\2\2\2\u05bc\u05ad\3\2\2\2\u05bc\u05ae")
        buf.write("\3\2\2\2\u05bc\u05af\3\2\2\2\u05bc\u05b0\3\2\2\2\u05bc")
        buf.write("\u05b1\3\2\2\2\u05bc\u05b2\3\2\2\2\u05bc\u05b3\3\2\2\2")
        buf.write("\u05bc\u05b4\3\2\2\2\u05bc\u05b5\3\2\2\2\u05bc\u05b6\3")
        buf.write("\2\2\2\u05bc\u05b7\3\2\2\2\u05bc\u05b8\3\2\2\2\u05bc\u05b9")
        buf.write("\3\2\2\2\u05bc\u05ba\3\2\2\2\u05bc\u05bb\3\2\2\2\u05bd")
        buf.write("u\3\2\2\2\u05be\u05c7\5\u00c0a\2\u05bf\u05c7\7\177\2\2")
        buf.write("\u05c0\u05c1\7\177\2\2\u05c1\u05c3\7a\2\2\u05c2\u05c4")
        buf.write("\5\u00eav\2\u05c3\u05c2\3\2\2\2\u05c3\u05c4\3\2\2\2\u05c4")
        buf.write("\u05c5\3\2\2\2\u05c5\u05c7\7b\2\2\u05c6\u05be\3\2\2\2")
        buf.write("\u05c6\u05bf\3\2\2\2\u05c6\u05c0\3\2\2\2\u05c7w\3\2\2")
        buf.write("\2\u05c8\u05c9\7\25\2\2\u05c9\u05ca\7P\2\2\u05ca\u05cb")
        buf.write("\5H%\2\u05cb\u05cc\7Q\2\2\u05cc\u05d2\3\2\2\2\u05cd\u05ce")
        buf.write("\7\25\2\2\u05ce\u05cf\7P\2\2\u05cf\u05d0\7\b\2\2\u05d0")
        buf.write("\u05d2\7Q\2\2\u05d1\u05c8\3\2\2\2\u05d1\u05cd\3\2\2\2")
        buf.write("\u05d2y\3\2\2\2\u05d3\u05d5\5|?\2\u05d4\u05d6\5\u0082")
        buf.write("B\2\u05d5\u05d4\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6\u05d8")
        buf.write("\3\2\2\2\u05d7\u05d9\7\177\2\2\u05d8\u05d7\3\2\2\2\u05d8")
        buf.write("\u05d9\3\2\2\2\u05d9\u05dc\3\2\2\2\u05da\u05db\7y\2\2")
        buf.write("\u05db\u05dd\5p9\2\u05dc\u05da\3\2\2\2\u05dc\u05dd\3\2")
        buf.write("\2\2\u05dd\u05e9\3\2\2\2\u05de\u05e0\5|?\2\u05df\u05e1")
        buf.write("\5\u0082B\2\u05e0\u05df\3\2\2\2\u05e0\u05e1\3\2\2\2\u05e1")
        buf.write("\u05e2\3\2\2\2\u05e2\u05e3\5\n\6\2\u05e3\u05e6\7\177\2")
        buf.write("\2\u05e4\u05e5\7y\2\2\u05e5\u05e7\5p9\2\u05e6\u05e4\3")
        buf.write("\2\2\2\u05e6\u05e7\3\2\2\2\u05e7\u05e9\3\2\2\2\u05e8\u05d3")
        buf.write("\3\2\2\2\u05e8\u05de\3\2\2\2\u05e9{\3\2\2\2\u05ea\u05f0")
        buf.write("\7\34\2\2\u05eb\u05ec\7\34\2\2\u05ec\u05f0\7\20\2\2\u05ed")
        buf.write("\u05ee\7\34\2\2\u05ee\u05f0\7=\2\2\u05ef\u05ea\3\2\2\2")
        buf.write("\u05ef\u05eb\3\2\2\2\u05ef\u05ed\3\2\2\2\u05f0}\3\2\2")
        buf.write("\2\u05f1\u05f2\b@\1\2\u05f2\u05f3\5\u0080A\2\u05f3\u05f9")
        buf.write("\3\2\2\2\u05f4\u05f5\f\3\2\2\u05f5\u05f6\7u\2\2\u05f6")
        buf.write("\u05f8\5\u0080A\2\u05f7\u05f4\3\2\2\2\u05f8\u05fb\3\2")
        buf.write("\2\2\u05f9\u05f7\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\177")
        buf.write("\3\2\2\2\u05fb\u05f9\3\2\2\2\u05fc\u0601\7\177\2\2\u05fd")
        buf.write("\u05fe\7\177\2\2\u05fe\u05ff\7`\2\2\u05ff\u0601\5J&\2")
        buf.write("\u0600\u05fc\3\2\2\2\u0600\u05fd\3\2\2\2\u0601\u0081\3")
        buf.write("\2\2\2\u0602\u0603\bB\1\2\u0603\u0604\5\u0084C\2\u0604")
        buf.write("\u0609\3\2\2\2\u0605\u0606\f\3\2\2\u0606\u0608\5\u0084")
        buf.write("C\2\u0607\u0605\3\2\2\2\u0608\u060b\3\2\2\2\u0609\u0607")
        buf.write("\3\2\2\2\u0609\u060a\3\2\2\2\u060a\u0083\3\2\2\2\u060b")
        buf.write("\u0609\3\2\2\2\u060c\u060d\7R\2\2\u060d\u060e\7R\2\2\u060e")
        buf.write("\u060f\5\u0086D\2\u060f\u0610\7S\2\2\u0610\u0611\7S\2")
        buf.write("\2\u0611\u0626\3\2\2\2\u0612\u0613\7\5\2\2\u0613\u0614")
        buf.write("\7P\2\2\u0614\u0616\5p9\2\u0615\u0617\5\u00a2R\2\u0616")
        buf.write("\u0615\3\2\2\2\u0616\u0617\3\2\2\2\u0617\u0619\3\2\2\2")
        buf.write("\u0618\u061a\7~\2\2\u0619\u0618\3\2\2\2\u0619\u061a\3")
        buf.write("\2\2\2\u061a\u061b\3\2\2\2\u061b\u061c\7Q\2\2\u061c\u0626")
        buf.write("\3\2\2\2\u061d\u061e\7\5\2\2\u061e\u061f\7P\2\2\u061f")
        buf.write("\u0621\5J&\2\u0620\u0622\7~\2\2\u0621\u0620\3\2\2\2\u0621")
        buf.write("\u0622\3\2\2\2\u0622\u0623\3\2\2\2\u0623\u0624\7Q\2\2")
        buf.write("\u0624\u0626\3\2\2\2\u0625\u060c\3\2\2\2\u0625\u0612\3")
        buf.write("\2\2\2\u0625\u061d\3\2\2\2\u0626\u0085\3\2\2\2\u0627\u0629")
        buf.write("\bD\1\2\u0628\u062a\5\u0088E\2\u0629\u0628\3\2\2\2\u0629")
        buf.write("\u062a\3\2\2\2\u062a\u062f\3\2\2\2\u062b\u062c\5\u0088")
        buf.write("E\2\u062c\u062d\7~\2\2\u062d\u062f\3\2\2\2\u062e\u0627")
        buf.write("\3\2\2\2\u062e\u062b\3\2\2\2\u062f\u063c\3\2\2\2\u0630")
        buf.write("\u0631\f\5\2\2\u0631\u0633\7u\2\2\u0632\u0634\5\u0088")
        buf.write("E\2\u0633\u0632\3\2\2\2\u0633\u0634\3\2\2\2\u0634\u063b")
        buf.write("\3\2\2\2\u0635\u0636\f\3\2\2\u0636\u0637\7u\2\2\u0637")
        buf.write("\u0638\5\u0088E\2\u0638\u0639\7~\2\2\u0639\u063b\3\2\2")
        buf.write("\2\u063a\u0630\3\2\2\2\u063a\u0635\3\2\2\2\u063b\u063e")
        buf.write("\3\2\2\2\u063c\u063a\3\2\2\2\u063c\u063d\3\2\2\2\u063d")
        buf.write("\u0087\3\2\2\2\u063e\u063c\3\2\2\2\u063f\u0644\5\u008a")
        buf.write("F\2\u0640\u0641\7P\2\2\u0641\u0642\5\u008cG\2\u0642\u0643")
        buf.write("\7Q\2\2\u0643\u0645\3\2\2\2\u0644\u0640\3\2\2\2\u0644")
        buf.write("\u0645\3\2\2\2\u0645\u0089\3\2\2\2\u0646\u064b\7\177\2")
        buf.write("\2\u0647\u0648\7\177\2\2\u0648\u0649\7z\2\2\u0649\u064b")
        buf.write("\7\177\2\2\u064a\u0646\3\2\2\2\u064a\u0647\3\2\2\2\u064b")
        buf.write("\u008b\3\2\2\2\u064c\u064e\bG\1\2\u064d\u064f\5\u008e")
        buf.write("H\2\u064e\u064d\3\2\2\2\u064e\u064f\3\2\2\2\u064f\u0654")
        buf.write("\3\2\2\2\u0650\u0651\f\3\2\2\u0651\u0653\5\u008eH\2\u0652")
        buf.write("\u0650\3\2\2\2\u0653\u0656\3\2\2\2\u0654\u0652\3\2\2\2")
        buf.write("\u0654\u0655\3\2\2\2\u0655\u008d\3\2\2\2\u0656\u0654\3")
        buf.write("\2\2\2\u0657\u0658\7P\2\2\u0658\u0659\5\u008cG\2\u0659")
        buf.write("\u065a\7Q\2\2\u065a\u0664\3\2\2\2\u065b\u065c\7R\2\2\u065c")
        buf.write("\u065d\5\u008cG\2\u065d\u065e\7S\2\2\u065e\u0664\3\2\2")
        buf.write("\2\u065f\u0660\7T\2\2\u0660\u0661\5\u008cG\2\u0661\u0662")
        buf.write("\7U\2\2\u0662\u0664\3\2\2\2\u0663\u0657\3\2\2\2\u0663")
        buf.write("\u065b\3\2\2\2\u0663\u065f\3\2\2\2\u0664\u008f\3\2\2\2")
        buf.write("\u0665\u0666\bI\1\2\u0666\u0668\5\u0092J\2\u0667\u0669")
        buf.write("\5\u00b6\\\2\u0668\u0667\3\2\2\2\u0668\u0669\3\2\2\2\u0669")
        buf.write("\u0672\3\2\2\2\u066a\u066b\f\3\2\2\u066b\u066c\7u\2\2")
        buf.write("\u066c\u066e\5\u0092J\2\u066d\u066f\5\u00b6\\\2\u066e")
        buf.write("\u066d\3\2\2\2\u066e\u066f\3\2\2\2\u066f\u0671\3\2\2\2")
        buf.write("\u0670\u066a\3\2\2\2\u0671\u0674\3\2\2\2\u0672\u0670\3")
        buf.write("\2\2\2\u0672\u0673\3\2\2\2\u0673\u0091\3\2\2\2\u0674\u0672")
        buf.write("\3\2\2\2\u0675\u067e\5\u0094K\2\u0676\u0677\5\u0096L\2")
        buf.write("\u0677\u0678\5\u0098M\2\u0678\u0679\7w\2\2\u0679\u067b")
        buf.write("\5r:\2\u067a\u067c\5\u00a2R\2\u067b\u067a\3\2\2\2\u067b")
        buf.write("\u067c\3\2\2\2\u067c\u067e\3\2\2\2\u067d\u0675\3\2\2\2")
        buf.write("\u067d\u0676\3\2\2\2\u067e\u0093\3\2\2\2\u067f\u0684\5")
        buf.write("\u0096L\2\u0680\u0681\5\u009aN\2\u0681\u0682\5\u0094K")
        buf.write("\2\u0682\u0684\3\2\2\2\u0683\u067f\3\2\2\2\u0683\u0680")
        buf.write("\3\2\2\2\u0684\u0095\3\2\2\2\u0685\u0687\bL\1\2\u0686")
        buf.write("\u0688\7~\2\2\u0687\u0686\3\2\2\2\u0687\u0688\3\2\2\2")
        buf.write("\u0688\u0689\3\2\2\2\u0689\u068b\5\6\4\2\u068a\u068c\5")
        buf.write("\u0082B\2\u068b\u068a\3\2\2\2\u068b\u068c\3\2\2\2\u068c")
        buf.write("\u0692\3\2\2\2\u068d\u068e\7P\2\2\u068e\u068f\5\u0094")
        buf.write("K\2\u068f\u0690\7Q\2\2\u0690\u0692\3\2\2\2\u0691\u0685")
        buf.write("\3\2\2\2\u0691\u068d\3\2\2\2\u0692\u06a0\3\2\2\2\u0693")
        buf.write("\u0694\f\5\2\2\u0694\u069f\5\u0098M\2\u0695\u0696\f\4")
        buf.write("\2\2\u0696\u0698\7R\2\2\u0697\u0699\5J&\2\u0698\u0697")
        buf.write("\3\2\2\2\u0698\u0699\3\2\2\2\u0699\u069a\3\2\2\2\u069a")
        buf.write("\u069c\7S\2\2\u069b\u069d\5\u0082B\2\u069c\u069b\3\2\2")
        buf.write("\2\u069c\u069d\3\2\2\2\u069d\u069f\3\2\2\2\u069e\u0693")
        buf.write("\3\2\2\2\u069e\u0695\3\2\2\2\u069f\u06a2\3\2\2\2\u06a0")
        buf.write("\u069e\3\2\2\2\u06a0\u06a1\3\2\2\2\u06a1\u0097\3\2\2\2")
        buf.write("\u06a2\u06a0\3\2\2\2\u06a3\u06a4\7P\2\2\u06a4\u06a5\5")
        buf.write("\u00acW\2\u06a5\u06a7\7Q\2\2\u06a6\u06a8\5\u009cO\2\u06a7")
        buf.write("\u06a6\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8\u06aa\3\2\2\2")
        buf.write("\u06a9\u06ab\5\u00a0Q\2\u06aa\u06a9\3\2\2\2\u06aa\u06ab")
        buf.write("\3\2\2\2\u06ab\u06ad\3\2\2\2\u06ac\u06ae\5\u00f8}\2\u06ad")
        buf.write("\u06ac\3\2\2\2\u06ad\u06ae\3\2\2\2\u06ae\u06b0\3\2\2\2")
        buf.write("\u06af\u06b1\5\u0082B\2\u06b0\u06af\3\2\2\2\u06b0\u06b1")
        buf.write("\3\2\2\2\u06b1\u0099\3\2\2\2\u06b2\u06b4\7X\2\2\u06b3")
        buf.write("\u06b5\5\u0082B\2\u06b4\u06b3\3\2\2\2\u06b4\u06b5\3\2")
        buf.write("\2\2\u06b5\u06b7\3\2\2\2\u06b6\u06b8\5\u009cO\2\u06b7")
        buf.write("\u06b6\3\2\2\2\u06b7\u06b8\3\2\2\2\u06b8\u06ca\3\2\2\2")
        buf.write("\u06b9\u06bb\7\\\2\2\u06ba\u06bc\5\u0082B\2\u06bb\u06ba")
        buf.write("\3\2\2\2\u06bb\u06bc\3\2\2\2\u06bc\u06ca\3\2\2\2\u06bd")
        buf.write("\u06bf\7q\2\2\u06be\u06c0\5\u0082B\2\u06bf\u06be\3\2\2")
        buf.write("\2\u06bf\u06c0\3\2\2\2\u06c0\u06ca\3\2\2\2\u06c1\u06c2")
        buf.write("\5\n\6\2\u06c2\u06c4\7X\2\2\u06c3\u06c5\5\u0082B\2\u06c4")
        buf.write("\u06c3\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5\u06c7\3\2\2\2")
        buf.write("\u06c6\u06c8\5\u009cO\2\u06c7\u06c6\3\2\2\2\u06c7\u06c8")
        buf.write("\3\2\2\2\u06c8\u06ca\3\2\2\2\u06c9\u06b2\3\2\2\2\u06c9")
        buf.write("\u06b9\3\2\2\2\u06c9\u06bd\3\2\2\2\u06c9\u06c1\3\2\2\2")
        buf.write("\u06ca\u009b\3\2\2\2\u06cb\u06cd\5\u009eP\2\u06cc\u06ce")
        buf.write("\5\u009cO\2\u06cd\u06cc\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce")
        buf.write("\u009d\3\2\2\2\u06cf\u06d0\t\4\2\2\u06d0\u009f\3\2\2\2")
        buf.write("\u06d1\u06d2\t\5\2\2\u06d2\u00a1\3\2\2\2\u06d3\u06df\5")
        buf.write("\u00a4S\2\u06d4\u06d6\5\u00a6T\2\u06d5\u06d4\3\2\2\2\u06d5")
        buf.write("\u06d6\3\2\2\2\u06d6\u06d7\3\2\2\2\u06d7\u06d8\5\u0098")
        buf.write("M\2\u06d8\u06d9\7w\2\2\u06d9\u06db\5r:\2\u06da\u06dc\5")
        buf.write("\u00a2R\2\u06db\u06da\3\2\2\2\u06db\u06dc\3\2\2\2\u06dc")
        buf.write("\u06df\3\2\2\2\u06dd\u06df\5\u00a8U\2\u06de\u06d3\3\2")
        buf.write("\2\2\u06de\u06d5\3\2\2\2\u06de\u06dd\3\2\2\2\u06df\u00a3")
        buf.write("\3\2\2\2\u06e0\u06e6\5\u00a6T\2\u06e1\u06e3\5\u009aN\2")
        buf.write("\u06e2\u06e4\5\u00a4S\2\u06e3\u06e2\3\2\2\2\u06e3\u06e4")
        buf.write("\3\2\2\2\u06e4\u06e6\3\2\2\2\u06e5\u06e0\3\2\2\2\u06e5")
        buf.write("\u06e1\3\2\2\2\u06e6\u00a5\3\2\2\2\u06e7\u06e8\bT\1\2")
        buf.write("\u06e8\u06f6\5\u0098M\2\u06e9\u06eb\7R\2\2\u06ea\u06ec")
        buf.write("\5J&\2\u06eb\u06ea\3\2\2\2\u06eb\u06ec\3\2\2\2\u06ec\u06ed")
        buf.write("\3\2\2\2\u06ed\u06ef\7S\2\2\u06ee\u06f0\5\u0082B\2\u06ef")
        buf.write("\u06ee\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0\u06f6\3\2\2\2")
        buf.write("\u06f1\u06f2\7P\2\2\u06f2\u06f3\5\u00a4S\2\u06f3\u06f4")
        buf.write("\7Q\2\2\u06f4\u06f6\3\2\2\2\u06f5\u06e7\3\2\2\2\u06f5")
        buf.write("\u06e9\3\2\2\2\u06f5\u06f1\3\2\2\2\u06f6\u0704\3\2\2\2")
        buf.write("\u06f7\u06f8\f\7\2\2\u06f8\u0703\5\u0098M\2\u06f9\u06fa")
        buf.write("\f\5\2\2\u06fa\u06fc\7R\2\2\u06fb\u06fd\5J&\2\u06fc\u06fb")
        buf.write("\3\2\2\2\u06fc\u06fd\3\2\2\2\u06fd\u06fe\3\2\2\2\u06fe")
        buf.write("\u0700\7S\2\2\u06ff\u0701\5\u0082B\2\u0700\u06ff\3\2\2")
        buf.write("\2\u0700\u0701\3\2\2\2\u0701\u0703\3\2\2\2\u0702\u06f7")
        buf.write("\3\2\2\2\u0702\u06f9\3\2\2\2\u0703\u0706\3\2\2\2\u0704")
        buf.write("\u0702\3\2\2\2\u0704\u0705\3\2\2\2\u0705\u00a7\3\2\2\2")
        buf.write("\u0706\u0704\3\2\2\2\u0707\u070c\5\u00aaV\2\u0708\u0709")
        buf.write("\5\u009aN\2\u0709\u070a\5\u00a8U\2\u070a\u070c\3\2\2\2")
        buf.write("\u070b\u0707\3\2\2\2\u070b\u0708\3\2\2\2\u070c\u00a9\3")
        buf.write("\2\2\2\u070d\u070e\bV\1\2\u070e\u070f\7~\2\2\u070f\u071d")
        buf.write("\3\2\2\2\u0710\u0711\f\5\2\2\u0711\u071c\5\u0098M\2\u0712")
        buf.write("\u0713\f\4\2\2\u0713\u0715\7R\2\2\u0714\u0716\5J&\2\u0715")
        buf.write("\u0714\3\2\2\2\u0715\u0716\3\2\2\2\u0716\u0717\3\2\2\2")
        buf.write("\u0717\u0719\7S\2\2\u0718\u071a\5\u0082B\2\u0719\u0718")
        buf.write("\3\2\2\2\u0719\u071a\3\2\2\2\u071a\u071c\3\2\2\2\u071b")
        buf.write("\u0710\3\2\2\2\u071b\u0712\3\2\2\2\u071c\u071f\3\2\2\2")
        buf.write("\u071d\u071b\3\2\2\2\u071d\u071e\3\2\2\2\u071e\u00ab\3")
        buf.write("\2\2\2\u071f\u071d\3\2\2\2\u0720\u0722\5\u00aeX\2\u0721")
        buf.write("\u0720\3\2\2\2\u0721\u0722\3\2\2\2\u0722\u0724\3\2\2\2")
        buf.write("\u0723\u0725\7~\2\2\u0724\u0723\3\2\2\2\u0724\u0725\3")
        buf.write("\2\2\2\u0725\u072b\3\2\2\2\u0726\u0727\5\u00aeX\2\u0727")
        buf.write("\u0728\7u\2\2\u0728\u0729\7~\2\2\u0729\u072b\3\2\2\2\u072a")
        buf.write("\u0721\3\2\2\2\u072a\u0726\3\2\2\2\u072b\u00ad\3\2\2\2")
        buf.write("\u072c\u072d\bX\1\2\u072d\u072e\5\u00b0Y\2\u072e\u0734")
        buf.write("\3\2\2\2\u072f\u0730\f\3\2\2\u0730\u0731\7u\2\2\u0731")
        buf.write("\u0733\5\u00b0Y\2\u0732\u072f\3\2\2\2\u0733\u0736\3\2")
        buf.write("\2\2\u0734\u0732\3\2\2\2\u0734\u0735\3\2\2\2\u0735\u00af")
        buf.write("\3\2\2\2\u0736\u0734\3\2\2\2\u0737\u0739\5\u0082B\2\u0738")
        buf.write("\u0737\3\2\2\2\u0738\u0739\3\2\2\2\u0739\u073a\3\2\2\2")
        buf.write("\u073a\u073b\5j\66\2\u073b\u073c\5\u0092J\2\u073c\u0757")
        buf.write("\3\2\2\2\u073d\u073f\5\u0082B\2\u073e\u073d\3\2\2\2\u073e")
        buf.write("\u073f\3\2\2\2\u073f\u0740\3\2\2\2\u0740\u0741\5j\66\2")
        buf.write("\u0741\u0742\5\u0092J\2\u0742\u0743\7`\2\2\u0743\u0744")
        buf.write("\5\u00ba^\2\u0744\u0757\3\2\2\2\u0745\u0747\5\u0082B\2")
        buf.write("\u0746\u0745\3\2\2\2\u0746\u0747\3\2\2\2\u0747\u0748\3")
        buf.write("\2\2\2\u0748\u074a\5j\66\2\u0749\u074b\5\u00a2R\2\u074a")
        buf.write("\u0749\3\2\2\2\u074a\u074b\3\2\2\2\u074b\u0757\3\2\2\2")
        buf.write("\u074c\u074e\5\u0082B\2\u074d\u074c\3\2\2\2\u074d\u074e")
        buf.write("\3\2\2\2\u074e\u074f\3\2\2\2\u074f\u0751\5j\66\2\u0750")
        buf.write("\u0752\5\u00a2R\2\u0751\u0750\3\2\2\2\u0751\u0752\3\2")
        buf.write("\2\2\u0752\u0753\3\2\2\2\u0753\u0754\7`\2\2\u0754\u0755")
        buf.write("\5\u00ba^\2\u0755\u0757\3\2\2\2\u0756\u0738\3\2\2\2\u0756")
        buf.write("\u073e\3\2\2\2\u0756\u0746\3\2\2\2\u0756\u074d\3\2\2\2")
        buf.write("\u0757\u00b1\3\2\2\2\u0758\u075a\5\u0082B\2\u0759\u0758")
        buf.write("\3\2\2\2\u0759\u075a\3\2\2\2\u075a\u075c\3\2\2\2\u075b")
        buf.write("\u075d\5j\66\2\u075c\u075b\3\2\2\2\u075c\u075d\3\2\2\2")
        buf.write("\u075d\u075e\3\2\2\2\u075e\u0760\5\u0092J\2\u075f\u0761")
        buf.write("\5\u00ceh\2\u0760\u075f\3\2\2\2\u0760\u0761\3\2\2\2\u0761")
        buf.write("\u0762\3\2\2\2\u0762\u0763\5\u00b4[\2\u0763\u00b3\3\2")
        buf.write("\2\2\u0764\u0765\7y\2\2\u0765\u0767\5\u00dep\2\u0766\u0764")
        buf.write("\3\2\2\2\u0766\u0767\3\2\2\2\u0767\u0768\3\2\2\2\u0768")
        buf.write("\u076a\7T\2\2\u0769\u076b\5R*\2\u076a\u0769\3\2\2\2\u076a")
        buf.write("\u076b\3\2\2\2\u076b\u076c\3\2\2\2\u076c\u077f\7U\2\2")
        buf.write("\u076d\u0770\7D\2\2\u076e\u076f\7y\2\2\u076f\u0771\5\u00de")
        buf.write("p\2\u0770\u076e\3\2\2\2\u0770\u0771\3\2\2\2\u0771\u0772")
        buf.write("\3\2\2\2\u0772\u0774\7T\2\2\u0773\u0775\5R*\2\u0774\u0773")
        buf.write("\3\2\2\2\u0774\u0775\3\2\2\2\u0775\u0776\3\2\2\2\u0776")
        buf.write("\u0777\7U\2\2\u0777\u077f\5\u00f2z\2\u0778\u0779\7`\2")
        buf.write("\2\u0779\u077a\7\26\2\2\u077a\u077f\7{\2\2\u077b\u077c")
        buf.write("\7`\2\2\u077c\u077d\7\27\2\2\u077d\u077f\7{\2\2\u077e")
        buf.write("\u0766\3\2\2\2\u077e\u076d\3\2\2\2\u077e\u0778\3\2\2\2")
        buf.write("\u077e\u077b\3\2\2\2\u077f\u00b5\3\2\2\2\u0780\u0786\5")
        buf.write("\u00b8]\2\u0781\u0782\7P\2\2\u0782\u0783\5\u00bc_\2\u0783")
        buf.write("\u0784\7Q\2\2\u0784\u0786\3\2\2\2\u0785\u0780\3\2\2\2")
        buf.write("\u0785\u0781\3\2\2\2\u0786\u00b7\3\2\2\2\u0787\u0788\7")
        buf.write("`\2\2\u0788\u078b\5\u00ba^\2\u0789\u078b\5\u00be`\2\u078a")
        buf.write("\u0787\3\2\2\2\u078a\u0789\3\2\2\2\u078b\u00b9\3\2\2\2")
        buf.write("\u078c\u078f\5D#\2\u078d\u078f\5\u00be`\2\u078e\u078c")
        buf.write("\3\2\2\2\u078e\u078d\3\2\2\2\u078f\u00bb\3\2\2\2\u0790")
        buf.write("\u0791\b_\1\2\u0791\u0793\5\u00ba^\2\u0792\u0794\7~\2")
        buf.write("\2\u0793\u0792\3\2\2\2\u0793\u0794\3\2\2\2\u0794\u079d")
        buf.write("\3\2\2\2\u0795\u0796\f\3\2\2\u0796\u0797\7u\2\2\u0797")
        buf.write("\u0799\5\u00ba^\2\u0798\u079a\7~\2\2\u0799\u0798\3\2\2")
        buf.write("\2\u0799\u079a\3\2\2\2\u079a\u079c\3\2\2\2\u079b\u0795")
        buf.write("\3\2\2\2\u079c\u079f\3\2\2\2\u079d\u079b\3\2\2\2\u079d")
        buf.write("\u079e\3\2\2\2\u079e\u00bd\3\2\2\2\u079f\u079d\3\2\2\2")
        buf.write("\u07a0\u07a1\7T\2\2\u07a1\u07a3\5\u00bc_\2\u07a2\u07a4")
        buf.write("\7u\2\2\u07a3\u07a2\3\2\2\2\u07a3\u07a4\3\2\2\2\u07a4")
        buf.write("\u07a5\3\2\2\2\u07a5\u07a6\7U\2\2\u07a6\u07aa\3\2\2\2")
        buf.write("\u07a7\u07a8\7T\2\2\u07a8\u07aa\7U\2\2\u07a9\u07a0\3\2")
        buf.write("\2\2\u07a9\u07a7\3\2\2\2\u07aa\u00bf\3\2\2\2\u07ab\u07b3")
        buf.write("\7\177\2\2\u07ac\u07ad\7\177\2\2\u07ad\u07af\7a\2\2\u07ae")
        buf.write("\u07b0\5\u00eav\2\u07af\u07ae\3\2\2\2\u07af\u07b0\3\2")
        buf.write("\2\2\u07b0\u07b1\3\2\2\2\u07b1\u07b3\7b\2\2\u07b2\u07ab")
        buf.write("\3\2\2\2\u07b2\u07ac\3\2\2\2\u07b3\u00c1\3\2\2\2\u07b4")
        buf.write("\u07b6\5\u00c4c\2\u07b5\u07b7\5\u0082B\2\u07b6\u07b5\3")
        buf.write("\2\2\2\u07b6\u07b7\3\2\2\2\u07b7\u07b9\3\2\2\2\u07b8\u07ba")
        buf.write("\5\n\6\2\u07b9\u07b8\3\2\2\2\u07b9\u07ba\3\2\2\2\u07ba")
        buf.write("\u07bb\3\2\2\2\u07bb\u07bd\5\u00c0a\2\u07bc\u07be\7!\2")
        buf.write("\2\u07bd\u07bc\3\2\2\2\u07bd\u07be\3\2\2\2\u07be\u07c1")
        buf.write("\3\2\2\2\u07bf\u07c0\7y\2\2\u07c0\u07c2\5\u00d4k\2\u07c1")
        buf.write("\u07bf\3\2\2\2\u07c1\u07c2\3\2\2\2\u07c2\u07cc\3\2\2\2")
        buf.write("\u07c3\u07c5\5\u00c4c\2\u07c4\u07c6\5\u0082B\2\u07c5\u07c4")
        buf.write("\3\2\2\2\u07c5\u07c6\3\2\2\2\u07c6\u07c9\3\2\2\2\u07c7")
        buf.write("\u07c8\7y\2\2\u07c8\u07ca\5\u00d4k\2\u07c9\u07c7\3\2\2")
        buf.write("\2\u07c9\u07ca\3\2\2\2\u07ca\u07cc\3\2\2\2\u07cb\u07b4")
        buf.write("\3\2\2\2\u07cb\u07c3\3\2\2\2\u07cc\u00c3\3\2\2\2\u07cd")
        buf.write("\u07ce\t\6\2\2\u07ce\u00c5\3\2\2\2\u07cf\u07d1\5\u00c8")
        buf.write("e\2\u07d0\u07d2\5\u00c6d\2\u07d1\u07d0\3\2\2\2\u07d1\u07d2")
        buf.write("\3\2\2\2\u07d2\u07d9\3\2\2\2\u07d3\u07d4\5\u00dan\2\u07d4")
        buf.write("\u07d6\7y\2\2\u07d5\u07d7\5\u00c6d\2\u07d6\u07d5\3\2\2")
        buf.write("\2\u07d6\u07d7\3\2\2\2\u07d7\u07d9\3\2\2\2\u07d8\u07cf")
        buf.write("\3\2\2\2\u07d8\u07d3\3\2\2\2\u07d9\u00c7\3\2\2\2\u07da")
        buf.write("\u07dc\5\u0082B\2\u07db\u07da\3\2\2\2\u07db\u07dc\3\2")
        buf.write("\2\2\u07dc\u07de\3\2\2\2\u07dd\u07df\5j\66\2\u07de\u07dd")
        buf.write("\3\2\2\2\u07de\u07df\3\2\2\2\u07df\u07e1\3\2\2\2\u07e0")
        buf.write("\u07e2\5\u00caf\2\u07e1\u07e0\3\2\2\2\u07e1\u07e2\3\2")
        buf.write("\2\2\u07e2\u07e3\3\2\2\2\u07e3\u080e\7{\2\2\u07e4\u080e")
        buf.write("\5\u00b2Z\2\u07e5\u07e7\7J\2\2\u07e6\u07e8\7G\2\2\u07e7")
        buf.write("\u07e6\3\2\2\2\u07e7\u07e8\3\2\2\2\u07e8\u07e9\3\2\2\2")
        buf.write("\u07e9\u07ea\5\n\6\2\u07ea\u07eb\5\b\5\2\u07eb\u07ec\7")
        buf.write("{\2\2\u07ec\u080e\3\2\2\2\u07ed\u07ee\7J\2\2\u07ee\u07ef")
        buf.write("\7z\2\2\u07ef\u07f0\5\b\5\2\u07f0\u07f1\7{\2\2\u07f1\u080e")
        buf.write("\3\2\2\2\u07f2\u07f3\7;\2\2\u07f3\u07f4\7P\2\2\u07f4\u07f5")
        buf.write("\5J&\2\u07f5\u07f6\7u\2\2\u07f6\u07f7\7\u0088\2\2\u07f7")
        buf.write("\u07f8\7Q\2\2\u07f8\u07f9\7{\2\2\u07f9\u080e\3\2\2\2\u07fa")
        buf.write("\u07fb\7?\2\2\u07fb\u07fc\7a\2\2\u07fc\u07fd\5\u00e6t")
        buf.write("\2\u07fd\u07fe\7b\2\2\u07fe\u07ff\5f\64\2\u07ff\u080e")
        buf.write("\3\2\2\2\u0800\u0801\7J\2\2\u0801\u0803\7\177\2\2\u0802")
        buf.write("\u0804\5\u0082B\2\u0803\u0802\3\2\2\2\u0803\u0804\3\2")
        buf.write("\2\2\u0804\u0805\3\2\2\2\u0805\u0806\7`\2\2\u0806\u0808")
        buf.write("\5p9\2\u0807\u0809\5\u00a2R\2\u0808\u0807\3\2\2\2\u0808")
        buf.write("\u0809\3\2\2\2\u0809\u080a\3\2\2\2\u080a\u080b\7{\2\2")
        buf.write("\u080b\u080e\3\2\2\2\u080c\u080e\7{\2\2\u080d\u07db\3")
        buf.write("\2\2\2\u080d\u07e4\3\2\2\2\u080d\u07e5\3\2\2\2\u080d\u07ed")
        buf.write("\3\2\2\2\u080d\u07f2\3\2\2\2\u080d\u07fa\3\2\2\2\u080d")
        buf.write("\u0800\3\2\2\2\u080d\u080c\3\2\2\2\u080e\u00c9\3\2\2\2")
        buf.write("\u080f\u0810\bf\1\2\u0810\u0811\5\u00ccg\2\u0811\u0817")
        buf.write("\3\2\2\2\u0812\u0813\f\3\2\2\u0813\u0814\7u\2\2\u0814")
        buf.write("\u0816\5\u00ccg\2\u0815\u0812\3\2\2\2\u0816\u0819\3\2")
        buf.write("\2\2\u0817\u0815\3\2\2\2\u0817\u0818\3\2\2\2\u0818\u00cb")
        buf.write("\3\2\2\2\u0819\u0817\3\2\2\2\u081a\u081c\5\u0092J\2\u081b")
        buf.write("\u081d\5\u00ceh\2\u081c\u081b\3\2\2\2\u081c\u081d\3\2")
        buf.write("\2\2\u081d\u081f\3\2\2\2\u081e\u0820\5\u00d2j\2\u081f")
        buf.write("\u081e\3\2\2\2\u081f\u0820\3\2\2\2\u0820\u082e\3\2\2\2")
        buf.write("\u0821\u0823\5\u0092J\2\u0822\u0824\5\u00b8]\2\u0823\u0822")
        buf.write("\3\2\2\2\u0823\u0824\3\2\2\2\u0824\u082e\3\2\2\2\u0825")
        buf.write("\u0827\7\177\2\2\u0826\u0825\3\2\2\2\u0826\u0827\3\2\2")
        buf.write("\2\u0827\u0829\3\2\2\2\u0828\u082a\5\u0082B\2\u0829\u0828")
        buf.write("\3\2\2\2\u0829\u082a\3\2\2\2\u082a\u082b\3\2\2\2\u082b")
        buf.write("\u082c\7y\2\2\u082c\u082e\5J&\2\u082d\u081a\3\2\2\2\u082d")
        buf.write("\u0821\3\2\2\2\u082d\u0826\3\2\2\2\u082e\u00cd\3\2\2\2")
        buf.write("\u082f\u0830\bh\1\2\u0830\u0831\5\u00d0i\2\u0831\u0836")
        buf.write("\3\2\2\2\u0832\u0833\f\3\2\2\u0833\u0835\5\u00d0i\2\u0834")
        buf.write("\u0832\3\2\2\2\u0835\u0838\3\2\2\2\u0836\u0834\3\2\2\2")
        buf.write("\u0836\u0837\3\2\2\2\u0837\u00cf\3\2\2\2\u0838\u0836\3")
        buf.write("\2\2\2\u0839\u083a\t\7\2\2\u083a\u00d1\3\2\2\2\u083b\u083c")
        buf.write("\7`\2\2\u083c\u083d\7\u0082\2\2\u083d\u083e\bj\1\2\u083e")
        buf.write("\u00d3\3\2\2\2\u083f\u0840\bk\1\2\u0840\u0842\5\u00d6")
        buf.write("l\2\u0841\u0843\7~\2\2\u0842\u0841\3\2\2\2\u0842\u0843")
        buf.write("\3\2\2\2\u0843\u084c\3\2\2\2\u0844\u0845\f\3\2\2\u0845")
        buf.write("\u0846\7u\2\2\u0846\u0848\5\u00d6l\2\u0847\u0849\7~\2")
        buf.write("\2\u0848\u0847\3\2\2\2\u0848\u0849\3\2\2\2\u0849\u084b")
        buf.write("\3\2\2\2\u084a\u0844\3\2\2\2\u084b\u084e\3\2\2\2\u084c")
        buf.write("\u084a\3\2\2\2\u084c\u084d\3\2\2\2\u084d\u00d5\3\2\2\2")
        buf.write("\u084e\u084c\3\2\2\2\u084f\u0851\5\u0082B\2\u0850\u084f")
        buf.write("\3\2\2\2\u0850\u0851\3\2\2\2\u0851\u0852\3\2\2\2\u0852")
        buf.write("\u0865\5\u00d8m\2\u0853\u0855\5\u0082B\2\u0854\u0853\3")
        buf.write("\2\2\2\u0854\u0855\3\2\2\2\u0855\u0856\3\2\2\2\u0856\u0858")
        buf.write("\7K\2\2\u0857\u0859\5\u00dan\2\u0858\u0857\3\2\2\2\u0858")
        buf.write("\u0859\3\2\2\2\u0859\u085a\3\2\2\2\u085a\u0865\5\u00d8")
        buf.write("m\2\u085b\u085d\5\u0082B\2\u085c\u085b\3\2\2\2\u085c\u085d")
        buf.write("\3\2\2\2\u085d\u085e\3\2\2\2\u085e\u0860\5\u00dan\2\u085f")
        buf.write("\u0861\7K\2\2\u0860\u085f\3\2\2\2\u0860\u0861\3\2\2\2")
        buf.write("\u0861\u0862\3\2\2\2\u0862\u0863\5\u00d8m\2\u0863\u0865")
        buf.write("\3\2\2\2\u0864\u0850\3\2\2\2\u0864\u0854\3\2\2\2\u0864")
        buf.write("\u085c\3\2\2\2\u0865\u00d7\3\2\2\2\u0866\u0868\5\n\6\2")
        buf.write("\u0867\u0866\3\2\2\2\u0867\u0868\3\2\2\2\u0868\u0869\3")
        buf.write("\2\2\2\u0869\u086c\5\u00c0a\2\u086a\u086c\5x=\2\u086b")
        buf.write("\u0867\3\2\2\2\u086b\u086a\3\2\2\2\u086c\u00d9\3\2\2\2")
        buf.write("\u086d\u086e\t\b\2\2\u086e\u00db\3\2\2\2\u086f\u0871\5")
        buf.write("\u009aN\2\u0870\u0872\5\u00dco\2\u0871\u0870\3\2\2\2\u0871")
        buf.write("\u0872\3\2\2\2\u0872\u00dd\3\2\2\2\u0873\u0875\5\u00e0")
        buf.write("q\2\u0874\u0876\7~\2\2\u0875\u0874\3\2\2\2\u0875\u0876")
        buf.write("\3\2\2\2\u0876\u087f\3\2\2\2\u0877\u0879\5\u00e0q\2\u0878")
        buf.write("\u087a\7~\2\2\u0879\u0878\3\2\2\2\u0879\u087a\3\2\2\2")
        buf.write("\u087a\u087b\3\2\2\2\u087b\u087c\7u\2\2\u087c\u087d\5")
        buf.write("\u00dep\2\u087d\u087f\3\2\2\2\u087e\u0873\3\2\2\2\u087e")
        buf.write("\u0877\3\2\2\2\u087f\u00df\3\2\2\2\u0880\u0881\5\u00e2")
        buf.write("r\2\u0881\u0883\7P\2\2\u0882\u0884\5\u00bc_\2\u0883\u0882")
        buf.write("\3\2\2\2\u0883\u0884\3\2\2\2\u0884\u0885\3\2\2\2\u0885")
        buf.write("\u0886\7Q\2\2\u0886\u088b\3\2\2\2\u0887\u0888\5\u00e2")
        buf.write("r\2\u0888\u0889\5\u00be`\2\u0889\u088b\3\2\2\2\u088a\u0880")
        buf.write("\3\2\2\2\u088a\u0887\3\2\2\2\u088b\u00e1\3\2\2\2\u088c")
        buf.write("\u088f\5\u00d8m\2\u088d\u088f\7\177\2\2\u088e\u088c\3")
        buf.write("\2\2\2\u088e\u088d\3\2\2\2\u088f\u00e3\3\2\2\2\u0890\u0891")
        buf.write("\7/\2\2\u0891\u0892\7\u0088\2\2\u0892\u0896\7\177\2\2")
        buf.write("\u0893\u0894\7/\2\2\u0894\u0896\7\u008b\2\2\u0895\u0890")
        buf.write("\3\2\2\2\u0895\u0893\3\2\2\2\u0896\u00e5\3\2\2\2\u0897")
        buf.write("\u0898\bt\1\2\u0898\u0899\5\u00e8u\2\u0899\u089f\3\2\2")
        buf.write("\2\u089a\u089b\f\3\2\2\u089b\u089c\7u\2\2\u089c\u089e")
        buf.write("\5\u00e8u\2\u089d\u089a\3\2\2\2\u089e\u08a1\3\2\2\2\u089f")
        buf.write("\u089d\3\2\2\2\u089f\u08a0\3\2\2\2\u08a0\u00e7\3\2\2\2")
        buf.write("\u08a1\u089f\3\2\2\2\u08a2\u08a4\7\20\2\2\u08a3\u08a5")
        buf.write("\7~\2\2\u08a4\u08a3\3\2\2\2\u08a4\u08a5\3\2\2\2\u08a5")
        buf.write("\u08a7\3\2\2\2\u08a6\u08a8\7\177\2\2\u08a7\u08a6\3\2\2")
        buf.write("\2\u08a7\u08a8\3\2\2\2\u08a8\u08da\3\2\2\2\u08a9\u08ab")
        buf.write("\7\20\2\2\u08aa\u08ac\7\177\2\2\u08ab\u08aa\3\2\2\2\u08ab")
        buf.write("\u08ac\3\2\2\2\u08ac\u08ad\3\2\2\2\u08ad\u08ae\7`\2\2")
        buf.write("\u08ae\u08b0\5p9\2\u08af\u08b1\5\u00a2R\2\u08b0\u08af")
        buf.write("\3\2\2\2\u08b0\u08b1\3\2\2\2\u08b1\u08da\3\2\2\2\u08b2")
        buf.write("\u08b4\7G\2\2\u08b3\u08b5\7~\2\2\u08b4\u08b3\3\2\2\2\u08b4")
        buf.write("\u08b5\3\2\2\2\u08b5\u08b7\3\2\2\2\u08b6\u08b8\7\177\2")
        buf.write("\2\u08b7\u08b6\3\2\2\2\u08b7\u08b8\3\2\2\2\u08b8\u08da")
        buf.write("\3\2\2\2\u08b9\u08bb\7G\2\2\u08ba\u08bc\7\177\2\2\u08bb")
        buf.write("\u08ba\3\2\2\2\u08bb\u08bc\3\2\2\2\u08bc\u08bd\3\2\2\2")
        buf.write("\u08bd\u08be\7`\2\2\u08be\u08c0\5p9\2\u08bf\u08c1\5\u00a2")
        buf.write("R\2\u08c0\u08bf\3\2\2\2\u08c0\u08c1\3\2\2\2\u08c1\u08da")
        buf.write("\3\2\2\2\u08c2\u08c3\7?\2\2\u08c3\u08c4\7a\2\2\u08c4\u08c5")
        buf.write("\5\u00e6t\2\u08c5\u08c6\7b\2\2\u08c6\u08c8\7\20\2\2\u08c7")
        buf.write("\u08c9\7~\2\2\u08c8\u08c7\3\2\2\2\u08c8\u08c9\3\2\2\2")
        buf.write("\u08c9\u08cb\3\2\2\2\u08ca\u08cc\7\177\2\2\u08cb\u08ca")
        buf.write("\3\2\2\2\u08cb\u08cc\3\2\2\2\u08cc\u08da\3\2\2\2\u08cd")
        buf.write("\u08ce\7?\2\2\u08ce\u08cf\7a\2\2\u08cf\u08d0\5\u00e6t")
        buf.write("\2\u08d0\u08d1\7b\2\2\u08d1\u08d3\7\20\2\2\u08d2\u08d4")
        buf.write("\7\177\2\2\u08d3\u08d2\3\2\2\2\u08d3\u08d4\3\2\2\2\u08d4")
        buf.write("\u08d5\3\2\2\2\u08d5\u08d6\7`\2\2\u08d6\u08d7\5\6\4\2")
        buf.write("\u08d7\u08da\3\2\2\2\u08d8\u08da\5\u00b0Y\2\u08d9\u08a2")
        buf.write("\3\2\2\2\u08d9\u08a9\3\2\2\2\u08d9\u08b2\3\2\2\2\u08d9")
        buf.write("\u08b9\3\2\2\2\u08d9\u08c2\3\2\2\2\u08d9\u08cd\3\2\2\2")
        buf.write("\u08d9\u08d8\3\2\2\2\u08da\u00e9\3\2\2\2\u08db\u08dc\b")
        buf.write("v\1\2\u08dc\u08de\5\u00ecw\2\u08dd\u08df\7~\2\2\u08de")
        buf.write("\u08dd\3\2\2\2\u08de\u08df\3\2\2\2\u08df\u08e8\3\2\2\2")
        buf.write("\u08e0\u08e1\f\3\2\2\u08e1\u08e2\7u\2\2\u08e2\u08e4\5")
        buf.write("\u00ecw\2\u08e3\u08e5\7~\2\2\u08e4\u08e3\3\2\2\2\u08e4")
        buf.write("\u08e5\3\2\2\2\u08e5\u08e7\3\2\2\2\u08e6\u08e0\3\2\2\2")
        buf.write("\u08e7\u08ea\3\2\2\2\u08e8\u08e6\3\2\2\2\u08e8\u08e9\3")
        buf.write("\2\2\2\u08e9\u00eb\3\2\2\2\u08ea\u08e8\3\2\2\2\u08eb\u08ed")
        buf.write("\5p9\2\u08ec\u08ee\5\u00a2R\2\u08ed\u08ec\3\2\2\2\u08ed")
        buf.write("\u08ee\3\2\2\2\u08ee\u08f2\3\2\2\2\u08ef\u08f2\5J&\2\u08f0")
        buf.write("\u08f2\5\6\4\2\u08f1\u08eb\3\2\2\2\u08f1\u08ef\3\2\2\2")
        buf.write("\u08f1\u08f0\3\2\2\2\u08f2\u00ed\3\2\2\2\u08f3\u08f4\7")
        buf.write("G\2\2\u08f4\u08f5\5\n\6\2\u08f5\u08f6\7\177\2\2\u08f6")
        buf.write("\u0904\3\2\2\2\u08f7\u08f8\7G\2\2\u08f8\u08fa\5\n\6\2")
        buf.write("\u08f9\u08fb\7?\2\2\u08fa\u08f9\3\2\2\2\u08fa\u08fb\3")
        buf.write("\2\2\2\u08fb\u08fc\3\2\2\2\u08fc\u08fd\7\177\2\2\u08fd")
        buf.write("\u08ff\7a\2\2\u08fe\u0900\5\u00eav\2\u08ff\u08fe\3\2\2")
        buf.write("\2\u08ff\u0900\3\2\2\2\u0900\u0901\3\2\2\2\u0901\u0902")
        buf.write("\7b\2\2\u0902\u0904\3\2\2\2\u0903\u08f3\3\2\2\2\u0903")
        buf.write("\u08f7\3\2\2\2\u0904\u00ef\3\2\2\2\u0905\u0906\7D\2\2")
        buf.write("\u0906\u0908\7T\2\2\u0907\u0909\5R*\2\u0908\u0907\3\2")
        buf.write("\2\2\u0908\u0909\3\2\2\2\u0909\u090a\3\2\2\2\u090a\u090b")
        buf.write("\7U\2\2\u090b\u090c\5\u00f2z\2\u090c\u00f1\3\2\2\2\u090d")
        buf.write("\u090f\5\u00f4{\2\u090e\u0910\5\u00f2z\2\u090f\u090e\3")
        buf.write("\2\2\2\u090f\u0910\3\2\2\2\u0910\u00f3\3\2\2\2\u0911\u0912")
        buf.write("\7\f\2\2\u0912\u0913\7P\2\2\u0913\u0914\5\u00f6|\2\u0914")
        buf.write("\u0915\7Q\2\2\u0915\u0917\7T\2\2\u0916\u0918\5R*\2\u0917")
        buf.write("\u0916\3\2\2\2\u0917\u0918\3\2\2\2\u0918\u0919\3\2\2\2")
        buf.write("\u0919\u091a\7U\2\2\u091a\u00f5\3\2\2\2\u091b\u091d\5")
        buf.write("\u0082B\2\u091c\u091b\3\2\2\2\u091c\u091d\3\2\2\2\u091d")
        buf.write("\u091e\3\2\2\2\u091e\u091f\5p9\2\u091f\u0920\5\u0092J")
        buf.write("\2\u0920\u092a\3\2\2\2\u0921\u0923\5\u0082B\2\u0922\u0921")
        buf.write("\3\2\2\2\u0922\u0923\3\2\2\2\u0923\u0924\3\2\2\2\u0924")
        buf.write("\u0926\5p9\2\u0925\u0927\5\u00a2R\2\u0926\u0925\3\2\2")
        buf.write("\2\u0926\u0927\3\2\2\2\u0927\u092a\3\2\2\2\u0928\u092a")
        buf.write("\7~\2\2\u0929\u091c\3\2\2\2\u0929\u0922\3\2\2\2\u0929")
        buf.write("\u0928\3\2\2\2\u092a\u00f7\3\2\2\2\u092b\u092c\7B\2\2")
        buf.write("\u092c\u092e\7P\2\2\u092d\u092f\5\u00fa~\2\u092e\u092d")
        buf.write("\3\2\2\2\u092e\u092f\3\2\2\2\u092f\u0930\3\2\2\2\u0930")
        buf.write("\u0938\7Q\2\2\u0931\u0932\7-\2\2\u0932\u0933\7P\2\2\u0933")
        buf.write("\u0934\5J&\2\u0934\u0935\7Q\2\2\u0935\u0938\3\2\2\2\u0936")
        buf.write("\u0938\7-\2\2\u0937\u092b\3\2\2\2\u0937\u0931\3\2\2\2")
        buf.write("\u0937\u0936\3\2\2\2\u0938\u00f9\3\2\2\2\u0939\u093a\b")
        buf.write("~\1\2\u093a\u093c\5p9\2\u093b\u093d\5\u00a2R\2\u093c\u093b")
        buf.write("\3\2\2\2\u093c\u093d\3\2\2\2\u093d\u093f\3\2\2\2\u093e")
        buf.write("\u0940\7~\2\2\u093f\u093e\3\2\2\2\u093f\u0940\3\2\2\2")
        buf.write("\u0940\u094c\3\2\2\2\u0941\u0942\f\3\2\2\u0942\u0943\7")
        buf.write("u\2\2\u0943\u0945\5p9\2\u0944\u0946\5\u00a2R\2\u0945\u0944")
        buf.write("\3\2\2\2\u0945\u0946\3\2\2\2\u0946\u0948\3\2\2\2\u0947")
        buf.write("\u0949\7~\2\2\u0948\u0947\3\2\2\2\u0948\u0949\3\2\2\2")
        buf.write("\u0949\u094b\3\2\2\2\u094a\u0941\3\2\2\2\u094b\u094e\3")
        buf.write("\2\2\2\u094c\u094a\3\2\2\2\u094c\u094d\3\2\2\2\u094d\u00fb")
        buf.write("\3\2\2\2\u094e\u094c\3\2\2\2\u094f\u0950\7b\2\2\u0950")
        buf.write("\u0951\7b\2\2\u0951\u00fd\3\2\2\2\u0952\u0953\7b\2\2\u0953")
        buf.write("\u0954\7b\2\2\u0954\u0955\7`\2\2\u0955\u00ff\3\2\2\2\u0956")
        buf.write("\u0987\7,\2\2\u0957\u0987\7\27\2\2\u0958\u0959\7,\2\2")
        buf.write("\u0959\u095a\7R\2\2\u095a\u0987\7S\2\2\u095b\u095c\7\27")
        buf.write("\2\2\u095c\u095d\7R\2\2\u095d\u0987\7S\2\2\u095e\u0987")
        buf.write("\7V\2\2\u095f\u0987\7W\2\2\u0960\u0987\7X\2\2\u0961\u0987")
        buf.write("\7Y\2\2\u0962\u0987\7Z\2\2\u0963\u0987\7[\2\2\u0964\u0987")
        buf.write("\7\\\2\2\u0965\u0987\7]\2\2\u0966\u0987\7^\2\2\u0967\u0987")
        buf.write("\7_\2\2\u0968\u0987\7`\2\2\u0969\u0987\7a\2\2\u096a\u0987")
        buf.write("\7b\2\2\u096b\u0987\7c\2\2\u096c\u0987\7d\2\2\u096d\u0987")
        buf.write("\7e\2\2\u096e\u0987\7f\2\2\u096f\u0987\7g\2\2\u0970\u0987")
        buf.write("\7h\2\2\u0971\u0987\7i\2\2\u0972\u0987\7j\2\2\u0973\u0987")
        buf.write("\7k\2\2\u0974\u0987\5\u00fc\177\2\u0975\u0987\5\u00fe")
        buf.write("\u0080\2\u0976\u0987\7l\2\2\u0977\u0987\7m\2\2\u0978\u0987")
        buf.write("\7n\2\2\u0979\u0987\7o\2\2\u097a\u0987\7p\2\2\u097b\u0987")
        buf.write("\7q\2\2\u097c\u0987\7r\2\2\u097d\u0987\7s\2\2\u097e\u0987")
        buf.write("\7t\2\2\u097f\u0987\7u\2\2\u0980\u0987\7v\2\2\u0981\u0987")
        buf.write("\7w\2\2\u0982\u0983\7P\2\2\u0983\u0987\7Q\2\2\u0984\u0985")
        buf.write("\7R\2\2\u0985\u0987\7S\2\2\u0986\u0956\3\2\2\2\u0986\u0957")
        buf.write("\3\2\2\2\u0986\u0958\3\2\2\2\u0986\u095b\3\2\2\2\u0986")
        buf.write("\u095e\3\2\2\2\u0986\u095f\3\2\2\2\u0986\u0960\3\2\2\2")
        buf.write("\u0986\u0961\3\2\2\2\u0986\u0962\3\2\2\2\u0986\u0963\3")
        buf.write("\2\2\2\u0986\u0964\3\2\2\2\u0986\u0965\3\2\2\2\u0986\u0966")
        buf.write("\3\2\2\2\u0986\u0967\3\2\2\2\u0986\u0968\3\2\2\2\u0986")
        buf.write("\u0969\3\2\2\2\u0986\u096a\3\2\2\2\u0986\u096b\3\2\2\2")
        buf.write("\u0986\u096c\3\2\2\2\u0986\u096d\3\2\2\2\u0986\u096e\3")
        buf.write("\2\2\2\u0986\u096f\3\2\2\2\u0986\u0970\3\2\2\2\u0986\u0971")
        buf.write("\3\2\2\2\u0986\u0972\3\2\2\2\u0986\u0973\3\2\2\2\u0986")
        buf.write("\u0974\3\2\2\2\u0986\u0975\3\2\2\2\u0986\u0976\3\2\2\2")
        buf.write("\u0986\u0977\3\2\2\2\u0986\u0978\3\2\2\2\u0986\u0979\3")
        buf.write("\2\2\2\u0986\u097a\3\2\2\2\u0986\u097b\3\2\2\2\u0986\u097c")
        buf.write("\3\2\2\2\u0986\u097d\3\2\2\2\u0986\u097e\3\2\2\2\u0986")
        buf.write("\u097f\3\2\2\2\u0986\u0980\3\2\2\2\u0986\u0981\3\2\2\2")
        buf.write("\u0986\u0982\3\2\2\2\u0986\u0984\3\2\2\2\u0987\u0101\3")
        buf.write("\2\2\2\u015d\u0103\u010d\u0112\u0116\u011e\u0128\u012f")
        buf.write("\u0136\u013a\u0146\u014d\u0152\u0156\u0158\u0160\u0166")
        buf.write("\u016a\u0176\u017c\u017f\u0182\u0187\u0189\u019f\u01a3")
        buf.write("\u01a7\u01ad\u01b4\u01c2\u01cd\u01d8\u01e3\u01f3\u01f7")
        buf.write("\u0206\u020c\u0212\u021f\u0221\u0225\u0231\u0239\u023f")
        buf.write("\u024c\u0259\u0264\u026a\u026f\u0276\u027a\u027d\u0280")
        buf.write("\u0287\u028c\u0290\u0292\u0296\u0299\u02a0\u02a7\u02ab")
        buf.write("\u02b0\u02b4\u02b7\u02bc\u02c2\u02c8\u02cd\u02d8\u02da")
        buf.write("\u02e9\u02eb\u02f7\u02f9\u0306\u0308\u031a\u031c\u0328")
        buf.write("\u032a\u0335\u0340\u034b\u0356\u0361\u0378\u037a\u0387")
        buf.write("\u0391\u0397\u039a\u03a0\u03a4\u03a8\u03ab\u03af\u03b3")
        buf.write("\u03b7\u03bb\u03bf\u03c3\u03c8\u03ce\u03d4\u03d8\u03db")
        buf.write("\u03e7\u03ed\u03fb\u0400\u040e\u0413\u0417\u0429\u043f")
        buf.write("\u0446\u044e\u0454\u0468\u046c\u0474\u047d\u0480\u0484")
        buf.write("\u0487\u048c\u0491\u0495\u049d\u04a5\u04b2\u04b6\u04b9")
        buf.write("\u04c1\u04c7\u04cc\u04d9\u04e4\u04ed\u04f2\u0500\u0505")
        buf.write("\u0511\u051d\u0524\u052a\u052e\u0533\u0537\u0545\u0549")
        buf.write("\u054e\u0554\u055b\u0565\u056a\u056d\u0575\u057c\u0581")
        buf.write("\u0587\u058c\u0590\u0595\u0599\u059e\u05a1\u05a9\u05bc")
        buf.write("\u05c3\u05c6\u05d1\u05d5\u05d8\u05dc\u05e0\u05e6\u05e8")
        buf.write("\u05ef\u05f9\u0600\u0609\u0616\u0619\u0621\u0625\u0629")
        buf.write("\u062e\u0633\u063a\u063c\u0644\u064a\u064e\u0654\u0663")
        buf.write("\u0668\u066e\u0672\u067b\u067d\u0683\u0687\u068b\u0691")
        buf.write("\u0698\u069c\u069e\u06a0\u06a7\u06aa\u06ad\u06b0\u06b4")
        buf.write("\u06b7\u06bb\u06bf\u06c4\u06c7\u06c9\u06cd\u06d5\u06db")
        buf.write("\u06de\u06e3\u06e5\u06eb\u06ef\u06f5\u06fc\u0700\u0702")
        buf.write("\u0704\u070b\u0715\u0719\u071b\u071d\u0721\u0724\u072a")
        buf.write("\u0734\u0738\u073e\u0746\u074a\u074d\u0751\u0756\u0759")
        buf.write("\u075c\u0760\u0766\u076a\u0770\u0774\u077e\u0785\u078a")
        buf.write("\u078e\u0793\u0799\u079d\u07a3\u07a9\u07af\u07b2\u07b6")
        buf.write("\u07b9\u07bd\u07c1\u07c5\u07c9\u07cb\u07d1\u07d6\u07d8")
        buf.write("\u07db\u07de\u07e1\u07e7\u0803\u0808\u080d\u0817\u081c")
        buf.write("\u081f\u0823\u0826\u0829\u082d\u0836\u0842\u0848\u084c")
        buf.write("\u0850\u0854\u0858\u085c\u0860\u0864\u0867\u086b\u0871")
        buf.write("\u0875\u0879\u087e\u0883\u088a\u088e\u0895\u089f\u08a4")
        buf.write("\u08a7\u08ab\u08b0\u08b4\u08b7\u08bb\u08c0\u08c8\u08cb")
        buf.write("\u08d3\u08d9\u08de\u08e4\u08e8\u08ed\u08f1\u08fa\u08ff")
        buf.write("\u0903\u0908\u090f\u0917\u091c\u0922\u0926\u0929\u092e")
        buf.write("\u0937\u093c\u093f\u0945\u0948\u094c\u0986")
        return buf.getvalue()


class CPP14Parser(Parser):
    grammarFileName = "CPP14.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = ["<INVALID>", "<INVALID>", "<INVALID>", "'alignas'",
                    "'alignof'", "'asm'", "'auto'", "'bool'", "'break'",
                    "'case'", "'catch'", "'char'", "'char16_t'", "'char32_t'",
                    "'class'", "'const'", "'constexpr'", "'const_cast'",
                    "'continue'", "'decltype'", "'default'", "'delete'",
                    "'do'", "'double'", "'dynamic_cast'", "'else'", "'enum'",
                    "'explicit'", "'export'", "'extern'", "'false'", "'final'",
                    "'float'", "'for'", "'friend'", "'goto'", "'if'", "'inline'",
                    "'int'", "'long'", "'mutable'", "'namespace'", "'new'",
                    "'noexcept'", "'nullptr'", "'operator'", "'override'",
                    "'private'", "'protected'", "'public'", "'register'",
                    "'reinterpret_cast'", "'return'", "'short'", "'signed'",
                    "'sizeof'", "'static'", "'static_assert'", "'static_cast'",
                    "'struct'", "'switch'", "'template'", "'this'", "'thread_local'",
                    "'throw'", "'true'", "'try'", "'typedef'", "'typeid'",
                    "'typename'", "'union'", "'unsigned'", "'using'", "'virtual'",
                    "'void'", "'volatile'", "'wchar_t'", "'while'", "'('",
                    "')'", "'['", "']'", "'{'", "'}'", "'+'", "'-'", "'*'",
                    "'/'", "'%'", "'^'", "'&'", "'|'", "'~'", "'!'", "'='",
                    "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", "'%='",
                    "'^='", "'&='", "'|='", "'<<'", "'<<='", "'=='", "'!='",
                    "'<='", "'>='", "'&&'", "'||'", "'++'", "'--'", "','",
                    "'->*'", "'->'", "'?'", "':'", "'::'", "';'", "'.'",
                    "'.*'", "'...'"]

    symbolicNames = ["<INVALID>", "MultiLineMacro", "Directive", "Alignas",
                     "Alignof", "Asm", "Auto", "Bool", "Break", "Case",
                     "Catch", "Char", "Char16", "Char32", "Class", "Const",
                     "Constexpr", "Const_cast", "Continue", "Decltype",
                     "Default", "Delete", "Do", "Double", "Dynamic_cast",
                     "Else", "Enum", "Explicit", "Export", "Extern", "FalseToken",
                     "Final", "Float", "For", "Friend", "Goto", "If", "Inline",
                     "Int", "Long", "Mutable", "Namespace", "New", "Noexcept",
                     "Nullptr", "Operator", "Override", "Private", "Protected",
                     "Public", "Register", "Reinterpret_cast", "Return",
                     "Short", "Signed", "Sizeof", "Static", "Static_assert",
                     "Static_cast", "Struct", "Switch", "Template", "This",
                     "Thread_local", "Throw", "TrueToken", "Try", "Typedef",
                     "Typeid", "Typename", "Union", "Unsigned", "Using",
                     "Virtual", "Void", "Volatile", "Wchar", "While", "LeftParen",
                     "RightParen", "LeftBracket", "RightBracket", "LeftBrace",
                     "RightBrace", "Plus", "Minus", "Star", "Div", "Mod",
                     "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less",
                     "Greater", "PlusAssign", "MinusAssign", "StarAssign",
                     "DivAssign", "ModAssign", "XorAssign", "AndAssign",
                     "OrAssign", "LeftShift", "LeftShiftAssign", "Equal",
                     "NotEqual", "LessEqual", "GreaterEqual", "AndAnd",
                     "OrOr", "PlusPlus", "MinusMinus", "Comma", "ArrowStar",
                     "Arrow", "Question", "Colon", "Doublecolon", "Semi",
                     "Dot", "DotStar", "Ellipsis", "Identifier", "Integerliteral",
                     "Decimalliteral", "Octalliteral", "Hexadecimalliteral",
                     "Binaryliteral", "Integersuffix", "Characterliteral",
                     "Floatingliteral", "Stringliteral", "Userdefinedintegerliteral",
                     "Userdefinedfloatingliteral", "Userdefinedstringliteral",
                     "Userdefinedcharacterliteral", "Whitespace", "Newline",
                     "BlockComment", "LineComment"]

    RULE_translationunit = 0
    RULE_lambdacapture = 1
    RULE_idexpression = 2
    RULE_unqualifiedid = 3
    RULE_nestednamespecifier = 4
    RULE_capturedefault = 5
    RULE_capturelist = 6
    RULE_capture = 7
    RULE_lambdadeclarator = 8
    RULE_postfixexpression = 9
    RULE_pseudodestructorname = 10
    RULE_unaryexpression = 11
    RULE_unaryincdecexpression = 12
    RULE_unaryoperator = 13
    RULE_newexpression = 14
    RULE_newdeclarator = 15
    RULE_noptrnewdeclarator = 16
    RULE_newinitializer = 17
    RULE_deleteexpression = 18
    RULE_castexpression = 19
    RULE_pmexpression = 20
    RULE_multiplicativeexpression = 21
    RULE_additiveexpression = 22
    RULE_shiftexpression = 23
    RULE_relationalexpression = 24
    RULE_equalityexpression = 25
    RULE_andexpression = 26
    RULE_exclusiveorexpression = 27
    RULE_inclusiveorexpression = 28
    RULE_logicalandexpression = 29
    RULE_logicalorexpression = 30
    RULE_ternaryconditionalexpression = 31
    RULE_unaryconditionalexpression = 32
    RULE_assignmentexpression = 33
    RULE_assignmentoperator = 34
    RULE_expression = 35
    RULE_constantexpression = 36
    RULE_statement = 37
    RULE_casestatement = 38
    RULE_defaultstatement = 39
    RULE_statementseq = 40
    RULE_selectionstatement = 41
    RULE_elsestatement = 42
    RULE_condition = 43
    RULE_iterationstatement = 44
    RULE_forinitstatement = 45
    RULE_forrangeinitializer = 46
    RULE_jumpstatement = 47
    RULE_gotostatement = 48
    RULE_declarationseq = 49
    RULE_declaration = 50
    RULE_declspecifier = 51
    RULE_declspecifierseq = 52
    RULE_typespecifier = 53
    RULE_trailingtypespecifier = 54
    RULE_typespecifierseq = 55
    RULE_trailingtypespecifierseq = 56
    RULE_simpletypespecifier = 57
    RULE_thetypename = 58
    RULE_decltypespecifier = 59
    RULE_enumhead = 60
    RULE_enumkey = 61
    RULE_enumeratorlist = 62
    RULE_enumeratordefinition = 63
    RULE_attributespecifierseq = 64
    RULE_attributespecifier = 65
    RULE_attributelist = 66
    RULE_attribute = 67
    RULE_attributetoken = 68
    RULE_balancedtokenseq = 69
    RULE_balancedtoken = 70
    RULE_initdeclaratorlist = 71
    RULE_declarator = 72
    RULE_ptrdeclarator = 73
    RULE_noptrdeclarator = 74
    RULE_parametersandqualifiers = 75
    RULE_ptroperator = 76
    RULE_cvqualifierseq = 77
    RULE_cvqualifier = 78
    RULE_refqualifier = 79
    RULE_abstractdeclarator = 80
    RULE_ptrabstractdeclarator = 81
    RULE_noptrabstractdeclarator = 82
    RULE_abstractpackdeclarator = 83
    RULE_noptrabstractpackdeclarator = 84
    RULE_parameterdeclarationclause = 85
    RULE_parameterdeclarationlist = 86
    RULE_parameterdeclaration = 87
    RULE_functiondefinition = 88
    RULE_functionbody = 89
    RULE_initializer = 90
    RULE_braceorequalinitializer = 91
    RULE_initializerclause = 92
    RULE_initializerlist = 93
    RULE_bracedinitlist = 94
    RULE_classname = 95
    RULE_classhead = 96
    RULE_classkey = 97
    RULE_memberspecification = 98
    RULE_memberdeclaration = 99
    RULE_memberdeclaratorlist = 100
    RULE_memberdeclarator = 101
    RULE_virtspecifierseq = 102
    RULE_virtspecifier = 103
    RULE_purespecifier = 104
    RULE_basespecifierlist = 105
    RULE_basespecifier = 106
    RULE_classordecltype = 107
    RULE_accessspecifier = 108
    RULE_conversiondeclarator = 109
    RULE_meminitializerlist = 110
    RULE_meminitializer = 111
    RULE_meminitializerid = 112
    RULE_literaloperatorid = 113
    RULE_templateparameterlist = 114
    RULE_templateparameter = 115
    RULE_templateargumentlist = 116
    RULE_templateargument = 117
    RULE_typenamespecifier = 118
    RULE_tryblock = 119
    RULE_handlerseq = 120
    RULE_handler = 121
    RULE_exceptiondeclaration = 122
    RULE_exceptionspecification = 123
    RULE_typeidlist = 124
    RULE_rightShift = 125
    RULE_rightShiftAssign = 126
    RULE_theoperator = 127

    ruleNames = ["translationunit", "lambdacapture", "idexpression", "unqualifiedid",
                 "nestednamespecifier", "capturedefault", "capturelist",
                 "capture", "lambdadeclarator", "postfixexpression", "pseudodestructorname",
                 "unaryexpression", "unaryincdecexpression", "unaryoperator",
                 "newexpression", "newdeclarator", "noptrnewdeclarator",
                 "newinitializer", "deleteexpression", "castexpression",
                 "pmexpression", "multiplicativeexpression", "additiveexpression",
                 "shiftexpression", "relationalexpression", "equalityexpression",
                 "andexpression", "exclusiveorexpression", "inclusiveorexpression",
                 "logicalandexpression", "logicalorexpression", "ternaryconditionalexpression",
                 "unaryconditionalexpression", "assignmentexpression",
                 "assignmentoperator", "expression", "constantexpression",
                 "statement", "casestatement", "defaultstatement", "statementseq",
                 "selectionstatement", "elsestatement", "condition", "iterationstatement",
                 "forinitstatement", "forrangeinitializer", "jumpstatement",
                 "gotostatement", "declarationseq", "declaration", "declspecifier",
                 "declspecifierseq", "typespecifier", "trailingtypespecifier",
                 "typespecifierseq", "trailingtypespecifierseq", "simpletypespecifier",
                 "thetypename", "decltypespecifier", "enumhead", "enumkey",
                 "enumeratorlist", "enumeratordefinition", "attributespecifierseq",
                 "attributespecifier", "attributelist", "attribute", "attributetoken",
                 "balancedtokenseq", "balancedtoken", "initdeclaratorlist",
                 "declarator", "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers",
                 "ptroperator", "cvqualifierseq", "cvqualifier", "refqualifier",
                 "abstractdeclarator", "ptrabstractdeclarator", "noptrabstractdeclarator",
                 "abstractpackdeclarator", "noptrabstractpackdeclarator",
                 "parameterdeclarationclause", "parameterdeclarationlist",
                 "parameterdeclaration", "functiondefinition", "functionbody",
                 "initializer", "braceorequalinitializer", "initializerclause",
                 "initializerlist", "bracedinitlist", "classname", "classhead",
                 "classkey", "memberspecification", "memberdeclaration",
                 "memberdeclaratorlist", "memberdeclarator", "virtspecifierseq",
                 "virtspecifier", "purespecifier", "basespecifierlist",
                 "basespecifier", "classordecltype", "accessspecifier",
                 "conversiondeclarator", "meminitializerlist", "meminitializer",
                 "meminitializerid", "literaloperatorid", "templateparameterlist",
                 "templateparameter", "templateargumentlist", "templateargument",
                 "typenamespecifier", "tryblock", "handlerseq", "handler",
                 "exceptiondeclaration", "exceptionspecification", "typeidlist",
                 "rightShift", "rightShiftAssign", "theoperator"]

    EOF = Token.EOF
    MultiLineMacro = 1
    Directive = 2
    Alignas = 3
    Alignof = 4
    Asm = 5
    Auto = 6
    Bool = 7
    Break = 8
    Case = 9
    Catch = 10
    Char = 11
    Char16 = 12
    Char32 = 13
    Class = 14
    Const = 15
    Constexpr = 16
    Const_cast = 17
    Continue = 18
    Decltype = 19
    Default = 20
    Delete = 21
    Do = 22
    Double = 23
    Dynamic_cast = 24
    Else = 25
    Enum = 26
    Explicit = 27
    Export = 28
    Extern = 29
    FalseToken = 30
    Final = 31
    Float = 32
    For = 33
    Friend = 34
    Goto = 35
    If = 36
    Inline = 37
    Int = 38
    Long = 39
    Mutable = 40
    Namespace = 41
    New = 42
    Noexcept = 43
    Nullptr = 44
    Operator = 45
    Override = 46
    Private = 47
    Protected = 48
    Public = 49
    Register = 50
    Reinterpret_cast = 51
    Return = 52
    Short = 53
    Signed = 54
    Sizeof = 55
    Static = 56
    Static_assert = 57
    Static_cast = 58
    Struct = 59
    Switch = 60
    Template = 61
    This = 62
    Thread_local = 63
    Throw = 64
    TrueToken = 65
    Try = 66
    Typedef = 67
    Typeid = 68
    Typename = 69
    Union = 70
    Unsigned = 71
    Using = 72
    Virtual = 73
    Void = 74
    Volatile = 75
    Wchar = 76
    While = 77
    LeftParen = 78
    RightParen = 79
    LeftBracket = 80
    RightBracket = 81
    LeftBrace = 82
    RightBrace = 83
    Plus = 84
    Minus = 85
    Star = 86
    Div = 87
    Mod = 88
    Caret = 89
    And = 90
    Or = 91
    Tilde = 92
    Not = 93
    Assign = 94
    Less = 95
    Greater = 96
    PlusAssign = 97
    MinusAssign = 98
    StarAssign = 99
    DivAssign = 100
    ModAssign = 101
    XorAssign = 102
    AndAssign = 103
    OrAssign = 104
    LeftShift = 105
    LeftShiftAssign = 106
    Equal = 107
    NotEqual = 108
    LessEqual = 109
    GreaterEqual = 110
    AndAnd = 111
    OrOr = 112
    PlusPlus = 113
    MinusMinus = 114
    Comma = 115
    ArrowStar = 116
    Arrow = 117
    Question = 118
    Colon = 119
    Doublecolon = 120
    Semi = 121
    Dot = 122
    DotStar = 123
    Ellipsis = 124
    Identifier = 125
    Integerliteral = 126
    Decimalliteral = 127
    Octalliteral = 128
    Hexadecimalliteral = 129
    Binaryliteral = 130
    Integersuffix = 131
    Characterliteral = 132
    Floatingliteral = 133
    Stringliteral = 134
    Userdefinedintegerliteral = 135
    Userdefinedfloatingliteral = 136
    Userdefinedstringliteral = 137
    Userdefinedcharacterliteral = 138
    Whitespace = 139
    Newline = 140
    BlockComment = 141
    LineComment = 142

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class TranslationunitContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CPP14Parser.EOF, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_translationunit

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTranslationunit"):
                listener.enterTranslationunit(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTranslationunit"):
                listener.exitTranslationunit(self)

    def translationunit(self):

        localctx = CPP14Parser.TranslationunitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationunit)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (
                1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (
                1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (
                1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or (
                    (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                1 << (CPP14Parser.Identifier - 67)))) != 0):
                self.state = 256
                self.declarationseq(0)

            self.state = 259
            self.match(CPP14Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdacaptureContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capturedefault(self):
            return self.getTypedRuleContext(CPP14Parser.CapturedefaultContext, 0)

        def capturelist(self):
            return self.getTypedRuleContext(CPP14Parser.CapturelistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdacapture

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambdacapture"):
                listener.enterLambdacapture(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambdacapture"):
                listener.exitLambdacapture(self)

    def lambdacapture(self):

        localctx = CPP14Parser.LambdacaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_lambdacapture)
        try:
            self.state = 267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 1, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 261
                self.capturedefault()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 262
                self.capturelist(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 263
                self.capturedefault()
                self.state = 264
                self.match(CPP14Parser.Comma)
                self.state = 265
                self.capturelist(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_idexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdexpression"):
                listener.enterIdexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdexpression"):
                listener.exitIdexpression(self)

    def idexpression(self):

        localctx = CPP14Parser.IdexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_idexpression)
        self._la = 0  # Token type
        try:
            self.state = 276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 3, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 269
                self.unqualifiedid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 270
                self.nestednamespecifier(0)
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Template:
                    self.state = 271
                    self.match(CPP14Parser.Template)

                self.state = 274
                self.unqualifiedid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnqualifiedidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def theoperator(self):
            return self.getTypedRuleContext(CPP14Parser.TheoperatorContext, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def conversiondeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.ConversiondeclaratorContext, 0)

        def literaloperatorid(self):
            return self.getTypedRuleContext(CPP14Parser.LiteraloperatoridContext, 0)

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unqualifiedid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnqualifiedid"):
                listener.enterUnqualifiedid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnqualifiedid"):
                listener.exitUnqualifiedid(self)

    def unqualifiedid(self):

        localctx = CPP14Parser.UnqualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_unqualifiedid)
        self._la = 0  # Token type
        try:
            self.state = 312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 8, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 278
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 279
                self.match(CPP14Parser.Operator)
                self.state = 280
                self.theoperator()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 281
                self.match(CPP14Parser.Operator)
                self.state = 282
                self.typespecifierseq()
                self.state = 284
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 4, self._ctx)
                if la_ == 1:
                    self.state = 283
                    self.conversiondeclarator()

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 286
                self.literaloperatorid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 287
                self.match(CPP14Parser.Tilde)
                self.state = 288
                self.classname()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 289
                self.match(CPP14Parser.Tilde)
                self.state = 290
                self.decltypespecifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 291
                self.match(CPP14Parser.Identifier)
                self.state = 292
                self.match(CPP14Parser.Less)
                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 293
                    self.templateargumentlist(0)

                self.state = 296
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 297
                self.match(CPP14Parser.Operator)
                self.state = 298
                self.theoperator()
                self.state = 299
                self.match(CPP14Parser.Less)
                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 300
                    self.templateargumentlist(0)

                self.state = 303
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 305
                self.literaloperatorid()
                self.state = 306
                self.match(CPP14Parser.Less)
                self.state = 308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 307
                    self.templateargumentlist(0)

                self.state = 310
                self.match(CPP14Parser.Greater)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestednamespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypenameContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_nestednamespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNestednamespecifier"):
                listener.enterNestednamespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNestednamespecifier"):
                listener.exitNestednamespecifier(self)

    def nestednamespecifier(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NestednamespecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 8
        self.enterRecursionRule(localctx, 8, self.RULE_nestednamespecifier, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 9, self._ctx)
            if la_ == 1:
                self.state = 315
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 2:
                self.state = 316
                self.thetypename()
                self.state = 317
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 3:
                self.state = 319
                self.match(CPP14Parser.Identifier)
                self.state = 320
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 4:
                self.state = 321
                self.decltypespecifier()
                self.state = 322
                self.match(CPP14Parser.Doublecolon)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 342
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 13, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 340
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 12, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NestednamespecifierContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                        self.state = 326
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 327
                        self.match(CPP14Parser.Identifier)
                        self.state = 328
                        self.match(CPP14Parser.Doublecolon)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NestednamespecifierContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                        self.state = 329
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 331
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 330
                            self.match(CPP14Parser.Template)

                        self.state = 333
                        self.match(CPP14Parser.Identifier)
                        self.state = 334
                        self.match(CPP14Parser.Less)
                        self.state = 336
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                            1 << CPP14Parser.Enum) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (
                            1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (
                            1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_cast) | (
                            1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                            1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Union - 65)) | (
                            1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                            1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                            1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                                (1 << (CPP14Parser.Characterliteral - 132)) | (
                                                1 << (CPP14Parser.Floatingliteral - 132)) | (
                                            1 << (CPP14Parser.Stringliteral - 132)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 335
                            self.templateargumentlist(0)

                        self.state = 338
                        self.match(CPP14Parser.Greater)
                        self.state = 339
                        self.match(CPP14Parser.Doublecolon)
                        pass

                self.state = 344
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 13, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class CapturedefaultContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return CPP14Parser.RULE_capturedefault

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCapturedefault"):
                listener.enterCapturedefault(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCapturedefault"):
                listener.exitCapturedefault(self)

    def capturedefault(self):

        localctx = CPP14Parser.CapturedefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_capturedefault)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.And or _la == CPP14Parser.Assign):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CapturelistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capture(self):
            return self.getTypedRuleContext(CPP14Parser.CaptureContext, 0)

        def capturelist(self):
            return self.getTypedRuleContext(CPP14Parser.CapturelistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_capturelist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCapturelist"):
                listener.enterCapturelist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCapturelist"):
                listener.exitCapturelist(self)

    def capturelist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.CapturelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 12
        self.enterRecursionRule(localctx, 12, self.RULE_capturelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.capture()
            self.state = 350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 14, self._ctx)
            if la_ == 1:
                self.state = 349
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 360
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 16, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.CapturelistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_capturelist)
                    self.state = 352
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 353
                    self.match(CPP14Parser.Comma)
                    self.state = 354
                    self.capture()
                    self.state = 356
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 15, self._ctx)
                    if la_ == 1:
                        self.state = 355
                        self.match(CPP14Parser.Ellipsis)

                self.state = 362
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 16, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class CaptureContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def This(self):
            return self.getToken(CPP14Parser.This, 0)

        def initializer(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_capture

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCapture"):
                listener.enterCapture(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCapture"):
                listener.exitCapture(self)

    def capture(self):

        localctx = CPP14Parser.CaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_capture)
        try:
            self.state = 372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 17, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 363
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 364
                self.match(CPP14Parser.And)
                self.state = 365
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 366
                self.match(CPP14Parser.This)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 367
                self.match(CPP14Parser.Identifier)
                self.state = 368
                self.initializer()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 369
                self.match(CPP14Parser.And)
                self.state = 370
                self.match(CPP14Parser.Identifier)
                self.state = 371
                self.initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdadeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationclauseContext, 0)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionspecificationContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdadeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambdadeclarator"):
                listener.enterLambdadeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambdadeclarator"):
                listener.exitLambdadeclarator(self)

    def lambdadeclarator(self):

        localctx = CPP14Parser.LambdadeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_lambdadeclarator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.match(CPP14Parser.LeftParen)
            self.state = 375
            self.parameterdeclarationclause()
            self.state = 376
            self.match(CPP14Parser.RightParen)
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Mutable:
                self.state = 377
                self.match(CPP14Parser.Mutable)

            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Noexcept or _la == CPP14Parser.Throw:
                self.state = 380
                self.exceptionspecification()

            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 383
                self.attributespecifierseq(0)

            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Arrow:
                self.state = 386
                self.match(CPP14Parser.Arrow)
                self.state = 387
                self.trailingtypespecifierseq()
                self.state = 389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 388
                    self.abstractdeclarator()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integerliteral(self):
            return self.getToken(CPP14Parser.Integerliteral, 0)

        def Characterliteral(self):
            return self.getToken(CPP14Parser.Characterliteral, 0)

        def Floatingliteral(self):
            return self.getToken(CPP14Parser.Floatingliteral, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def FalseToken(self):
            return self.getToken(CPP14Parser.FalseToken, 0)

        def TrueToken(self):
            return self.getToken(CPP14Parser.TrueToken, 0)

        def Nullptr(self):
            return self.getToken(CPP14Parser.Nullptr, 0)

        def Userdefinedintegerliteral(self):
            return self.getToken(CPP14Parser.Userdefinedintegerliteral, 0)

        def Userdefinedfloatingliteral(self):
            return self.getToken(CPP14Parser.Userdefinedfloatingliteral, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def Userdefinedcharacterliteral(self):
            return self.getToken(CPP14Parser.Userdefinedcharacterliteral, 0)

        def This(self):
            return self.getToken(CPP14Parser.This, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def lambdacapture(self):
            return self.getTypedRuleContext(CPP14Parser.LambdacaptureContext, 0)

        def lambdadeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.LambdadeclaratorContext, 0)

        def statementseq(self):
            return self.getTypedRuleContext(CPP14Parser.StatementseqContext, 0)

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypenamespecifierContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def Dynamic_cast(self):
            return self.getToken(CPP14Parser.Dynamic_cast, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Static_cast(self):
            return self.getToken(CPP14Parser.Static_cast, 0)

        def Reinterpret_cast(self):
            return self.getToken(CPP14Parser.Reinterpret_cast, 0)

        def Const_cast(self):
            return self.getToken(CPP14Parser.Const_cast, 0)

        def Typeid(self):
            return self.getToken(CPP14Parser.Typeid, 0)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def pseudodestructorname(self):
            return self.getTypedRuleContext(CPP14Parser.PseudodestructornameContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_postfixexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPostfixexpression"):
                listener.enterPostfixexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPostfixexpression"):
                listener.exitPostfixexpression(self)

    def postfixexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PostfixexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 18
        self.enterRecursionRule(localctx, 18, self.RULE_postfixexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 33, self._ctx)
            if la_ == 1:
                self.state = 394
                self.match(CPP14Parser.Integerliteral)
                pass

            elif la_ == 2:
                self.state = 395
                self.match(CPP14Parser.Characterliteral)
                pass

            elif la_ == 3:
                self.state = 396
                self.match(CPP14Parser.Floatingliteral)
                pass

            elif la_ == 4:
                self.state = 397
                self.match(CPP14Parser.Stringliteral)
                pass

            elif la_ == 5:
                self.state = 398
                self.match(CPP14Parser.FalseToken)
                pass

            elif la_ == 6:
                self.state = 399
                self.match(CPP14Parser.TrueToken)
                pass

            elif la_ == 7:
                self.state = 400
                self.match(CPP14Parser.Nullptr)
                pass

            elif la_ == 8:
                self.state = 401
                self.match(CPP14Parser.Userdefinedintegerliteral)
                pass

            elif la_ == 9:
                self.state = 402
                self.match(CPP14Parser.Userdefinedfloatingliteral)
                pass

            elif la_ == 10:
                self.state = 403
                self.match(CPP14Parser.Userdefinedstringliteral)
                pass

            elif la_ == 11:
                self.state = 404
                self.match(CPP14Parser.Userdefinedcharacterliteral)
                pass

            elif la_ == 12:
                self.state = 405
                self.match(CPP14Parser.This)
                pass

            elif la_ == 13:
                self.state = 406
                self.match(CPP14Parser.LeftParen)
                self.state = 407
                self.expression(0)
                self.state = 408
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 14:
                self.state = 410
                self.idexpression()
                pass

            elif la_ == 15:
                self.state = 411
                self.match(CPP14Parser.LeftBracket)
                self.state = 413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & (
                            (1 << (CPP14Parser.This - 62)) | (1 << (CPP14Parser.And - 62)) | (
                        1 << (CPP14Parser.Assign - 62)) | (1 << (CPP14Parser.Identifier - 62)))) != 0):
                    self.state = 412
                    self.lambdacapture()

                self.state = 415
                self.match(CPP14Parser.RightBracket)
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.LeftParen:
                    self.state = 416
                    self.lambdadeclarator()

                self.state = 419
                self.match(CPP14Parser.LeftBrace)
                self.state = 421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                    1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (
                    1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (
                    1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (
                    1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                    1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (
                    1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Goto) | (
                    1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (
                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Return) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (
                    1 << CPP14Parser.This) | (1 << CPP14Parser.Thread_local))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Try - 64)) | (
                    1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                    1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                    1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                    1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                    1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Semi - 64)) | (
                    1 << (CPP14Parser.Ellipsis - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 420
                    self.statementseq(0)

                self.state = 423
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 16:
                self.state = 424
                self.simpletypespecifier()
                self.state = 425
                self.match(CPP14Parser.LeftParen)
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                    1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                    1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 426
                    self.initializerlist(0)

                self.state = 429
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 17:
                self.state = 431
                self.typenamespecifier()
                self.state = 432
                self.match(CPP14Parser.LeftParen)
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                    1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                    1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 433
                    self.initializerlist(0)

                self.state = 436
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 18:
                self.state = 438
                self.simpletypespecifier()
                self.state = 439
                self.bracedinitlist()
                pass

            elif la_ == 19:
                self.state = 441
                self.typenamespecifier()
                self.state = 442
                self.bracedinitlist()
                pass

            elif la_ == 20:
                self.state = 444
                self.match(CPP14Parser.Dynamic_cast)
                self.state = 445
                self.match(CPP14Parser.Less)
                self.state = 446
                self.typespecifierseq()
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 447
                    self.abstractdeclarator()

                self.state = 450
                self.match(CPP14Parser.Greater)
                self.state = 451
                self.match(CPP14Parser.LeftParen)
                self.state = 452
                self.expression(0)
                self.state = 453
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 21:
                self.state = 455
                self.match(CPP14Parser.Static_cast)
                self.state = 456
                self.match(CPP14Parser.Less)
                self.state = 457
                self.typespecifierseq()
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 458
                    self.abstractdeclarator()

                self.state = 461
                self.match(CPP14Parser.Greater)
                self.state = 462
                self.match(CPP14Parser.LeftParen)
                self.state = 463
                self.expression(0)
                self.state = 464
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 22:
                self.state = 466
                self.match(CPP14Parser.Reinterpret_cast)
                self.state = 467
                self.match(CPP14Parser.Less)
                self.state = 468
                self.typespecifierseq()
                self.state = 470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 469
                    self.abstractdeclarator()

                self.state = 472
                self.match(CPP14Parser.Greater)
                self.state = 473
                self.match(CPP14Parser.LeftParen)
                self.state = 474
                self.expression(0)
                self.state = 475
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 23:
                self.state = 477
                self.match(CPP14Parser.Const_cast)
                self.state = 478
                self.match(CPP14Parser.Less)
                self.state = 479
                self.typespecifierseq()
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 480
                    self.abstractdeclarator()

                self.state = 483
                self.match(CPP14Parser.Greater)
                self.state = 484
                self.match(CPP14Parser.LeftParen)
                self.state = 485
                self.expression(0)
                self.state = 486
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 24:
                self.state = 488
                self.match(CPP14Parser.Typeid)
                self.state = 489
                self.match(CPP14Parser.LeftParen)
                self.state = 490
                self.expression(0)
                self.state = 491
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 25:
                self.state = 493
                self.match(CPP14Parser.Typeid)
                self.state = 494
                self.match(CPP14Parser.LeftParen)
                self.state = 495
                self.typespecifierseq()
                self.state = 497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 496
                    self.abstractdeclarator()

                self.state = 499
                self.match(CPP14Parser.RightParen)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 543
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 38, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 541
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 37, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 503
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 504
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 505
                        self.expression(0)
                        self.state = 506
                        self.match(CPP14Parser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 508
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 509
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 510
                        self.bracedinitlist()
                        self.state = 511
                        self.match(CPP14Parser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 513
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 514
                        self.match(CPP14Parser.LeftParen)
                        self.state = 516
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                            CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (
                            1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                            1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                            1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                            1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                            1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (
                            1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                            1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                            1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                            1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                            1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                                (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                                (1 << (CPP14Parser.Characterliteral - 132)) | (
                                                1 << (CPP14Parser.Floatingliteral - 132)) | (
                                            1 << (CPP14Parser.Stringliteral - 132)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 515
                            self.initializerlist(0)

                        self.state = 518
                        self.match(CPP14Parser.RightParen)
                        pass

                    elif la_ == 4:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 519
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 520
                        self.match(CPP14Parser.Dot)
                        self.state = 522
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 521
                            self.match(CPP14Parser.Template)

                        self.state = 524
                        self.idexpression()
                        pass

                    elif la_ == 5:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 525
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 526
                        self.match(CPP14Parser.Arrow)
                        self.state = 528
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 527
                            self.match(CPP14Parser.Template)

                        self.state = 530
                        self.idexpression()
                        pass

                    elif la_ == 6:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 531
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 532
                        self.match(CPP14Parser.Dot)
                        self.state = 533
                        self.pseudodestructorname()
                        pass

                    elif la_ == 7:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 534
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 535
                        self.match(CPP14Parser.Arrow)
                        self.state = 536
                        self.pseudodestructorname()
                        pass

                    elif la_ == 8:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 537
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 538
                        self.match(CPP14Parser.PlusPlus)
                        pass

                    elif la_ == 9:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 539
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 540
                        self.match(CPP14Parser.MinusMinus)
                        pass

                self.state = 545
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 38, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PseudodestructornameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ThetypenameContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ThetypenameContext, i)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pseudodestructorname

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPseudodestructorname"):
                listener.enterPseudodestructorname(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPseudodestructorname"):
                listener.exitPseudodestructorname(self)

    def pseudodestructorname(self):

        localctx = CPP14Parser.PseudodestructornameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_pseudodestructorname)
        self._la = 0  # Token type
        try:
            self.state = 573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 42, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 547
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 39, self._ctx)
                if la_ == 1:
                    self.state = 546
                    self.nestednamespecifier(0)

                self.state = 549
                self.thetypename()
                self.state = 550
                self.match(CPP14Parser.Doublecolon)
                self.state = 551
                self.match(CPP14Parser.Tilde)
                self.state = 552
                self.thetypename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 554
                self.nestednamespecifier(0)
                self.state = 555
                self.match(CPP14Parser.Template)
                self.state = 556
                self.match(CPP14Parser.Identifier)
                self.state = 557
                self.match(CPP14Parser.Less)
                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 558
                    self.templateargumentlist(0)

                self.state = 561
                self.match(CPP14Parser.Greater)
                self.state = 562
                self.match(CPP14Parser.Doublecolon)
                self.state = 563
                self.match(CPP14Parser.Tilde)
                self.state = 564
                self.thetypename()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                    self.state = 566
                    self.nestednamespecifier(0)

                self.state = 569
                self.match(CPP14Parser.Tilde)
                self.state = 570
                self.thetypename()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 571
                self.match(CPP14Parser.Tilde)
                self.state = 572
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext, 0)

        def unaryincdecexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryincdecexpressionContext, 0)

        def unaryoperator(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryoperatorContext, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def Sizeof(self):
            return self.getToken(CPP14Parser.Sizeof, 0)

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Alignof(self):
            return self.getToken(CPP14Parser.Alignof, 0)

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def newexpression(self):
            return self.getTypedRuleContext(CPP14Parser.NewexpressionContext, 0)

        def deleteexpression(self):
            return self.getTypedRuleContext(CPP14Parser.DeleteexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryexpression"):
                listener.enterUnaryexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryexpression"):
                listener.exitUnaryexpression(self)

    def unaryexpression(self):

        localctx = CPP14Parser.UnaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_unaryexpression)
        self._la = 0  # Token type
        try:
            self.state = 610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 45, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 575
                self.postfixexpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 576
                self.unaryincdecexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 577
                self.unaryoperator()
                self.state = 578
                self.castexpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 580
                self.match(CPP14Parser.Sizeof)
                self.state = 581
                self.unaryexpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 582
                self.match(CPP14Parser.Sizeof)
                self.state = 583
                self.match(CPP14Parser.LeftParen)
                self.state = 584
                self.typespecifierseq()
                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 585
                    self.abstractdeclarator()

                self.state = 588
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 590
                self.match(CPP14Parser.Sizeof)
                self.state = 591
                self.match(CPP14Parser.Ellipsis)
                self.state = 592
                self.match(CPP14Parser.LeftParen)
                self.state = 593
                self.match(CPP14Parser.Identifier)
                self.state = 594
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 595
                self.match(CPP14Parser.Alignof)
                self.state = 596
                self.match(CPP14Parser.LeftParen)
                self.state = 597
                self.typespecifierseq()
                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 598
                    self.abstractdeclarator()

                self.state = 601
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 603
                self.match(CPP14Parser.Noexcept)
                self.state = 604
                self.match(CPP14Parser.LeftParen)
                self.state = 605
                self.expression(0)
                self.state = 606
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 608
                self.newexpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 609
                self.deleteexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryincdecexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryincdecexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryincdecexpression"):
                listener.enterUnaryincdecexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryincdecexpression"):
                listener.exitUnaryincdecexpression(self)

    def unaryincdecexpression(self):

        localctx = CPP14Parser.UnaryincdecexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_unaryincdecexpression)
        try:
            self.state = 616
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.PlusPlus]:
                self.enterOuterAlt(localctx, 1)
                self.state = 612
                self.match(CPP14Parser.PlusPlus)
                self.state = 613
                self.castexpression()
                pass
            elif token in [CPP14Parser.MinusMinus]:
                self.enterOuterAlt(localctx, 2)
                self.state = 614
                self.match(CPP14Parser.MinusMinus)
                self.state = 615
                self.castexpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryoperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryoperator"):
                listener.enterUnaryoperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryoperator"):
                listener.exitUnaryoperator(self)

    def unaryoperator(self):

        localctx = CPP14Parser.UnaryoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_unaryoperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            _la = self._input.LA(1)
            if not (((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & (
                                    (1 << (CPP14Parser.Plus - 84)) | (1 << (CPP14Parser.Minus - 84)) | (
                                1 << (CPP14Parser.Star - 84)) | (1 << (CPP14Parser.And - 84)) | (
                        1 << (CPP14Parser.Or - 84)) | (1 << (CPP14Parser.Tilde - 84)) | (
                1 << (CPP14Parser.Not - 84)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext, 0)

        def newinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.NewinitializerContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewexpression"):
                listener.enterNewexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewexpression"):
                listener.exitNewexpression(self)

    def newexpression(self):

        localctx = CPP14Parser.NewexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_newexpression)
        self._la = 0  # Token type
        try:
            self.state = 656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 55, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Doublecolon:
                    self.state = 620
                    self.match(CPP14Parser.Doublecolon)

                self.state = 623
                self.match(CPP14Parser.New)
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.LeftParen:
                    self.state = 624
                    self.match(CPP14Parser.LeftParen)
                    self.state = 625
                    self.initializerlist(0)
                    self.state = 626
                    self.match(CPP14Parser.RightParen)

                self.state = 630
                self.typespecifierseq()
                self.state = 632
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 49, self._ctx)
                if la_ == 1:
                    self.state = 631
                    self.newdeclarator()

                self.state = 635
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 50, self._ctx)
                if la_ == 1:
                    self.state = 634
                    self.newinitializer()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Doublecolon:
                    self.state = 637
                    self.match(CPP14Parser.Doublecolon)

                self.state = 640
                self.match(CPP14Parser.New)
                self.state = 645
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 52, self._ctx)
                if la_ == 1:
                    self.state = 641
                    self.match(CPP14Parser.LeftParen)
                    self.state = 642
                    self.initializerlist(0)
                    self.state = 643
                    self.match(CPP14Parser.RightParen)

                self.state = 647
                self.match(CPP14Parser.LeftParen)
                self.state = 648
                self.typespecifierseq()
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 649
                    self.abstractdeclarator()

                self.state = 652
                self.match(CPP14Parser.RightParen)
                self.state = 654
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 54, self._ctx)
                if la_ == 1:
                    self.state = 653
                    self.newinitializer()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext, 0)

        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrnewdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewdeclarator"):
                listener.enterNewdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewdeclarator"):
                listener.exitNewdeclarator(self)

    def newdeclarator(self):

        localctx = CPP14Parser.NewdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_newdeclarator)
        try:
            self.state = 663
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                         CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 658
                self.ptroperator()
                self.state = 660
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 56, self._ctx)
                if la_ == 1:
                    self.state = 659
                    self.newdeclarator()

                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 662
                self.noptrnewdeclarator(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrnewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrnewdeclaratorContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrnewdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrnewdeclarator"):
                listener.enterNoptrnewdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrnewdeclarator"):
                listener.exitNoptrnewdeclarator(self)

    def noptrnewdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrnewdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 32
        self.enterRecursionRule(localctx, 32, self.RULE_noptrnewdeclarator, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.match(CPP14Parser.LeftBracket)
            self.state = 667
            self.expression(0)
            self.state = 668
            self.match(CPP14Parser.RightBracket)
            self.state = 670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 58, self._ctx)
            if la_ == 1:
                self.state = 669
                self.attributespecifierseq(0)

            self._ctx.stop = self._input.LT(-1)
            self.state = 681
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 60, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoptrnewdeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrnewdeclarator)
                    self.state = 672
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 673
                    self.match(CPP14Parser.LeftBracket)
                    self.state = 674
                    self.constantexpression()
                    self.state = 675
                    self.match(CPP14Parser.RightBracket)
                    self.state = 677
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 59, self._ctx)
                    if la_ == 1:
                        self.state = 676
                        self.attributespecifierseq(0)

                self.state = 683
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 60, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class NewinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newinitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewinitializer"):
                listener.enterNewinitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewinitializer"):
                listener.exitNewinitializer(self)

    def newinitializer(self):

        localctx = CPP14Parser.NewinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_newinitializer)
        self._la = 0  # Token type
        try:
            self.state = 690
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 684
                self.match(CPP14Parser.LeftParen)
                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                    1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                    1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 685
                    self.initializerlist(0)

                self.state = 688
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 689
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_deleteexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeleteexpression"):
                listener.enterDeleteexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeleteexpression"):
                listener.exitDeleteexpression(self)

    def deleteexpression(self):

        localctx = CPP14Parser.DeleteexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_deleteexpression)
        self._la = 0  # Token type
        try:
            self.state = 704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 65, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Doublecolon:
                    self.state = 692
                    self.match(CPP14Parser.Doublecolon)

                self.state = 695
                self.match(CPP14Parser.Delete)
                self.state = 696
                self.castexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Doublecolon:
                    self.state = 697
                    self.match(CPP14Parser.Doublecolon)

                self.state = 700
                self.match(CPP14Parser.Delete)
                self.state = 701
                self.match(CPP14Parser.LeftBracket)
                self.state = 702
                self.match(CPP14Parser.RightBracket)
                self.state = 703
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_castexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCastexpression"):
                listener.enterCastexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCastexpression"):
                listener.exitCastexpression(self)

    def castexpression(self):

        localctx = CPP14Parser.CastexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_castexpression)
        self._la = 0  # Token type
        try:
            self.state = 715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 67, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 706
                self.unaryexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 707
                self.match(CPP14Parser.LeftParen)
                self.state = 708
                self.typespecifierseq()
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 709
                    self.abstractdeclarator()

                self.state = 712
                self.match(CPP14Parser.RightParen)
                self.state = 713
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PmexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def pmexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PmexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pmexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPmexpression"):
                listener.enterPmexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPmexpression"):
                listener.exitPmexpression(self)

    def pmexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PmexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 40
        self.enterRecursionRule(localctx, 40, self.RULE_pmexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.castexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 728
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 69, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 726
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 68, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.PmexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                        self.state = 720
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 721
                        self.match(CPP14Parser.DotStar)
                        self.state = 722
                        self.castexpression()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.PmexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                        self.state = 723
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 724
                        self.match(CPP14Parser.ArrowStar)
                        self.state = 725
                        self.castexpression()
                        pass

                self.state = 730
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 69, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class MultiplicativeexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pmexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PmexpressionContext, 0)

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14Parser.MultiplicativeexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_multiplicativeexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMultiplicativeexpression"):
                listener.enterMultiplicativeexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMultiplicativeexpression"):
                listener.exitMultiplicativeexpression(self)

    def multiplicativeexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.MultiplicativeexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 42
        self.enterRecursionRule(localctx, 42, self.RULE_multiplicativeexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.pmexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 745
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 71, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 743
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 70, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 734
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 735
                        self.match(CPP14Parser.Star)
                        self.state = 736
                        self.pmexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 737
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 738
                        self.match(CPP14Parser.Div)
                        self.state = 739
                        self.pmexpression(0)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 740
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 741
                        self.match(CPP14Parser.Mod)
                        self.state = 742
                        self.pmexpression(0)
                        pass

                self.state = 747
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 71, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AdditiveexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14Parser.MultiplicativeexpressionContext, 0)

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AdditiveexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_additiveexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAdditiveexpression"):
                listener.enterAdditiveexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAdditiveexpression"):
                listener.exitAdditiveexpression(self)

    def additiveexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AdditiveexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 44
        self.enterRecursionRule(localctx, 44, self.RULE_additiveexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.multiplicativeexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 759
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 73, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 757
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 72, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.AdditiveexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                        self.state = 751
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 752
                        self.match(CPP14Parser.Plus)
                        self.state = 753
                        self.multiplicativeexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.AdditiveexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                        self.state = 754
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 755
                        self.match(CPP14Parser.Minus)
                        self.state = 756
                        self.multiplicativeexpression(0)
                        pass

                self.state = 761
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 73, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ShiftexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AdditiveexpressionContext, 0)

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext, 0)

        def rightShift(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_shiftexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShiftexpression"):
                listener.enterShiftexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShiftexpression"):
                listener.exitShiftexpression(self)

    def shiftexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ShiftexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 46
        self.enterRecursionRule(localctx, 46, self.RULE_shiftexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.additiveexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 774
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 75, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 772
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 74, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.ShiftexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftexpression)
                        self.state = 765
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 766
                        self.match(CPP14Parser.LeftShift)
                        self.state = 767
                        self.additiveexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.ShiftexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftexpression)
                        self.state = 768
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 769
                        self.rightShift()
                        self.state = 770
                        self.additiveexpression(0)
                        pass

                self.state = 776
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 75, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class RelationalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext, 0)

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_relationalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelationalexpression"):
                listener.enterRelationalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelationalexpression"):
                listener.exitRelationalexpression(self)

    def relationalexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.RelationalexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 48
        self.enterRecursionRule(localctx, 48, self.RULE_relationalexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.shiftexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 794
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 77, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 792
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 76, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 780
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 781
                        self.match(CPP14Parser.Less)
                        self.state = 782
                        self.shiftexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 783
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 784
                        self.match(CPP14Parser.Greater)
                        self.state = 785
                        self.shiftexpression(0)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 786
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 787
                        self.match(CPP14Parser.LessEqual)
                        self.state = 788
                        self.shiftexpression(0)
                        pass

                    elif la_ == 4:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 789
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 790
                        self.match(CPP14Parser.GreaterEqual)
                        self.state = 791
                        self.shiftexpression(0)
                        pass

                self.state = 796
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 77, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EqualityexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext, 0)

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_equalityexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEqualityexpression"):
                listener.enterEqualityexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEqualityexpression"):
                listener.exitEqualityexpression(self)

    def equalityexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EqualityexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 50
        self.enterRecursionRule(localctx, 50, self.RULE_equalityexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.relationalexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 808
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 79, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 806
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 78, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                        self.state = 800
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 801
                        self.match(CPP14Parser.Equal)
                        self.state = 802
                        self.relationalexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                        self.state = 803
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 804
                        self.match(CPP14Parser.NotEqual)
                        self.state = 805
                        self.relationalexpression(0)
                        pass

                self.state = 810
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 79, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AndexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, 0)

        def andexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AndexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_andexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAndexpression"):
                listener.enterAndexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAndexpression"):
                listener.exitAndexpression(self)

    def andexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AndexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_andexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.equalityexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 819
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 80, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AndexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_andexpression)
                    self.state = 814
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 815
                    self.match(CPP14Parser.And)
                    self.state = 816
                    self.equalityexpression(0)
                self.state = 821
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 80, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExclusiveorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AndexpressionContext, 0)

        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ExclusiveorexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exclusiveorexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExclusiveorexpression"):
                listener.enterExclusiveorexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExclusiveorexpression"):
                listener.exitExclusiveorexpression(self)

    def exclusiveorexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ExclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 54
        self.enterRecursionRule(localctx, 54, self.RULE_exclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.andexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 830
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 81, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ExclusiveorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusiveorexpression)
                    self.state = 825
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 826
                    self.match(CPP14Parser.Caret)
                    self.state = 827
                    self.andexpression(0)
                self.state = 832
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 81, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class InclusiveorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ExclusiveorexpressionContext, 0)

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.InclusiveorexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_inclusiveorexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInclusiveorexpression"):
                listener.enterInclusiveorexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInclusiveorexpression"):
                listener.exitInclusiveorexpression(self)

    def inclusiveorexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_inclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.exclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 841
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 82, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InclusiveorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_inclusiveorexpression)
                    self.state = 836
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 837
                    self.match(CPP14Parser.Or)
                    self.state = 838
                    self.exclusiveorexpression(0)
                self.state = 843
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 82, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalandexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.InclusiveorexpressionContext, 0)

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalandexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalandexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalandexpression"):
                listener.enterLogicalandexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalandexpression"):
                listener.exitLogicalandexpression(self)

    def logicalandexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.LogicalandexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 58
        self.enterRecursionRule(localctx, 58, self.RULE_logicalandexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.inclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 852
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 83, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.LogicalandexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalandexpression)
                    self.state = 847
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 848
                    self.match(CPP14Parser.AndAnd)
                    self.state = 849
                    self.inclusiveorexpression(0)
                self.state = 854
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 83, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalandexpressionContext, 0)

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalorexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalorexpression"):
                listener.enterLogicalorexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalorexpression"):
                listener.exitLogicalorexpression(self)

    def logicalorexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.LogicalorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_logicalorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.logicalandexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 863
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 84, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.LogicalorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalorexpression)
                    self.state = 858
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 859
                    self.match(CPP14Parser.OrOr)
                    self.state = 860
                    self.logicalandexpression(0)
                self.state = 865
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 84, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TernaryconditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ternaryconditionalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTernaryconditionalexpression"):
                listener.enterTernaryconditionalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTernaryconditionalexpression"):
                listener.exitTernaryconditionalexpression(self)

    def ternaryconditionalexpression(self):

        localctx = CPP14Parser.TernaryconditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_ternaryconditionalexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.logicalorexpression(0)
            self.state = 867
            self.match(CPP14Parser.Question)
            self.state = 868
            self.expression(0)
            self.state = 869
            self.match(CPP14Parser.Colon)
            self.state = 870
            self.assignmentexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryconditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryconditionalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryconditionalexpression"):
                listener.enterUnaryconditionalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryconditionalexpression"):
                listener.exitUnaryconditionalexpression(self)

    def unaryconditionalexpression(self):

        localctx = CPP14Parser.UnaryconditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_unaryconditionalexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.logicalorexpression(0)
            self.state = 873
            self.match(CPP14Parser.Question)
            self.state = 874
            self.match(CPP14Parser.Colon)
            self.state = 875
            self.assignmentexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def ternaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.TernaryconditionalexpressionContext, 0)

        def unaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryconditionalexpressionContext, 0)

        def assignmentoperator(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentoperatorContext, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext, 0)

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentexpression"):
                listener.enterAssignmentexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentexpression"):
                listener.exitAssignmentexpression(self)

    def assignmentexpression(self):

        localctx = CPP14Parser.AssignmentexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_assignmentexpression)
        try:
            self.state = 888
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 86, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 877
                self.logicalorexpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 878
                self.ternaryconditionalexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 879
                self.unaryconditionalexpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 880
                self.logicalorexpression(0)
                self.state = 881
                self.assignmentoperator()
                self.state = 882
                self.initializerclause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 884
                self.match(CPP14Parser.Throw)
                self.state = 886
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 85, self._ctx)
                if la_ == 1:
                    self.state = 885
                    self.assignmentexpression()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rightShiftAssign(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftAssignContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentoperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentoperator"):
                listener.enterAssignmentoperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentoperator"):
                listener.exitAssignmentoperator(self)

    def assignmentoperator(self):

        localctx = CPP14Parser.AssignmentoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_assignmentoperator)
        try:
            self.state = 901
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 890
                self.match(CPP14Parser.Assign)
                pass
            elif token in [CPP14Parser.StarAssign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 891
                self.match(CPP14Parser.StarAssign)
                pass
            elif token in [CPP14Parser.DivAssign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 892
                self.match(CPP14Parser.DivAssign)
                pass
            elif token in [CPP14Parser.ModAssign]:
                self.enterOuterAlt(localctx, 4)
                self.state = 893
                self.match(CPP14Parser.ModAssign)
                pass
            elif token in [CPP14Parser.PlusAssign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 894
                self.match(CPP14Parser.PlusAssign)
                pass
            elif token in [CPP14Parser.MinusAssign]:
                self.enterOuterAlt(localctx, 6)
                self.state = 895
                self.match(CPP14Parser.MinusAssign)
                pass
            elif token in [CPP14Parser.Greater]:
                self.enterOuterAlt(localctx, 7)
                self.state = 896
                self.rightShiftAssign()
                pass
            elif token in [CPP14Parser.LeftShiftAssign]:
                self.enterOuterAlt(localctx, 8)
                self.state = 897
                self.match(CPP14Parser.LeftShiftAssign)
                pass
            elif token in [CPP14Parser.AndAssign]:
                self.enterOuterAlt(localctx, 9)
                self.state = 898
                self.match(CPP14Parser.AndAssign)
                pass
            elif token in [CPP14Parser.XorAssign]:
                self.enterOuterAlt(localctx, 10)
                self.state = 899
                self.match(CPP14Parser.XorAssign)
                pass
            elif token in [CPP14Parser.OrAssign]:
                self.enterOuterAlt(localctx, 11)
                self.state = 900
                self.match(CPP14Parser.OrAssign)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

    def expression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 70
        self.enterRecursionRule(localctx, 70, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self.assignmentexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 911
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 88, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 906
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 907
                    self.match(CPP14Parser.Comma)
                    self.state = 908
                    self.assignmentexpression()
                self.state = 913
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 88, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ConstantexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def ternaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.TernaryconditionalexpressionContext, 0)

        def unaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryconditionalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_constantexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstantexpression"):
                listener.enterConstantexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstantexpression"):
                listener.exitConstantexpression(self)

    def constantexpression(self):

        localctx = CPP14Parser.ConstantexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_constantexpression)
        try:
            self.state = 917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 89, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 914
                self.logicalorexpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 915
                self.ternaryconditionalexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 916
                self.unaryconditionalexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def casestatement(self):
            return self.getTypedRuleContext(CPP14Parser.CasestatementContext, 0)

        def defaultstatement(self):
            return self.getTypedRuleContext(CPP14Parser.DefaultstatementContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def statementseq(self):
            return self.getTypedRuleContext(CPP14Parser.StatementseqContext, 0)

        def selectionstatement(self):
            return self.getTypedRuleContext(CPP14Parser.SelectionstatementContext, 0)

        def iterationstatement(self):
            return self.getTypedRuleContext(CPP14Parser.IterationstatementContext, 0)

        def jumpstatement(self):
            return self.getTypedRuleContext(CPP14Parser.JumpstatementContext, 0)

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def tryblock(self):
            return self.getTypedRuleContext(CPP14Parser.TryblockContext, 0)

        def Asm(self):
            return self.getToken(CPP14Parser.Asm, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def enumkey(self):
            return self.getTypedRuleContext(CPP14Parser.EnumkeyContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

    def statement(self):

        localctx = CPP14Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_statement)
        self._la = 0  # Token type
        try:
            self.state = 1045
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 112, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 919
                    self.attributespecifierseq(0)

                self.state = 922
                self.match(CPP14Parser.Identifier)
                self.state = 923
                self.match(CPP14Parser.Colon)
                self.state = 924
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 925
                    self.attributespecifierseq(0)

                self.state = 928
                self.casestatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 929
                    self.attributespecifierseq(0)

                self.state = 932
                self.defaultstatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 934
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 93, self._ctx)
                if la_ == 1:
                    self.state = 933
                    self.attributespecifierseq(0)

                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                    1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                    1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                        (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                        (1 << (CPP14Parser.Characterliteral - 132)) | (
                                        1 << (CPP14Parser.Floatingliteral - 132)) | (
                                    1 << (CPP14Parser.Stringliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 936
                    self.expression(0)

                self.state = 939
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 940
                    self.attributespecifierseq(0)

                self.state = 943
                self.match(CPP14Parser.LeftBrace)
                self.state = 945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                    1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (
                    1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (
                    1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (
                    1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                    1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (
                    1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Goto) | (
                    1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (
                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Return) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (
                    1 << CPP14Parser.This) | (1 << CPP14Parser.Thread_local))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Try - 64)) | (
                    1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                    1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                    1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                    1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                    1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Semi - 64)) | (
                    1 << (CPP14Parser.Ellipsis - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 944
                    self.statementseq(0)

                self.state = 947
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 948
                    self.attributespecifierseq(0)

                self.state = 951
                self.selectionstatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 952
                    self.attributespecifierseq(0)

                self.state = 955
                self.iterationstatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 956
                    self.attributespecifierseq(0)

                self.state = 959
                self.jumpstatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 960
                    self.attributespecifierseq(0)

                self.state = 963
                self.match(CPP14Parser.Using)
                self.state = 964
                self.match(CPP14Parser.Namespace)
                self.state = 966
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 101, self._ctx)
                if la_ == 1:
                    self.state = 965
                    self.nestednamespecifier(0)

                self.state = 968
                self.match(CPP14Parser.Identifier)
                self.state = 969
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 970
                self.attributespecifierseq(0)
                self.state = 972
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 102, self._ctx)
                if la_ == 1:
                    self.state = 971
                    self.declspecifierseq()

                self.state = 974
                self.initdeclaratorlist(0)
                self.state = 975
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 977
                    self.attributespecifierseq(0)

                self.state = 980
                self.tryblock()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 982
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 104, self._ctx)
                if la_ == 1:
                    self.state = 981
                    self.declspecifierseq()

                self.state = 985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Operator or ((((_la - 78)) & ~0x3f) == 0 and (
                    (1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.Tilde - 78)) | (
                    1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Doublecolon - 78)) | (
                    1 << (CPP14Parser.Ellipsis - 78)) | (1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 984
                    self.initdeclaratorlist(0)

                self.state = 987
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 988
                self.match(CPP14Parser.Asm)
                self.state = 989
                self.match(CPP14Parser.LeftParen)
                self.state = 990
                self.match(CPP14Parser.Stringliteral)
                self.state = 991
                self.match(CPP14Parser.RightParen)
                self.state = 992
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 993
                self.match(CPP14Parser.Namespace)
                self.state = 994
                self.match(CPP14Parser.Identifier)
                self.state = 995
                self.match(CPP14Parser.Assign)
                self.state = 997
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 106, self._ctx)
                if la_ == 1:
                    self.state = 996
                    self.nestednamespecifier(0)

                self.state = 999
                self.match(CPP14Parser.Identifier)
                self.state = 1000
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1001
                self.match(CPP14Parser.Using)
                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Typename:
                    self.state = 1002
                    self.match(CPP14Parser.Typename)

                self.state = 1005
                self.nestednamespecifier(0)
                self.state = 1006
                self.unqualifiedid()
                self.state = 1007
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1009
                self.match(CPP14Parser.Using)
                self.state = 1010
                self.match(CPP14Parser.Doublecolon)
                self.state = 1011
                self.unqualifiedid()
                self.state = 1012
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1014
                self.match(CPP14Parser.Using)
                self.state = 1015
                self.match(CPP14Parser.Identifier)
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1016
                    self.attributespecifierseq(0)

                self.state = 1019
                self.match(CPP14Parser.Assign)
                self.state = 1020
                self.typespecifierseq()
                self.state = 1022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1021
                    self.abstractdeclarator()

                self.state = 1024
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1026
                self.match(CPP14Parser.Static_assert)
                self.state = 1027
                self.match(CPP14Parser.LeftParen)
                self.state = 1028
                self.constantexpression()
                self.state = 1029
                self.match(CPP14Parser.Comma)
                self.state = 1030
                self.match(CPP14Parser.Stringliteral)
                self.state = 1031
                self.match(CPP14Parser.RightParen)
                self.state = 1032
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1034
                self.enumkey()
                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1035
                    self.attributespecifierseq(0)

                self.state = 1038
                self.match(CPP14Parser.Identifier)
                self.state = 1041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1039
                    self.match(CPP14Parser.Colon)
                    self.state = 1040
                    self.typespecifierseq()

                self.state = 1043
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CasestatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Case(self):
            return self.getToken(CPP14Parser.Case, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_casestatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCasestatement"):
                listener.enterCasestatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCasestatement"):
                listener.exitCasestatement(self)

    def casestatement(self):

        localctx = CPP14Parser.CasestatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_casestatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.match(CPP14Parser.Case)
            self.state = 1048
            self.constantexpression()
            self.state = 1049
            self.match(CPP14Parser.Colon)
            self.state = 1050
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_defaultstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDefaultstatement"):
                listener.enterDefaultstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDefaultstatement"):
                listener.exitDefaultstatement(self)

    def defaultstatement(self):

        localctx = CPP14Parser.DefaultstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_defaultstatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(CPP14Parser.Default)
            self.state = 1053
            self.match(CPP14Parser.Colon)
            self.state = 1054
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def statementseq(self):
            return self.getTypedRuleContext(CPP14Parser.StatementseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_statementseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatementseq"):
                listener.enterStatementseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatementseq"):
                listener.exitStatementseq(self)

    def statementseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.StatementseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_statementseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self.statement()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1063
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 113, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.StatementseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_statementseq)
                    self.state = 1059
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1060
                    self.statement()
                self.state = 1065
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 113, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SelectionstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(CPP14Parser.If, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def elsestatement(self):
            return self.getTypedRuleContext(CPP14Parser.ElsestatementContext, 0)

        def Switch(self):
            return self.getToken(CPP14Parser.Switch, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_selectionstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectionstatement"):
                listener.enterSelectionstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectionstatement"):
                listener.exitSelectionstatement(self)

    def selectionstatement(self):

        localctx = CPP14Parser.SelectionstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_selectionstatement)
        try:
            self.state = 1085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 114, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1066
                self.match(CPP14Parser.If)
                self.state = 1067
                self.match(CPP14Parser.LeftParen)
                self.state = 1068
                self.condition()
                self.state = 1069
                self.match(CPP14Parser.RightParen)
                self.state = 1070
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1072
                self.match(CPP14Parser.If)
                self.state = 1073
                self.match(CPP14Parser.LeftParen)
                self.state = 1074
                self.condition()
                self.state = 1075
                self.match(CPP14Parser.RightParen)
                self.state = 1076
                self.statement()
                self.state = 1077
                self.elsestatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1079
                self.match(CPP14Parser.Switch)
                self.state = 1080
                self.match(CPP14Parser.LeftParen)
                self.state = 1081
                self.condition()
                self.state = 1082
                self.match(CPP14Parser.RightParen)
                self.state = 1083
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElsestatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(CPP14Parser.Else, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_elsestatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElsestatement"):
                listener.enterElsestatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElsestatement"):
                listener.exitElsestatement(self)

    def elsestatement(self):

        localctx = CPP14Parser.ElsestatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_elsestatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self.match(CPP14Parser.Else)
            self.state = 1088
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_condition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCondition"):
                listener.enterCondition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCondition"):
                listener.exitCondition(self)

    def condition(self):

        localctx = CPP14Parser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_condition)
        self._la = 0  # Token type
        try:
            self.state = 1106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 117, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1090
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1091
                    self.attributespecifierseq(0)

                self.state = 1094
                self.declspecifierseq()
                self.state = 1095
                self.declarator()
                self.state = 1096
                self.match(CPP14Parser.Assign)
                self.state = 1097
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1099
                    self.attributespecifierseq(0)

                self.state = 1102
                self.declspecifierseq()
                self.state = 1103
                self.declarator()
                self.state = 1104
                self.bracedinitlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IterationstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(CPP14Parser.While, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def Do(self):
            return self.getToken(CPP14Parser.Do, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def For(self):
            return self.getToken(CPP14Parser.For, 0)

        def forinitstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ForinitstatementContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def forrangeinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.ForrangeinitializerContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_iterationstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIterationstatement"):
                listener.enterIterationstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIterationstatement"):
                listener.exitIterationstatement(self)

    def iterationstatement(self):

        localctx = CPP14Parser.IterationstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_iterationstatement)
        self._la = 0  # Token type
        try:
            self.state = 1147
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 121, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1108
                self.match(CPP14Parser.While)
                self.state = 1109
                self.match(CPP14Parser.LeftParen)
                self.state = 1110
                self.condition()
                self.state = 1111
                self.match(CPP14Parser.RightParen)
                self.state = 1112
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1114
                self.match(CPP14Parser.Do)
                self.state = 1115
                self.statement()
                self.state = 1116
                self.match(CPP14Parser.While)
                self.state = 1117
                self.match(CPP14Parser.LeftParen)
                self.state = 1118
                self.expression(0)
                self.state = 1119
                self.match(CPP14Parser.RightParen)
                self.state = 1120
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1122
                self.match(CPP14Parser.For)
                self.state = 1123
                self.match(CPP14Parser.LeftParen)
                self.state = 1124
                self.forinitstatement()
                self.state = 1126
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                    1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (
                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                    1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (
                    1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.New) | (
                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (
                    1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                    1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((
                                                                                                                         1 << (
                                                                                                                         CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (
                    1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (
                    1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                    1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                    1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                    1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                        (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                        (1 << (CPP14Parser.Characterliteral - 132)) | (
                                        1 << (CPP14Parser.Floatingliteral - 132)) | (
                                    1 << (CPP14Parser.Stringliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1125
                    self.condition()

                self.state = 1128
                self.match(CPP14Parser.Semi)
                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                    1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                    1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                        (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                        (1 << (CPP14Parser.Characterliteral - 132)) | (
                                        1 << (CPP14Parser.Floatingliteral - 132)) | (
                                    1 << (CPP14Parser.Stringliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1129
                    self.expression(0)

                self.state = 1132
                self.match(CPP14Parser.RightParen)
                self.state = 1133
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1135
                self.match(CPP14Parser.For)
                self.state = 1136
                self.match(CPP14Parser.LeftParen)
                self.state = 1138
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1137
                    self.attributespecifierseq(0)

                self.state = 1140
                self.declspecifierseq()
                self.state = 1141
                self.declarator()
                self.state = 1142
                self.match(CPP14Parser.Colon)
                self.state = 1143
                self.forrangeinitializer()
                self.state = 1144
                self.match(CPP14Parser.RightParen)
                self.state = 1145
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForinitstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_forinitstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForinitstatement"):
                listener.enterForinitstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForinitstatement"):
                listener.exitForinitstatement(self)

    def forinitstatement(self):

        localctx = CPP14Parser.ForinitstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_forinitstatement)
        self._la = 0  # Token type
        try:
            self.state = 1167
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 126, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                    1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                    1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                        (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                        (1 << (CPP14Parser.Characterliteral - 132)) | (
                                        1 << (CPP14Parser.Floatingliteral - 132)) | (
                                    1 << (CPP14Parser.Stringliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1149
                    self.expression(0)

                self.state = 1152
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1154
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 123, self._ctx)
                if la_ == 1:
                    self.state = 1153
                    self.declspecifierseq()

                self.state = 1157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Operator or ((((_la - 78)) & ~0x3f) == 0 and (
                    (1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.Tilde - 78)) | (
                    1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Doublecolon - 78)) | (
                    1 << (CPP14Parser.Ellipsis - 78)) | (1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1156
                    self.initdeclaratorlist(0)

                self.state = 1159
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1160
                self.attributespecifierseq(0)
                self.state = 1162
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 125, self._ctx)
                if la_ == 1:
                    self.state = 1161
                    self.declspecifierseq()

                self.state = 1164
                self.initdeclaratorlist(0)
                self.state = 1165
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForrangeinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_forrangeinitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForrangeinitializer"):
                listener.enterForrangeinitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForrangeinitializer"):
                listener.exitForrangeinitializer(self)

    def forrangeinitializer(self):

        localctx = CPP14Parser.ForrangeinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_forrangeinitializer)
        try:
            self.state = 1171
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16,
                         CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype, CPP14Parser.Delete,
                         CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.FalseToken, CPP14Parser.Float,
                         CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Nullptr,
                         CPP14Parser.Operator, CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed,
                         CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw,
                         CPP14Parser.TrueToken, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.Unsigned,
                         CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                         CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                         CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                         CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Integerliteral,
                         CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral,
                         CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral,
                         CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1169
                self.expression(0)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1170
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JumpstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(CPP14Parser.Break, 0)

        def Continue(self):
            return self.getToken(CPP14Parser.Continue, 0)

        def Return(self):
            return self.getToken(CPP14Parser.Return, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def gotostatement(self):
            return self.getTypedRuleContext(CPP14Parser.GotostatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_jumpstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJumpstatement"):
                listener.enterJumpstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJumpstatement"):
                listener.exitJumpstatement(self)

    def jumpstatement(self):

        localctx = CPP14Parser.JumpstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_jumpstatement)
        self._la = 0  # Token type
        try:
            self.state = 1187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 129, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1173
                self.match(CPP14Parser.Break)
                self.state = 1174
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1175
                self.match(CPP14Parser.Continue)
                self.state = 1176
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1177
                self.match(CPP14Parser.Return)
                self.state = 1179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                    1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                    1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                        (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                        (1 << (CPP14Parser.Characterliteral - 132)) | (
                                        1 << (CPP14Parser.Floatingliteral - 132)) | (
                                    1 << (CPP14Parser.Stringliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1178
                    self.expression(0)

                self.state = 1181
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1182
                self.match(CPP14Parser.Return)
                self.state = 1183
                self.bracedinitlist()
                self.state = 1184
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1186
                self.gotostatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GotostatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Goto(self):
            return self.getToken(CPP14Parser.Goto, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_gotostatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGotostatement"):
                listener.enterGotostatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGotostatement"):
                listener.exitGotostatement(self)

    def gotostatement(self):

        localctx = CPP14Parser.GotostatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_gotostatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.match(CPP14Parser.Goto)
            self.state = 1190
            self.match(CPP14Parser.Identifier)
            self.state = 1191
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declarationseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclarationseq"):
                listener.enterDeclarationseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclarationseq"):
                listener.exitDeclarationseq(self)

    def declarationseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.DeclarationseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_declarationseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1194
            self.declaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1200
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 130, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.DeclarationseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_declarationseq)
                    self.state = 1196
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1197
                    self.declaration()
                self.state = 1202
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 130, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Asm(self):
            return self.getToken(CPP14Parser.Asm, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def enumkey(self):
            return self.getTypedRuleContext(CPP14Parser.EnumkeyContext, 0)

        def functiondefinition(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiondefinitionContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclaration"):
                listener.enterDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclaration"):
                listener.exitDeclaration(self)

    def declaration(self):

        localctx = CPP14Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_declaration)
        self._la = 0  # Token type
        try:
            self.state = 1333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 148, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1204
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 131, self._ctx)
                if la_ == 1:
                    self.state = 1203
                    self.declspecifierseq()

                self.state = 1207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Operator or ((((_la - 78)) & ~0x3f) == 0 and (
                    (1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.Tilde - 78)) | (
                    1 << (CPP14Parser.AndAnd - 78)) | (1 << (CPP14Parser.Doublecolon - 78)) | (
                    1 << (CPP14Parser.Ellipsis - 78)) | (1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1206
                    self.initdeclaratorlist(0)

                self.state = 1209
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1210
                self.attributespecifierseq(0)
                self.state = 1211
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1213
                self.attributespecifierseq(0)
                self.state = 1215
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 133, self._ctx)
                if la_ == 1:
                    self.state = 1214
                    self.declspecifierseq()

                self.state = 1217
                self.initdeclaratorlist(0)
                self.state = 1218
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1220
                    self.attributespecifierseq(0)

                self.state = 1223
                self.match(CPP14Parser.Using)
                self.state = 1224
                self.match(CPP14Parser.Namespace)
                self.state = 1226
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 135, self._ctx)
                if la_ == 1:
                    self.state = 1225
                    self.nestednamespecifier(0)

                self.state = 1228
                self.match(CPP14Parser.Identifier)
                self.state = 1229
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1230
                self.match(CPP14Parser.Asm)
                self.state = 1231
                self.match(CPP14Parser.LeftParen)
                self.state = 1232
                self.match(CPP14Parser.Stringliteral)
                self.state = 1233
                self.match(CPP14Parser.RightParen)
                self.state = 1234
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1235
                self.match(CPP14Parser.Namespace)
                self.state = 1236
                self.match(CPP14Parser.Identifier)
                self.state = 1237
                self.match(CPP14Parser.Assign)
                self.state = 1239
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 136, self._ctx)
                if la_ == 1:
                    self.state = 1238
                    self.nestednamespecifier(0)

                self.state = 1241
                self.match(CPP14Parser.Identifier)
                self.state = 1242
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1243
                self.match(CPP14Parser.Using)
                self.state = 1244
                self.match(CPP14Parser.Doublecolon)
                self.state = 1245
                self.unqualifiedid()
                self.state = 1246
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1248
                self.match(CPP14Parser.Using)
                self.state = 1250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Typename:
                    self.state = 1249
                    self.match(CPP14Parser.Typename)

                self.state = 1252
                self.nestednamespecifier(0)
                self.state = 1253
                self.unqualifiedid()
                self.state = 1254
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1256
                self.match(CPP14Parser.Using)
                self.state = 1257
                self.match(CPP14Parser.Identifier)
                self.state = 1259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1258
                    self.attributespecifierseq(0)

                self.state = 1261
                self.match(CPP14Parser.Assign)
                self.state = 1262
                self.typespecifierseq()
                self.state = 1264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1263
                    self.abstractdeclarator()

                self.state = 1266
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1268
                self.match(CPP14Parser.Static_assert)
                self.state = 1269
                self.match(CPP14Parser.LeftParen)
                self.state = 1270
                self.constantexpression()
                self.state = 1271
                self.match(CPP14Parser.Comma)
                self.state = 1272
                self.match(CPP14Parser.Stringliteral)
                self.state = 1273
                self.match(CPP14Parser.RightParen)
                self.state = 1274
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1276
                self.enumkey()
                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1277
                    self.attributespecifierseq(0)

                self.state = 1280
                self.match(CPP14Parser.Identifier)
                self.state = 1283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1281
                    self.match(CPP14Parser.Colon)
                    self.state = 1282
                    self.typespecifierseq()

                self.state = 1285
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1287
                self.functiondefinition()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1288
                self.match(CPP14Parser.Template)
                self.state = 1289
                self.match(CPP14Parser.Less)
                self.state = 1290
                self.templateparameterlist(0)
                self.state = 1291
                self.match(CPP14Parser.Greater)
                self.state = 1292
                self.declaration()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Extern:
                    self.state = 1294
                    self.match(CPP14Parser.Extern)

                self.state = 1297
                self.match(CPP14Parser.Template)
                self.state = 1298
                self.declaration()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1299
                self.match(CPP14Parser.Template)
                self.state = 1300
                self.match(CPP14Parser.Less)
                self.state = 1301
                self.match(CPP14Parser.Greater)
                self.state = 1302
                self.declaration()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1303
                self.match(CPP14Parser.Extern)
                self.state = 1304
                self.match(CPP14Parser.Stringliteral)
                self.state = 1305
                self.match(CPP14Parser.LeftBrace)
                self.state = 1307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                    1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                    1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (
                    1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                    1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                    1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                    1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                    1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                    1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                    1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                    1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                    1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                    1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                    1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1306
                    self.declarationseq(0)

                self.state = 1309
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1310
                self.match(CPP14Parser.Extern)
                self.state = 1311
                self.match(CPP14Parser.Stringliteral)
                self.state = 1312
                self.declaration()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Inline:
                    self.state = 1313
                    self.match(CPP14Parser.Inline)

                self.state = 1316
                self.match(CPP14Parser.Namespace)
                self.state = 1317
                self.match(CPP14Parser.Identifier)
                self.state = 1318
                self.match(CPP14Parser.LeftBrace)
                self.state = 1320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                    1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                    1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (
                    1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                    1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                    1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                    1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                    1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                    1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                    1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                    1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                    1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                    1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                    1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1319
                    self.declarationseq(0)

                self.state = 1322
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Inline:
                    self.state = 1323
                    self.match(CPP14Parser.Inline)

                self.state = 1326
                self.match(CPP14Parser.Namespace)
                self.state = 1327
                self.match(CPP14Parser.LeftBrace)
                self.state = 1329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                    1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                    1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (
                    1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                    1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                    1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Template) | (1 << CPP14Parser.Thread_local))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                    1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                    1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                    1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                    1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                    1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                    1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                    1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                    1 << (CPP14Parser.Semi - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1328
                    self.declarationseq(0)

                self.state = 1331
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1332
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Register(self):
            return self.getToken(CPP14Parser.Register, 0)

        def Static(self):
            return self.getToken(CPP14Parser.Static, 0)

        def Thread_local(self):
            return self.getToken(CPP14Parser.Thread_local, 0)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def Explicit(self):
            return self.getToken(CPP14Parser.Explicit, 0)

        def Friend(self):
            return self.getToken(CPP14Parser.Friend, 0)

        def Typedef(self):
            return self.getToken(CPP14Parser.Typedef, 0)

        def Constexpr(self):
            return self.getToken(CPP14Parser.Constexpr, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclspecifier"):
                listener.enterDeclspecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclspecifier"):
                listener.exitDeclspecifier(self)

    def declspecifier(self):

        localctx = CPP14Parser.DeclspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_declspecifier)
        try:
            self.state = 1347
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Register]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1335
                self.match(CPP14Parser.Register)
                pass
            elif token in [CPP14Parser.Static]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1336
                self.match(CPP14Parser.Static)
                pass
            elif token in [CPP14Parser.Thread_local]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1337
                self.match(CPP14Parser.Thread_local)
                pass
            elif token in [CPP14Parser.Extern]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1338
                self.match(CPP14Parser.Extern)
                pass
            elif token in [CPP14Parser.Mutable]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1339
                self.match(CPP14Parser.Mutable)
                pass
            elif token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32,
                           CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Decltype, CPP14Parser.Double,
                           CPP14Parser.Enum, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Short,
                           CPP14Parser.Signed, CPP14Parser.Struct, CPP14Parser.Typename, CPP14Parser.Union,
                           CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar,
                           CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1340
                self.typespecifier()
                pass
            elif token in [CPP14Parser.Inline]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1341
                self.match(CPP14Parser.Inline)
                pass
            elif token in [CPP14Parser.Virtual]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1342
                self.match(CPP14Parser.Virtual)
                pass
            elif token in [CPP14Parser.Explicit]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1343
                self.match(CPP14Parser.Explicit)
                pass
            elif token in [CPP14Parser.Friend]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1344
                self.match(CPP14Parser.Friend)
                pass
            elif token in [CPP14Parser.Typedef]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1345
                self.match(CPP14Parser.Typedef)
                pass
            elif token in [CPP14Parser.Constexpr]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1346
                self.match(CPP14Parser.Constexpr)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclspecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclspecifierseq"):
                listener.enterDeclspecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclspecifierseq"):
                listener.exitDeclspecifierseq(self)

    def declspecifierseq(self):

        localctx = CPP14Parser.DeclspecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_declspecifierseq)
        try:
            self.state = 1356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 151, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1349
                self.declspecifier()
                self.state = 1351
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 150, self._ctx)
                if la_ == 1:
                    self.state = 1350
                    self.attributespecifierseq(0)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1353
                self.declspecifier()
                self.state = 1354
                self.declspecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, 0)

        def classhead(self):
            return self.getTypedRuleContext(CPP14Parser.ClassheadContext, 0)

        def memberspecification(self):
            return self.getTypedRuleContext(CPP14Parser.MemberspecificationContext, 0)

        def enumhead(self):
            return self.getTypedRuleContext(CPP14Parser.EnumheadContext, 0)

        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypespecifier"):
                listener.enterTypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypespecifier"):
                listener.exitTypespecifier(self)

    def typespecifier(self):

        localctx = CPP14Parser.TypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_typespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 154, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1358
                self.trailingtypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1359
                self.classhead()
                self.state = 1360
                self.match(CPP14Parser.LeftBrace)
                self.state = 1362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                    1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (
                    1 << CPP14Parser.Public) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (
                    1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (
                    1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (
                    1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((
                                                                                                                         1 << (
                                                                                                                         CPP14Parser.Typedef - 67)) | (
                    1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                    1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                    1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                    1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                    1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                    1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                    1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Colon - 67)) | (
                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (
                    1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1361
                    self.memberspecification()

                self.state = 1364
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1366
                self.enumhead()
                self.state = 1367
                self.match(CPP14Parser.LeftBrace)
                self.state = 1369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 1368
                    self.enumeratorlist(0)

                self.state = 1371
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1373
                self.enumhead()
                self.state = 1374
                self.match(CPP14Parser.LeftBrace)
                self.state = 1375
                self.enumeratorlist(0)
                self.state = 1376
                self.match(CPP14Parser.Comma)
                self.state = 1377
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingtypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext, 0)

        def classkey(self):
            return self.getTypedRuleContext(CPP14Parser.ClasskeyContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypenamespecifierContext, 0)

        def cvqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrailingtypespecifier"):
                listener.enterTrailingtypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrailingtypespecifier"):
                listener.exitTrailingtypespecifier(self)

    def trailingtypespecifier(self):

        localctx = CPP14Parser.TrailingtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_trailingtypespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 161, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1381
                self.simpletypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1382
                self.classkey()
                self.state = 1384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1383
                    self.attributespecifierseq(0)

                self.state = 1387
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 156, self._ctx)
                if la_ == 1:
                    self.state = 1386
                    self.nestednamespecifier(0)

                self.state = 1389
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1391
                self.classkey()
                self.state = 1392
                self.match(CPP14Parser.Identifier)
                self.state = 1393
                self.match(CPP14Parser.Less)
                self.state = 1395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1394
                    self.templateargumentlist(0)

                self.state = 1397
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1399
                self.classkey()
                self.state = 1400
                self.nestednamespecifier(0)
                self.state = 1402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Template:
                    self.state = 1401
                    self.match(CPP14Parser.Template)

                self.state = 1404
                self.match(CPP14Parser.Identifier)
                self.state = 1405
                self.match(CPP14Parser.Less)
                self.state = 1407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1406
                    self.templateargumentlist(0)

                self.state = 1409
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1411
                self.match(CPP14Parser.Enum)
                self.state = 1413
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 160, self._ctx)
                if la_ == 1:
                    self.state = 1412
                    self.nestednamespecifier(0)

                self.state = 1415
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1416
                self.typenamespecifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1417
                self.cvqualifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypespecifierseq"):
                listener.enterTypespecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypespecifierseq"):
                listener.exitTypespecifierseq(self)

    def typespecifierseq(self):

        localctx = CPP14Parser.TypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_typespecifierseq)
        try:
            self.state = 1427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 163, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1420
                self.typespecifier()
                self.state = 1422
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 162, self._ctx)
                if la_ == 1:
                    self.state = 1421
                    self.attributespecifierseq(0)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1424
                self.typespecifier()
                self.state = 1425
                self.typespecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingtypespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrailingtypespecifierseq"):
                listener.enterTrailingtypespecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrailingtypespecifierseq"):
                listener.exitTrailingtypespecifierseq(self)

    def trailingtypespecifierseq(self):

        localctx = CPP14Parser.TrailingtypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_trailingtypespecifierseq)
        try:
            self.state = 1436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 165, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1429
                self.trailingtypespecifier()
                self.state = 1431
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 164, self._ctx)
                if la_ == 1:
                    self.state = 1430
                    self.attributespecifierseq(0)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1433
                self.trailingtypespecifier()
                self.state = 1434
                self.trailingtypespecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpletypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypenameContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def Char(self):
            return self.getToken(CPP14Parser.Char, 0)

        def Char16(self):
            return self.getToken(CPP14Parser.Char16, 0)

        def Char32(self):
            return self.getToken(CPP14Parser.Char32, 0)

        def Wchar(self):
            return self.getToken(CPP14Parser.Wchar, 0)

        def Bool(self):
            return self.getToken(CPP14Parser.Bool, 0)

        def Short(self):
            return self.getToken(CPP14Parser.Short, 0)

        def Int(self):
            return self.getToken(CPP14Parser.Int, 0)

        def Long(self):
            return self.getToken(CPP14Parser.Long, 0)

        def Signed(self):
            return self.getToken(CPP14Parser.Signed, 0)

        def Unsigned(self):
            return self.getToken(CPP14Parser.Unsigned, 0)

        def Float(self):
            return self.getToken(CPP14Parser.Float, 0)

        def Double(self):
            return self.getToken(CPP14Parser.Double, 0)

        def Void(self):
            return self.getToken(CPP14Parser.Void, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_simpletypespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpletypespecifier"):
                listener.enterSimpletypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpletypespecifier"):
                listener.exitSimpletypespecifier(self)

    def simpletypespecifier(self):

        localctx = CPP14Parser.SimpletypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_simpletypespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 168, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1439
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 166, self._ctx)
                if la_ == 1:
                    self.state = 1438
                    self.nestednamespecifier(0)

                self.state = 1441
                self.thetypename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1442
                self.nestednamespecifier(0)
                self.state = 1443
                self.match(CPP14Parser.Template)
                self.state = 1444
                self.match(CPP14Parser.Identifier)
                self.state = 1445
                self.match(CPP14Parser.Less)
                self.state = 1447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1446
                    self.templateargumentlist(0)

                self.state = 1449
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1451
                self.match(CPP14Parser.Char)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1452
                self.match(CPP14Parser.Char16)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1453
                self.match(CPP14Parser.Char32)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1454
                self.match(CPP14Parser.Wchar)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1455
                self.match(CPP14Parser.Bool)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1456
                self.match(CPP14Parser.Short)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1457
                self.match(CPP14Parser.Int)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1458
                self.match(CPP14Parser.Long)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1459
                self.match(CPP14Parser.Signed)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1460
                self.match(CPP14Parser.Unsigned)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1461
                self.match(CPP14Parser.Float)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1462
                self.match(CPP14Parser.Double)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1463
                self.match(CPP14Parser.Void)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1464
                self.match(CPP14Parser.Auto)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1465
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThetypenameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_thetypename

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterThetypename"):
                listener.enterThetypename(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitThetypename"):
                listener.exitThetypename(self)

    def thetypename(self):

        localctx = CPP14Parser.ThetypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_thetypename)
        self._la = 0  # Token type
        try:
            self.state = 1476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 170, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1468
                self.classname()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1469
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1470
                self.match(CPP14Parser.Identifier)
                self.state = 1471
                self.match(CPP14Parser.Less)
                self.state = 1473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1472
                    self.templateargumentlist(0)

                self.state = 1475
                self.match(CPP14Parser.Greater)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecltypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_decltypespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDecltypespecifier"):
                listener.enterDecltypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDecltypespecifier"):
                listener.exitDecltypespecifier(self)

    def decltypespecifier(self):

        localctx = CPP14Parser.DecltypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_decltypespecifier)
        try:
            self.state = 1487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 171, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1478
                self.match(CPP14Parser.Decltype)
                self.state = 1479
                self.match(CPP14Parser.LeftParen)
                self.state = 1480
                self.expression(0)
                self.state = 1481
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1483
                self.match(CPP14Parser.Decltype)
                self.state = 1484
                self.match(CPP14Parser.LeftParen)
                self.state = 1485
                self.match(CPP14Parser.Auto)
                self.state = 1486
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumheadContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumkey(self):
            return self.getTypedRuleContext(CPP14Parser.EnumkeyContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumhead

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumhead"):
                listener.enterEnumhead(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumhead"):
                listener.exitEnumhead(self)

    def enumhead(self):

        localctx = CPP14Parser.EnumheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_enumhead)
        self._la = 0  # Token type
        try:
            self.state = 1510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 177, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1489
                self.enumkey()
                self.state = 1491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1490
                    self.attributespecifierseq(0)

                self.state = 1494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 1493
                    self.match(CPP14Parser.Identifier)

                self.state = 1498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1496
                    self.match(CPP14Parser.Colon)
                    self.state = 1497
                    self.typespecifierseq()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1500
                self.enumkey()
                self.state = 1502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1501
                    self.attributespecifierseq(0)

                self.state = 1504
                self.nestednamespecifier(0)
                self.state = 1505
                self.match(CPP14Parser.Identifier)
                self.state = 1508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1506
                    self.match(CPP14Parser.Colon)
                    self.state = 1507
                    self.typespecifierseq()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumkeyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumkey

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumkey"):
                listener.enterEnumkey(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumkey"):
                listener.exitEnumkey(self)

    def enumkey(self):

        localctx = CPP14Parser.EnumkeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_enumkey)
        try:
            self.state = 1517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 178, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1512
                self.match(CPP14Parser.Enum)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1513
                self.match(CPP14Parser.Enum)
                self.state = 1514
                self.match(CPP14Parser.Class)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1515
                self.match(CPP14Parser.Enum)
                self.state = 1516
                self.match(CPP14Parser.Struct)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumeratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeratordefinition(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratordefinitionContext, 0)

        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumeratorlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumeratorlist"):
                listener.enterEnumeratorlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumeratorlist"):
                listener.exitEnumeratorlist(self)

    def enumeratorlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EnumeratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 124
        self.enterRecursionRule(localctx, 124, self.RULE_enumeratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1520
            self.enumeratordefinition()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1527
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 179, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.EnumeratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_enumeratorlist)
                    self.state = 1522
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1523
                    self.match(CPP14Parser.Comma)
                    self.state = 1524
                    self.enumeratordefinition()
                self.state = 1529
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 179, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EnumeratordefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumeratordefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumeratordefinition"):
                listener.enterEnumeratordefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumeratordefinition"):
                listener.exitEnumeratordefinition(self)

    def enumeratordefinition(self):

        localctx = CPP14Parser.EnumeratordefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_enumeratordefinition)
        try:
            self.state = 1534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 180, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1530
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1531
                self.match(CPP14Parser.Identifier)
                self.state = 1532
                self.match(CPP14Parser.Assign)
                self.state = 1533
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributespecifierseq"):
                listener.enterAttributespecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributespecifierseq"):
                listener.exitAttributespecifierseq(self)

    def attributespecifierseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AttributespecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_attributespecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1537
            self.attributespecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1543
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 181, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AttributespecifierseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_attributespecifierseq)
                    self.state = 1539
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1540
                    self.attributespecifier()
                self.state = 1545
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 181, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AttributespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributelist(self):
            return self.getTypedRuleContext(CPP14Parser.AttributelistContext, 0)

        def Alignas(self):
            return self.getToken(CPP14Parser.Alignas, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributespecifier"):
                listener.enterAttributespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributespecifier"):
                listener.exitAttributespecifier(self)

    def attributespecifier(self):

        localctx = CPP14Parser.AttributespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_attributespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 185, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1546
                self.match(CPP14Parser.LeftBracket)
                self.state = 1547
                self.match(CPP14Parser.LeftBracket)
                self.state = 1548
                self.attributelist(0)
                self.state = 1549
                self.match(CPP14Parser.RightBracket)
                self.state = 1550
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1552
                self.match(CPP14Parser.Alignas)
                self.state = 1553
                self.match(CPP14Parser.LeftParen)
                self.state = 1554
                self.typespecifierseq()
                self.state = 1556
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 182, self._ctx)
                if la_ == 1:
                    self.state = 1555
                    self.abstractdeclarator()

                self.state = 1559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1558
                    self.match(CPP14Parser.Ellipsis)

                self.state = 1561
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1563
                self.match(CPP14Parser.Alignas)
                self.state = 1564
                self.match(CPP14Parser.LeftParen)
                self.state = 1565
                self.constantexpression()
                self.state = 1567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1566
                    self.match(CPP14Parser.Ellipsis)

                self.state = 1569
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributelistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeContext, 0)

        def attributelist(self):
            return self.getTypedRuleContext(CPP14Parser.AttributelistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributelist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributelist"):
                listener.enterAttributelist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributelist"):
                listener.exitAttributelist(self)

    def attributelist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AttributelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 132
        self.enterRecursionRule(localctx, 132, self.RULE_attributelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1580
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 187, self._ctx)
            if la_ == 1:
                self.state = 1575
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 186, self._ctx)
                if la_ == 1:
                    self.state = 1574
                    self.attribute()

                pass

            elif la_ == 2:
                self.state = 1577
                self.attribute()
                self.state = 1578
                self.match(CPP14Parser.Ellipsis)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 1594
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 190, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1592
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 189, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.AttributelistContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                        self.state = 1582
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1583
                        self.match(CPP14Parser.Comma)
                        self.state = 1585
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 188, self._ctx)
                        if la_ == 1:
                            self.state = 1584
                            self.attribute()

                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.AttributelistContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                        self.state = 1587
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1588
                        self.match(CPP14Parser.Comma)
                        self.state = 1589
                        self.attribute()
                        self.state = 1590
                        self.match(CPP14Parser.Ellipsis)
                        pass

                self.state = 1596
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 190, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AttributeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributetoken(self):
            return self.getTypedRuleContext(CPP14Parser.AttributetokenContext, 0)

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attribute

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttribute"):
                listener.enterAttribute(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttribute"):
                listener.exitAttribute(self)

    def attribute(self):

        localctx = CPP14Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1597
            self.attributetoken()
            self.state = 1602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 191, self._ctx)
            if la_ == 1:
                self.state = 1598
                self.match(CPP14Parser.LeftParen)
                self.state = 1599
                self.balancedtokenseq(0)
                self.state = 1600
                self.match(CPP14Parser.RightParen)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributetokenContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributetoken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributetoken"):
                listener.enterAttributetoken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributetoken"):
                listener.exitAttributetoken(self)

    def attributetoken(self):

        localctx = CPP14Parser.AttributetokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_attributetoken)
        try:
            self.state = 1608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 192, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1604
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1605
                self.match(CPP14Parser.Identifier)
                self.state = 1606
                self.match(CPP14Parser.Doublecolon)
                self.state = 1607
                self.match(CPP14Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BalancedtokenseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtoken(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenContext, 0)

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtokenseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBalancedtokenseq"):
                listener.enterBalancedtokenseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBalancedtokenseq"):
                listener.exitBalancedtokenseq(self)

    def balancedtokenseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.BalancedtokenseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 138
        self.enterRecursionRule(localctx, 138, self.RULE_balancedtokenseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 193, self._ctx)
            if la_ == 1:
                self.state = 1611
                self.balancedtoken()

            self._ctx.stop = self._input.LT(-1)
            self.state = 1618
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 194, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.BalancedtokenseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_balancedtokenseq)
                    self.state = 1614
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1615
                    self.balancedtoken()
                self.state = 1620
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 194, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BalancedtokenContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtoken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBalancedtoken"):
                listener.enterBalancedtoken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBalancedtoken"):
                listener.exitBalancedtoken(self)

    def balancedtoken(self):

        localctx = CPP14Parser.BalancedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_balancedtoken)
        try:
            self.state = 1633
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1621
                self.match(CPP14Parser.LeftParen)
                self.state = 1622
                self.balancedtokenseq(0)
                self.state = 1623
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1625
                self.match(CPP14Parser.LeftBracket)
                self.state = 1626
                self.balancedtokenseq(0)
                self.state = 1627
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1629
                self.match(CPP14Parser.LeftBrace)
                self.state = 1630
                self.balancedtokenseq(0)
                self.state = 1631
                self.match(CPP14Parser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitdeclaratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def initializer(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerContext, 0)

        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initdeclaratorlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitdeclaratorlist"):
                listener.enterInitdeclaratorlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitdeclaratorlist"):
                listener.exitInitdeclaratorlist(self)

    def initdeclaratorlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InitdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 142
        self.enterRecursionRule(localctx, 142, self.RULE_initdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1636
            self.declarator()
            self.state = 1638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 196, self._ctx)
            if la_ == 1:
                self.state = 1637
                self.initializer()

            self._ctx.stop = self._input.LT(-1)
            self.state = 1648
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 198, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InitdeclaratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initdeclaratorlist)
                    self.state = 1640
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1641
                    self.match(CPP14Parser.Comma)
                    self.state = 1642
                    self.declarator()
                    self.state = 1644
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 197, self._ctx)
                    if la_ == 1:
                        self.state = 1643
                        self.initializer()

                self.state = 1650
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 198, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext, 0)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclarator"):
                listener.enterDeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclarator"):
                listener.exitDeclarator(self)

    def declarator(self):

        localctx = CPP14Parser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_declarator)
        try:
            self.state = 1659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 200, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1651
                self.ptrdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1652
                self.noptrdeclarator(0)
                self.state = 1653
                self.parametersandqualifiers()
                self.state = 1654
                self.match(CPP14Parser.Arrow)
                self.state = 1655
                self.trailingtypespecifierseq()
                self.state = 1657
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 199, self._ctx)
                if la_ == 1:
                    self.state = 1656
                    self.abstractdeclarator()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtrdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext, 0)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPtrdeclarator"):
                listener.enterPtrdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPtrdeclarator"):
                listener.exitPtrdeclarator(self)

    def ptrdeclarator(self):

        localctx = CPP14Parser.PtrdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_ptrdeclarator)
        try:
            self.state = 1665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 201, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1661
                self.noptrdeclarator(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1662
                self.ptroperator()
                self.state = 1663
                self.ptrdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext, 0)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrdeclarator"):
                listener.enterNoptrdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrdeclarator"):
                listener.exitNoptrdeclarator(self)

    def noptrdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 148
        self.enterRecursionRule(localctx, 148, self.RULE_noptrdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1679
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Operator, CPP14Parser.Tilde, CPP14Parser.Doublecolon,
                         CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                self.state = 1669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1668
                    self.match(CPP14Parser.Ellipsis)

                self.state = 1671
                self.idexpression()
                self.state = 1673
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 203, self._ctx)
                if la_ == 1:
                    self.state = 1672
                    self.attributespecifierseq(0)

                pass
            elif token in [CPP14Parser.LeftParen]:
                self.state = 1675
                self.match(CPP14Parser.LeftParen)
                self.state = 1676
                self.ptrdeclarator()
                self.state = 1677
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1694
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 208, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1692
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 207, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1681
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1682
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1683
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1684
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1686
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                            1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                            1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                            1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                                (1 << (CPP14Parser.Characterliteral - 132)) | (
                                                1 << (CPP14Parser.Floatingliteral - 132)) | (
                                            1 << (CPP14Parser.Stringliteral - 132)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 1685
                            self.constantexpression()

                        self.state = 1688
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1690
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 206, self._ctx)
                        if la_ == 1:
                            self.state = 1689
                            self.attributespecifierseq(0)

                        pass

                self.state = 1696
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 208, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParametersandqualifiersContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationclauseContext, 0)

        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext, 0)

        def refqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.RefqualifierContext, 0)

        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionspecificationContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parametersandqualifiers

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParametersandqualifiers"):
                listener.enterParametersandqualifiers(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParametersandqualifiers"):
                listener.exitParametersandqualifiers(self)

    def parametersandqualifiers(self):

        localctx = CPP14Parser.ParametersandqualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_parametersandqualifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1697
            self.match(CPP14Parser.LeftParen)
            self.state = 1698
            self.parameterdeclarationclause()
            self.state = 1699
            self.match(CPP14Parser.RightParen)
            self.state = 1701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 209, self._ctx)
            if la_ == 1:
                self.state = 1700
                self.cvqualifierseq()

            self.state = 1704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 210, self._ctx)
            if la_ == 1:
                self.state = 1703
                self.refqualifier()

            self.state = 1707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 211, self._ctx)
            if la_ == 1:
                self.state = 1706
                self.exceptionspecification()

            self.state = 1710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 212, self._ctx)
            if la_ == 1:
                self.state = 1709
                self.attributespecifierseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtroperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptroperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPtroperator"):
                listener.enterPtroperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPtroperator"):
                listener.exitPtroperator(self)

    def ptroperator(self):

        localctx = CPP14Parser.PtroperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_ptroperator)
        try:
            self.state = 1735
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Star]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1712
                self.match(CPP14Parser.Star)
                self.state = 1714
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 213, self._ctx)
                if la_ == 1:
                    self.state = 1713
                    self.attributespecifierseq(0)

                self.state = 1717
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 214, self._ctx)
                if la_ == 1:
                    self.state = 1716
                    self.cvqualifierseq()

                pass
            elif token in [CPP14Parser.And]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1719
                self.match(CPP14Parser.And)
                self.state = 1721
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 215, self._ctx)
                if la_ == 1:
                    self.state = 1720
                    self.attributespecifierseq(0)

                pass
            elif token in [CPP14Parser.AndAnd]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1723
                self.match(CPP14Parser.AndAnd)
                self.state = 1725
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 216, self._ctx)
                if la_ == 1:
                    self.state = 1724
                    self.attributespecifierseq(0)

                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1727
                self.nestednamespecifier(0)
                self.state = 1728
                self.match(CPP14Parser.Star)
                self.state = 1730
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 217, self._ctx)
                if la_ == 1:
                    self.state = 1729
                    self.attributespecifierseq(0)

                self.state = 1733
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 218, self._ctx)
                if la_ == 1:
                    self.state = 1732
                    self.cvqualifierseq()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CvqualifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cvqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierContext, 0)

        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_cvqualifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCvqualifierseq"):
                listener.enterCvqualifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCvqualifierseq"):
                listener.exitCvqualifierseq(self)

    def cvqualifierseq(self):

        localctx = CPP14Parser.CvqualifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_cvqualifierseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1737
            self.cvqualifier()
            self.state = 1739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 220, self._ctx)
            if la_ == 1:
                self.state = 1738
                self.cvqualifierseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CvqualifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(CPP14Parser.Const, 0)

        def Volatile(self):
            return self.getToken(CPP14Parser.Volatile, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_cvqualifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCvqualifier"):
                listener.enterCvqualifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCvqualifier"):
                listener.exitCvqualifier(self)

    def cvqualifier(self):

        localctx = CPP14Parser.CvqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_cvqualifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1741
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.Const or _la == CPP14Parser.Volatile):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RefqualifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return CPP14Parser.RULE_refqualifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRefqualifier"):
                listener.enterRefqualifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRefqualifier"):
                listener.exitRefqualifier(self)

    def refqualifier(self):

        localctx = CPP14Parser.RefqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_refqualifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1743
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext, 0)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractpackdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbstractdeclarator"):
                listener.enterAbstractdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbstractdeclarator"):
                listener.exitAbstractdeclarator(self)

    def abstractdeclarator(self):

        localctx = CPP14Parser.AbstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_abstractdeclarator)
        try:
            self.state = 1756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 223, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1745
                self.ptrabstractdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1747
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 221, self._ctx)
                if la_ == 1:
                    self.state = 1746
                    self.noptrabstractdeclarator(0)

                self.state = 1749
                self.parametersandqualifiers()
                self.state = 1750
                self.match(CPP14Parser.Arrow)
                self.state = 1751
                self.trailingtypespecifierseq()
                self.state = 1753
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 222, self._ctx)
                if la_ == 1:
                    self.state = 1752
                    self.abstractdeclarator()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1755
                self.abstractpackdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrabstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPtrabstractdeclarator"):
                listener.enterPtrabstractdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPtrabstractdeclarator"):
                listener.exitPtrabstractdeclarator(self)

    def ptrabstractdeclarator(self):

        localctx = CPP14Parser.PtrabstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_ptrabstractdeclarator)
        try:
            self.state = 1763
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1758
                self.noptrabstractdeclarator(0)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                           CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1759
                self.ptroperator()
                self.state = 1761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 224, self._ctx)
                if la_ == 1:
                    self.state = 1760
                    self.ptrabstractdeclarator()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrabstractdeclarator"):
                listener.enterNoptrabstractdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrabstractdeclarator"):
                listener.exitNoptrabstractdeclarator(self)

    def noptrabstractdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 164
        self.enterRecursionRule(localctx, 164, self.RULE_noptrabstractdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 228, self._ctx)
            if la_ == 1:
                self.state = 1766
                self.parametersandqualifiers()
                pass

            elif la_ == 2:
                self.state = 1767
                self.match(CPP14Parser.LeftBracket)
                self.state = 1769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1768
                    self.constantexpression()

                self.state = 1771
                self.match(CPP14Parser.RightBracket)
                self.state = 1773
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 227, self._ctx)
                if la_ == 1:
                    self.state = 1772
                    self.attributespecifierseq(0)

                pass

            elif la_ == 3:
                self.state = 1775
                self.match(CPP14Parser.LeftParen)
                self.state = 1776
                self.ptrabstractdeclarator()
                self.state = 1777
                self.match(CPP14Parser.RightParen)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 1794
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 232, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1792
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 231, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1781
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1782
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1783
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1784
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1786
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                            1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                            1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                            1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                                (1 << (CPP14Parser.Characterliteral - 132)) | (
                                                1 << (CPP14Parser.Floatingliteral - 132)) | (
                                            1 << (CPP14Parser.Stringliteral - 132)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 1785
                            self.constantexpression()

                        self.state = 1788
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1790
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 230, self._ctx)
                        if la_ == 1:
                            self.state = 1789
                            self.attributespecifierseq(0)

                        pass

                self.state = 1796
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 232, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AbstractpackdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractpackdeclaratorContext, 0)

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractpackdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractpackdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbstractpackdeclarator"):
                listener.enterAbstractpackdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbstractpackdeclarator"):
                listener.exitAbstractpackdeclarator(self)

    def abstractpackdeclarator(self):

        localctx = CPP14Parser.AbstractpackdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_abstractpackdeclarator)
        try:
            self.state = 1801
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Ellipsis]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1797
                self.noptrabstractpackdeclarator(0)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                           CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1798
                self.ptroperator()
                self.state = 1799
                self.abstractpackdeclarator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrabstractpackdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractpackdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractpackdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrabstractpackdeclarator"):
                listener.enterNoptrabstractpackdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrabstractpackdeclarator"):
                listener.exitNoptrabstractpackdeclarator(self)

    def noptrabstractpackdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 168
        self.enterRecursionRule(localctx, 168, self.RULE_noptrabstractpackdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1804
            self.match(CPP14Parser.Ellipsis)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1819
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 237, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1817
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 236, self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1806
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1807
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1808
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1809
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1811
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (
                            1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (
                            1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.FalseToken) | (
                            1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                            1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                                (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (
                            CPP14Parser.TrueToken - 65)) | (1 << (CPP14Parser.Typeid - 65)) | (
                            1 << (CPP14Parser.Typename - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                            1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (
                            1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (
                            1 << (CPP14Parser.Plus - 65)) | (1 << (CPP14Parser.Minus - 65)) | (
                            1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (
                            1 << (CPP14Parser.Not - 65)) | (1 << (CPP14Parser.PlusPlus - 65)) | (
                            1 << (CPP14Parser.MinusMinus - 65)) | (1 << (CPP14Parser.Doublecolon - 65)) | (
                            1 << (CPP14Parser.Identifier - 65)) | (1 << (CPP14Parser.Integerliteral - 65)))) != 0) or (
                                (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                                (1 << (CPP14Parser.Characterliteral - 132)) | (
                                                1 << (CPP14Parser.Floatingliteral - 132)) | (
                                            1 << (CPP14Parser.Stringliteral - 132)) | (
                                        1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                            self.state = 1810
                            self.constantexpression()

                        self.state = 1813
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1815
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 235, self._ctx)
                        if la_ == 1:
                            self.state = 1814
                            self.attributespecifierseq(0)

                        pass

                self.state = 1821
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 237, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParameterdeclarationclauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclarationclause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterdeclarationclause"):
                listener.enterParameterdeclarationclause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterdeclarationclause"):
                listener.exitParameterdeclarationclause(self)

    def parameterdeclarationclause(self):

        localctx = CPP14Parser.ParameterdeclarationclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_parameterdeclarationclause)
        self._la = 0  # Token type
        try:
            self.state = 1832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 240, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                    1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                    1 << CPP14Parser.Static) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Thread_local))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (
                    1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                    1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (
                    1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (
                    1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1822
                    self.parameterdeclarationlist(0)

                self.state = 1826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1825
                    self.match(CPP14Parser.Ellipsis)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1828
                self.parameterdeclarationlist(0)
                self.state = 1829
                self.match(CPP14Parser.Comma)
                self.state = 1830
                self.match(CPP14Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterdeclarationlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, 0)

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclarationlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterdeclarationlist"):
                listener.enterParameterdeclarationlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterdeclarationlist"):
                listener.exitParameterdeclarationlist(self)

    def parameterdeclarationlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ParameterdeclarationlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 172
        self.enterRecursionRule(localctx, 172, self.RULE_parameterdeclarationlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1835
            self.parameterdeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1842
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 241, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ParameterdeclarationlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_parameterdeclarationlist)
                    self.state = 1837
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1838
                    self.match(CPP14Parser.Comma)
                    self.state = 1839
                    self.parameterdeclaration()
                self.state = 1844
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 241, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParameterdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterdeclaration"):
                listener.enterParameterdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterdeclaration"):
                listener.exitParameterdeclaration(self)

    def parameterdeclaration(self):

        localctx = CPP14Parser.ParameterdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_parameterdeclaration)
        self._la = 0  # Token type
        try:
            self.state = 1876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 248, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1845
                    self.attributespecifierseq(0)

                self.state = 1848
                self.declspecifierseq()
                self.state = 1849
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1851
                    self.attributespecifierseq(0)

                self.state = 1854
                self.declspecifierseq()
                self.state = 1855
                self.declarator()
                self.state = 1856
                self.match(CPP14Parser.Assign)
                self.state = 1857
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1859
                    self.attributespecifierseq(0)

                self.state = 1862
                self.declspecifierseq()
                self.state = 1864
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 245, self._ctx)
                if la_ == 1:
                    self.state = 1863
                    self.abstractdeclarator()

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1866
                    self.attributespecifierseq(0)

                self.state = 1869
                self.declspecifierseq()
                self.state = 1871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 1870
                    self.abstractdeclarator()

                self.state = 1873
                self.match(CPP14Parser.Assign)
                self.state = 1874
                self.initializerclause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctiondefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def functionbody(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionbodyContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functiondefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctiondefinition"):
                listener.enterFunctiondefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctiondefinition"):
                listener.exitFunctiondefinition(self)

    def functiondefinition(self):

        localctx = CPP14Parser.FunctiondefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_functiondefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 1878
                self.attributespecifierseq(0)

            self.state = 1882
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 250, self._ctx)
            if la_ == 1:
                self.state = 1881
                self.declspecifierseq()

            self.state = 1884
            self.declarator()
            self.state = 1886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Final or _la == CPP14Parser.Override:
                self.state = 1885
                self.virtspecifierseq(0)

            self.state = 1888
            self.functionbody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionbodyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext, 0)

        def statementseq(self):
            return self.getTypedRuleContext(CPP14Parser.StatementseqContext, 0)

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext, 0)

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functionbody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionbody"):
                listener.enterFunctionbody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionbody"):
                listener.exitFunctionbody(self)

    def functionbody(self):

        localctx = CPP14Parser.FunctionbodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_functionbody)
        self._la = 0  # Token type
        try:
            self.state = 1916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 256, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1890
                    self.match(CPP14Parser.Colon)
                    self.state = 1891
                    self.meminitializerlist()

                self.state = 1894
                self.match(CPP14Parser.LeftBrace)
                self.state = 1896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                    1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (
                    1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (
                    1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (
                    1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                    1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (
                    1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Goto) | (
                    1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (
                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Return) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (
                    1 << CPP14Parser.This) | (1 << CPP14Parser.Thread_local))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Try - 64)) | (
                    1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                    1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                    1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                    1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                    1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Semi - 64)) | (
                    1 << (CPP14Parser.Ellipsis - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1895
                    self.statementseq(0)

                self.state = 1898
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1899
                self.match(CPP14Parser.Try)
                self.state = 1902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1900
                    self.match(CPP14Parser.Colon)
                    self.state = 1901
                    self.meminitializerlist()

                self.state = 1904
                self.match(CPP14Parser.LeftBrace)
                self.state = 1906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                    1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (
                    1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (
                    1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (
                    1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (
                    1 << CPP14Parser.Extern) | (1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (
                    1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Goto) | (
                    1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (
                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Return) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (
                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (
                    1 << CPP14Parser.This) | (1 << CPP14Parser.Thread_local))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Try - 64)) | (
                    1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                    1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                    1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                    1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                    1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                    1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                    1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                    1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Semi - 64)) | (
                    1 << (CPP14Parser.Ellipsis - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1905
                    self.statementseq(0)

                self.state = 1908
                self.match(CPP14Parser.RightBrace)
                self.state = 1909
                self.handlerseq()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1910
                self.match(CPP14Parser.Assign)
                self.state = 1911
                self.match(CPP14Parser.Default)
                self.state = 1912
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1913
                self.match(CPP14Parser.Assign)
                self.state = 1914
                self.match(CPP14Parser.Delete)
                self.state = 1915
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def braceorequalinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.BraceorequalinitializerContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitializer"):
                listener.enterInitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitializer"):
                listener.exitInitializer(self)

    def initializer(self):

        localctx = CPP14Parser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_initializer)
        try:
            self.state = 1923
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBrace, CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1918
                self.braceorequalinitializer()
                pass
            elif token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1919
                self.match(CPP14Parser.LeftParen)
                self.state = 1920
                self.initializerlist(0)
                self.state = 1921
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BraceorequalinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_braceorequalinitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBraceorequalinitializer"):
                listener.enterBraceorequalinitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBraceorequalinitializer"):
                listener.exitBraceorequalinitializer(self)

    def braceorequalinitializer(self):

        localctx = CPP14Parser.BraceorequalinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_braceorequalinitializer)
        try:
            self.state = 1928
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1925
                self.match(CPP14Parser.Assign)
                self.state = 1926
                self.initializerclause()
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1927
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerclauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerclause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitializerclause"):
                listener.enterInitializerclause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitializerclause"):
                listener.exitInitializerclause(self)

    def initializerclause(self):

        localctx = CPP14Parser.InitializerclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_initializerclause)
        try:
            self.state = 1932
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16,
                         CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype, CPP14Parser.Delete,
                         CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.FalseToken, CPP14Parser.Float,
                         CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Nullptr,
                         CPP14Parser.Operator, CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed,
                         CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw,
                         CPP14Parser.TrueToken, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.Unsigned,
                         CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                         CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                         CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                         CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Integerliteral,
                         CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral,
                         CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral,
                         CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1930
                self.assignmentexpression()
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1931
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitializerlist"):
                listener.enterInitializerlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitializerlist"):
                listener.exitInitializerlist(self)

    def initializerlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InitializerlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 186
        self.enterRecursionRule(localctx, 186, self.RULE_initializerlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1935
            self.initializerclause()
            self.state = 1937
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 260, self._ctx)
            if la_ == 1:
                self.state = 1936
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1947
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 262, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InitializerlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initializerlist)
                    self.state = 1939
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1940
                    self.match(CPP14Parser.Comma)
                    self.state = 1941
                    self.initializerclause()
                    self.state = 1943
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 261, self._ctx)
                    if la_ == 1:
                        self.state = 1942
                        self.match(CPP14Parser.Ellipsis)

                self.state = 1949
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 262, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BracedinitlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_bracedinitlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBracedinitlist"):
                listener.enterBracedinitlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBracedinitlist"):
                listener.exitBracedinitlist(self)

    def bracedinitlist(self):

        localctx = CPP14Parser.BracedinitlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_bracedinitlist)
        self._la = 0  # Token type
        try:
            self.state = 1959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 264, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1950
                self.match(CPP14Parser.LeftBrace)
                self.state = 1951
                self.initializerlist(0)
                self.state = 1953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Comma:
                    self.state = 1952
                    self.match(CPP14Parser.Comma)

                self.state = 1955
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1957
                self.match(CPP14Parser.LeftBrace)
                self.state = 1958
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassnameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classname

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassname"):
                listener.enterClassname(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassname"):
                listener.exitClassname(self)

    def classname(self):

        localctx = CPP14Parser.ClassnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_classname)
        self._la = 0  # Token type
        try:
            self.state = 1968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 266, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1961
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1962
                self.match(CPP14Parser.Identifier)
                self.state = 1963
                self.match(CPP14Parser.Less)
                self.state = 1965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 1964
                    self.templateargumentlist(0)

                self.state = 1967
                self.match(CPP14Parser.Greater)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassheadContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classkey(self):
            return self.getTypedRuleContext(CPP14Parser.ClasskeyContext, 0)

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classhead

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClasshead"):
                listener.enterClasshead(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClasshead"):
                listener.exitClasshead(self)

    def classhead(self):

        localctx = CPP14Parser.ClassheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_classhead)
        self._la = 0  # Token type
        try:
            self.state = 1993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 273, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1970
                self.classkey()
                self.state = 1972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1971
                    self.attributespecifierseq(0)

                self.state = 1975
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 268, self._ctx)
                if la_ == 1:
                    self.state = 1974
                    self.nestednamespecifier(0)

                self.state = 1977
                self.classname()
                self.state = 1979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Final:
                    self.state = 1978
                    self.match(CPP14Parser.Final)

                self.state = 1983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1981
                    self.match(CPP14Parser.Colon)
                    self.state = 1982
                    self.basespecifierlist(0)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1985
                self.classkey()
                self.state = 1987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1986
                    self.attributespecifierseq(0)

                self.state = 1991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1989
                    self.match(CPP14Parser.Colon)
                    self.state = 1990
                    self.basespecifierlist(0)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClasskeyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def Union(self):
            return self.getToken(CPP14Parser.Union, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classkey

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClasskey"):
                listener.enterClasskey(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClasskey"):
                listener.exitClasskey(self)

    def classkey(self):

        localctx = CPP14Parser.ClasskeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_classkey)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1995
            _la = self._input.LA(1)
            if not (((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & (
                    (1 << (CPP14Parser.Class - 14)) | (1 << (CPP14Parser.Struct - 14)) | (
                1 << (CPP14Parser.Union - 14)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclarationContext, 0)

        def memberspecification(self):
            return self.getTypedRuleContext(CPP14Parser.MemberspecificationContext, 0)

        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AccessspecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberspecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberspecification"):
                listener.enterMemberspecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberspecification"):
                listener.exitMemberspecification(self)

    def memberspecification(self):

        localctx = CPP14Parser.MemberspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_memberspecification)
        self._la = 0  # Token type
        try:
            self.state = 2006
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignas, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16,
                         CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Constexpr,
                         CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Explicit,
                         CPP14Parser.Extern, CPP14Parser.Float, CPP14Parser.Friend, CPP14Parser.Inline, CPP14Parser.Int,
                         CPP14Parser.Long, CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Register,
                         CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Static, CPP14Parser.Static_assert,
                         CPP14Parser.Struct, CPP14Parser.Template, CPP14Parser.Thread_local, CPP14Parser.Typedef,
                         CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Using,
                         CPP14Parser.Virtual, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar,
                         CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Star, CPP14Parser.And,
                         CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Colon, CPP14Parser.Doublecolon,
                         CPP14Parser.Semi, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1997
                self.memberdeclaration()
                self.state = 1999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                    1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (
                    1 << CPP14Parser.Public) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (
                    1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (
                    1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (
                    1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((
                                                                                                                         1 << (
                                                                                                                         CPP14Parser.Typedef - 67)) | (
                    1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                    1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                    1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                    1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                    1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                    1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                    1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Colon - 67)) | (
                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (
                    1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1998
                    self.memberspecification()

                pass
            elif token in [CPP14Parser.Private, CPP14Parser.Protected, CPP14Parser.Public]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2001
                self.accessspecifier()
                self.state = 2002
                self.match(CPP14Parser.Colon)
                self.state = 2004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                    1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (
                    1 << CPP14Parser.Public) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (
                    1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (
                    1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (
                    1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((
                                                                                                                         1 << (
                                                                                                                         CPP14Parser.Typedef - 67)) | (
                    1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (
                    1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (
                    1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (
                    1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (
                    1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (
                    1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                    1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Colon - 67)) | (
                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (
                    1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 2003
                    self.memberspecification()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorlistContext, 0)

        def functiondefinition(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiondefinitionContext, 0)

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberdeclaration"):
                listener.enterMemberdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberdeclaration"):
                listener.exitMemberdeclaration(self)

    def memberdeclaration(self):

        localctx = CPP14Parser.MemberdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_memberdeclaration)
        self._la = 0  # Token type
        try:
            self.state = 2059
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 283, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2009
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 277, self._ctx)
                if la_ == 1:
                    self.state = 2008
                    self.attributespecifierseq(0)

                self.state = 2012
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 278, self._ctx)
                if la_ == 1:
                    self.state = 2011
                    self.declspecifierseq()

                self.state = 2015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Operator))) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                                    (1 << (CPP14Parser.LeftParen - 78)) | (
                                                    1 << (CPP14Parser.LeftBracket - 78)) | (
                                                1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (
                                        1 << (CPP14Parser.Tilde - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                                1 << (CPP14Parser.Colon - 78)) | (1 << (CPP14Parser.Doublecolon - 78)) | (
                        1 << (CPP14Parser.Ellipsis - 78)) | (1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 2014
                    self.memberdeclaratorlist(0)

                self.state = 2017
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2018
                self.functiondefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2019
                self.match(CPP14Parser.Using)
                self.state = 2021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Typename:
                    self.state = 2020
                    self.match(CPP14Parser.Typename)

                self.state = 2023
                self.nestednamespecifier(0)
                self.state = 2024
                self.unqualifiedid()
                self.state = 2025
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2027
                self.match(CPP14Parser.Using)
                self.state = 2028
                self.match(CPP14Parser.Doublecolon)
                self.state = 2029
                self.unqualifiedid()
                self.state = 2030
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2032
                self.match(CPP14Parser.Static_assert)
                self.state = 2033
                self.match(CPP14Parser.LeftParen)
                self.state = 2034
                self.constantexpression()
                self.state = 2035
                self.match(CPP14Parser.Comma)
                self.state = 2036
                self.match(CPP14Parser.Stringliteral)
                self.state = 2037
                self.match(CPP14Parser.RightParen)
                self.state = 2038
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2040
                self.match(CPP14Parser.Template)
                self.state = 2041
                self.match(CPP14Parser.Less)
                self.state = 2042
                self.templateparameterlist(0)
                self.state = 2043
                self.match(CPP14Parser.Greater)
                self.state = 2044
                self.declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2046
                self.match(CPP14Parser.Using)
                self.state = 2047
                self.match(CPP14Parser.Identifier)
                self.state = 2049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2048
                    self.attributespecifierseq(0)

                self.state = 2051
                self.match(CPP14Parser.Assign)
                self.state = 2052
                self.typespecifierseq()
                self.state = 2054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 2053
                    self.abstractdeclarator()

                self.state = 2056
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2058
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberdeclaratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorContext, 0)

        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaratorlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberdeclaratorlist"):
                listener.enterMemberdeclaratorlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberdeclaratorlist"):
                listener.exitMemberdeclaratorlist(self)

    def memberdeclaratorlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.MemberdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 200
        self.enterRecursionRule(localctx, 200, self.RULE_memberdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2062
            self.memberdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2069
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 284, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.MemberdeclaratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_memberdeclaratorlist)
                    self.state = 2064
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2065
                    self.match(CPP14Parser.Comma)
                    self.state = 2066
                    self.memberdeclarator()
                self.state = 2071
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 284, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class MemberdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext, 0)

        def purespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.PurespecifierContext, 0)

        def braceorequalinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.BraceorequalinitializerContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberdeclarator"):
                listener.enterMemberdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberdeclarator"):
                listener.exitMemberdeclarator(self)

    def memberdeclarator(self):

        localctx = CPP14Parser.MemberdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_memberdeclarator)
        self._la = 0  # Token type
        try:
            self.state = 2091
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 290, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2072
                self.declarator()
                self.state = 2074
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 285, self._ctx)
                if la_ == 1:
                    self.state = 2073
                    self.virtspecifierseq(0)

                self.state = 2077
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 286, self._ctx)
                if la_ == 1:
                    self.state = 2076
                    self.purespecifier()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2079
                self.declarator()
                self.state = 2081
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 287, self._ctx)
                if la_ == 1:
                    self.state = 2080
                    self.braceorequalinitializer()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 2083
                    self.match(CPP14Parser.Identifier)

                self.state = 2087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2086
                    self.attributespecifierseq(0)

                self.state = 2089
                self.match(CPP14Parser.Colon)
                self.state = 2090
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VirtspecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def virtspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierContext, 0)

        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_virtspecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVirtspecifierseq"):
                listener.enterVirtspecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVirtspecifierseq"):
                listener.exitVirtspecifierseq(self)

    def virtspecifierseq(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.VirtspecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 204
        self.enterRecursionRule(localctx, 204, self.RULE_virtspecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2094
            self.virtspecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2100
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 291, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.VirtspecifierseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_virtspecifierseq)
                    self.state = 2096
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2097
                    self.virtspecifier()
                self.state = 2102
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 291, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class VirtspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Override(self):
            return self.getToken(CPP14Parser.Override, 0)

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_virtspecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVirtspecifier"):
                listener.enterVirtspecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVirtspecifier"):
                listener.exitVirtspecifier(self)

    def virtspecifier(self):

        localctx = CPP14Parser.VirtspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_virtspecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2103
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.Final or _la == CPP14Parser.Override):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PurespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None  # Token

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Octalliteral(self):
            return self.getToken(CPP14Parser.Octalliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_purespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPurespecifier"):
                listener.enterPurespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPurespecifier"):
                listener.exitPurespecifier(self)

    def purespecifier(self):

        localctx = CPP14Parser.PurespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_purespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2105
            self.match(CPP14Parser.Assign)
            self.state = 2106
            localctx.val = self.match(CPP14Parser.Octalliteral)
            if (None if localctx.val is None else localctx.val.text).compareTo("0") != 0:
                raise InputMismatchException(self)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BasespecifierlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierContext, 0)

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifierlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBasespecifierlist"):
                listener.enterBasespecifierlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBasespecifierlist"):
                listener.exitBasespecifierlist(self)

    def basespecifierlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.BasespecifierlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 210
        self.enterRecursionRule(localctx, 210, self.RULE_basespecifierlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2110
            self.basespecifier()
            self.state = 2112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 292, self._ctx)
            if la_ == 1:
                self.state = 2111
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2122
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 294, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.BasespecifierlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_basespecifierlist)
                    self.state = 2114
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2115
                    self.match(CPP14Parser.Comma)
                    self.state = 2116
                    self.basespecifier()
                    self.state = 2118
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 293, self._ctx)
                    if la_ == 1:
                        self.state = 2117
                        self.match(CPP14Parser.Ellipsis)

                self.state = 2124
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 294, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BasespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AccessspecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBasespecifier"):
                listener.enterBasespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBasespecifier"):
                listener.exitBasespecifier(self)

    def basespecifier(self):

        localctx = CPP14Parser.BasespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_basespecifier)
        self._la = 0  # Token type
        try:
            self.state = 2146
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 300, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2126
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2125
                    self.attributespecifierseq(0)

                self.state = 2128
                self.classordecltype()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2129
                    self.attributespecifierseq(0)

                self.state = 2132
                self.match(CPP14Parser.Virtual)
                self.state = 2134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public))) != 0):
                    self.state = 2133
                    self.accessspecifier()

                self.state = 2136
                self.classordecltype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2138
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2137
                    self.attributespecifierseq(0)

                self.state = 2140
                self.accessspecifier()
                self.state = 2142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Virtual:
                    self.state = 2141
                    self.match(CPP14Parser.Virtual)

                self.state = 2144
                self.classordecltype()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassordecltypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classordecltype

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassordecltype"):
                listener.enterClassordecltype(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassordecltype"):
                listener.exitClassordecltype(self)

    def classordecltype(self):

        localctx = CPP14Parser.ClassordecltypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_classordecltype)
        try:
            self.state = 2153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 302, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2149
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 301, self._ctx)
                if la_ == 1:
                    self.state = 2148
                    self.nestednamespecifier(0)

                self.state = 2151
                self.classname()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2152
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AccessspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Private(self):
            return self.getToken(CPP14Parser.Private, 0)

        def Protected(self):
            return self.getToken(CPP14Parser.Protected, 0)

        def Public(self):
            return self.getToken(CPP14Parser.Public, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_accessspecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAccessspecifier"):
                listener.enterAccessspecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAccessspecifier"):
                listener.exitAccessspecifier(self)

    def accessspecifier(self):

        localctx = CPP14Parser.AccessspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_accessspecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2155
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConversiondeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def conversiondeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.ConversiondeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_conversiondeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConversiondeclarator"):
                listener.enterConversiondeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConversiondeclarator"):
                listener.exitConversiondeclarator(self)

    def conversiondeclarator(self):

        localctx = CPP14Parser.ConversiondeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_conversiondeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2157
            self.ptroperator()
            self.state = 2159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 303, self._ctx)
            if la_ == 1:
                self.state = 2158
                self.conversiondeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeminitializerlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializer(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerContext, 0)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializerlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeminitializerlist"):
                listener.enterMeminitializerlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeminitializerlist"):
                listener.exitMeminitializerlist(self)

    def meminitializerlist(self):

        localctx = CPP14Parser.MeminitializerlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_meminitializerlist)
        self._la = 0  # Token type
        try:
            self.state = 2172
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 306, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2161
                self.meminitializer()
                self.state = 2163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 2162
                    self.match(CPP14Parser.Ellipsis)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2165
                self.meminitializer()
                self.state = 2167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 2166
                    self.match(CPP14Parser.Ellipsis)

                self.state = 2169
                self.match(CPP14Parser.Comma)
                self.state = 2170
                self.meminitializerlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeminitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializerid(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializeridContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeminitializer"):
                listener.enterMeminitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeminitializer"):
                listener.exitMeminitializer(self)

    def meminitializer(self):

        localctx = CPP14Parser.MeminitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_meminitializer)
        self._la = 0  # Token type
        try:
            self.state = 2184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 308, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2174
                self.meminitializerid()
                self.state = 2175
                self.match(CPP14Parser.LeftParen)
                self.state = 2177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (
                    1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                    1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (
                    1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                    1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (
                    1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (
                    1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (
                    1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                    1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)) | (
                    1 << (CPP14Parser.Doublecolon - 64)) | (1 << (CPP14Parser.Identifier - 64)) | (
                    1 << (CPP14Parser.Integerliteral - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 2176
                    self.initializerlist(0)

                self.state = 2179
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2181
                self.meminitializerid()
                self.state = 2182
                self.bracedinitlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeminitializeridContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializerid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeminitializerid"):
                listener.enterMeminitializerid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeminitializerid"):
                listener.exitMeminitializerid(self)

    def meminitializerid(self):

        localctx = CPP14Parser.MeminitializeridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_meminitializerid)
        try:
            self.state = 2188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 309, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2186
                self.classordecltype()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2187
                self.match(CPP14Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteraloperatoridContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_literaloperatorid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLiteraloperatorid"):
                listener.enterLiteraloperatorid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLiteraloperatorid"):
                listener.exitLiteraloperatorid(self)

    def literaloperatorid(self):

        localctx = CPP14Parser.LiteraloperatoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_literaloperatorid)
        try:
            self.state = 2195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 310, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2190
                self.match(CPP14Parser.Operator)
                self.state = 2191
                self.match(CPP14Parser.Stringliteral)
                self.state = 2192
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2193
                self.match(CPP14Parser.Operator)
                self.state = 2194
                self.match(CPP14Parser.Userdefinedstringliteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateparameterlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateparameter(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterContext, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameterlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateparameterlist"):
                listener.enterTemplateparameterlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateparameterlist"):
                listener.exitTemplateparameterlist(self)

    def templateparameterlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TemplateparameterlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 228
        self.enterRecursionRule(localctx, 228, self.RULE_templateparameterlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2198
            self.templateparameter()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2205
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 311, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TemplateparameterlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateparameterlist)
                    self.state = 2200
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2201
                    self.match(CPP14Parser.Comma)
                    self.state = 2202
                    self.templateparameter()
                self.state = 2207
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 311, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TemplateparameterContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateparameter"):
                listener.enterTemplateparameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateparameter"):
                listener.exitTemplateparameter(self)

    def templateparameter(self):

        localctx = CPP14Parser.TemplateparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_templateparameter)
        self._la = 0  # Token type
        try:
            self.state = 2263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 323, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2208
                self.match(CPP14Parser.Class)
                self.state = 2210
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 312, self._ctx)
                if la_ == 1:
                    self.state = 2209
                    self.match(CPP14Parser.Ellipsis)

                self.state = 2213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 313, self._ctx)
                if la_ == 1:
                    self.state = 2212
                    self.match(CPP14Parser.Identifier)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2215
                self.match(CPP14Parser.Class)
                self.state = 2217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 2216
                    self.match(CPP14Parser.Identifier)

                self.state = 2219
                self.match(CPP14Parser.Assign)
                self.state = 2220
                self.typespecifierseq()
                self.state = 2222
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 315, self._ctx)
                if la_ == 1:
                    self.state = 2221
                    self.abstractdeclarator()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2224
                self.match(CPP14Parser.Typename)
                self.state = 2226
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 316, self._ctx)
                if la_ == 1:
                    self.state = 2225
                    self.match(CPP14Parser.Ellipsis)

                self.state = 2229
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 317, self._ctx)
                if la_ == 1:
                    self.state = 2228
                    self.match(CPP14Parser.Identifier)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2231
                self.match(CPP14Parser.Typename)
                self.state = 2233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 2232
                    self.match(CPP14Parser.Identifier)

                self.state = 2235
                self.match(CPP14Parser.Assign)
                self.state = 2236
                self.typespecifierseq()
                self.state = 2238
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 319, self._ctx)
                if la_ == 1:
                    self.state = 2237
                    self.abstractdeclarator()

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2240
                self.match(CPP14Parser.Template)
                self.state = 2241
                self.match(CPP14Parser.Less)
                self.state = 2242
                self.templateparameterlist(0)
                self.state = 2243
                self.match(CPP14Parser.Greater)
                self.state = 2244
                self.match(CPP14Parser.Class)
                self.state = 2246
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 320, self._ctx)
                if la_ == 1:
                    self.state = 2245
                    self.match(CPP14Parser.Ellipsis)

                self.state = 2249
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 321, self._ctx)
                if la_ == 1:
                    self.state = 2248
                    self.match(CPP14Parser.Identifier)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2251
                self.match(CPP14Parser.Template)
                self.state = 2252
                self.match(CPP14Parser.Less)
                self.state = 2253
                self.templateparameterlist(0)
                self.state = 2254
                self.match(CPP14Parser.Greater)
                self.state = 2255
                self.match(CPP14Parser.Class)
                self.state = 2257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 2256
                    self.match(CPP14Parser.Identifier)

                self.state = 2259
                self.match(CPP14Parser.Assign)
                self.state = 2260
                self.idexpression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2262
                self.parameterdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateargumentlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateargument(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargumentlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateargumentlist"):
                listener.enterTemplateargumentlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateargumentlist"):
                listener.exitTemplateargumentlist(self)

    def templateargumentlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TemplateargumentlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 232
        self.enterRecursionRule(localctx, 232, self.RULE_templateargumentlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2266
            self.templateargument()
            self.state = 2268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 324, self._ctx)
            if la_ == 1:
                self.state = 2267
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2278
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 326, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TemplateargumentlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateargumentlist)
                    self.state = 2270
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2271
                    self.match(CPP14Parser.Comma)
                    self.state = 2272
                    self.templateargument()
                    self.state = 2274
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 325, self._ctx)
                    if la_ == 1:
                        self.state = 2273
                        self.match(CPP14Parser.Ellipsis)

                self.state = 2280
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 326, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TemplateargumentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateargument"):
                listener.enterTemplateargument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateargument"):
                listener.exitTemplateargument(self)

    def templateargument(self):

        localctx = CPP14Parser.TemplateargumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_templateargument)
        try:
            self.state = 2287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 328, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2281
                self.typespecifierseq()
                self.state = 2283
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 327, self._ctx)
                if la_ == 1:
                    self.state = 2282
                    self.abstractdeclarator()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2285
                self.constantexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2286
                self.idexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypenamespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typenamespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypenamespecifier"):
                listener.enterTypenamespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypenamespecifier"):
                listener.exitTypenamespecifier(self)

    def typenamespecifier(self):

        localctx = CPP14Parser.TypenamespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_typenamespecifier)
        self._la = 0  # Token type
        try:
            self.state = 2305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 331, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2289
                self.match(CPP14Parser.Typename)
                self.state = 2290
                self.nestednamespecifier(0)
                self.state = 2291
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2293
                self.match(CPP14Parser.Typename)
                self.state = 2294
                self.nestednamespecifier(0)
                self.state = 2296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Template:
                    self.state = 2295
                    self.match(CPP14Parser.Template)

                self.state = 2298
                self.match(CPP14Parser.Identifier)
                self.state = 2299
                self.match(CPP14Parser.Less)
                self.state = 2301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                    1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                    1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (
                    1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (
                    1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_cast) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This))) != 0) or (
                        (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.TrueToken - 65)) | (
                    1 << (CPP14Parser.Typeid - 65)) | (1 << (CPP14Parser.Typename - 65)) | (
                    1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (
                    1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (
                    1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (
                    1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Plus - 65)) | (
                    1 << (CPP14Parser.Minus - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (
                    1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Not - 65)) | (
                    1 << (CPP14Parser.PlusPlus - 65)) | (1 << (CPP14Parser.MinusMinus - 65)) | (
                    1 << (CPP14Parser.Doublecolon - 65)) | (1 << (CPP14Parser.Identifier - 65)) | (
                    1 << (CPP14Parser.Integerliteral - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and (
                    (1 << (_la - 132)) & ((1 << (CPP14Parser.Characterliteral - 132)) | (
                    1 << (CPP14Parser.Floatingliteral - 132)) | (1 << (CPP14Parser.Stringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                    self.state = 2300
                    self.templateargumentlist(0)

                self.state = 2303
                self.match(CPP14Parser.Greater)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryblockContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext, 0)

        def statementseq(self):
            return self.getTypedRuleContext(CPP14Parser.StatementseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_tryblock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTryblock"):
                listener.enterTryblock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTryblock"):
                listener.exitTryblock(self)

    def tryblock(self):

        localctx = CPP14Parser.TryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_tryblock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2307
            self.match(CPP14Parser.Try)
            self.state = 2308
            self.match(CPP14Parser.LeftBrace)
            self.state = 2310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (
                1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (
                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (
                1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (
                1 << CPP14Parser.Friend) | (1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (
                1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (
                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (
                1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Static_cast) | (
                1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (
                1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Try - 64)) | (
                1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                1 << (CPP14Parser.Semi - 64)) | (1 << (CPP14Parser.Ellipsis - 64)) | (
                1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                    (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                    (1 << (CPP14Parser.Characterliteral - 132)) | (
                                    1 << (CPP14Parser.Floatingliteral - 132)) | (
                                1 << (CPP14Parser.Stringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                self.state = 2309
                self.statementseq(0)

            self.state = 2312
            self.match(CPP14Parser.RightBrace)
            self.state = 2313
            self.handlerseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def handler(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerContext, 0)

        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_handlerseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHandlerseq"):
                listener.enterHandlerseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHandlerseq"):
                listener.exitHandlerseq(self)

    def handlerseq(self):

        localctx = CPP14Parser.HandlerseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_handlerseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2315
            self.handler()
            self.state = 2317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 333, self._ctx)
            if la_ == 1:
                self.state = 2316
                self.handlerseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(CPP14Parser.Catch, 0)

        def exceptiondeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptiondeclarationContext, 0)

        def statementseq(self):
            return self.getTypedRuleContext(CPP14Parser.StatementseqContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_handler

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHandler"):
                listener.enterHandler(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHandler"):
                listener.exitHandler(self)

    def handler(self):

        localctx = CPP14Parser.HandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_handler)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2319
            self.match(CPP14Parser.Catch)
            self.state = 2320
            self.match(CPP14Parser.LeftParen)
            self.state = 2321
            self.exceptiondeclaration()
            self.state = 2322
            self.match(CPP14Parser.RightParen)
            self.state = 2323
            self.match(CPP14Parser.LeftBrace)
            self.state = 2325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (
                1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (
                1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (
                1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (
                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (
                1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (
                1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (
                1 << CPP14Parser.FalseToken) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (
                1 << CPP14Parser.Friend) | (1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (
                1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (
                1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (
                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (
                1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (
                1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Static_cast) | (
                1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (
                1 << CPP14Parser.Thread_local))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (
                CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.TrueToken - 64)) | (1 << (CPP14Parser.Try - 64)) | (
                1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (
                1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (
                1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (
                1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (
                1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (
                1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (
                1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (
                1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (
                1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (
                1 << (CPP14Parser.Not - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.Doublecolon - 64)) | (
                1 << (CPP14Parser.Semi - 64)) | (1 << (CPP14Parser.Ellipsis - 64)) | (
                1 << (CPP14Parser.Identifier - 64)) | (1 << (CPP14Parser.Integerliteral - 64)))) != 0) or (
                    (((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & (
                                    (1 << (CPP14Parser.Characterliteral - 132)) | (
                                    1 << (CPP14Parser.Floatingliteral - 132)) | (
                                1 << (CPP14Parser.Stringliteral - 132)) | (
                            1 << (CPP14Parser.Userdefinedintegerliteral - 132)) | (
                        1 << (CPP14Parser.Userdefinedfloatingliteral - 132)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 132)) | (
                1 << (CPP14Parser.Userdefinedcharacterliteral - 132)))) != 0):
                self.state = 2324
                self.statementseq(0)

            self.state = 2327
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExceptiondeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exceptiondeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExceptiondeclaration"):
                listener.enterExceptiondeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExceptiondeclaration"):
                listener.exitExceptiondeclaration(self)

    def exceptiondeclaration(self):

        localctx = CPP14Parser.ExceptiondeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_exceptiondeclaration)
        self._la = 0  # Token type
        try:
            self.state = 2343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 338, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2329
                    self.attributespecifierseq(0)

                self.state = 2332
                self.typespecifierseq()
                self.state = 2333
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2335
                    self.attributespecifierseq(0)

                self.state = 2338
                self.typespecifierseq()
                self.state = 2340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & (
                                            (1 << (CPP14Parser.LeftParen - 78)) | (
                                            1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (
                                    1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.AndAnd - 78)) | (
                            1 << (CPP14Parser.Doublecolon - 78)) | (1 << (CPP14Parser.Ellipsis - 78)) | (
                    1 << (CPP14Parser.Identifier - 78)))) != 0):
                    self.state = 2339
                    self.abstractdeclarator()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2342
                self.match(CPP14Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExceptionspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidlistContext, 0)

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exceptionspecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExceptionspecification"):
                listener.enterExceptionspecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExceptionspecification"):
                listener.exitExceptionspecification(self)

    def exceptionspecification(self):

        localctx = CPP14Parser.ExceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_exceptionspecification)
        self._la = 0  # Token type
        try:
            self.state = 2357
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 340, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2345
                self.match(CPP14Parser.Throw)
                self.state = 2346
                self.match(CPP14Parser.LeftParen)
                self.state = 2348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (
                    1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (
                    1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Float) | (
                    1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Short) | (
                    1 << CPP14Parser.Signed) | (1 << CPP14Parser.Struct))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and (
                    (1 << (_la - 69)) & ((1 << (CPP14Parser.Typename - 69)) | (1 << (CPP14Parser.Union - 69)) | (
                    1 << (CPP14Parser.Unsigned - 69)) | (1 << (CPP14Parser.Void - 69)) | (
                    1 << (CPP14Parser.Volatile - 69)) | (1 << (CPP14Parser.Wchar - 69)) | (
                    1 << (CPP14Parser.Doublecolon - 69)) | (1 << (CPP14Parser.Identifier - 69)))) != 0):
                    self.state = 2347
                    self.typeidlist(0)

                self.state = 2350
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2351
                self.match(CPP14Parser.Noexcept)
                self.state = 2352
                self.match(CPP14Parser.LeftParen)
                self.state = 2353
                self.constantexpression()
                self.state = 2354
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2356
                self.match(CPP14Parser.Noexcept)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeidlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typeidlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeidlist"):
                listener.enterTypeidlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeidlist"):
                listener.exitTypeidlist(self)

    def typeidlist(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TypeidlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 248
        self.enterRecursionRule(localctx, 248, self.RULE_typeidlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2360
            self.typespecifierseq()
            self.state = 2362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 341, self._ctx)
            if la_ == 1:
                self.state = 2361
                self.abstractdeclarator()

            self.state = 2365
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 342, self._ctx)
            if la_ == 1:
                self.state = 2364
                self.match(CPP14Parser.Ellipsis)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2378
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 345, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TypeidlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeidlist)
                    self.state = 2367
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2368
                    self.match(CPP14Parser.Comma)
                    self.state = 2369
                    self.typespecifierseq()
                    self.state = 2371
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 343, self._ctx)
                    if la_ == 1:
                        self.state = 2370
                        self.abstractdeclarator()

                    self.state = 2374
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 344, self._ctx)
                    if la_ == 1:
                        self.state = 2373
                        self.match(CPP14Parser.Ellipsis)

                self.state = 2380
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 345, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class RightShiftContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_rightShift

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRightShift"):
                listener.enterRightShift(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRightShift"):
                listener.exitRightShift(self)

    def rightShift(self):

        localctx = CPP14Parser.RightShiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_rightShift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2381
            self.match(CPP14Parser.Greater)
            self.state = 2382
            self.match(CPP14Parser.Greater)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RightShiftAssignContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_rightShiftAssign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRightShiftAssign"):
                listener.enterRightShiftAssign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRightShiftAssign"):
                listener.exitRightShiftAssign(self)

    def rightShiftAssign(self):

        localctx = CPP14Parser.RightShiftAssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_rightShiftAssign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2384
            self.match(CPP14Parser.Greater)
            self.state = 2385
            self.match(CPP14Parser.Greater)
            self.state = 2386
            self.match(CPP14Parser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TheoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def rightShift(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftContext, 0)

        def rightShiftAssign(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftAssignContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_theoperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTheoperator"):
                listener.enterTheoperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTheoperator"):
                listener.exitTheoperator(self)

    def theoperator(self):

        localctx = CPP14Parser.TheoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_theoperator)
        try:
            self.state = 2436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 346, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2388
                self.match(CPP14Parser.New)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2389
                self.match(CPP14Parser.Delete)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2390
                self.match(CPP14Parser.New)
                self.state = 2391
                self.match(CPP14Parser.LeftBracket)
                self.state = 2392
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2393
                self.match(CPP14Parser.Delete)
                self.state = 2394
                self.match(CPP14Parser.LeftBracket)
                self.state = 2395
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2396
                self.match(CPP14Parser.Plus)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2397
                self.match(CPP14Parser.Minus)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2398
                self.match(CPP14Parser.Star)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2399
                self.match(CPP14Parser.Div)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2400
                self.match(CPP14Parser.Mod)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2401
                self.match(CPP14Parser.Caret)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2402
                self.match(CPP14Parser.And)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2403
                self.match(CPP14Parser.Or)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2404
                self.match(CPP14Parser.Tilde)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2405
                self.match(CPP14Parser.Not)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2406
                self.match(CPP14Parser.Assign)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2407
                self.match(CPP14Parser.Less)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2408
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2409
                self.match(CPP14Parser.PlusAssign)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2410
                self.match(CPP14Parser.MinusAssign)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2411
                self.match(CPP14Parser.StarAssign)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2412
                self.match(CPP14Parser.DivAssign)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2413
                self.match(CPP14Parser.ModAssign)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2414
                self.match(CPP14Parser.XorAssign)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2415
                self.match(CPP14Parser.AndAssign)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2416
                self.match(CPP14Parser.OrAssign)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2417
                self.match(CPP14Parser.LeftShift)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2418
                self.rightShift()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2419
                self.rightShiftAssign()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2420
                self.match(CPP14Parser.LeftShiftAssign)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2421
                self.match(CPP14Parser.Equal)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2422
                self.match(CPP14Parser.NotEqual)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2423
                self.match(CPP14Parser.LessEqual)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2424
                self.match(CPP14Parser.GreaterEqual)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 2425
                self.match(CPP14Parser.AndAnd)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 2426
                self.match(CPP14Parser.OrOr)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 2427
                self.match(CPP14Parser.PlusPlus)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 2428
                self.match(CPP14Parser.MinusMinus)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2429
                self.match(CPP14Parser.Comma)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2430
                self.match(CPP14Parser.ArrowStar)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2431
                self.match(CPP14Parser.Arrow)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2432
                self.match(CPP14Parser.LeftParen)
                self.state = 2433
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 2434
                self.match(CPP14Parser.LeftBracket)
                self.state = 2435
                self.match(CPP14Parser.RightBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[4] = self.nestednamespecifier_sempred
        self._predicates[6] = self.capturelist_sempred
        self._predicates[9] = self.postfixexpression_sempred
        self._predicates[16] = self.noptrnewdeclarator_sempred
        self._predicates[20] = self.pmexpression_sempred
        self._predicates[21] = self.multiplicativeexpression_sempred
        self._predicates[22] = self.additiveexpression_sempred
        self._predicates[23] = self.shiftexpression_sempred
        self._predicates[24] = self.relationalexpression_sempred
        self._predicates[25] = self.equalityexpression_sempred
        self._predicates[26] = self.andexpression_sempred
        self._predicates[27] = self.exclusiveorexpression_sempred
        self._predicates[28] = self.inclusiveorexpression_sempred
        self._predicates[29] = self.logicalandexpression_sempred
        self._predicates[30] = self.logicalorexpression_sempred
        self._predicates[35] = self.expression_sempred
        self._predicates[40] = self.statementseq_sempred
        self._predicates[49] = self.declarationseq_sempred
        self._predicates[62] = self.enumeratorlist_sempred
        self._predicates[64] = self.attributespecifierseq_sempred
        self._predicates[66] = self.attributelist_sempred
        self._predicates[69] = self.balancedtokenseq_sempred
        self._predicates[71] = self.initdeclaratorlist_sempred
        self._predicates[74] = self.noptrdeclarator_sempred
        self._predicates[82] = self.noptrabstractdeclarator_sempred
        self._predicates[84] = self.noptrabstractpackdeclarator_sempred
        self._predicates[86] = self.parameterdeclarationlist_sempred
        self._predicates[93] = self.initializerlist_sempred
        self._predicates[100] = self.memberdeclaratorlist_sempred
        self._predicates[102] = self.virtspecifierseq_sempred
        self._predicates[105] = self.basespecifierlist_sempred
        self._predicates[114] = self.templateparameterlist_sempred
        self._predicates[116] = self.templateargumentlist_sempred
        self._predicates[124] = self.typeidlist_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def nestednamespecifier_sempred(self, localctx: NestednamespecifierContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 2)

        if predIndex == 1:
            return self.precpred(self._ctx, 1)

    def capturelist_sempred(self, localctx: CapturelistContext, predIndex: int):
        if predIndex == 2:
            return self.precpred(self._ctx, 1)

    def postfixexpression_sempred(self, localctx: PostfixexpressionContext, predIndex: int):
        if predIndex == 3:
            return self.precpred(self._ctx, 19)

        if predIndex == 4:
            return self.precpred(self._ctx, 18)

        if predIndex == 5:
            return self.precpred(self._ctx, 17)

        if predIndex == 6:
            return self.precpred(self._ctx, 12)

        if predIndex == 7:
            return self.precpred(self._ctx, 11)

        if predIndex == 8:
            return self.precpred(self._ctx, 10)

        if predIndex == 9:
            return self.precpred(self._ctx, 9)

        if predIndex == 10:
            return self.precpred(self._ctx, 8)

        if predIndex == 11:
            return self.precpred(self._ctx, 7)

    def noptrnewdeclarator_sempred(self, localctx: NoptrnewdeclaratorContext, predIndex: int):
        if predIndex == 12:
            return self.precpred(self._ctx, 1)

    def pmexpression_sempred(self, localctx: PmexpressionContext, predIndex: int):
        if predIndex == 13:
            return self.precpred(self._ctx, 2)

        if predIndex == 14:
            return self.precpred(self._ctx, 1)

    def multiplicativeexpression_sempred(self, localctx: MultiplicativeexpressionContext, predIndex: int):
        if predIndex == 15:
            return self.precpred(self._ctx, 3)

        if predIndex == 16:
            return self.precpred(self._ctx, 2)

        if predIndex == 17:
            return self.precpred(self._ctx, 1)

    def additiveexpression_sempred(self, localctx: AdditiveexpressionContext, predIndex: int):
        if predIndex == 18:
            return self.precpred(self._ctx, 2)

        if predIndex == 19:
            return self.precpred(self._ctx, 1)

    def shiftexpression_sempred(self, localctx: ShiftexpressionContext, predIndex: int):
        if predIndex == 20:
            return self.precpred(self._ctx, 2)

        if predIndex == 21:
            return self.precpred(self._ctx, 1)

    def relationalexpression_sempred(self, localctx: RelationalexpressionContext, predIndex: int):
        if predIndex == 22:
            return self.precpred(self._ctx, 4)

        if predIndex == 23:
            return self.precpred(self._ctx, 3)

        if predIndex == 24:
            return self.precpred(self._ctx, 2)

        if predIndex == 25:
            return self.precpred(self._ctx, 1)

    def equalityexpression_sempred(self, localctx: EqualityexpressionContext, predIndex: int):
        if predIndex == 26:
            return self.precpred(self._ctx, 2)

        if predIndex == 27:
            return self.precpred(self._ctx, 1)

    def andexpression_sempred(self, localctx: AndexpressionContext, predIndex: int):
        if predIndex == 28:
            return self.precpred(self._ctx, 1)

    def exclusiveorexpression_sempred(self, localctx: ExclusiveorexpressionContext, predIndex: int):
        if predIndex == 29:
            return self.precpred(self._ctx, 1)

    def inclusiveorexpression_sempred(self, localctx: InclusiveorexpressionContext, predIndex: int):
        if predIndex == 30:
            return self.precpred(self._ctx, 1)

    def logicalandexpression_sempred(self, localctx: LogicalandexpressionContext, predIndex: int):
        if predIndex == 31:
            return self.precpred(self._ctx, 1)

    def logicalorexpression_sempred(self, localctx: LogicalorexpressionContext, predIndex: int):
        if predIndex == 32:
            return self.precpred(self._ctx, 1)

    def expression_sempred(self, localctx: ExpressionContext, predIndex: int):
        if predIndex == 33:
            return self.precpred(self._ctx, 1)

    def statementseq_sempred(self, localctx: StatementseqContext, predIndex: int):
        if predIndex == 34:
            return self.precpred(self._ctx, 1)

    def declarationseq_sempred(self, localctx: DeclarationseqContext, predIndex: int):
        if predIndex == 35:
            return self.precpred(self._ctx, 1)

    def enumeratorlist_sempred(self, localctx: EnumeratorlistContext, predIndex: int):
        if predIndex == 36:
            return self.precpred(self._ctx, 1)

    def attributespecifierseq_sempred(self, localctx: AttributespecifierseqContext, predIndex: int):
        if predIndex == 37:
            return self.precpred(self._ctx, 1)

    def attributelist_sempred(self, localctx: AttributelistContext, predIndex: int):
        if predIndex == 38:
            return self.precpred(self._ctx, 3)

        if predIndex == 39:
            return self.precpred(self._ctx, 1)

    def balancedtokenseq_sempred(self, localctx: BalancedtokenseqContext, predIndex: int):
        if predIndex == 40:
            return self.precpred(self._ctx, 1)

    def initdeclaratorlist_sempred(self, localctx: InitdeclaratorlistContext, predIndex: int):
        if predIndex == 41:
            return self.precpred(self._ctx, 1)

    def noptrdeclarator_sempred(self, localctx: NoptrdeclaratorContext, predIndex: int):
        if predIndex == 42:
            return self.precpred(self._ctx, 3)

        if predIndex == 43:
            return self.precpred(self._ctx, 2)

    def noptrabstractdeclarator_sempred(self, localctx: NoptrabstractdeclaratorContext, predIndex: int):
        if predIndex == 44:
            return self.precpred(self._ctx, 5)

        if predIndex == 45:
            return self.precpred(self._ctx, 3)

    def noptrabstractpackdeclarator_sempred(self, localctx: NoptrabstractpackdeclaratorContext, predIndex: int):
        if predIndex == 46:
            return self.precpred(self._ctx, 3)

        if predIndex == 47:
            return self.precpred(self._ctx, 2)

    def parameterdeclarationlist_sempred(self, localctx: ParameterdeclarationlistContext, predIndex: int):
        if predIndex == 48:
            return self.precpred(self._ctx, 1)

    def initializerlist_sempred(self, localctx: InitializerlistContext, predIndex: int):
        if predIndex == 49:
            return self.precpred(self._ctx, 1)

    def memberdeclaratorlist_sempred(self, localctx: MemberdeclaratorlistContext, predIndex: int):
        if predIndex == 50:
            return self.precpred(self._ctx, 1)

    def virtspecifierseq_sempred(self, localctx: VirtspecifierseqContext, predIndex: int):
        if predIndex == 51:
            return self.precpred(self._ctx, 1)

    def basespecifierlist_sempred(self, localctx: BasespecifierlistContext, predIndex: int):
        if predIndex == 52:
            return self.precpred(self._ctx, 1)

    def templateparameterlist_sempred(self, localctx: TemplateparameterlistContext, predIndex: int):
        if predIndex == 53:
            return self.precpred(self._ctx, 1)

    def templateargumentlist_sempred(self, localctx: TemplateargumentlistContext, predIndex: int):
        if predIndex == 54:
            return self.precpred(self._ctx, 1)

    def typeidlist_sempred(self, localctx: TypeidlistContext, predIndex: int):
        if predIndex == 55:
            return self.precpred(self._ctx, 1)
